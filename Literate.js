"use strict";

var nil = "patch me with nil";

var theGlobalObject = this;

function SM(n,m,s){this.name=n; this.isMutable=m; this.isSynthetic=s; };

function MM(n,sy,src){this.name=n; this.isSynthetic=sy; this.source=src; };

function dnuCatcher(s){ return function() {
return this.dnu(vmmirror.kernel.$Message().$selector$arguments$(s, Array.prototype.slice.call(arguments)));
} };

var mixins = new (function () {
	this.$RuntimeForV8 = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for RuntimeForV8";
		this.name = "RuntimeForV8";
		this.header = "RuntimeForV8 packageUsing: manifest = (\r(* Provides the platform object for Newspeak on Javascript.\r\rCopyright 2012 Google Inc.\rCopyright 2013 Ryan Macnak\r\rLicensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)|\r	Kernel = manifest KernelForV8.\r	Aliens = manifest AliensForV8.\r	Collections = manifest Collections.\r	Graphics = manifest GraphicsForHTML5.\r	public Hopscotch = manifest HopscotchForHTML5.\r	Mirrors = manifest MirrorsForV8.\r	public MirrorGroups = manifest MirrorGroups.\r	Streams = manifest Streams.\r	Time = manifest TimeForV8.\r	\r	public CombinatorialParsing = manifest CombinatorialParsing.\r	public NewspeakGrammar = manifest NewspeakGrammar.\r	public NewspeakASTs = manifest NewspeakASTs.\r	public NewspeakParsing = manifest NewspeakParsing.\r	\r	public JavascriptGeneration = manifest JavascriptGeneration.\r	public Compilation =  manifest Newspeak2V8Compilation mixinApply: manifest NewspeakCompilation.\r	\r	public accept16px = manifest accept16px.\r	public cancel16px = manifest cancel16px.\r	public disclosureClosedImage = manifest disclosureClosedImage.\r	public disclosureTransitionImage = manifest disclosureTransitionImage.\r	public disclosureOpenImage = manifest disclosureOpenImage.\r|)";
		this.slots = [
			new SM("Kernel", false, false),
			new SM("Aliens", false, false),
			new SM("Collections", false, false),
			new SM("Graphics", false, false),
			new SM("Hopscotch", false, false),
			new SM("Mirrors", false, false),
			new SM("MirrorGroups", false, false),
			new SM("Streams", false, false),
			new SM("Time", false, false),
			new SM("CombinatorialParsing", false, false),
			new SM("NewspeakGrammar", false, false),
			new SM("NewspeakASTs", false, false),
			new SM("NewspeakParsing", false, false),
			new SM("JavascriptGeneration", false, false),
			new SM("Compilation", false, false),
			new SM("accept16px", false, false),
			new SM("cancel16px", false, false),
			new SM("disclosureClosedImage", false, false),
			new SM("disclosureTransitionImage", false, false),
			new SM("disclosureOpenImage", false, false),
			new SM("RuntimeForV8`Platform", true, true)
		];
		this.methods = [
			new MM("superInit`RuntimeForV8", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("using:", false, "public using: vmmirror = (\r	Object enclosingObject augmentPrototypes.\r	^Platform usingVmMirror: vmmirror\r)"),
			new MM("Platform", true, null),
			new MM("Kernel", true, null),
			new MM("setOnce`Kernel:", true, null),
			new MM("Aliens", true, null),
			new MM("setOnce`Aliens:", true, null),
			new MM("Collections", true, null),
			new MM("setOnce`Collections:", true, null),
			new MM("Graphics", true, null),
			new MM("setOnce`Graphics:", true, null),
			new MM("Hopscotch", true, null),
			new MM("setOnce`Hopscotch:", true, null),
			new MM("Mirrors", true, null),
			new MM("setOnce`Mirrors:", true, null),
			new MM("MirrorGroups", true, null),
			new MM("setOnce`MirrorGroups:", true, null),
			new MM("Streams", true, null),
			new MM("setOnce`Streams:", true, null),
			new MM("Time", true, null),
			new MM("setOnce`Time:", true, null),
			new MM("CombinatorialParsing", true, null),
			new MM("setOnce`CombinatorialParsing:", true, null),
			new MM("NewspeakGrammar", true, null),
			new MM("setOnce`NewspeakGrammar:", true, null),
			new MM("NewspeakASTs", true, null),
			new MM("setOnce`NewspeakASTs:", true, null),
			new MM("NewspeakParsing", true, null),
			new MM("setOnce`NewspeakParsing:", true, null),
			new MM("JavascriptGeneration", true, null),
			new MM("setOnce`JavascriptGeneration:", true, null),
			new MM("Compilation", true, null),
			new MM("setOnce`Compilation:", true, null),
			new MM("accept16px", true, null),
			new MM("setOnce`accept16px:", true, null),
			new MM("cancel16px", true, null),
			new MM("setOnce`cancel16px:", true, null),
			new MM("disclosureClosedImage", true, null),
			new MM("setOnce`disclosureClosedImage:", true, null),
			new MM("disclosureTransitionImage", true, null),
			new MM("setOnce`disclosureTransitionImage:", true, null),
			new MM("disclosureOpenImage", true, null),
			new MM("setOnce`disclosureOpenImage:", true, null),
			new MM("RuntimeForV8`Platform", true, null),
			new MM("RuntimeForV8`Platform:", true, null)
		];
		this.nestedClasses = ["RuntimeForV8`Platform"];
		this.applications = [];
		this.$superInit$RuntimeForV8 = (function ($manifest) {
			var self = this;
			self.$super$RuntimeForV8$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($manifest) {
			var self = this;
			self._$superInit$RuntimeForV8($manifest);
			self._$setOnce$Kernel$($manifest.$KernelForV8());
			self._$setOnce$Aliens$($manifest.$AliensForV8());
			self._$setOnce$Collections$($manifest.$Collections());
			self._$setOnce$Graphics$($manifest.$GraphicsForHTML5());
			self._$setOnce$Hopscotch$($manifest.$HopscotchForHTML5());
			self._$setOnce$Mirrors$($manifest.$MirrorsForV8());
			self._$setOnce$MirrorGroups$($manifest.$MirrorGroups());
			self._$setOnce$Streams$($manifest.$Streams());
			self._$setOnce$Time$($manifest.$TimeForV8());
			self._$setOnce$CombinatorialParsing$($manifest.$CombinatorialParsing());
			self._$setOnce$NewspeakGrammar$($manifest.$NewspeakGrammar());
			self._$setOnce$NewspeakASTs$($manifest.$NewspeakASTs());
			self._$setOnce$NewspeakParsing$($manifest.$NewspeakParsing());
			self._$setOnce$JavascriptGeneration$($manifest.$JavascriptGeneration());
			self._$setOnce$Compilation$($manifest.$Newspeak2V8Compilation().$mixinApply$($manifest.$NewspeakCompilation()));
			self._$setOnce$accept16px$($manifest.$accept16px());
			self._$setOnce$cancel16px$($manifest.$cancel16px());
			self._$setOnce$disclosureClosedImage$($manifest.$disclosureClosedImage());
			self._$setOnce$disclosureTransitionImage$($manifest.$disclosureTransitionImage());
			self._$setOnce$disclosureOpenImage$($manifest.$disclosureOpenImage());
			return self;
		});
		this.$using$ = (function ($vmmirror) {
			var self = this;
			self._$Object().$enclosingObject().$augmentPrototypes();
			return self._$Platform().$usingVmMirror$($vmmirror);
		});
		this.$Platform = (function () {
			if (nil === this.$RuntimeForV8$Platform$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$RuntimeForV8);
				var mixin = $.$RuntimeForV8$Platform;
				this.$RuntimeForV8$Platform$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$RuntimeForV8$Platform$slot;
		});
		this.$Kernel = (function () {
			return this.$Kernel$slot;
		});
		this.$setOnce$Kernel$ = (function (v) {
			this.$Kernel$slot = v;
			return this;
		});
		this.$Aliens = (function () {
			return this.$Aliens$slot;
		});
		this.$setOnce$Aliens$ = (function (v) {
			this.$Aliens$slot = v;
			return this;
		});
		this.$Collections = (function () {
			return this.$Collections$slot;
		});
		this.$setOnce$Collections$ = (function (v) {
			this.$Collections$slot = v;
			return this;
		});
		this.$Graphics = (function () {
			return this.$Graphics$slot;
		});
		this.$setOnce$Graphics$ = (function (v) {
			this.$Graphics$slot = v;
			return this;
		});
		this.$Hopscotch = (function () {
			return this.$Hopscotch$slot;
		});
		this.$setOnce$Hopscotch$ = (function (v) {
			this.$Hopscotch$slot = v;
			return this;
		});
		this.$Mirrors = (function () {
			return this.$Mirrors$slot;
		});
		this.$setOnce$Mirrors$ = (function (v) {
			this.$Mirrors$slot = v;
			return this;
		});
		this.$MirrorGroups = (function () {
			return this.$MirrorGroups$slot;
		});
		this.$setOnce$MirrorGroups$ = (function (v) {
			this.$MirrorGroups$slot = v;
			return this;
		});
		this.$Streams = (function () {
			return this.$Streams$slot;
		});
		this.$setOnce$Streams$ = (function (v) {
			this.$Streams$slot = v;
			return this;
		});
		this.$Time = (function () {
			return this.$Time$slot;
		});
		this.$setOnce$Time$ = (function (v) {
			this.$Time$slot = v;
			return this;
		});
		this.$CombinatorialParsing = (function () {
			return this.$CombinatorialParsing$slot;
		});
		this.$setOnce$CombinatorialParsing$ = (function (v) {
			this.$CombinatorialParsing$slot = v;
			return this;
		});
		this.$NewspeakGrammar = (function () {
			return this.$NewspeakGrammar$slot;
		});
		this.$setOnce$NewspeakGrammar$ = (function (v) {
			this.$NewspeakGrammar$slot = v;
			return this;
		});
		this.$NewspeakASTs = (function () {
			return this.$NewspeakASTs$slot;
		});
		this.$setOnce$NewspeakASTs$ = (function (v) {
			this.$NewspeakASTs$slot = v;
			return this;
		});
		this.$NewspeakParsing = (function () {
			return this.$NewspeakParsing$slot;
		});
		this.$setOnce$NewspeakParsing$ = (function (v) {
			this.$NewspeakParsing$slot = v;
			return this;
		});
		this.$JavascriptGeneration = (function () {
			return this.$JavascriptGeneration$slot;
		});
		this.$setOnce$JavascriptGeneration$ = (function (v) {
			this.$JavascriptGeneration$slot = v;
			return this;
		});
		this.$Compilation = (function () {
			return this.$Compilation$slot;
		});
		this.$setOnce$Compilation$ = (function (v) {
			this.$Compilation$slot = v;
			return this;
		});
		this.$accept16px = (function () {
			return this.$accept16px$slot;
		});
		this.$setOnce$accept16px$ = (function (v) {
			this.$accept16px$slot = v;
			return this;
		});
		this.$cancel16px = (function () {
			return this.$cancel16px$slot;
		});
		this.$setOnce$cancel16px$ = (function (v) {
			this.$cancel16px$slot = v;
			return this;
		});
		this.$disclosureClosedImage = (function () {
			return this.$disclosureClosedImage$slot;
		});
		this.$setOnce$disclosureClosedImage$ = (function (v) {
			this.$disclosureClosedImage$slot = v;
			return this;
		});
		this.$disclosureTransitionImage = (function () {
			return this.$disclosureTransitionImage$slot;
		});
		this.$setOnce$disclosureTransitionImage$ = (function (v) {
			this.$disclosureTransitionImage$slot = v;
			return this;
		});
		this.$disclosureOpenImage = (function () {
			return this.$disclosureOpenImage$slot;
		});
		this.$setOnce$disclosureOpenImage$ = (function (v) {
			this.$disclosureOpenImage$slot = v;
			return this;
		});
		this.$RuntimeForV8$Platform = (function () {
			return this.$RuntimeForV8$Platform$slot;
		});
		this.$RuntimeForV8$Platform$ = (function (v) {
			this.$RuntimeForV8$Platform$slot = v;
			return this;
		});
		this.$RuntimeForV8$Platform = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for RuntimeForV8`Platform";
			this.name = "RuntimeForV8`Platform";
			this.header = "Platform usingVmMirror: vmmirror = (|\r	public namespace = outer RuntimeForV8.\r	public kernel = Object enclosingObject. (* Instantiated specially to avoid bootstrapping issues. *)\r	public aliens = Future computing: [Aliens usingPlatform: self].\r	public collections = Future computing: [Collections usingPlatform: self].\r	public graphics = Future computing: [Graphics usingPlatform: self].\r	public hopscotch = Future computing: [Hopscotch usingPlatform: self].\r	public mirrors = Future computing: [Mirrors usingPlatform: self vmMirror: vmmirror].\r	public streams = Future computing: [Streams usingPlatform: self].\r	public time = Future computing: [Time usingPlatform: self].\r|kernel platform: self)";
			this.slots = [
				new SM("namespace", false, false),
				new SM("kernel", false, false),
				new SM("aliens", false, false),
				new SM("collections", false, false),
				new SM("graphics", false, false),
				new SM("hopscotch", false, false),
				new SM("mirrors", false, false),
				new SM("streams", false, false),
				new SM("time", false, false)
			];
			this.methods = [
				new MM("superInit`RuntimeForV8`Platform", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("Exception", false, "public Exception = (\r	^Error\r)"),
				new MM("Message", false, "public Message = (\r	^kernel Message\r)"),
				new MM("MessageNotUnderstood", false, "public MessageNotUnderstood = (\r	^kernel MessageNotUnderstood\r)"),
				new MM("UnhandledError", false, "public UnhandledError = (\r	^Error\r)"),
				new MM("squeak", false, "public squeak = (\r	^self\r)"),
				new MM("namespace", true, null),
				new MM("setOnce`namespace:", true, null),
				new MM("kernel", true, null),
				new MM("setOnce`kernel:", true, null),
				new MM("aliens", true, null),
				new MM("setOnce`aliens:", true, null),
				new MM("collections", true, null),
				new MM("setOnce`collections:", true, null),
				new MM("graphics", true, null),
				new MM("setOnce`graphics:", true, null),
				new MM("hopscotch", true, null),
				new MM("setOnce`hopscotch:", true, null),
				new MM("mirrors", true, null),
				new MM("setOnce`mirrors:", true, null),
				new MM("streams", true, null),
				new MM("setOnce`streams:", true, null),
				new MM("time", true, null),
				new MM("setOnce`time:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$RuntimeForV8$Platform = (function ($vmmirror) {
				var self = this;
				self.$super$RuntimeForV8$Platform$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($vmmirror) {
				var self = this;
				self._$superInit$RuntimeForV8$Platform($vmmirror);
				self._$setOnce$namespace$(self.$enclosingObjects$RuntimeForV8$Platform[0]);
				self._$setOnce$kernel$(self._$Object().$enclosingObject());
				self._$setOnce$aliens$(self._$Future().$computing$((function () {
					return self.$enclosingObjects$RuntimeForV8$Platform[0]._$Aliens().$usingPlatform$(self);
				})));
				self._$setOnce$collections$(self._$Future().$computing$((function () {
					return self.$enclosingObjects$RuntimeForV8$Platform[0]._$Collections().$usingPlatform$(self);
				})));
				self._$setOnce$graphics$(self._$Future().$computing$((function () {
					return self.$enclosingObjects$RuntimeForV8$Platform[0]._$Graphics().$usingPlatform$(self);
				})));
				self._$setOnce$hopscotch$(self._$Future().$computing$((function () {
					return self.$enclosingObjects$RuntimeForV8$Platform[0]._$Hopscotch().$usingPlatform$(self);
				})));
				self._$setOnce$mirrors$(self._$Future().$computing$((function () {
					return self.$enclosingObjects$RuntimeForV8$Platform[0]._$Mirrors().$usingPlatform$vmMirror$(self, $vmmirror);
				})));
				self._$setOnce$streams$(self._$Future().$computing$((function () {
					return self.$enclosingObjects$RuntimeForV8$Platform[0]._$Streams().$usingPlatform$(self);
				})));
				self._$setOnce$time$(self._$Future().$computing$((function () {
					return self.$enclosingObjects$RuntimeForV8$Platform[0]._$Time().$usingPlatform$(self);
				})));
				self._$kernel().$platform$(self);
				return self;
			});
			this.$Exception = (function () {
				var self = this;
				return self._$Error();
			});
			this.$Message = (function () {
				var self = this;
				return self._$kernel().$Message();
			});
			this.$MessageNotUnderstood = (function () {
				var self = this;
				return self._$kernel().$MessageNotUnderstood();
			});
			this.$UnhandledError = (function () {
				var self = this;
				return self._$Error();
			});
			this.$squeak = (function () {
				var self = this;
				return self;
			});
			this.$namespace = (function () {
				return this.$namespace$slot;
			});
			this.$setOnce$namespace$ = (function (v) {
				this.$namespace$slot = v;
				return this;
			});
			this.$kernel = (function () {
				return this.$kernel$slot;
			});
			this.$setOnce$kernel$ = (function (v) {
				this.$kernel$slot = v;
				return this;
			});
			this.$aliens = (function () {
				return this.$aliens$slot;
			});
			this.$setOnce$aliens$ = (function (v) {
				this.$aliens$slot = v;
				return this;
			});
			this.$collections = (function () {
				return this.$collections$slot;
			});
			this.$setOnce$collections$ = (function (v) {
				this.$collections$slot = v;
				return this;
			});
			this.$graphics = (function () {
				return this.$graphics$slot;
			});
			this.$setOnce$graphics$ = (function (v) {
				this.$graphics$slot = v;
				return this;
			});
			this.$hopscotch = (function () {
				return this.$hopscotch$slot;
			});
			this.$setOnce$hopscotch$ = (function (v) {
				this.$hopscotch$slot = v;
				return this;
			});
			this.$mirrors = (function () {
				return this.$mirrors$slot;
			});
			this.$setOnce$mirrors$ = (function (v) {
				this.$mirrors$slot = v;
				return this;
			});
			this.$streams = (function () {
				return this.$streams$slot;
			});
			this.$setOnce$streams$ = (function (v) {
				this.$streams$slot = v;
				return this;
			});
			this.$time = (function () {
				return this.$time$slot;
			});
			this.$setOnce$time$ = (function (v) {
				this.$time$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for RuntimeForV8`Platform";
					this._$superInit$RuntimeForV8$Platform = $.$superInit$RuntimeForV8$Platform;
					this.$superInit$RuntimeForV8$Platform = dnuCatcher("$superInit$RuntimeForV8$Platform");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$Exception = this._$Exception = $.$Exception;
					this.$Message = this._$Message = $.$Message;
					this.$MessageNotUnderstood = this._$MessageNotUnderstood = $.$MessageNotUnderstood;
					this.$UnhandledError = this._$UnhandledError = $.$UnhandledError;
					this.$squeak = this._$squeak = $.$squeak;
					this.$namespace = this._$namespace = $.$namespace;
					this.$setOnce$namespace$ = this._$setOnce$namespace$ = $.$setOnce$namespace$;
					this.$kernel = this._$kernel = $.$kernel;
					this.$setOnce$kernel$ = this._$setOnce$kernel$ = $.$setOnce$kernel$;
					this.$aliens = this._$aliens = $.$aliens;
					this.$setOnce$aliens$ = this._$setOnce$aliens$ = $.$setOnce$aliens$;
					this.$collections = this._$collections = $.$collections;
					this.$setOnce$collections$ = this._$setOnce$collections$ = $.$setOnce$collections$;
					this.$graphics = this._$graphics = $.$graphics;
					this.$setOnce$graphics$ = this._$setOnce$graphics$ = $.$setOnce$graphics$;
					this.$hopscotch = this._$hopscotch = $.$hopscotch;
					this.$setOnce$hopscotch$ = this._$setOnce$hopscotch$ = $.$setOnce$hopscotch$;
					this.$mirrors = this._$mirrors = $.$mirrors;
					this.$setOnce$mirrors$ = this._$setOnce$mirrors$ = $.$setOnce$mirrors$;
					this.$streams = this._$streams = $.$streams;
					this.$setOnce$streams$ = this._$setOnce$streams$ = $.$setOnce$streams$;
					this.$time = this._$time = $.$time;
					this.$setOnce$time$ = this._$setOnce$time$ = $.$setOnce$time$;
					this.$enclosingObjects$RuntimeForV8$Platform = enclosingObjects;
					this.$super$RuntimeForV8$Platform$slot = runtimeSuperclass;
					this["RuntimeForV8`Platform"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$namespace$slot = nil;
						this.$kernel$slot = nil;
						this.$aliens$slot = nil;
						this.$collections$slot = nil;
						this.$graphics$slot = nil;
						this.$hopscotch$slot = nil;
						this.$mirrors$slot = nil;
						this.$streams$slot = nil;
						this.$time$slot = nil;
					});
					this.basicNew = this["RuntimeForV8`Platform"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for RuntimeForV8`Platform";
				this.slots = [];
				this.methods = [new MM("usingVmMirror:", true, null)];
				this.nestedClasses = [];
				this.$usingVmMirror$ = (function ($vmmirror) {
					return (new this.nonMeta.basicNew()).$instance$initializer($vmmirror);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for RuntimeForV8`Platform";
						this.$usingVmMirror$ = this._$usingVmMirror$ = $.$usingVmMirror$;
						this.$enclosingObjects$RuntimeForV8$Platform = enclosingObjects;
						this.$super$RuntimeForV8$Platform = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$RuntimeForV8$Platform.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for RuntimeForV8";
				this._$superInit$RuntimeForV8 = $.$superInit$RuntimeForV8;
				this.$superInit$RuntimeForV8 = dnuCatcher("$superInit$RuntimeForV8");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this.$using$ = this._$using$ = $.$using$;
				this._$Platform = $.$Platform;
				this.$Platform = dnuCatcher("$Platform");
				this._$Kernel = $.$Kernel;
				this.$Kernel = dnuCatcher("$Kernel");
				this._$setOnce$Kernel$ = $.$setOnce$Kernel$;
				this.$setOnce$Kernel$ = dnuCatcher("$setOnce$Kernel$");
				this._$Aliens = $.$Aliens;
				this.$Aliens = dnuCatcher("$Aliens");
				this._$setOnce$Aliens$ = $.$setOnce$Aliens$;
				this.$setOnce$Aliens$ = dnuCatcher("$setOnce$Aliens$");
				this._$Collections = $.$Collections;
				this.$Collections = dnuCatcher("$Collections");
				this._$setOnce$Collections$ = $.$setOnce$Collections$;
				this.$setOnce$Collections$ = dnuCatcher("$setOnce$Collections$");
				this._$Graphics = $.$Graphics;
				this.$Graphics = dnuCatcher("$Graphics");
				this._$setOnce$Graphics$ = $.$setOnce$Graphics$;
				this.$setOnce$Graphics$ = dnuCatcher("$setOnce$Graphics$");
				this.$Hopscotch = this._$Hopscotch = $.$Hopscotch;
				this.$setOnce$Hopscotch$ = this._$setOnce$Hopscotch$ = $.$setOnce$Hopscotch$;
				this._$Mirrors = $.$Mirrors;
				this.$Mirrors = dnuCatcher("$Mirrors");
				this._$setOnce$Mirrors$ = $.$setOnce$Mirrors$;
				this.$setOnce$Mirrors$ = dnuCatcher("$setOnce$Mirrors$");
				this.$MirrorGroups = this._$MirrorGroups = $.$MirrorGroups;
				this.$setOnce$MirrorGroups$ = this._$setOnce$MirrorGroups$ = $.$setOnce$MirrorGroups$;
				this._$Streams = $.$Streams;
				this.$Streams = dnuCatcher("$Streams");
				this._$setOnce$Streams$ = $.$setOnce$Streams$;
				this.$setOnce$Streams$ = dnuCatcher("$setOnce$Streams$");
				this._$Time = $.$Time;
				this.$Time = dnuCatcher("$Time");
				this._$setOnce$Time$ = $.$setOnce$Time$;
				this.$setOnce$Time$ = dnuCatcher("$setOnce$Time$");
				this.$CombinatorialParsing = this._$CombinatorialParsing = $.$CombinatorialParsing;
				this.$setOnce$CombinatorialParsing$ = this._$setOnce$CombinatorialParsing$ = $.$setOnce$CombinatorialParsing$;
				this.$NewspeakGrammar = this._$NewspeakGrammar = $.$NewspeakGrammar;
				this.$setOnce$NewspeakGrammar$ = this._$setOnce$NewspeakGrammar$ = $.$setOnce$NewspeakGrammar$;
				this.$NewspeakASTs = this._$NewspeakASTs = $.$NewspeakASTs;
				this.$setOnce$NewspeakASTs$ = this._$setOnce$NewspeakASTs$ = $.$setOnce$NewspeakASTs$;
				this.$NewspeakParsing = this._$NewspeakParsing = $.$NewspeakParsing;
				this.$setOnce$NewspeakParsing$ = this._$setOnce$NewspeakParsing$ = $.$setOnce$NewspeakParsing$;
				this.$JavascriptGeneration = this._$JavascriptGeneration = $.$JavascriptGeneration;
				this.$setOnce$JavascriptGeneration$ = this._$setOnce$JavascriptGeneration$ = $.$setOnce$JavascriptGeneration$;
				this.$Compilation = this._$Compilation = $.$Compilation;
				this.$setOnce$Compilation$ = this._$setOnce$Compilation$ = $.$setOnce$Compilation$;
				this.$accept16px = this._$accept16px = $.$accept16px;
				this.$setOnce$accept16px$ = this._$setOnce$accept16px$ = $.$setOnce$accept16px$;
				this.$cancel16px = this._$cancel16px = $.$cancel16px;
				this.$setOnce$cancel16px$ = this._$setOnce$cancel16px$ = $.$setOnce$cancel16px$;
				this.$disclosureClosedImage = this._$disclosureClosedImage = $.$disclosureClosedImage;
				this.$setOnce$disclosureClosedImage$ = this._$setOnce$disclosureClosedImage$ = $.$setOnce$disclosureClosedImage$;
				this.$disclosureTransitionImage = this._$disclosureTransitionImage = $.$disclosureTransitionImage;
				this.$setOnce$disclosureTransitionImage$ = this._$setOnce$disclosureTransitionImage$ = $.$setOnce$disclosureTransitionImage$;
				this.$disclosureOpenImage = this._$disclosureOpenImage = $.$disclosureOpenImage;
				this.$setOnce$disclosureOpenImage$ = this._$setOnce$disclosureOpenImage$ = $.$setOnce$disclosureOpenImage$;
				this.$RuntimeForV8$Platform = this._$RuntimeForV8$Platform = $.$RuntimeForV8$Platform;
				this.$RuntimeForV8$Platform$ = this._$RuntimeForV8$Platform$ = $.$RuntimeForV8$Platform$;
				this.$enclosingObjects$RuntimeForV8 = enclosingObjects;
				this.$super$RuntimeForV8$slot = runtimeSuperclass;
				this.RuntimeForV8 = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$Kernel$slot = nil;
					this.$Aliens$slot = nil;
					this.$Collections$slot = nil;
					this.$Graphics$slot = nil;
					this.$Hopscotch$slot = nil;
					this.$Mirrors$slot = nil;
					this.$MirrorGroups$slot = nil;
					this.$Streams$slot = nil;
					this.$Time$slot = nil;
					this.$CombinatorialParsing$slot = nil;
					this.$NewspeakGrammar$slot = nil;
					this.$NewspeakASTs$slot = nil;
					this.$NewspeakParsing$slot = nil;
					this.$JavascriptGeneration$slot = nil;
					this.$Compilation$slot = nil;
					this.$accept16px$slot = nil;
					this.$cancel16px$slot = nil;
					this.$disclosureClosedImage$slot = nil;
					this.$disclosureTransitionImage$slot = nil;
					this.$disclosureOpenImage$slot = nil;
					this.$RuntimeForV8$Platform$slot = nil;
				});
				this.basicNew = this.RuntimeForV8;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for RuntimeForV8";
			this.slots = [];
			this.methods = [new MM("packageUsing:", true, null)];
			this.nestedClasses = [];
			this.$packageUsing$ = (function ($manifest) {
				return (new this.nonMeta.basicNew()).$instance$initializer($manifest);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for RuntimeForV8";
					this.$packageUsing$ = this._$packageUsing$ = $.$packageUsing$;
					this.$enclosingObjects$RuntimeForV8 = enclosingObjects;
					this.$super$RuntimeForV8 = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$KernelForV8 = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for KernelForV8";
		this.name = "KernelForV8";
		this.header = "KernelForV8 usingVmMirror: vmm = (\r(*\r\rCopyright 2008 Cadence Design Systems, Inc.\rCopyright 2009-2010 Gilad Bracha.\rCopyright 2012 SAP AG.\rCopyright 2012 Google Inc.\rCopyright 2013 Ryan Macnak\r\rLicensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)|\rvmmirror = vmm.\rpublic platform\r|)";
		this.slots = [
			new SM("vmmirror", false, false),
			new SM("platform", true, false),
			new SM("KernelForV8`Array", true, true),
			new SM("KernelForV8`Block", true, true),
			new SM("KernelForV8`Boolean", true, true),
			new SM("KernelForV8`Class", true, true),
			new SM("KernelForV8`Error", true, true),
			new SM("KernelForV8`Future", true, true),
			new SM("KernelForV8`Message", true, true),
			new SM("KernelForV8`MessageNotUnderstood", true, true),
			new SM("KernelForV8`Metaclass", true, true),
			new SM("KernelForV8`Mixin", true, true),
			new SM("KernelForV8`Number", true, true),
			new SM("KernelForV8`Object", true, true),
			new SM("KernelForV8`String", true, true),
			new SM("KernelForV8`UndefinedObject", true, true)
		];
		this.methods = [
			new MM("superInit`KernelForV8", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("MutableString", false, "public MutableString = (\r	#BOGUS.\r	^String\r)"),
			new MM("augment:withPropertiesOf:", false, "augment: prototype withPropertiesOf: runtimeClass = (\r	| keys = js call: (js propertyOf: (js ident: 'Object') at: (js literal: 'keys')) with: {runtimeClass}. |\r	js call: (js propertyOf: keys at: (js literal: 'forEach')) with: {js functionOf: {'key'} body: (js block: {\r		js assign: (js propertyOf: prototype at: (js ident: 'key'))\r			toBe: (js propertyOf: runtimeClass at: (js ident: 'key'))\r	})}.\r)"),
			new MM("augmentPrototypes", false, "public augmentPrototypes = (\r	js call: (js ident: 'installDnuHandlersOn') with: {js verbatim: 'Object.prototype'}.\r	augment: (js verbatim: 'Array.prototype') withPropertiesOf: (js propertyOf: Object at: (js literal: 'runtimeClass')).\r	augment: (js verbatim: 'Array.prototype') withPropertiesOf: (js propertyOf: Array at: (js literal: 'runtimeClass')).\r	augment: (js verbatim: 'Boolean.prototype') withPropertiesOf: (js propertyOf: Object at: (js literal: 'runtimeClass')).\r	augment: (js verbatim: 'Boolean.prototype') withPropertiesOf: (js propertyOf: Boolean at: (js literal: 'runtimeClass')).\r	augment: (js verbatim: 'Function.prototype') withPropertiesOf: (js propertyOf: Object at: (js literal: 'runtimeClass')).\r	augment: (js verbatim: 'Function.prototype') withPropertiesOf: (js propertyOf: Block at: (js literal: 'runtimeClass')).\r	augment: (js verbatim: 'Number.prototype') withPropertiesOf: (js propertyOf: Object at: (js literal: 'runtimeClass')).\r	augment: (js verbatim: 'Number.prototype') withPropertiesOf: (js propertyOf: Number at: (js literal: 'runtimeClass')).\r	augment: (js verbatim: 'String.prototype') withPropertiesOf: (js propertyOf: Object at: (js literal: 'runtimeClass')).\r	augment: (js verbatim: 'String.prototype') withPropertiesOf: (js propertyOf: String at: (js literal: 'runtimeClass')).\r)"),
			new MM("classOf:", false, "private classOf: object = (\r	(js prefixOperator: 'typeof ' on: object) == 'string' ifTrue: [^String].\r	(js prefixOperator: 'typeof ' on: object) == 'number' ifTrue: [^Number].\r	(js prefixOperator: 'typeof ' on: object) == 'boolean' ifTrue: [^Boolean].\r	(js prefixOperator: 'typeof ' on: object) == 'function' ifTrue: [^Block].\r	(js operator: 'instanceof' with: object and: (js ident: 'Array')) ifTrue: [^Array].\r	^js propertyOf: object at: (js literal: 'newspeakClass')\r)"),
			new MM("Array", true, null),
			new MM("Block", true, null),
			new MM("Boolean", true, null),
			new MM("Class", true, null),
			new MM("Error", true, null),
			new MM("Future", true, null),
			new MM("Message", true, null),
			new MM("MessageNotUnderstood", true, null),
			new MM("Metaclass", true, null),
			new MM("Mixin", true, null),
			new MM("Number", true, null),
			new MM("Object", true, null),
			new MM("String", true, null),
			new MM("UndefinedObject", true, null),
			new MM("vmmirror", true, null),
			new MM("setOnce`vmmirror:", true, null),
			new MM("platform", true, null),
			new MM("platform:", true, null),
			new MM("KernelForV8`Array", true, null),
			new MM("KernelForV8`Array:", true, null),
			new MM("KernelForV8`Block", true, null),
			new MM("KernelForV8`Block:", true, null),
			new MM("KernelForV8`Boolean", true, null),
			new MM("KernelForV8`Boolean:", true, null),
			new MM("KernelForV8`Class", true, null),
			new MM("KernelForV8`Class:", true, null),
			new MM("KernelForV8`Error", true, null),
			new MM("KernelForV8`Error:", true, null),
			new MM("KernelForV8`Future", true, null),
			new MM("KernelForV8`Future:", true, null),
			new MM("KernelForV8`Message", true, null),
			new MM("KernelForV8`Message:", true, null),
			new MM("KernelForV8`MessageNotUnderstood", true, null),
			new MM("KernelForV8`MessageNotUnderstood:", true, null),
			new MM("KernelForV8`Metaclass", true, null),
			new MM("KernelForV8`Metaclass:", true, null),
			new MM("KernelForV8`Mixin", true, null),
			new MM("KernelForV8`Mixin:", true, null),
			new MM("KernelForV8`Number", true, null),
			new MM("KernelForV8`Number:", true, null),
			new MM("KernelForV8`Object", true, null),
			new MM("KernelForV8`Object:", true, null),
			new MM("KernelForV8`String", true, null),
			new MM("KernelForV8`String:", true, null),
			new MM("KernelForV8`UndefinedObject", true, null),
			new MM("KernelForV8`UndefinedObject:", true, null)
		];
		this.nestedClasses = [
			"KernelForV8`Array",
			"KernelForV8`Block",
			"KernelForV8`Boolean",
			"KernelForV8`Class",
			"KernelForV8`Error",
			"KernelForV8`Future",
			"KernelForV8`Message",
			"KernelForV8`MessageNotUnderstood",
			"KernelForV8`Metaclass",
			"KernelForV8`Mixin",
			"KernelForV8`Number",
			"KernelForV8`Object",
			"KernelForV8`String",
			"KernelForV8`UndefinedObject"
		];
		this.applications = [];
		this.$superInit$KernelForV8 = (function ($vmm) {
			var self = this;
			self.$super$KernelForV8$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($vmm) {
			var self = this;
			self._$superInit$KernelForV8($vmm);
			self._$setOnce$vmmirror$($vmm);
			return self;
		});
		this.$MutableString = (function () {
			var self = this;
			"BOGUS";
			return self._$String();
		});
		this.$augment$withPropertiesOf$ = (function ($prototype, $runtimeClass) {
			var self = this;
			var $keys = nil;
			$keys = Object.keys($runtimeClass);
			$keys.forEach((function (key) {
				$prototype[key] = $runtimeClass[key];
			}));
			return self;
		});
		this.$augmentPrototypes = (function () {
			var self = this;
			installDnuHandlersOn(Object.prototype);
			self._$augment$withPropertiesOf$(Array.prototype, self._$Object().runtimeClass);
			self._$augment$withPropertiesOf$(Array.prototype, self._$Array().runtimeClass);
			self._$augment$withPropertiesOf$(Boolean.prototype, self._$Object().runtimeClass);
			self._$augment$withPropertiesOf$(Boolean.prototype, self._$Boolean().runtimeClass);
			self._$augment$withPropertiesOf$(Function.prototype, self._$Object().runtimeClass);
			self._$augment$withPropertiesOf$(Function.prototype, self._$Block().runtimeClass);
			self._$augment$withPropertiesOf$(Number.prototype, self._$Object().runtimeClass);
			self._$augment$withPropertiesOf$(Number.prototype, self._$Number().runtimeClass);
			self._$augment$withPropertiesOf$(String.prototype, self._$Object().runtimeClass);
			self._$augment$withPropertiesOf$(String.prototype, self._$String().runtimeClass);
			return self;
		});
		this.$classOf$ = (function ($object) {
			var self = this;
			if (typeof $object === "string") {
				return self._$String();
			} else {
				nil;
			};
			if (typeof $object === "number") {
				return self._$Number();
			} else {
				nil;
			};
			if (typeof $object === "boolean") {
				return self._$Boolean();
			} else {
				nil;
			};
			if (typeof $object === "function") {
				return self._$Block();
			} else {
				nil;
			};
			if ($object instanceof Array) {
				return self._$Array();
			} else {
				nil;
			};
			return $object.newspeakClass;
		});
		this.$Array = (function () {
			if (nil === this.$KernelForV8$Array$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$KernelForV8);
				var mixin = $.$KernelForV8$Array;
				this.$KernelForV8$Array$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$KernelForV8$Array$slot;
		});
		this.$Block = (function () {
			if (nil === this.$KernelForV8$Block$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$KernelForV8);
				var mixin = $.$KernelForV8$Block;
				this.$KernelForV8$Block$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$KernelForV8$Block$slot;
		});
		this.$Boolean = (function () {
			if (nil === this.$KernelForV8$Boolean$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$KernelForV8);
				var mixin = $.$KernelForV8$Boolean;
				this.$KernelForV8$Boolean$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$KernelForV8$Boolean$slot;
		});
		this.$Class = (function () {
			if (nil === this.$KernelForV8$Class$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$KernelForV8);
				var mixin = $.$KernelForV8$Class;
				this.$KernelForV8$Class$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$KernelForV8$Class$slot;
		});
		this.$Error = (function () {
			if (nil === this.$KernelForV8$Error$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$KernelForV8);
				var mixin = $.$KernelForV8$Error;
				this.$KernelForV8$Error$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$KernelForV8$Error$slot;
		});
		this.$Future = (function () {
			if (nil === this.$KernelForV8$Future$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$KernelForV8);
				var mixin = $.$KernelForV8$Future;
				this.$KernelForV8$Future$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$KernelForV8$Future$slot;
		});
		this.$Message = (function () {
			if (nil === this.$KernelForV8$Message$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$KernelForV8);
				var mixin = $.$KernelForV8$Message;
				this.$KernelForV8$Message$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$KernelForV8$Message$slot;
		});
		this.$MessageNotUnderstood = (function () {
			if (nil === this.$KernelForV8$MessageNotUnderstood$slot) {
				var self = this;
				var superclass = self._$Error();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$KernelForV8);
				var mixin = $.$KernelForV8$MessageNotUnderstood;
				this.$KernelForV8$MessageNotUnderstood$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$KernelForV8$MessageNotUnderstood$slot;
		});
		this.$Metaclass = (function () {
			if (nil === this.$KernelForV8$Metaclass$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$KernelForV8);
				var mixin = $.$KernelForV8$Metaclass;
				this.$KernelForV8$Metaclass$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$KernelForV8$Metaclass$slot;
		});
		this.$Mixin = (function () {
			if (nil === this.$KernelForV8$Mixin$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$KernelForV8);
				var mixin = $.$KernelForV8$Mixin;
				this.$KernelForV8$Mixin$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$KernelForV8$Mixin$slot;
		});
		this.$Number = (function () {
			if (nil === this.$KernelForV8$Number$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$KernelForV8);
				var mixin = $.$KernelForV8$Number;
				this.$KernelForV8$Number$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$KernelForV8$Number$slot;
		});
		this.$Object = (function () {
			if (nil === this.$KernelForV8$Object$slot) {
				var self = this;
				var superclass = self._$ImplementationBase();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$KernelForV8);
				var mixin = $.$KernelForV8$Object;
				this.$KernelForV8$Object$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$KernelForV8$Object$slot;
		});
		this.$String = (function () {
			if (nil === this.$KernelForV8$String$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$KernelForV8);
				var mixin = $.$KernelForV8$String;
				this.$KernelForV8$String$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$KernelForV8$String$slot;
		});
		this.$UndefinedObject = (function () {
			if (nil === this.$KernelForV8$UndefinedObject$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$KernelForV8);
				var mixin = $.$KernelForV8$UndefinedObject;
				this.$KernelForV8$UndefinedObject$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$KernelForV8$UndefinedObject$slot;
		});
		this.$vmmirror = (function () {
			return this.$vmmirror$slot;
		});
		this.$setOnce$vmmirror$ = (function (v) {
			this.$vmmirror$slot = v;
			return this;
		});
		this.$platform = (function () {
			return this.$platform$slot;
		});
		this.$platform$ = (function (v) {
			this.$platform$slot = v;
			return this;
		});
		this.$KernelForV8$Array = (function () {
			return this.$KernelForV8$Array$slot;
		});
		this.$KernelForV8$Array$ = (function (v) {
			this.$KernelForV8$Array$slot = v;
			return this;
		});
		this.$KernelForV8$Block = (function () {
			return this.$KernelForV8$Block$slot;
		});
		this.$KernelForV8$Block$ = (function (v) {
			this.$KernelForV8$Block$slot = v;
			return this;
		});
		this.$KernelForV8$Boolean = (function () {
			return this.$KernelForV8$Boolean$slot;
		});
		this.$KernelForV8$Boolean$ = (function (v) {
			this.$KernelForV8$Boolean$slot = v;
			return this;
		});
		this.$KernelForV8$Class = (function () {
			return this.$KernelForV8$Class$slot;
		});
		this.$KernelForV8$Class$ = (function (v) {
			this.$KernelForV8$Class$slot = v;
			return this;
		});
		this.$KernelForV8$Error = (function () {
			return this.$KernelForV8$Error$slot;
		});
		this.$KernelForV8$Error$ = (function (v) {
			this.$KernelForV8$Error$slot = v;
			return this;
		});
		this.$KernelForV8$Future = (function () {
			return this.$KernelForV8$Future$slot;
		});
		this.$KernelForV8$Future$ = (function (v) {
			this.$KernelForV8$Future$slot = v;
			return this;
		});
		this.$KernelForV8$Message = (function () {
			return this.$KernelForV8$Message$slot;
		});
		this.$KernelForV8$Message$ = (function (v) {
			this.$KernelForV8$Message$slot = v;
			return this;
		});
		this.$KernelForV8$MessageNotUnderstood = (function () {
			return this.$KernelForV8$MessageNotUnderstood$slot;
		});
		this.$KernelForV8$MessageNotUnderstood$ = (function (v) {
			this.$KernelForV8$MessageNotUnderstood$slot = v;
			return this;
		});
		this.$KernelForV8$Metaclass = (function () {
			return this.$KernelForV8$Metaclass$slot;
		});
		this.$KernelForV8$Metaclass$ = (function (v) {
			this.$KernelForV8$Metaclass$slot = v;
			return this;
		});
		this.$KernelForV8$Mixin = (function () {
			return this.$KernelForV8$Mixin$slot;
		});
		this.$KernelForV8$Mixin$ = (function (v) {
			this.$KernelForV8$Mixin$slot = v;
			return this;
		});
		this.$KernelForV8$Number = (function () {
			return this.$KernelForV8$Number$slot;
		});
		this.$KernelForV8$Number$ = (function (v) {
			this.$KernelForV8$Number$slot = v;
			return this;
		});
		this.$KernelForV8$Object = (function () {
			return this.$KernelForV8$Object$slot;
		});
		this.$KernelForV8$Object$ = (function (v) {
			this.$KernelForV8$Object$slot = v;
			return this;
		});
		this.$KernelForV8$String = (function () {
			return this.$KernelForV8$String$slot;
		});
		this.$KernelForV8$String$ = (function (v) {
			this.$KernelForV8$String$slot = v;
			return this;
		});
		this.$KernelForV8$UndefinedObject = (function () {
			return this.$KernelForV8$UndefinedObject$slot;
		});
		this.$KernelForV8$UndefinedObject$ = (function (v) {
			this.$KernelForV8$UndefinedObject$slot = v;
			return this;
		});
		this.$KernelForV8$Array = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for KernelForV8`Array";
			this.name = "KernelForV8`Array";
			this.header = "Array uninstantiable = ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`KernelForV8`Array", true, " "),
				new MM("instance`initializer", true, " "),
				new MM(",", false, "public , otherSequence = (\r	^js call: (js propertyOf: self at: (js literal: 'concat')) with: {otherSequence asArray}\r)"),
				new MM("=", false, "public = other = (\r	self == other ifTrue: [^true].\r	other isArray ifFalse: [^false].\r	self size = other size ifFalse: [^false].\r	1 to: size do: [:index |\r		(self at: index) = (other at: index) ifFalse: [^false]].\r	^true\r)"),
				new MM("asArray", false, "public asArray = (\r	^self\r)"),
				new MM("asOrderedCollection", false, "public asOrderedCollection = (\r	^platform collections OrderedCollection withAll: self\r)"),
				new MM("at:", false, "public at: index = (\r	^js propertyOf: (js ident: 'this') at: (js operator: '-' with: index and: (js literal: 1))\r)"),
				new MM("at:put:", false, "public at: index put: value = (\r	^js assign: (js propertyOf: (js ident: 'this') at: (js operator: '-' with: index and: (js literal: 1)))\r	 toBe: value\r)"),
				new MM("binarySearchFor:between:and:toCompare:", false, "public binarySearchFor: el between: start and: end toCompare: compare = (\r	(* This does a binary search for the index such that if el was inserted before it\r	  the receiver would remain sorted.  The receiver must be sorted relative to the\r	  comparison block.  The comparison block should return true if the first block argument\r	  cannot appear after the second block argument *)\r\r	| low high |\r	low:: start.\r	high:: end.\r	[ low <= high ]\r		whileTrue:\r				[	| mid |\r					mid:: (low + high) // 2.\r	  				(compare value: (self at: mid) value: el)\r						ifTrue: [ low:: mid + 1 ]	\r						ifFalse: [ high:: mid - 1 ].\r				].\r	^low\r)"),
				new MM("class", false, "protected class = (\r	^Array\r)"),
				new MM("collect:", false, "public collect: block = (\r	^js call: (js propertyOf: self at: (js literal: 'map')) with: {block}.\r)"),
				new MM("copyFrom:to:", false, "public copyFrom: start to: end = (\r	^js call: (js propertyOf: self at: (js literal: 'slice')) with: {start - 1. end}\r)"),
				new MM("copyWith:", false, "public copyWith: extraElement = (\r	| newSize ::= self size + 1. a |\r	a:: (Array new: newSize) replaceFrom: 1 to: self size with: self.\r	a at: newSize put: extraElement.\r	^a\r)"),
				new MM("copyWithSize:", false, "public copyWithSize: s = (\r	^(Array new: s) replaceFrom: 1 to: (s min: self size) with: self\r)"),
				new MM("do:", false, "public do: block = (\r	js call: (js propertyOf: self at: (js literal: 'forEach')) with: {block}.\r)"),
				new MM("do:separatedBy:", false, "public do: block separatedBy: betweenBlock = (\r	| firstTime ::= true. |\r\r	self do: [:element |\r		firstTime ifTrue: [ firstTime:: false ] ifFalse: [betweenBlock value].\r		block value: element].\r)"),
				new MM("doWithIndex:", false, "public doWithIndex: block = (\r	1 to: size do: [:n | block value: (self at: n) value: n].\r)"),
				new MM("first", false, "public first = (\r	^self at: 1\r)"),
				new MM("includes:", false, "public includes: element = (\r\r	self do: [:each | each = element ifTrue: [^true]].\r	^false\r)"),
				new MM("inject:into:", false, "public inject: initialValue into: accumulator = (\r	^js call: (js propertyOf: self at: (js literal: 'reduce')) with: {accumulator. initialValue}.\r)"),
				new MM("isArray", false, "public isArray = (\r	^true\r)"),
				new MM("isCollection", false, "public isCollection ^<Boolean> = (\r	^true\r)"),
				new MM("isEmpty", false, "public isEmpty = (\r	^0 == size\r)"),
				new MM("keysAndValuesDo:", false, "public keysAndValuesDo: binaryBlock <[:Integer :E]> = (\r	1 to: self size do: [:index | binaryBlock value: index value: (self at: index)]\r)"),
				new MM("last", false, "public last = (\r	^self at: self size\r)"),
				new MM("printString", false, "public printString = (\r	| x ::= '{'. |\r	#FLAG. (* This is not safe for arrays that contain themselves. *)\r	self do: [:ea | x:: x , ea printString] separatedBy: [x:: x, '. '].\r	^x , '}'\r)"),
				new MM("replaceFrom:to:with:", false, "public replaceFrom: start to: stop with: replacement = (\r	(* This destructively replaces elements from start to stop in the receiver. \r	Answer the receiver itself. Use copyReplaceFrom:to:with: for \r	insertion/deletion which may alter the size of the result. *)\r\r	replacement size = (stop - start + 1)\r		ifFalse: [self error: 'Size of replacement doesnt match'].\r	^self replaceFrom: start to: stop with: replacement startingAt: 1\r)"),
				new MM("replaceFrom:to:with:startingAt:", false, "public replaceFrom: start to: stop with: replacement startingAt: repStart = (\r	(* This destructively replaces elements from start to stop in the receiver \r	starting at index, repStart, in the sequenceable collection, \r	replacementCollection. Answer the receiver. No range checks are \r	performed. *)\r\r	| index repOff |\r	repOff:: repStart - start.\r	index:: start - 1.\r	[(index:: index + 1) <= stop]\r		whileTrue: [self at: index put: (replacement at: repOff + index)]\r)"),
				new MM("select:", false, "public select: block = (\r	^js call: (js propertyOf: self at: (js literal: 'filter')) with: {block}.\r)"),
				new MM("size", false, "public size = (\r	^js verbatim: 'this.length'\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$KernelForV8$Array = (function () {
				var self = this;
				self.$super$KernelForV8$Array$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$KernelForV8$Array();
				return self;
			});
			this.$$comma = (function ($otherSequence) {
				var self = this;
				return self.concat($otherSequence.$asArray());
			});
			this.$$equal = (function ($other) {
				var self = this;
				if (self === $other) {
					return true;
				} else {
					nil;
				};
				if (!$other.$isArray()) {
					return false;
				} else {
					nil;
				};
				if (!self._$size().$$equal($other.$size())) {
					return false;
				} else {
					nil;
				};
				{
					var $$limit = nil;
					var $index = nil;
					nil;
					$index = 1;
					$$limit = self._$size();
					for (; $$limit.$$greater$equal($index); ) {
						if (!self._$at$($index).$$equal($other.$at$($index))) {
							return false;
						} else {
							nil;
						};
						$index = (1).$$plus($index);
					};
				};
				return true;
			});
			this.$asArray = (function () {
				var self = this;
				return self;
			});
			this.$asOrderedCollection = (function () {
				var self = this;
				return self.$enclosingObjects$KernelForV8$Array[0]._$platform().$collections().$OrderedCollection().$withAll$(self);
			});
			this.$at$ = (function ($index) {
				var self = this;
				return this[$index - 1];
			});
			this.$at$put$ = (function ($index, $value) {
				var self = this;
				return this[$index - 1] = $value;
			});
			this.$binarySearchFor$between$and$toCompare$ = (function ($el, $start, $end, $compare) {
				var self = this;
				var $low = nil;
				var $high = nil;
				$low = $start;
				$high = $end;
				{
					nil;
					for (; $low.$$less$equal($high); ) {
						var $mid = nil;
						$mid = ($low + $high).$$over$over(2);
						if ($compare.$value$value$(self._$at$($mid), $el)) {
							$low = $mid + 1;
						} else {
							$high = $mid - 1;
						};
					};
				};
				return $low;
			});
			this.$class = (function () {
				var self = this;
				return self.$enclosingObjects$KernelForV8$Array[0]._$Array();
			});
			this.$collect$ = (function ($block) {
				var self = this;
				return self.map($block);
			});
			this.$copyFrom$to$ = (function ($start, $end) {
				var self = this;
				return self.slice($start - 1, $end);
			});
			this.$copyWith$ = (function ($extraElement) {
				var self = this;
				var $newSize = nil;
				var $a = nil;
				$newSize = self._$size() + 1;
				$a = self.$enclosingObjects$KernelForV8$Array[0]._$Array().$new$($newSize).$replaceFrom$to$with$(1, self._$size(), self);
				$a.$at$put$($newSize, $extraElement);
				return $a;
			});
			this.$copyWithSize$ = (function ($s) {
				var self = this;
				return self.$enclosingObjects$KernelForV8$Array[0]._$Array().$new$($s).$replaceFrom$to$with$(1, $s.$min$(self._$size()), self);
			});
			this.$do$ = (function ($block) {
				var self = this;
				self.forEach($block);
				return self;
			});
			this.$do$separatedBy$ = (function ($block, $betweenBlock) {
				var self = this;
				var $firstTime = nil;
				$firstTime = true;
				self._$do$((function ($element) {
					if ($firstTime) {
						$firstTime = false;
					} else {
						$betweenBlock.$value();
					};
					return $block.$value$($element);
				}));
				return self;
			});
			this.$doWithIndex$ = (function ($block) {
				var self = this;
				{
					var $$limit = nil;
					var $n = nil;
					nil;
					$n = 1;
					$$limit = self._$size();
					for (; $$limit.$$greater$equal($n); ) {
						$block.$value$value$(self._$at$($n), $n);
						$n = (1).$$plus($n);
					};
				};
				return self;
			});
			this.$first = (function () {
				var self = this;
				return self._$at$(1);
			});
			this.$includes$ = (function ($element) {
				var self = this;
				var NLR = new Object();
				try {
					self._$do$((function ($each) {
						return $each.$$equal($element).$ifTrue$((function () {
							{
								NLR.value = true;
								throw NLR;
							};
						}));
					}));
					return false;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$inject$into$ = (function ($initialValue, $accumulator) {
				var self = this;
				return self.reduce($accumulator, $initialValue);
			});
			this.$isArray = (function () {
				var self = this;
				return true;
			});
			this.$isCollection = (function () {
				var self = this;
				return true;
			});
			this.$isEmpty = (function () {
				var self = this;
				return 0 === self._$size();
			});
			this.$keysAndValuesDo$ = (function ($binaryBlock) {
				var self = this;
				{
					var $$limit = nil;
					var $index = nil;
					nil;
					$index = 1;
					$$limit = self._$size();
					for (; $$limit.$$greater$equal($index); ) {
						$binaryBlock.$value$value$($index, self._$at$($index));
						$index = (1).$$plus($index);
					};
				};
				return self;
			});
			this.$last = (function () {
				var self = this;
				return self._$at$(self._$size());
			});
			this.$printString = (function () {
				var self = this;
				var $x = nil;
				$x = "{";
				"FLAG";
				self._$do$separatedBy$((function ($ea) {
					return $x = $x.$$comma($ea.$printString());
				}), (function () {
					return $x = $x.$$comma(". ");
				}));
				return $x.$$comma("}");
			});
			this.$replaceFrom$to$with$ = (function ($start, $stop, $replacement) {
				var self = this;
				if (!$replacement.$size().$$equal(($stop - $start) + 1)) {
					self._$error$("Size of replacement doesnt match");
				} else {
					nil;
				};
				return self._$replaceFrom$to$with$startingAt$($start, $stop, $replacement, 1);
			});
			this.$replaceFrom$to$with$startingAt$ = (function ($start, $stop, $replacement, $repStart) {
				var self = this;
				var $index = nil;
				var $repOff = nil;
				$repOff = $repStart - $start;
				$index = $start - 1;
				{
					nil;
					for (; ($index = $index + 1).$$less$equal($stop); ) {
						self._$at$put$($index, $replacement.$at$($repOff + $index));
					};
				};
				return self;
			});
			this.$select$ = (function ($block) {
				var self = this;
				return self.filter($block);
			});
			this.$size = (function () {
				var self = this;
				return this.length;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for KernelForV8`Array";
					this._$superInit$KernelForV8$Array = $.$superInit$KernelForV8$Array;
					this.$superInit$KernelForV8$Array = dnuCatcher("$superInit$KernelForV8$Array");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$$comma = this._$$comma = $.$$comma;
					this.$$equal = this._$$equal = $.$$equal;
					this.$asArray = this._$asArray = $.$asArray;
					this.$asOrderedCollection = this._$asOrderedCollection = $.$asOrderedCollection;
					this.$at$ = this._$at$ = $.$at$;
					this.$at$put$ = this._$at$put$ = $.$at$put$;
					this.$binarySearchFor$between$and$toCompare$ = this._$binarySearchFor$between$and$toCompare$ = $.$binarySearchFor$between$and$toCompare$;
					this._$class = $.$class;
					this.$class = dnuCatcher("$class");
					this.$collect$ = this._$collect$ = $.$collect$;
					this.$copyFrom$to$ = this._$copyFrom$to$ = $.$copyFrom$to$;
					this.$copyWith$ = this._$copyWith$ = $.$copyWith$;
					this.$copyWithSize$ = this._$copyWithSize$ = $.$copyWithSize$;
					this.$do$ = this._$do$ = $.$do$;
					this.$do$separatedBy$ = this._$do$separatedBy$ = $.$do$separatedBy$;
					this.$doWithIndex$ = this._$doWithIndex$ = $.$doWithIndex$;
					this.$first = this._$first = $.$first;
					this.$includes$ = this._$includes$ = $.$includes$;
					this.$inject$into$ = this._$inject$into$ = $.$inject$into$;
					this.$isArray = this._$isArray = $.$isArray;
					this.$isCollection = this._$isCollection = $.$isCollection;
					this.$isEmpty = this._$isEmpty = $.$isEmpty;
					this.$keysAndValuesDo$ = this._$keysAndValuesDo$ = $.$keysAndValuesDo$;
					this.$last = this._$last = $.$last;
					this.$printString = this._$printString = $.$printString;
					this.$replaceFrom$to$with$ = this._$replaceFrom$to$with$ = $.$replaceFrom$to$with$;
					this.$replaceFrom$to$with$startingAt$ = this._$replaceFrom$to$with$startingAt$ = $.$replaceFrom$to$with$startingAt$;
					this.$select$ = this._$select$ = $.$select$;
					this.$size = this._$size = $.$size;
					this.$enclosingObjects$KernelForV8$Array = enclosingObjects;
					this.$super$KernelForV8$Array$slot = runtimeSuperclass;
					this["KernelForV8`Array"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["KernelForV8`Array"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for KernelForV8`Array";
				this.slots = [];
				this.methods = [
					new MM("uninstantiable", true, null),
					new MM("new", false, "public new = (\r	^js array: {}\r)"),
					new MM("new:", false, "public new: size = (\r	^self new: size withAll: nil\r)"),
					new MM("new:withAll:", false, "public new: size withAll: initialElement = (\r	|\r	array = js new: (js ident: 'Array') with: {size}.\r	i ::= 0.\r	|	\r	js \r		for: (js verbatim: '')\r		while: (js operator: '<' with: i and: size) \r		step: (js postfixOperator: '++' on: i)\r		do: (js block: {\r			js assign: (js propertyOf: array at: i) toBe: initialElement}).\r	^array\r)"),
					new MM("with:", false, "public with: element = (\r	^{element}\r)")
				];
				this.nestedClasses = [];
				this.$uninstantiable = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$new = (function () {
					var self = this;
					return [];
				});
				this.$new$ = (function ($size) {
					var self = this;
					return self._$new$withAll$($size, nil);
				});
				this.$new$withAll$ = (function ($size, $initialElement) {
					var self = this;
					var $array = nil;
					var $i = nil;
					$array = new Array($size);
					$i = 0;
					for (; $i < $size; $i++) {
						$array[$i] = $initialElement;
					};
					return $array;
				});
				this.$with$ = (function ($element) {
					var self = this;
					return [$element];
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for KernelForV8`Array";
						this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
						this.$new = this._$new = $.$new;
						this.$new$ = this._$new$ = $.$new$;
						this.$new$withAll$ = this._$new$withAll$ = $.$new$withAll$;
						this.$with$ = this._$with$ = $.$with$;
						this.$enclosingObjects$KernelForV8$Array = enclosingObjects;
						this.$super$KernelForV8$Array = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$KernelForV8$Block = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for KernelForV8`Block";
			this.name = "KernelForV8`Block";
			this.header = "Block uninstantiable = ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`KernelForV8`Block", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("cull:", false, "public cull: a1 = (\r	^js call: (js ident: 'this') with: {a1}\r)"),
				new MM("ensure:", false, "public ensure: onUnwind = (\r	| result |\r	js try: (js block: {\r		result:: self value.\r	})\r	catch: (js ident: 'e')\r	with: (js block: {\r		onUnwind value.\r		js throw: (js ident: 'e').\r	}).\r	onUnwind value.\r	^result\r)"),
				new MM("isBlock", false, "public isBlock = (\r	^true\r)"),
				new MM("numArgs", false, "public numArgs ^<Integer> = (\r	^js propertyOf: self at: (js literal: 'length')\r)"),
				new MM("on:do:", false, "public on: errorClass do: handler = (\r	(* Perhaps we should match on mixin instead of class... *)\r	| c |\r	js try: (js block: {js return: self value})\r	catch: (js ident: 'e')\r	with: (js block: {\r		js for: (c:: classOf: (js ident: 'e')) while: c isNil not step: (js verbatim: '') do: (js block: {\r			js if: (js operator: '===' with: c and: errorClass)\r			then: (js block: {js return: (handler value: (js ident: 'e'))}).\r			c:: c superclass.\r		}) .\r		js throw: (js ident: 'e').\r	})\r)"),
				new MM("value", false, "public value = (\r	^js call: (js ident: 'this') with: {}\r)"),
				new MM("value:", false, "public value: a1 = (\r	^js call: (js ident: 'this') with: {a1}\r)"),
				new MM("value:value:", false, "public value: a1 value: a2 = (\r	^js call: (js ident: 'this') with: {a1. a2}\r)"),
				new MM("value:value:value:", false, "public value: a1 value: a2 value: a3 = (\r	^js call: (js ident: 'this') with: {a1. a2. a3}\r)"),
				new MM("valueWithArguments:", false, "public valueWithArguments: args = (\r	^js call: (js propertyOf: (js ident: 'this') at: (js literal: 'apply')) with: {js ident: 'this'. args}\r)"),
				new MM("whileFalse:", false, "public whileFalse: aBlock = (\r	[self value] whileFalse: [aBlock value].\r	^nil\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$KernelForV8$Block = (function () {
				var self = this;
				self.$super$KernelForV8$Block$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$KernelForV8$Block();
				return self;
			});
			this.$cull$ = (function ($a1) {
				var self = this;
				return this($a1);
			});
			this.$ensure$ = (function ($onUnwind) {
				var self = this;
				var $result = nil;
				try {
					$result = self._$value();
				} catch (e) {
					$onUnwind.$value();
					throw e;
				};
				$onUnwind.$value();
				return $result;
			});
			this.$isBlock = (function () {
				var self = this;
				return true;
			});
			this.$numArgs = (function () {
				var self = this;
				return self.length;
			});
			this.$on$do$ = (function ($errorClass, $handler) {
				var self = this;
				var $c = nil;
				try {
					return self._$value();
				} catch (e) {
					for ($c = $0.$classOf$.call(self.$enclosingObjects$KernelForV8$Block[0], e); $c.$isNil().$not(); ) {
						if ($c === $errorClass) {
							return $handler.$value$(e);
						};
						$c = $c.$superclass();
					};
					throw e;
				};
				return self;
			});
			this.$value = (function () {
				var self = this;
				return this();
			});
			this.$value$ = (function ($a1) {
				var self = this;
				return this($a1);
			});
			this.$value$value$ = (function ($a1, $a2) {
				var self = this;
				return this($a1, $a2);
			});
			this.$value$value$value$ = (function ($a1, $a2, $a3) {
				var self = this;
				return this($a1, $a2, $a3);
			});
			this.$valueWithArguments$ = (function ($args) {
				var self = this;
				return this.apply(this, $args);
			});
			this.$whileFalse$ = (function ($aBlock) {
				var self = this;
				{
					nil;
					for (; !self._$value(); ) {
						$aBlock.$value();
					};
				};
				return nil;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for KernelForV8`Block";
					this._$superInit$KernelForV8$Block = $.$superInit$KernelForV8$Block;
					this.$superInit$KernelForV8$Block = dnuCatcher("$superInit$KernelForV8$Block");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$cull$ = this._$cull$ = $.$cull$;
					this.$ensure$ = this._$ensure$ = $.$ensure$;
					this.$isBlock = this._$isBlock = $.$isBlock;
					this.$numArgs = this._$numArgs = $.$numArgs;
					this.$on$do$ = this._$on$do$ = $.$on$do$;
					this.$value = this._$value = $.$value;
					this.$value$ = this._$value$ = $.$value$;
					this.$value$value$ = this._$value$value$ = $.$value$value$;
					this.$value$value$value$ = this._$value$value$value$ = $.$value$value$value$;
					this.$valueWithArguments$ = this._$valueWithArguments$ = $.$valueWithArguments$;
					this.$whileFalse$ = this._$whileFalse$ = $.$whileFalse$;
					this.$enclosingObjects$KernelForV8$Block = enclosingObjects;
					this.$super$KernelForV8$Block$slot = runtimeSuperclass;
					this["KernelForV8`Block"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["KernelForV8`Block"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for KernelForV8`Block";
				this.slots = [];
				this.methods = [new MM("uninstantiable", true, null)];
				this.nestedClasses = [];
				this.$uninstantiable = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for KernelForV8`Block";
						this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
						this.$enclosingObjects$KernelForV8$Block = enclosingObjects;
						this.$super$KernelForV8$Block = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$KernelForV8$Boolean = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for KernelForV8`Boolean";
			this.name = "KernelForV8`Boolean";
			this.header = "Boolean uninstantiable = ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`KernelForV8`Boolean", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("&", false, "public & other = (\r	(* Evaluating conjunction. *)\r	^js operator: '&&' with: self and: other\r)"),
				new MM("ifFalse:", false, "public ifFalse: else = (\r	^js ternaryIf: self then: nil else: (js call: else with: {})\r)"),
				new MM("ifFalse:ifTrue:", false, "public ifFalse: else ifTrue: then = (\r	^js ternaryIf: self then: (js call: then with: {}) else: (js call: else with: {})\r)"),
				new MM("ifTrue:", false, "public ifTrue: onTrue = (\r	^js ternaryIf: self then: (js call: onTrue with: {}) else: nil\r)"),
				new MM("ifTrue:ifFalse:", false, "public ifTrue: then ifFalse: else = (\r	^js ternaryIf: self then: (js call: then with: {}) else: (js call: else with: {})\r)"),
				new MM("isBoolean", false, "public isBoolean = (\r	^true\r)"),
				new MM("not", false, "public not = (\r	^js prefixOperator: '!' on: self.\r)"),
				new MM("printString", false, "public printString = (\r	^self ifTrue: ['true'] ifFalse: ['false']\r)"),
				new MM("value", false, "public value = (\r	^self	\r)"),
				new MM("|", false, "public | other = (\r	(* Evaluating disjunction. *)\r	^js operator: '||' with: self and: other\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$KernelForV8$Boolean = (function () {
				var self = this;
				self.$super$KernelForV8$Boolean$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$KernelForV8$Boolean();
				return self;
			});
			this.$$amp = (function ($other) {
				var self = this;
				return self && $other;
			});
			this.$ifFalse$ = (function ($else) {
				var self = this;
				return (self ? nil : $else());
			});
			this.$ifFalse$ifTrue$ = (function ($else, $then) {
				var self = this;
				return (self ? $then() : $else());
			});
			this.$ifTrue$ = (function ($onTrue) {
				var self = this;
				return (self ? $onTrue() : nil);
			});
			this.$ifTrue$ifFalse$ = (function ($then, $else) {
				var self = this;
				return (self ? $then() : $else());
			});
			this.$isBoolean = (function () {
				var self = this;
				return true;
			});
			this.$not = (function () {
				var self = this;
				return !self;
			});
			this.$printString = (function () {
				var self = this;
				return self._$ifTrue$ifFalse$((function () {
					return "true";
				}), (function () {
					return "false";
				}));
			});
			this.$value = (function () {
				var self = this;
				return self;
			});
			this.$$pipe = (function ($other) {
				var self = this;
				return self || $other;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for KernelForV8`Boolean";
					this._$superInit$KernelForV8$Boolean = $.$superInit$KernelForV8$Boolean;
					this.$superInit$KernelForV8$Boolean = dnuCatcher("$superInit$KernelForV8$Boolean");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$$amp = this._$$amp = $.$$amp;
					this.$ifFalse$ = this._$ifFalse$ = $.$ifFalse$;
					this.$ifFalse$ifTrue$ = this._$ifFalse$ifTrue$ = $.$ifFalse$ifTrue$;
					this.$ifTrue$ = this._$ifTrue$ = $.$ifTrue$;
					this.$ifTrue$ifFalse$ = this._$ifTrue$ifFalse$ = $.$ifTrue$ifFalse$;
					this.$isBoolean = this._$isBoolean = $.$isBoolean;
					this.$not = this._$not = $.$not;
					this.$printString = this._$printString = $.$printString;
					this.$value = this._$value = $.$value;
					this.$$pipe = this._$$pipe = $.$$pipe;
					this.$enclosingObjects$KernelForV8$Boolean = enclosingObjects;
					this.$super$KernelForV8$Boolean$slot = runtimeSuperclass;
					this["KernelForV8`Boolean"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["KernelForV8`Boolean"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for KernelForV8`Boolean";
				this.slots = [];
				this.methods = [new MM("uninstantiable", true, null)];
				this.nestedClasses = [];
				this.$uninstantiable = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for KernelForV8`Boolean";
						this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
						this.$enclosingObjects$KernelForV8$Boolean = enclosingObjects;
						this.$super$KernelForV8$Boolean = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$KernelForV8$Class = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for KernelForV8`Class";
			this.name = "KernelForV8`Class";
			this.header = "Class = (|\rpublic superclass\rpublic mixin\rpublic enclosingObject (* Remove me *)\rpublic enclosingObjects \rpublic name\r|)";
			this.slots = [
				new SM("superclass", true, false),
				new SM("mixin", true, false),
				new SM("enclosingObject", true, false),
				new SM("enclosingObjects", true, false),
				new SM("name", true, false)
			];
			this.methods = [
				new MM("superInit`KernelForV8`Class", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("isBehavior", false, "public isBehavior = (\r	^true\r)"),
				new MM("isMeta", false, "public isMeta = (\r	^true\r)"),
				new MM("mixinApply:", false, "public mixinApply: newSuperclass = (\r	^vmmirror \r		applyMixin: (js propertyOf: self mixin at: (js literal: 'runtimeMixin'))\r		toSuperclass: newSuperclass\r		withEnclosingObjects: self enclosingObjects\r)"),
				new MM("superclass", true, null),
				new MM("superclass:", true, null),
				new MM("mixin", true, null),
				new MM("mixin:", true, null),
				new MM("enclosingObject", true, null),
				new MM("enclosingObject:", true, null),
				new MM("enclosingObjects", true, null),
				new MM("enclosingObjects:", true, null),
				new MM("name", true, null),
				new MM("name:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$KernelForV8$Class = (function () {
				var self = this;
				self.$super$KernelForV8$Class$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$KernelForV8$Class();
				return self;
			});
			this.$isBehavior = (function () {
				var self = this;
				return true;
			});
			this.$isMeta = (function () {
				var self = this;
				return true;
			});
			this.$mixinApply$ = (function ($newSuperclass) {
				var self = this;
				return self.$enclosingObjects$KernelForV8$Class[0]._$vmmirror().$applyMixin$toSuperclass$withEnclosingObjects$(self._$mixin().runtimeMixin, $newSuperclass, self._$enclosingObjects());
			});
			this.$superclass = (function () {
				return this.$superclass$slot;
			});
			this.$superclass$ = (function (v) {
				this.$superclass$slot = v;
				return this;
			});
			this.$mixin = (function () {
				return this.$mixin$slot;
			});
			this.$mixin$ = (function (v) {
				this.$mixin$slot = v;
				return this;
			});
			this.$enclosingObject = (function () {
				return this.$enclosingObject$slot;
			});
			this.$enclosingObject$ = (function (v) {
				this.$enclosingObject$slot = v;
				return this;
			});
			this.$enclosingObjects = (function () {
				return this.$enclosingObjects$slot;
			});
			this.$enclosingObjects$ = (function (v) {
				this.$enclosingObjects$slot = v;
				return this;
			});
			this.$name = (function () {
				return this.$name$slot;
			});
			this.$name$ = (function (v) {
				this.$name$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for KernelForV8`Class";
					this._$superInit$KernelForV8$Class = $.$superInit$KernelForV8$Class;
					this.$superInit$KernelForV8$Class = dnuCatcher("$superInit$KernelForV8$Class");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isBehavior = this._$isBehavior = $.$isBehavior;
					this.$isMeta = this._$isMeta = $.$isMeta;
					this.$mixinApply$ = this._$mixinApply$ = $.$mixinApply$;
					this.$superclass = this._$superclass = $.$superclass;
					this.$superclass$ = this._$superclass$ = $.$superclass$;
					this.$mixin = this._$mixin = $.$mixin;
					this.$mixin$ = this._$mixin$ = $.$mixin$;
					this.$enclosingObject = this._$enclosingObject = $.$enclosingObject;
					this.$enclosingObject$ = this._$enclosingObject$ = $.$enclosingObject$;
					this.$enclosingObjects = this._$enclosingObjects = $.$enclosingObjects;
					this.$enclosingObjects$ = this._$enclosingObjects$ = $.$enclosingObjects$;
					this.$name = this._$name = $.$name;
					this.$name$ = this._$name$ = $.$name$;
					this.$enclosingObjects$KernelForV8$Class = enclosingObjects;
					this.$super$KernelForV8$Class$slot = runtimeSuperclass;
					this["KernelForV8`Class"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$superclass$slot = nil;
						this.$mixin$slot = nil;
						this.$enclosingObject$slot = nil;
						this.$enclosingObjects$slot = nil;
						this.$name$slot = nil;
					});
					this.basicNew = this["KernelForV8`Class"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for KernelForV8`Class";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for KernelForV8`Class";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$KernelForV8$Class = enclosingObjects;
						this.$super$KernelForV8$Class = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$KernelForV8$Error = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for KernelForV8`Error";
			this.name = "KernelForV8`Error";
			this.header = "Error description: d <String> = (| public description = d. |)";
			this.slots = [new SM("description", false, false)];
			this.methods = [
				new MM("superInit`KernelForV8`Error", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("isError", false, "public isError = (\r	^true\r)"),
				new MM("printString", false, "public printString = (\r	^description\r)"),
				new MM("signal", false, "public signal = (\r	js verbatim: 'this.trace = new Error().stack'.\r	js throw: self.\r)"),
				new MM("description", true, null),
				new MM("setOnce`description:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$KernelForV8$Error = (function ($d) {
				var self = this;
				self.$super$KernelForV8$Error$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($d) {
				var self = this;
				self._$superInit$KernelForV8$Error($d);
				self._$setOnce$description$($d);
				return self;
			});
			this.$isError = (function () {
				var self = this;
				return true;
			});
			this.$printString = (function () {
				var self = this;
				return self._$description();
			});
			this.$signal = (function () {
				var self = this;
				this.trace = new Error().stack;
				throw self;
				return self;
			});
			this.$description = (function () {
				return this.$description$slot;
			});
			this.$setOnce$description$ = (function (v) {
				this.$description$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for KernelForV8`Error";
					this._$superInit$KernelForV8$Error = $.$superInit$KernelForV8$Error;
					this.$superInit$KernelForV8$Error = dnuCatcher("$superInit$KernelForV8$Error");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isError = this._$isError = $.$isError;
					this.$printString = this._$printString = $.$printString;
					this.$signal = this._$signal = $.$signal;
					this.$description = this._$description = $.$description;
					this.$setOnce$description$ = this._$setOnce$description$ = $.$setOnce$description$;
					this.$enclosingObjects$KernelForV8$Error = enclosingObjects;
					this.$super$KernelForV8$Error$slot = runtimeSuperclass;
					this["KernelForV8`Error"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$description$slot = nil;
					});
					this.basicNew = this["KernelForV8`Error"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for KernelForV8`Error";
				this.slots = [];
				this.methods = [
					new MM("description:", true, null),
					new MM("signal:", false, "public signal: description = (\r	^(self description: description) signal\r)")
				];
				this.nestedClasses = [];
				this.$description$ = (function ($d) {
					return (new this.nonMeta.basicNew()).$instance$initializer($d);
				});
				this.$signal$ = (function ($description) {
					var self = this;
					return self._$description$($description).$signal();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for KernelForV8`Error";
						this.$description$ = this._$description$ = $.$description$;
						this.$signal$ = this._$signal$ = $.$signal$;
						this.$enclosingObjects$KernelForV8$Error = enclosingObjects;
						this.$super$KernelForV8$Error = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$KernelForV8$Future = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for KernelForV8`Future";
			this.name = "KernelForV8`Future";
			this.header = "Future computing: block <[E]> = (\r(* The simplest possible future. It evalutes its closure in response to nearly every message. *)|\r	private blockOrValue000 <[E] | E> ::= block.\r	private state000 <Symbol> ::= #unresolved.\r|)";
			this.slots = [
				new SM("blockOrValue000", true, false),
				new SM("state000", true, false)
			];
			this.methods = [
				new MM("superInit`KernelForV8`Future", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("doesNotUnderstand:", false, "protected doesNotUnderstand: message = (\r	^message sendTo: self resolve\r)"),
				new MM("isFuture", false, "public isFuture ^<Boolean> = (\r	^true\r)"),
				new MM("resolve", false, "resolve = (\r	state000 = #resolving ifTrue: [\r		Error signal: 'Divergent evalutation of ', blockOrValue000 printString].\r	state000 = #unresolved ifTrue: [\r		state000: #resolving.\r		blockOrValue000: blockOrValue000 value.\r		[blockOrValue000 isFuture] whileTrue:\r			[blockOrValue000: blockOrValue000 resolve].\r		state000: #resolved.\r	].\r	^blockOrValue000\r)"),
				new MM("yourself", false, "public yourself = (\r	(* See InstanceMixin>>apply:withName: *)\r	^self resolve\r)"),
				new MM("blockOrValue000", true, null),
				new MM("blockOrValue000:", true, null),
				new MM("state000", true, null),
				new MM("state000:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$KernelForV8$Future = (function ($block) {
				var self = this;
				self.$super$KernelForV8$Future$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($block) {
				var self = this;
				self._$superInit$KernelForV8$Future($block);
				$1.$blockOrValue000$.call(self, $block);
				$1.$state000$.call(self, "unresolved");
				return self;
			});
			this.$doesNotUnderstand$ = (function ($message) {
				var self = this;
				return $message.$sendTo$(self._$resolve());
			});
			this.$isFuture = (function () {
				var self = this;
				return true;
			});
			this.$resolve = (function () {
				var self = this;
				if ($1.$state000.call(self).$$equal("resolving")) {
					self.$enclosingObjects$KernelForV8$Future[0]._$Error().$signal$(("Divergent evalutation of ").$$comma($1.$blockOrValue000.call(self).$printString()));
				} else {
					nil;
				};
				if ($1.$state000.call(self).$$equal("unresolved")) {
					$1.$state000$.call(self, "resolving");
					$1.$blockOrValue000$.call(self, $1.$blockOrValue000.call(self).$value());
					{
						nil;
						for (; $1.$blockOrValue000.call(self).$isFuture(); ) {
							$1.$blockOrValue000$.call(self, $1.$blockOrValue000.call(self).$resolve());
						};
					};
					$1.$state000$.call(self, "resolved");
				} else {
					nil;
				};
				return $1.$blockOrValue000.call(self);
			});
			this.$yourself = (function () {
				var self = this;
				return self._$resolve();
			});
			this.$blockOrValue000 = (function () {
				return this.$blockOrValue000$slot;
			});
			this.$blockOrValue000$ = (function (v) {
				this.$blockOrValue000$slot = v;
				return this;
			});
			this.$state000 = (function () {
				return this.$state000$slot;
			});
			this.$state000$ = (function (v) {
				this.$state000$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for KernelForV8`Future";
					this._$superInit$KernelForV8$Future = $.$superInit$KernelForV8$Future;
					this.$superInit$KernelForV8$Future = dnuCatcher("$superInit$KernelForV8$Future");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$doesNotUnderstand$ = $.$doesNotUnderstand$;
					this.$doesNotUnderstand$ = dnuCatcher("$doesNotUnderstand$");
					this.dnu = $.$doesNotUnderstand$;
					this.$isFuture = this._$isFuture = $.$isFuture;
					this._$resolve = $.$resolve;
					this.$resolve = dnuCatcher("$resolve");
					this.$yourself = this._$yourself = $.$yourself;
					this.$enclosingObjects$KernelForV8$Future = enclosingObjects;
					this.$super$KernelForV8$Future$slot = runtimeSuperclass;
					this["KernelForV8`Future"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$blockOrValue000$slot = nil;
						this.$state000$slot = nil;
					});
					this.basicNew = this["KernelForV8`Future"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for KernelForV8`Future";
				this.slots = [];
				this.methods = [new MM("computing:", true, null)];
				this.nestedClasses = [];
				this.$computing$ = (function ($block) {
					return (new this.nonMeta.basicNew()).$instance$initializer($block);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for KernelForV8`Future";
						this.$computing$ = this._$computing$ = $.$computing$;
						this.$enclosingObjects$KernelForV8$Future = enclosingObjects;
						this.$super$KernelForV8$Future = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$KernelForV8$Message = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for KernelForV8`Message";
			this.name = "KernelForV8`Message";
			this.header = "Message selector: s arguments: a = (\r(* FIXME: This factory should take an unmangled selector. *)|\r	public mangledSelector = s.\r	public arguments = a.\r|)";
			this.slots = [
				new SM("mangledSelector", false, false),
				new SM("arguments", false, false)
			];
			this.methods = [
				new MM("superInit`KernelForV8`Message", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("printString", false, "public printString = (\r	^'#',selector\r)"),
				new MM("selector", false, "public selector = (\r	^vmmirror unmangleSelector: mangledSelector\r)"),
				new MM("sendTo:", false, "public sendTo: receiver = (\r	^js call: (js propertyOf: (js propertyOf: receiver at: mangledSelector) at: (js literal: 'apply')) with: {receiver. arguments}\r)"),
				new MM("mangledSelector", true, null),
				new MM("setOnce`mangledSelector:", true, null),
				new MM("arguments", true, null),
				new MM("setOnce`arguments:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$KernelForV8$Message = (function ($s, $a) {
				var self = this;
				self.$super$KernelForV8$Message$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($s, $a) {
				var self = this;
				self._$superInit$KernelForV8$Message($s, $a);
				self._$setOnce$mangledSelector$($s);
				self._$setOnce$arguments$($a);
				return self;
			});
			this.$printString = (function () {
				var self = this;
				return ("#").$$comma(self._$selector());
			});
			this.$selector = (function () {
				var self = this;
				return self.$enclosingObjects$KernelForV8$Message[0]._$vmmirror().$unmangleSelector$(self._$mangledSelector());
			});
			this.$sendTo$ = (function ($receiver) {
				var self = this;
				return $receiver[self._$mangledSelector()].apply($receiver, self._$arguments());
			});
			this.$mangledSelector = (function () {
				return this.$mangledSelector$slot;
			});
			this.$setOnce$mangledSelector$ = (function (v) {
				this.$mangledSelector$slot = v;
				return this;
			});
			this.$arguments = (function () {
				return this.$arguments$slot;
			});
			this.$setOnce$arguments$ = (function (v) {
				this.$arguments$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for KernelForV8`Message";
					this._$superInit$KernelForV8$Message = $.$superInit$KernelForV8$Message;
					this.$superInit$KernelForV8$Message = dnuCatcher("$superInit$KernelForV8$Message");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$printString = this._$printString = $.$printString;
					this.$selector = this._$selector = $.$selector;
					this.$sendTo$ = this._$sendTo$ = $.$sendTo$;
					this.$mangledSelector = this._$mangledSelector = $.$mangledSelector;
					this.$setOnce$mangledSelector$ = this._$setOnce$mangledSelector$ = $.$setOnce$mangledSelector$;
					this.$arguments = this._$arguments = $.$arguments;
					this.$setOnce$arguments$ = this._$setOnce$arguments$ = $.$setOnce$arguments$;
					this.$enclosingObjects$KernelForV8$Message = enclosingObjects;
					this.$super$KernelForV8$Message$slot = runtimeSuperclass;
					this["KernelForV8`Message"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$mangledSelector$slot = nil;
						this.$arguments$slot = nil;
					});
					this.basicNew = this["KernelForV8`Message"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for KernelForV8`Message";
				this.slots = [];
				this.methods = [
					new MM("selector:arguments:", true, null),
					new MM("mangle:", false, "mangle: selector = (\r	^((('$', selector)\r		replaceAll: $: with: $$) (* Keyword *)\r		replaceAll: $` with: $$) (* Qualified *)\r		replaceAll: $. with: $$ (* limit temp *)\r)"),
					new MM("selector:", false, "public selector: s = (\r	^self selector: (mangle: s) arguments: {}\r)")
				];
				this.nestedClasses = [];
				this.$selector$arguments$ = (function ($s, $a) {
					return (new this.nonMeta.basicNew()).$instance$initializer($s, $a);
				});
				this.$mangle$ = (function ($selector) {
					var self = this;
					return ("$").$$comma($selector).$replaceAll$with$(":", "$").$replaceAll$with$("`", "$").$replaceAll$with$(".", "$");
				});
				this.$selector$ = (function ($s) {
					var self = this;
					return self._$selector$arguments$(self._$mangle$($s), []);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for KernelForV8`Message";
						this.$selector$arguments$ = this._$selector$arguments$ = $.$selector$arguments$;
						this._$mangle$ = $.$mangle$;
						this.$mangle$ = dnuCatcher("$mangle$");
						this.$selector$ = this._$selector$ = $.$selector$;
						this.$enclosingObjects$KernelForV8$Message = enclosingObjects;
						this.$super$KernelForV8$Message = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$KernelForV8$MessageNotUnderstood = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for KernelForV8`MessageNotUnderstood";
			this.name = "KernelForV8`MessageNotUnderstood";
			this.header = "MessageNotUnderstood receiver: r message: m = Error description: 'MessageNotUnderstood: ', (classOf: r) name, '>>', m selector (|\r	public receiver = r.\r	public message = m.\r|)";
			this.slots = [
				new SM("receiver", false, false),
				new SM("message", false, false)
			];
			this.methods = [
				new MM("superInit`KernelForV8`MessageNotUnderstood", true, "description: 'MessageNotUnderstood: ', (classOf: r) name, '>>', m selector"),
				new MM("instance`initializer", true, "description: 'MessageNotUnderstood: ', (classOf: r) name, '>>', m selector"),
				new MM("receiver", true, null),
				new MM("setOnce`receiver:", true, null),
				new MM("message", true, null),
				new MM("setOnce`message:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$KernelForV8$MessageNotUnderstood = (function ($r, $m) {
				var self = this;
				self.$super$KernelForV8$MessageNotUnderstood$slot._$instance$initializer.call(self, ("MessageNotUnderstood: ").$$comma($0.$classOf$.call(self.$enclosingObjects$KernelForV8$MessageNotUnderstood[0], $r).$name()).$$comma(">>").$$comma($m.$selector()));
				return self;
			});
			this.$instance$initializer = (function ($r, $m) {
				var self = this;
				self._$superInit$KernelForV8$MessageNotUnderstood($r, $m);
				self._$setOnce$receiver$($r);
				self._$setOnce$message$($m);
				return self;
			});
			this.$receiver = (function () {
				return this.$receiver$slot;
			});
			this.$setOnce$receiver$ = (function (v) {
				this.$receiver$slot = v;
				return this;
			});
			this.$message = (function () {
				return this.$message$slot;
			});
			this.$setOnce$message$ = (function (v) {
				this.$message$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for KernelForV8`MessageNotUnderstood";
					this._$superInit$KernelForV8$MessageNotUnderstood = $.$superInit$KernelForV8$MessageNotUnderstood;
					this.$superInit$KernelForV8$MessageNotUnderstood = dnuCatcher("$superInit$KernelForV8$MessageNotUnderstood");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$receiver = this._$receiver = $.$receiver;
					this.$setOnce$receiver$ = this._$setOnce$receiver$ = $.$setOnce$receiver$;
					this.$message = this._$message = $.$message;
					this.$setOnce$message$ = this._$setOnce$message$ = $.$setOnce$message$;
					this.$enclosingObjects$KernelForV8$MessageNotUnderstood = enclosingObjects;
					this.$super$KernelForV8$MessageNotUnderstood$slot = runtimeSuperclass;
					this["KernelForV8`MessageNotUnderstood"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$receiver$slot = nil;
						this.$message$slot = nil;
					});
					this.basicNew = this["KernelForV8`MessageNotUnderstood"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for KernelForV8`MessageNotUnderstood";
				this.slots = [];
				this.methods = [new MM("receiver:message:", true, null)];
				this.nestedClasses = [];
				this.$receiver$message$ = (function ($r, $m) {
					return (new this.nonMeta.basicNew()).$instance$initializer($r, $m);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for KernelForV8`MessageNotUnderstood";
						this.$receiver$message$ = this._$receiver$message$ = $.$receiver$message$;
						this.$enclosingObjects$KernelForV8$MessageNotUnderstood = enclosingObjects;
						this.$super$KernelForV8$MessageNotUnderstood = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$KernelForV8$Metaclass = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for KernelForV8`Metaclass";
			this.name = "KernelForV8`Metaclass";
			this.header = "Metaclass = (\r(* Describe the class in this comment. *)|\rpublic superclass\rpublic mixin\rpublic enclosingObject\rpublic name\rpublic thisClass\r|)";
			this.slots = [
				new SM("superclass", true, false),
				new SM("mixin", true, false),
				new SM("enclosingObject", true, false),
				new SM("name", true, false),
				new SM("thisClass", true, false)
			];
			this.methods = [
				new MM("superInit`KernelForV8`Metaclass", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("isBehavior", false, "public isBehavior = (\r	^true\r)"),
				new MM("isMeta", false, "public isMeta = (\r	^true\r)"),
				new MM("superclass", true, null),
				new MM("superclass:", true, null),
				new MM("mixin", true, null),
				new MM("mixin:", true, null),
				new MM("enclosingObject", true, null),
				new MM("enclosingObject:", true, null),
				new MM("name", true, null),
				new MM("name:", true, null),
				new MM("thisClass", true, null),
				new MM("thisClass:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$KernelForV8$Metaclass = (function () {
				var self = this;
				self.$super$KernelForV8$Metaclass$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$KernelForV8$Metaclass();
				return self;
			});
			this.$isBehavior = (function () {
				var self = this;
				return true;
			});
			this.$isMeta = (function () {
				var self = this;
				return true;
			});
			this.$superclass = (function () {
				return this.$superclass$slot;
			});
			this.$superclass$ = (function (v) {
				this.$superclass$slot = v;
				return this;
			});
			this.$mixin = (function () {
				return this.$mixin$slot;
			});
			this.$mixin$ = (function (v) {
				this.$mixin$slot = v;
				return this;
			});
			this.$enclosingObject = (function () {
				return this.$enclosingObject$slot;
			});
			this.$enclosingObject$ = (function (v) {
				this.$enclosingObject$slot = v;
				return this;
			});
			this.$name = (function () {
				return this.$name$slot;
			});
			this.$name$ = (function (v) {
				this.$name$slot = v;
				return this;
			});
			this.$thisClass = (function () {
				return this.$thisClass$slot;
			});
			this.$thisClass$ = (function (v) {
				this.$thisClass$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for KernelForV8`Metaclass";
					this._$superInit$KernelForV8$Metaclass = $.$superInit$KernelForV8$Metaclass;
					this.$superInit$KernelForV8$Metaclass = dnuCatcher("$superInit$KernelForV8$Metaclass");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isBehavior = this._$isBehavior = $.$isBehavior;
					this.$isMeta = this._$isMeta = $.$isMeta;
					this.$superclass = this._$superclass = $.$superclass;
					this.$superclass$ = this._$superclass$ = $.$superclass$;
					this.$mixin = this._$mixin = $.$mixin;
					this.$mixin$ = this._$mixin$ = $.$mixin$;
					this.$enclosingObject = this._$enclosingObject = $.$enclosingObject;
					this.$enclosingObject$ = this._$enclosingObject$ = $.$enclosingObject$;
					this.$name = this._$name = $.$name;
					this.$name$ = this._$name$ = $.$name$;
					this.$thisClass = this._$thisClass = $.$thisClass;
					this.$thisClass$ = this._$thisClass$ = $.$thisClass$;
					this.$enclosingObjects$KernelForV8$Metaclass = enclosingObjects;
					this.$super$KernelForV8$Metaclass$slot = runtimeSuperclass;
					this["KernelForV8`Metaclass"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$superclass$slot = nil;
						this.$mixin$slot = nil;
						this.$enclosingObject$slot = nil;
						this.$name$slot = nil;
						this.$thisClass$slot = nil;
					});
					this.basicNew = this["KernelForV8`Metaclass"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for KernelForV8`Metaclass";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for KernelForV8`Metaclass";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$KernelForV8$Metaclass = enclosingObjects;
						this.$super$KernelForV8$Metaclass = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$KernelForV8$Mixin = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for KernelForV8`Mixin";
			this.name = "KernelForV8`Mixin";
			this.header = "Mixin fromRuntimeMixin: rm = (js assign: (js propertyOf: self at: (js literal: 'runtimeMixin')) toBe: rm)";
			this.slots = [];
			this.methods = [
				new MM("superInit`KernelForV8`Mixin", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("applyTo:", false, "public applyTo: superclass <Class> ^<Class> = (\r	(* assert: [isTopLevel] message: 'Only top-level mixins may be applied directly' *)\r	assert: [isMeta not] message: 'Only instance-side mixins may be applied directly'.\r	^self applyTo: superclass withName: (superclass name, ' <: ', name)\r)"),
				new MM("applyTo:withName:", false, "public applyTo: superclass <Class> withName: name <String> ^<Class> = (\r	^vmmirror \r		applyMixin: (js propertyOf: self at: (js literal: 'runtimeMixin'))\r		toSuperclass: superclass\r		withEnclosingObjects: {nil}\r)"),
				new MM("isMeta", false, "public isMeta ^<Boolean> = (\r	^js operator: '===' with: (js propertyOf: (js propertyOf: self at: (js literal: 'runtimeMixin')) at: (js literal: 'meta')) and: (js ident: 'undefined')\r)"),
				new MM("name", false, "public name ^<Symbol> = (\r	^isMeta \r		ifTrue: [(js propertyOf: (js propertyOf: (js propertyOf: self at: (js literal: 'runtimeMixin')) at: (js literal: 'nonMeta')) at: (js literal: 'name')), ' class']\r		ifFalse: [js propertyOf: (js propertyOf: self at: (js literal: 'runtimeMixin')) at: (js literal: 'name')].\r)"),
				new MM("printString", false, "public printString ^<String> = (\r	^name, ' mixin'\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$KernelForV8$Mixin = (function ($rm) {
				var self = this;
				self.$super$KernelForV8$Mixin$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($rm) {
				var self = this;
				self._$superInit$KernelForV8$Mixin($rm);
				self.runtimeMixin = $rm;
				return self;
			});
			this.$applyTo$ = (function ($superclass) {
				var self = this;
				self._$assert$message$((function () {
					return self._$isMeta().$not();
				}), "Only instance-side mixins may be applied directly");
				return self._$applyTo$withName$($superclass, $superclass.$name().$$comma(" <: ").$$comma(self._$name()));
			});
			this.$applyTo$withName$ = (function ($superclass, $name) {
				var self = this;
				return self.$enclosingObjects$KernelForV8$Mixin[0]._$vmmirror().$applyMixin$toSuperclass$withEnclosingObjects$(self.runtimeMixin, $superclass, [nil]);
			});
			this.$isMeta = (function () {
				var self = this;
				return self.runtimeMixin.meta === undefined;
			});
			this.$name = (function () {
				var self = this;
				return self._$isMeta().$ifTrue$ifFalse$((function () {
					return self.runtimeMixin.nonMeta.name.$$comma(" class");
				}), (function () {
					return self.runtimeMixin.name;
				}));
			});
			this.$printString = (function () {
				var self = this;
				return self._$name().$$comma(" mixin");
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for KernelForV8`Mixin";
					this._$superInit$KernelForV8$Mixin = $.$superInit$KernelForV8$Mixin;
					this.$superInit$KernelForV8$Mixin = dnuCatcher("$superInit$KernelForV8$Mixin");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$applyTo$ = this._$applyTo$ = $.$applyTo$;
					this.$applyTo$withName$ = this._$applyTo$withName$ = $.$applyTo$withName$;
					this.$isMeta = this._$isMeta = $.$isMeta;
					this.$name = this._$name = $.$name;
					this.$printString = this._$printString = $.$printString;
					this.$enclosingObjects$KernelForV8$Mixin = enclosingObjects;
					this.$super$KernelForV8$Mixin$slot = runtimeSuperclass;
					this["KernelForV8`Mixin"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["KernelForV8`Mixin"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for KernelForV8`Mixin";
				this.slots = [];
				this.methods = [new MM("fromRuntimeMixin:", true, null)];
				this.nestedClasses = [];
				this.$fromRuntimeMixin$ = (function ($rm) {
					return (new this.nonMeta.basicNew()).$instance$initializer($rm);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for KernelForV8`Mixin";
						this.$fromRuntimeMixin$ = this._$fromRuntimeMixin$ = $.$fromRuntimeMixin$;
						this.$enclosingObjects$KernelForV8$Mixin = enclosingObjects;
						this.$super$KernelForV8$Mixin = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$KernelForV8$Number = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for KernelForV8`Number";
			this.name = "KernelForV8`Number";
			this.header = "Number uninstantiable = ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`KernelForV8`Number", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("*", false, "public * other = (\r	^js operator: '*' with: self and: other\r)"),
				new MM("**", false, "public ** exponent = (\r	^js call: (js propertyOf: (js ident: 'Math') at: (js literal: 'pow')) with: {self. exponent}\r)"),
				new MM("+", false, "public + other = (\r	^js operator: '+' with: self and: other\r)"),
				new MM("-", false, "public - other = (\r	^js operator: '-' with: self and: other\r)"),
				new MM("/", false, "public / other = (\r	^js operator: '/' with: self and: other\r)"),
				new MM("//", false, "public // other = (\r	^(self / other) floor\r)"),
				new MM("<", false, "public < other = (\r	^js operator: '<' with: self and: other\r)"),
				new MM("<<", false, "public << other = (\r	^js operator: '<<' with: self and: other\r)"),
				new MM("<=", false, "public <= other = (\r	^js operator: '<=' with: self and: other\r)"),
				new MM("=", false, "public = other = (\r	^js operator: '===' with: self and: other\r)"),
				new MM(">", false, "public > other = (\r	^js operator: '>' with: self and: other\r)"),
				new MM(">=", false, "public >= other = (\r	^js operator: '>=' with: self and: other\r)"),
				new MM(">>", false, "public >> other = (\r	^js operator: '>>' with: self and: other\r)"),
				new MM("@", false, "public @ y = (\r	^platform graphics Point x: self y: y\r)"),
				new MM("\\\\", false, "public \\\\ other = (\r	^self - (self // other * other)\r)"),
				new MM("abs", false, "public abs = (\r	self >= 0 ifTrue: [^self] ifFalse: [^-1.0 * self]\r)"),
				new MM("asFloat", false, "public asFloat = (\r	^self * 1.0\r)"),
				new MM("asInteger", false, "public asInteger = (\r	^self truncated\r)"),
				new MM("asString", false, "public asString = (\r	^js call: (js propertyOf: self at: (js literal: 'toString')) with: {}\r)"),
				new MM("between:and:", false, "public between: min and: max = (\r	^self <= max and: [ self >= min ]\r)"),
				new MM("bitAnd:", false, "public bitAnd: other = (\r	^js operator: '&' with: self and: other\r)"),
				new MM("bitInvert", false, "public bitInvert = (\r	^ -1 - self\r)"),
				new MM("bitOr:", false, "public bitOr: other = (\r	^js operator: '|' with: self and: other\r)"),
				new MM("bitXor:", false, "public bitXor: other = (\r	^js operator: '^' with: self and: other\r)"),
				new MM("ceiling", false, "public ceiling = (\r	^js call: (js propertyOf: (js ident: 'Math') at: (js literal: 'ceil')) with: {self}\r)"),
				new MM("cos", false, "public cos = (\r	^js call: (js propertyOf: (js ident: 'Math') at: (js literal: 'cos')) with: {self}\r)"),
				new MM("exp", false, "public exp = (\r	^js call: (js propertyOf: (js ident: 'Math') at: (js literal: 'exp')) with: {self}\r)"),
				new MM("floor", false, "public floor = (\r	^js call: (js propertyOf: (js ident: 'Math') at: (js literal: 'floor')) with: {self}\r)"),
				new MM("hash", false, "public hash = (\r	^self rem: 16rFFFFFF\r)"),
				new MM("isNumber", false, "public isNumber = (\r	^true\r)"),
				new MM("ln", false, "public ln = (\r	^js call: (js propertyOf: (js ident: 'Math') at: (js literal: 'log')) with: {self}\r)"),
				new MM("max:", false, "public max: other = (\r	^self > other ifTrue: [ self ] ifFalse: [ other ]\r)"),
				new MM("min:", false, "public min: other = (\r	^self < other ifTrue: [ self ] ifFalse: [ other ]\r)"),
				new MM("printString", false, "public printString = (\r	^js call: (js propertyOf: self at: (js literal: 'toString')) with: {}\r)"),
				new MM("quo:", false, "public quo: other = (\r	^(self / other) truncated\r)"),
				new MM("rem:", false, "public rem: other = (\r	^self - ((self quo: other) * other)\r)"),
				new MM("sign", false, "public sign = (\r	self > 0 ifTrue: [^1].\r	self < 0 ifTrue: [^-1].\r	^0\r)"),
				new MM("sin", false, "public sin = (\r	^js call: (js propertyOf: (js ident: 'Math') at: (js literal: 'sin')) with: {self}\r)"),
				new MM("sqrt", false, "public sqrt = (\r	^js call: (js propertyOf: (js ident: 'Math') at: (js literal: 'sqrt')) with: {self}\r)"),
				new MM("tan", false, "public tan = (\r	^js call: (js propertyOf: (js ident: 'Math') at: (js literal: 'tan')) with: {self}\r)"),
				new MM("timesRepeat:", false, "public timesRepeat: block = (\r	| i ::= 0. |	\r	js \r		for: (js verbatim: '')\r		while: (js operator: '<' with: i and: (js ident: 'this')) \r		step: (js postfixOperator: '++' on: i)\r		do: (js block: {js call: block with: {}})\r)"),
				new MM("to:", false, "public to: stop = (\r	^platform collections Interval from: self to: stop\r)"),
				new MM("to:do:", false, "public to: limit do: block = (\r	| i ::= self. |	\r	js \r		for: (js verbatim: '')\r		while: (js operator: '<=' with: i and: limit) \r		step: (js postfixOperator: '++' on: i)\r		do: (js block: {js call: block with: {i}})\r)"),
				new MM("truncated", false, "public truncated = (\r	(* ^self > 0 ifTrue: [self floor] ifFalse: [self ceiling] *)\r	^js operator: '|' with: self and: (js literal: 0)\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$KernelForV8$Number = (function () {
				var self = this;
				self.$super$KernelForV8$Number$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$KernelForV8$Number();
				return self;
			});
			this.$$times = (function ($other) {
				var self = this;
				return self * $other;
			});
			this.$$times$times = (function ($exponent) {
				var self = this;
				return Math.pow(self, $exponent);
			});
			this.$$plus = (function ($other) {
				var self = this;
				return self + $other;
			});
			this.$$minus = (function ($other) {
				var self = this;
				return self - $other;
			});
			this.$$over = (function ($other) {
				var self = this;
				return self / $other;
			});
			this.$$over$over = (function ($other) {
				var self = this;
				return (self / $other).$floor();
			});
			this.$$less = (function ($other) {
				var self = this;
				return self < $other;
			});
			this.$$less$less = (function ($other) {
				var self = this;
				return self << $other;
			});
			this.$$less$equal = (function ($other) {
				var self = this;
				return self <= $other;
			});
			this.$$equal = (function ($other) {
				var self = this;
				return self === $other;
			});
			this.$$greater = (function ($other) {
				var self = this;
				return self > $other;
			});
			this.$$greater$equal = (function ($other) {
				var self = this;
				return self >= $other;
			});
			this.$$greater$greater = (function ($other) {
				var self = this;
				return self >> $other;
			});
			this.$$at = (function ($y) {
				var self = this;
				return self.$enclosingObjects$KernelForV8$Number[0]._$platform().$graphics().$Point().$x$y$(self, $y);
			});
			this.$$back$back = (function ($other) {
				var self = this;
				return self - (self._$$over$over($other) * $other);
			});
			this.$abs = (function () {
				var self = this;
				if (self >= 0) {
					return self;
				} else {
					return -1 * self;
				};
				return self;
			});
			this.$asFloat = (function () {
				var self = this;
				return self * 1;
			});
			this.$asInteger = (function () {
				var self = this;
				return self._$truncated();
			});
			this.$asString = (function () {
				var self = this;
				return self.toString();
			});
			this.$between$and$ = (function ($min, $max) {
				var self = this;
				return self._$$less$equal($max) && self._$$greater$equal($min);
			});
			this.$bitAnd$ = (function ($other) {
				var self = this;
				return self & $other;
			});
			this.$bitInvert = (function () {
				var self = this;
				return -1 - self;
			});
			this.$bitOr$ = (function ($other) {
				var self = this;
				return self | $other;
			});
			this.$bitXor$ = (function ($other) {
				var self = this;
				return self ^ $other;
			});
			this.$ceiling = (function () {
				var self = this;
				return Math.ceil(self);
			});
			this.$cos = (function () {
				var self = this;
				return Math.cos(self);
			});
			this.$exp = (function () {
				var self = this;
				return Math.exp(self);
			});
			this.$floor = (function () {
				var self = this;
				return Math.floor(self);
			});
			this.$hash = (function () {
				var self = this;
				return self._$rem$(16777215);
			});
			this.$isNumber = (function () {
				var self = this;
				return true;
			});
			this.$ln = (function () {
				var self = this;
				return Math.log(self);
			});
			this.$max$ = (function ($other) {
				var self = this;
				return self._$$greater($other).$ifTrue$ifFalse$((function () {
					return self;
				}), (function () {
					return $other;
				}));
			});
			this.$min$ = (function ($other) {
				var self = this;
				return self._$$less($other).$ifTrue$ifFalse$((function () {
					return self;
				}), (function () {
					return $other;
				}));
			});
			this.$printString = (function () {
				var self = this;
				return self.toString();
			});
			this.$quo$ = (function ($other) {
				var self = this;
				return (self / $other).$truncated();
			});
			this.$rem$ = (function ($other) {
				var self = this;
				return self - (self._$quo$($other) * $other);
			});
			this.$sign = (function () {
				var self = this;
				if (self > 0) {
					return 1;
				} else {
					nil;
				};
				if (self < 0) {
					return -1;
				} else {
					nil;
				};
				return 0;
			});
			this.$sin = (function () {
				var self = this;
				return Math.sin(self);
			});
			this.$sqrt = (function () {
				var self = this;
				return Math.sqrt(self);
			});
			this.$tan = (function () {
				var self = this;
				return Math.tan(self);
			});
			this.$timesRepeat$ = (function ($block) {
				var self = this;
				var $i = nil;
				$i = 0;
				for (; $i < this; $i++) {
					$block();
				};
				return self;
			});
			this.$to$ = (function ($stop) {
				var self = this;
				return self.$enclosingObjects$KernelForV8$Number[0]._$platform().$collections().$Interval().$from$to$(self, $stop);
			});
			this.$to$do$ = (function ($limit, $block) {
				var self = this;
				var $i = nil;
				$i = self;
				for (; $i <= $limit; $i++) {
					$block($i);
				};
				return self;
			});
			this.$truncated = (function () {
				var self = this;
				return self | 0;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for KernelForV8`Number";
					this._$superInit$KernelForV8$Number = $.$superInit$KernelForV8$Number;
					this.$superInit$KernelForV8$Number = dnuCatcher("$superInit$KernelForV8$Number");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$$times = this._$$times = $.$$times;
					this.$$times$times = this._$$times$times = $.$$times$times;
					this.$$plus = this._$$plus = $.$$plus;
					this.$$minus = this._$$minus = $.$$minus;
					this.$$over = this._$$over = $.$$over;
					this.$$over$over = this._$$over$over = $.$$over$over;
					this.$$less = this._$$less = $.$$less;
					this.$$less$less = this._$$less$less = $.$$less$less;
					this.$$less$equal = this._$$less$equal = $.$$less$equal;
					this.$$equal = this._$$equal = $.$$equal;
					this.$$greater = this._$$greater = $.$$greater;
					this.$$greater$equal = this._$$greater$equal = $.$$greater$equal;
					this.$$greater$greater = this._$$greater$greater = $.$$greater$greater;
					this.$$at = this._$$at = $.$$at;
					this.$$back$back = this._$$back$back = $.$$back$back;
					this.$abs = this._$abs = $.$abs;
					this.$asFloat = this._$asFloat = $.$asFloat;
					this.$asInteger = this._$asInteger = $.$asInteger;
					this.$asString = this._$asString = $.$asString;
					this.$between$and$ = this._$between$and$ = $.$between$and$;
					this.$bitAnd$ = this._$bitAnd$ = $.$bitAnd$;
					this.$bitInvert = this._$bitInvert = $.$bitInvert;
					this.$bitOr$ = this._$bitOr$ = $.$bitOr$;
					this.$bitXor$ = this._$bitXor$ = $.$bitXor$;
					this.$ceiling = this._$ceiling = $.$ceiling;
					this.$cos = this._$cos = $.$cos;
					this.$exp = this._$exp = $.$exp;
					this.$floor = this._$floor = $.$floor;
					this.$hash = this._$hash = $.$hash;
					this.$isNumber = this._$isNumber = $.$isNumber;
					this.$ln = this._$ln = $.$ln;
					this.$max$ = this._$max$ = $.$max$;
					this.$min$ = this._$min$ = $.$min$;
					this.$printString = this._$printString = $.$printString;
					this.$quo$ = this._$quo$ = $.$quo$;
					this.$rem$ = this._$rem$ = $.$rem$;
					this.$sign = this._$sign = $.$sign;
					this.$sin = this._$sin = $.$sin;
					this.$sqrt = this._$sqrt = $.$sqrt;
					this.$tan = this._$tan = $.$tan;
					this.$timesRepeat$ = this._$timesRepeat$ = $.$timesRepeat$;
					this.$to$ = this._$to$ = $.$to$;
					this.$to$do$ = this._$to$do$ = $.$to$do$;
					this.$truncated = this._$truncated = $.$truncated;
					this.$enclosingObjects$KernelForV8$Number = enclosingObjects;
					this.$super$KernelForV8$Number$slot = runtimeSuperclass;
					this["KernelForV8`Number"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["KernelForV8`Number"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for KernelForV8`Number";
				this.slots = [];
				this.methods = [new MM("uninstantiable", true, null)];
				this.nestedClasses = [];
				this.$uninstantiable = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for KernelForV8`Number";
						this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
						this.$enclosingObjects$KernelForV8$Number = enclosingObjects;
						this.$super$KernelForV8$Number = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$KernelForV8$Object = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for KernelForV8`Object";
			this.name = "KernelForV8`Object";
			this.header = "Object = ImplementationBase ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`KernelForV8`Object", true, "ImplementationBase"),
				new MM("instance`initializer", true, "ImplementationBase"),
				new MM("=", false, "public = other = (\r	^js operator: '===' with: self and: other\r)"),
				new MM("==", false, "public == other = (\r	^js operator: '===' with: self and: other\r)"),
				new MM("Array", false, "Array = (\r	^outer KernelForV8 Array\r)"),
				new MM("Character", false, "Character = (\r	^outer KernelForV8 String\r)"),
				new MM("Error", false, "Error = (\r	^outer KernelForV8 Error\r)"),
				new MM("Future", false, "Future = (\r	^outer KernelForV8 Future\r)"),
				new MM("Object", false, "Object = (\r	^outer KernelForV8 Object\r)"),
				new MM("String", false, "String = (\r	^outer KernelForV8 String\r)"),
				new MM("assert:message:", false, "assert: condition <[Boolean]> message: message = (\r	(* Raises an error with the given message if and only if condition evaluates to false. *)\r	condition isBlock ifFalse: [Error signal: 'Block required'].\r	condition value ifFalse: [Error signal: 'Assertion failed: ', message]\r)"),
				new MM("class", false, "protected class = (\r	^js propertyOf: (js ident: 'this') at: (js literal: 'newspeakClass')\r)"),
				new MM("clone", false, "public clone = (\r	| originalProto cloneConstructor newObject propNames |\r	originalProto:: js call: (js propertyOf: (js ident: 'Object') at: (js literal: 'getPrototypeOf')) with: {self}.\r	cloneConstructor:: js functionOf: {} body: (js block: {}).\r	js assign: (js propertyOf: cloneConstructor at: (js literal: 'prototype')) toBe: originalProto.\r	newObject:: js new: cloneConstructor with: {}.\r	propNames:: js call: (js propertyOf: (js ident: 'Object') at: (js literal: 'getOwnPropertyNames')) with: {self}.\r	js call: (js propertyOf: propNames at: (js literal: 'forEach')) with: {js functionOf: {'name'} body: (js block: {\r		js assign: (js propertyOf: newObject at: (js ident: 'name'))\r			toBe: (js propertyOf: self at: (js ident: 'name'))\r	})}.\r	^newObject\r)"),
				new MM("doesNotUnderstand:", false, "protected doesNotUnderstand: message = (\r	((message selector startsWith: 'is') and: [message arguments size = 0])\r		ifTrue: [^false].\r	^(MessageNotUnderstood receiver: self message: message) signal\r)"),
				new MM("hash", false, "public hash = (\r	^self identityHash\r)"),
				new MM("identityHash", false, "public identityHash = (\r	(* It might be worth giving every object the hashCode field at instantiation to avoid map transitions. *)\r	js verbatim: 'while(this.hashCode === 0) this.hashCode = Math.random() * 0x3FFFFFF | 0'.\r	^js verbatim: 'this.hashCode'\r)"),
				new MM("ifNil:", false, "public ifNil: nilBlock = (\r	^self\r)"),
				new MM("ifNil:ifNotNil:", false, "public ifNil: nilBlock ifNotNil: notNilBlock = (\r	^notNilBlock value: self\r)"),
				new MM("ifNotNil:", false, "public ifNotNil: nonNilBlock = (\r	^nonNilBlock value: self\r)"),
				new MM("isAlien", false, "public isAlien = (\r	^false\r)"),
				new MM("isBlock", false, "public isBlock = (\r	^false\r)"),
				new MM("isExpat", false, "public isExpat = (\r	^false\r)"),
				new MM("isFuture", false, "public isFuture = (\r	^false\r)"),
				new MM("isNil", false, "public isNil = (\r	^false\r)"),
				new MM("notNil", false, "public notNil = (\r	^true\r)"),
				new MM("out", false, "public out = (\r	print: self\r)"),
				new MM("print:", false, "public print: obj = (\r	js ternaryIf: ((js prefixOperator: 'typeof ' on: (js ident: 'console')) == 'undefined')\r	then: (js call: (js ident: 'print') with: {obj printString})\r	else: (js call: (js propertyOf: (js ident: 'console') at: (js literal: 'log')) with: {obj printString})\r)"),
				new MM("printString", false, "public printString = (\r	^'instance of ', self class name\r)"),
				new MM("yourself", false, "public yourself = (\r	^self\r)"),
				new MM("~=", false, "public ~= other = (\r	^(self = other) not\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$KernelForV8$Object = (function () {
				var self = this;
				self.$super$KernelForV8$Object$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$KernelForV8$Object();
				return self;
			});
			this.$$equal = (function ($other) {
				var self = this;
				return self === $other;
			});
			this.$$equal$equal = (function ($other) {
				var self = this;
				return self === $other;
			});
			this.$Array = (function () {
				var self = this;
				return self.$enclosingObjects$KernelForV8$Object[0]._$Array();
			});
			this.$Character = (function () {
				var self = this;
				return self.$enclosingObjects$KernelForV8$Object[0]._$String();
			});
			this.$Error = (function () {
				var self = this;
				return self.$enclosingObjects$KernelForV8$Object[0]._$Error();
			});
			this.$Future = (function () {
				var self = this;
				return self.$enclosingObjects$KernelForV8$Object[0]._$Future();
			});
			this.$Object = (function () {
				var self = this;
				return self.$enclosingObjects$KernelForV8$Object[0]._$Object();
			});
			this.$String = (function () {
				var self = this;
				return self.$enclosingObjects$KernelForV8$Object[0]._$String();
			});
			this.$assert$message$ = (function ($condition, $message) {
				var self = this;
				if (!$condition.$isBlock()) {
					self._$Error().$signal$("Block required");
				} else {
					nil;
				};
				if (!$condition.$value()) {
					self._$Error().$signal$(("Assertion failed: ").$$comma($message));
				} else {
					nil;
				};
				return self;
			});
			this.$class = (function () {
				var self = this;
				return this.newspeakClass;
			});
			this.$clone = (function () {
				var self = this;
				var $originalProto = nil;
				var $cloneConstructor = nil;
				var $newObject = nil;
				var $propNames = nil;
				$originalProto = Object.getPrototypeOf(self);
				$cloneConstructor = (function () {});
				$cloneConstructor.prototype = $originalProto;
				$newObject = new $cloneConstructor();
				$propNames = Object.getOwnPropertyNames(self);
				$propNames.forEach((function (name) {
					$newObject[name] = self[name];
				}));
				return $newObject;
			});
			this.$doesNotUnderstand$ = (function ($message) {
				var self = this;
				if ($message.$selector().$startsWith$("is") && $message.$arguments().$size().$$equal(0)) {
					return false;
				} else {
					nil;
				};
				return self.$enclosingObjects$KernelForV8$Object[0]._$MessageNotUnderstood().$receiver$message$(self, $message).$signal();
			});
			this.$hash = (function () {
				var self = this;
				return self._$identityHash();
			});
			this.$identityHash = (function () {
				var self = this;
				while(this.hashCode === 0) this.hashCode = Math.random() * 0x3FFFFFF | 0;
				return this.hashCode;
			});
			this.$ifNil$ = (function ($nilBlock) {
				var self = this;
				return self;
			});
			this.$ifNil$ifNotNil$ = (function ($nilBlock, $notNilBlock) {
				var self = this;
				return $notNilBlock.$value$(self);
			});
			this.$ifNotNil$ = (function ($nonNilBlock) {
				var self = this;
				return $nonNilBlock.$value$(self);
			});
			this.$isAlien = (function () {
				var self = this;
				return false;
			});
			this.$isBlock = (function () {
				var self = this;
				return false;
			});
			this.$isExpat = (function () {
				var self = this;
				return false;
			});
			this.$isFuture = (function () {
				var self = this;
				return false;
			});
			this.$isNil = (function () {
				var self = this;
				return false;
			});
			this.$notNil = (function () {
				var self = this;
				return true;
			});
			this.$out = (function () {
				var self = this;
				self._$print$(self);
				return self;
			});
			this.$print$ = (function ($obj) {
				var self = this;
				(typeof console === "undefined" ? print($obj.$printString()) : console.log($obj.$printString()));
				return self;
			});
			this.$printString = (function () {
				var self = this;
				return ("instance of ").$$comma(self._$class().$name());
			});
			this.$yourself = (function () {
				var self = this;
				return self;
			});
			this.$$tilde$equal = (function ($other) {
				var self = this;
				return self._$$equal($other).$not();
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for KernelForV8`Object";
					this._$superInit$KernelForV8$Object = $.$superInit$KernelForV8$Object;
					this.$superInit$KernelForV8$Object = dnuCatcher("$superInit$KernelForV8$Object");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$$equal = this._$$equal = $.$$equal;
					this.$$equal$equal = this._$$equal$equal = $.$$equal$equal;
					this._$Array = $.$Array;
					this.$Array = dnuCatcher("$Array");
					this._$Character = $.$Character;
					this.$Character = dnuCatcher("$Character");
					this._$Error = $.$Error;
					this.$Error = dnuCatcher("$Error");
					this._$Future = $.$Future;
					this.$Future = dnuCatcher("$Future");
					this._$Object = $.$Object;
					this.$Object = dnuCatcher("$Object");
					this._$String = $.$String;
					this.$String = dnuCatcher("$String");
					this._$assert$message$ = $.$assert$message$;
					this.$assert$message$ = dnuCatcher("$assert$message$");
					this._$class = $.$class;
					this.$class = dnuCatcher("$class");
					this.$clone = this._$clone = $.$clone;
					this._$doesNotUnderstand$ = $.$doesNotUnderstand$;
					this.$doesNotUnderstand$ = dnuCatcher("$doesNotUnderstand$");
					this.dnu = $.$doesNotUnderstand$;
					this.$hash = this._$hash = $.$hash;
					this.$identityHash = this._$identityHash = $.$identityHash;
					this.$ifNil$ = this._$ifNil$ = $.$ifNil$;
					this.$ifNil$ifNotNil$ = this._$ifNil$ifNotNil$ = $.$ifNil$ifNotNil$;
					this.$ifNotNil$ = this._$ifNotNil$ = $.$ifNotNil$;
					this.$isAlien = this._$isAlien = $.$isAlien;
					this.$isBlock = this._$isBlock = $.$isBlock;
					this.$isExpat = this._$isExpat = $.$isExpat;
					this.$isFuture = this._$isFuture = $.$isFuture;
					this.$isNil = this._$isNil = $.$isNil;
					this.$notNil = this._$notNil = $.$notNil;
					this.$out = this._$out = $.$out;
					this.$print$ = this._$print$ = $.$print$;
					this.$printString = this._$printString = $.$printString;
					this.$yourself = this._$yourself = $.$yourself;
					this.$$tilde$equal = this._$$tilde$equal = $.$$tilde$equal;
					this.$enclosingObjects$KernelForV8$Object = enclosingObjects;
					this.$super$KernelForV8$Object$slot = runtimeSuperclass;
					this["KernelForV8`Object"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["KernelForV8`Object"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for KernelForV8`Object";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for KernelForV8`Object";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$KernelForV8$Object = enclosingObjects;
						this.$super$KernelForV8$Object = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$KernelForV8$String = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for KernelForV8`String";
			this.name = "KernelForV8`String";
			this.header = "String uninstantiable = ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`KernelForV8`String", true, " "),
				new MM("instance`initializer", true, " "),
				new MM(",", false, "public , other = (\r	^js call: (js propertyOf: self at: (js literal: 'concat')) with: {other}\r)"),
				new MM("<=", false, "public <= other = (\r	^js operator: '<=' with: self and: other\r)"),
				new MM("=", false, "public = other = (\r	^js operator: '===' with: self and: other\r)"),
				new MM(">=", false, "public >= other = (\r	^js operator: '>=' with: self and: other\r)"),
				new MM("asNumber", false, "public asNumber = (\r	^js call: (js ident: 'parseInt') with: {self}\r)"),
				new MM("asString", false, "public asString = (\r	^self\r)"),
				new MM("asSymbol", false, "public asSymbol = (\r	^self\r)"),
				new MM("at:", false, "public at: index = (\r	^js propertyOf: (js ident: 'this') at: (js operator: '-' with: index and: (js literal: 1))\r)"),
				new MM("at:put:", false, "public at: index put: value = (\r	^js assign: (js propertyOf: (js ident: 'this') at: (js operator: '-' with: index and: (js literal: 1)))\r	 toBe: value\r)"),
				new MM("beginsWith:", false, "public beginsWith: substring = (\r	^js operator: '==' with: (js literal: 0) and: (js call: (js propertyOf: self at: (js literal: 'indexOf')) with: {substring})\r)"),
				new MM("between:and:", false, "public between: min and: max = (\r	^self <= max and: [ self >= min ]\r)"),
				new MM("charCode", false, "public charCode = (\r	#BOGUS.\r	^js verbatim: 'this.charCodeAt(0)'\r)"),
				new MM("class", false, "protected class = (\r	^String\r)"),
				new MM("copyFrom:to:", false, "public copyFrom: start to: end = (\r	^js call: (js propertyOf: self at: (js literal: 'substring')) with: {start - 1. end}\r)"),
				new MM("do:", false, "public do: action = (\r	|\r	i ::= 0.\r	len ::= js verbatim: 'this.length'.\r	|\r	js\r		for: (js verbatim: '')\r		while: (js operator: '<' with: i and: len)\r		step: (js postfixOperator: '++' on: i)\r		do: (js block: {\r			js call: action with: {js propertyOf: self at: i}}).\r)"),
				new MM("first", false, "public first = (\r	^self at: 1\r)"),
				new MM("hash", false, "public hash = (\r	js var: 'l' value: (js propertyOf: (js ident: 'this') at: (js literal: 'length')).\r	^js ternaryIf: (js operator: '==' with: (js ident: 'l') and: (js literal: 0))\r		then: (js literal: 0)\r		else: (js verbatim: '(l * 32 ^ this.charCodeAt(0)) * 32 ^ this.charCodeAt(l - 1)')\r)"),
				new MM("identityHash", false, "public identityHash = (\r	^self hash\r)"),
				new MM("includes:", false, "public includes: object = (\r	self do: [:element | object = element ifTrue: [^true]].\r	^false.	\r)"),
				new MM("inject:into:", false, "public inject: initialValue <X> into: foldBlock <[:X def :E | X]> ^<X> = (\r	| runningValue <X> |\r	runningValue:: initialValue.\r	self do: [:element <X> | runningValue:: foldBlock value: runningValue value: element].\r	^runningValue\r)"),
				new MM("isString", false, "public isString = (\r	^true\r)"),
				new MM("last", false, "public last = (\r	^self at: self size\r)"),
				new MM("printString", false, "public printString = (\r	^js verbatim: '\"''\"+this.toString()+\"''\"'\r)"),
				new MM("replaceAll:with:", false, "public replaceAll: substring with: newSubstring = (\r	#BOGUS. (* Ought to be able to say this.replace(target, replacement, 'g'). *)\r	js var: 'target' value: substring.\r	js var: 'replacement' value: newSubstring.\r	^js verbatim: 'this.replace(new RegExp(target.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\"), \"g\"), replacement)'\r)"),
				new MM("size", false, "public size = (\r	^js verbatim: 'this.length'\r)"),
				new MM("splitBy:", false, "public splitBy: str = (\r	^js call: (js propertyOf: self at: (js literal: 'split')) with: {str}\r)"),
				new MM("startsWith:", false, "public startsWith: substring = (\r	^js operator: '==' with: (js literal: 0) and: (js call: (js propertyOf: self at: (js literal: 'indexOf')) with: {substring})\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$KernelForV8$String = (function () {
				var self = this;
				self.$super$KernelForV8$String$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$KernelForV8$String();
				return self;
			});
			this.$$comma = (function ($other) {
				var self = this;
				return self.concat($other);
			});
			this.$$less$equal = (function ($other) {
				var self = this;
				return self <= $other;
			});
			this.$$equal = (function ($other) {
				var self = this;
				return self === $other;
			});
			this.$$greater$equal = (function ($other) {
				var self = this;
				return self >= $other;
			});
			this.$asNumber = (function () {
				var self = this;
				return parseInt(self);
			});
			this.$asString = (function () {
				var self = this;
				return self;
			});
			this.$asSymbol = (function () {
				var self = this;
				return self;
			});
			this.$at$ = (function ($index) {
				var self = this;
				return this[$index - 1];
			});
			this.$at$put$ = (function ($index, $value) {
				var self = this;
				return this[$index - 1] = $value;
			});
			this.$beginsWith$ = (function ($substring) {
				var self = this;
				return 0 == self.indexOf($substring);
			});
			this.$between$and$ = (function ($min, $max) {
				var self = this;
				return self._$$less$equal($max) && self._$$greater$equal($min);
			});
			this.$charCode = (function () {
				var self = this;
				"BOGUS";
				return this.charCodeAt(0);
			});
			this.$class = (function () {
				var self = this;
				return self.$enclosingObjects$KernelForV8$String[0]._$String();
			});
			this.$copyFrom$to$ = (function ($start, $end) {
				var self = this;
				return self.substring($start - 1, $end);
			});
			this.$do$ = (function ($action) {
				var self = this;
				var $i = nil;
				var $len = nil;
				$i = 0;
				$len = this.length;
				for (; $i < $len; $i++) {
					$action(self[$i]);
				};
				return self;
			});
			this.$first = (function () {
				var self = this;
				return self._$at$(1);
			});
			this.$hash = (function () {
				var self = this;
				var l = this.length;
				return (l == 0 ? 0 : (l * 32 ^ this.charCodeAt(0)) * 32 ^ this.charCodeAt(l - 1));
			});
			this.$identityHash = (function () {
				var self = this;
				return self._$hash();
			});
			this.$includes$ = (function ($object) {
				var self = this;
				var NLR = new Object();
				try {
					self._$do$((function ($element) {
						return $object.$$equal($element).$ifTrue$((function () {
							{
								NLR.value = true;
								throw NLR;
							};
						}));
					}));
					return false;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$inject$into$ = (function ($initialValue, $foldBlock) {
				var self = this;
				var $runningValue = nil;
				$runningValue = $initialValue;
				self._$do$((function ($element) {
					return $runningValue = $foldBlock.$value$value$($runningValue, $element);
				}));
				return $runningValue;
			});
			this.$isString = (function () {
				var self = this;
				return true;
			});
			this.$last = (function () {
				var self = this;
				return self._$at$(self._$size());
			});
			this.$printString = (function () {
				var self = this;
				return "'"+this.toString()+"'";
			});
			this.$replaceAll$with$ = (function ($substring, $newSubstring) {
				var self = this;
				"BOGUS";
				var target = $substring;
				var replacement = $newSubstring;
				return this.replace(new RegExp(target.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), replacement);
			});
			this.$size = (function () {
				var self = this;
				return this.length;
			});
			this.$splitBy$ = (function ($str) {
				var self = this;
				return self.split($str);
			});
			this.$startsWith$ = (function ($substring) {
				var self = this;
				return 0 == self.indexOf($substring);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for KernelForV8`String";
					this._$superInit$KernelForV8$String = $.$superInit$KernelForV8$String;
					this.$superInit$KernelForV8$String = dnuCatcher("$superInit$KernelForV8$String");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$$comma = this._$$comma = $.$$comma;
					this.$$less$equal = this._$$less$equal = $.$$less$equal;
					this.$$equal = this._$$equal = $.$$equal;
					this.$$greater$equal = this._$$greater$equal = $.$$greater$equal;
					this.$asNumber = this._$asNumber = $.$asNumber;
					this.$asString = this._$asString = $.$asString;
					this.$asSymbol = this._$asSymbol = $.$asSymbol;
					this.$at$ = this._$at$ = $.$at$;
					this.$at$put$ = this._$at$put$ = $.$at$put$;
					this.$beginsWith$ = this._$beginsWith$ = $.$beginsWith$;
					this.$between$and$ = this._$between$and$ = $.$between$and$;
					this.$charCode = this._$charCode = $.$charCode;
					this._$class = $.$class;
					this.$class = dnuCatcher("$class");
					this.$copyFrom$to$ = this._$copyFrom$to$ = $.$copyFrom$to$;
					this.$do$ = this._$do$ = $.$do$;
					this.$first = this._$first = $.$first;
					this.$hash = this._$hash = $.$hash;
					this.$identityHash = this._$identityHash = $.$identityHash;
					this.$includes$ = this._$includes$ = $.$includes$;
					this.$inject$into$ = this._$inject$into$ = $.$inject$into$;
					this.$isString = this._$isString = $.$isString;
					this.$last = this._$last = $.$last;
					this.$printString = this._$printString = $.$printString;
					this.$replaceAll$with$ = this._$replaceAll$with$ = $.$replaceAll$with$;
					this.$size = this._$size = $.$size;
					this.$splitBy$ = this._$splitBy$ = $.$splitBy$;
					this.$startsWith$ = this._$startsWith$ = $.$startsWith$;
					this.$enclosingObjects$KernelForV8$String = enclosingObjects;
					this.$super$KernelForV8$String$slot = runtimeSuperclass;
					this["KernelForV8`String"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["KernelForV8`String"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for KernelForV8`String";
				this.slots = [];
				this.methods = [
					new MM("uninstantiable", true, null),
					new MM("cr", false, "public cr = (\r	^js verbatim: '\"\\r\"'\r)"),
					new MM("fromCharCode:", false, "public fromCharCode: unicodeValue = (\r	^js call: (js propertyOf: (js ident: 'String') at: (js literal: 'fromCharCode')) with: {unicodeValue}\r)"),
					new MM("lf", false, "public lf = (\r	^js verbatim: '\"\\n\"'\r)"),
					new MM("tab", false, "public tab = (\r	^js verbatim: '\"\\t\"'\r)"),
					new MM("withAll:", false, "public withAll: characters = (\r	^js call: (js propertyOf: characters asArray at: (js literal: 'join')) with: {js literal: ''}\r)")
				];
				this.nestedClasses = [];
				this.$uninstantiable = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$cr = (function () {
					var self = this;
					return "\r";
				});
				this.$fromCharCode$ = (function ($unicodeValue) {
					var self = this;
					return String.fromCharCode($unicodeValue);
				});
				this.$lf = (function () {
					var self = this;
					return "\n";
				});
				this.$tab = (function () {
					var self = this;
					return "\t";
				});
				this.$withAll$ = (function ($characters) {
					var self = this;
					return $characters.$asArray().join("");
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for KernelForV8`String";
						this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
						this.$cr = this._$cr = $.$cr;
						this.$fromCharCode$ = this._$fromCharCode$ = $.$fromCharCode$;
						this.$lf = this._$lf = $.$lf;
						this.$tab = this._$tab = $.$tab;
						this.$withAll$ = this._$withAll$ = $.$withAll$;
						this.$enclosingObjects$KernelForV8$String = enclosingObjects;
						this.$super$KernelForV8$String = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$KernelForV8$UndefinedObject = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for KernelForV8`UndefinedObject";
			this.name = "KernelForV8`UndefinedObject";
			this.header = "UndefinedObject uninstantiable = ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`KernelForV8`UndefinedObject", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("ifNil:", false, "public ifNil: nilBlock = (\r	^nilBlock value\r)"),
				new MM("ifNil:ifNotNil:", false, "public ifNil: nilBlock ifNotNil: notNilBlock = (\r	^nilBlock value\r)"),
				new MM("ifNotNil:", false, "public ifNotNil: notNilBlock = (\r	^self\r)"),
				new MM("isNil", false, "public isNil = (\r	^true\r)"),
				new MM("notNil", false, "public notNil = (\r	^false\r)"),
				new MM("printString", false, "public printString = (\r	^'nil'\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$KernelForV8$UndefinedObject = (function () {
				var self = this;
				self.$super$KernelForV8$UndefinedObject$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$KernelForV8$UndefinedObject();
				return self;
			});
			this.$ifNil$ = (function ($nilBlock) {
				var self = this;
				return $nilBlock.$value();
			});
			this.$ifNil$ifNotNil$ = (function ($nilBlock, $notNilBlock) {
				var self = this;
				return $nilBlock.$value();
			});
			this.$ifNotNil$ = (function ($notNilBlock) {
				var self = this;
				return self;
			});
			this.$isNil = (function () {
				var self = this;
				return true;
			});
			this.$notNil = (function () {
				var self = this;
				return false;
			});
			this.$printString = (function () {
				var self = this;
				return "nil";
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for KernelForV8`UndefinedObject";
					this._$superInit$KernelForV8$UndefinedObject = $.$superInit$KernelForV8$UndefinedObject;
					this.$superInit$KernelForV8$UndefinedObject = dnuCatcher("$superInit$KernelForV8$UndefinedObject");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$ifNil$ = this._$ifNil$ = $.$ifNil$;
					this.$ifNil$ifNotNil$ = this._$ifNil$ifNotNil$ = $.$ifNil$ifNotNil$;
					this.$ifNotNil$ = this._$ifNotNil$ = $.$ifNotNil$;
					this.$isNil = this._$isNil = $.$isNil;
					this.$notNil = this._$notNil = $.$notNil;
					this.$printString = this._$printString = $.$printString;
					this.$enclosingObjects$KernelForV8$UndefinedObject = enclosingObjects;
					this.$super$KernelForV8$UndefinedObject$slot = runtimeSuperclass;
					this["KernelForV8`UndefinedObject"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["KernelForV8`UndefinedObject"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for KernelForV8`UndefinedObject";
				this.slots = [];
				this.methods = [new MM("uninstantiable", true, null)];
				this.nestedClasses = [];
				this.$uninstantiable = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for KernelForV8`UndefinedObject";
						this.$uninstantiable = this._$uninstantiable = $.$uninstantiable;
						this.$enclosingObjects$KernelForV8$UndefinedObject = enclosingObjects;
						this.$super$KernelForV8$UndefinedObject = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$KernelForV8$Array.enclosingMixin = this;
		this.$KernelForV8$Block.enclosingMixin = this;
		this.$KernelForV8$Boolean.enclosingMixin = this;
		this.$KernelForV8$Class.enclosingMixin = this;
		this.$KernelForV8$Error.enclosingMixin = this;
		this.$KernelForV8$Future.enclosingMixin = this;
		this.$KernelForV8$Message.enclosingMixin = this;
		this.$KernelForV8$MessageNotUnderstood.enclosingMixin = this;
		this.$KernelForV8$Metaclass.enclosingMixin = this;
		this.$KernelForV8$Mixin.enclosingMixin = this;
		this.$KernelForV8$Number.enclosingMixin = this;
		this.$KernelForV8$Object.enclosingMixin = this;
		this.$KernelForV8$String.enclosingMixin = this;
		this.$KernelForV8$UndefinedObject.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for KernelForV8";
				this._$superInit$KernelForV8 = $.$superInit$KernelForV8;
				this.$superInit$KernelForV8 = dnuCatcher("$superInit$KernelForV8");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this.$MutableString = this._$MutableString = $.$MutableString;
				this._$augment$withPropertiesOf$ = $.$augment$withPropertiesOf$;
				this.$augment$withPropertiesOf$ = dnuCatcher("$augment$withPropertiesOf$");
				this.$augmentPrototypes = this._$augmentPrototypes = $.$augmentPrototypes;
				this.$Array = this._$Array = $.$Array;
				this.$Block = this._$Block = $.$Block;
				this.$Boolean = this._$Boolean = $.$Boolean;
				this.$Class = this._$Class = $.$Class;
				this.$Error = this._$Error = $.$Error;
				this.$Future = this._$Future = $.$Future;
				this.$Message = this._$Message = $.$Message;
				this.$MessageNotUnderstood = this._$MessageNotUnderstood = $.$MessageNotUnderstood;
				this.$Metaclass = this._$Metaclass = $.$Metaclass;
				this.$Mixin = this._$Mixin = $.$Mixin;
				this.$Number = this._$Number = $.$Number;
				this.$Object = this._$Object = $.$Object;
				this.$String = this._$String = $.$String;
				this.$UndefinedObject = this._$UndefinedObject = $.$UndefinedObject;
				this._$vmmirror = $.$vmmirror;
				this.$vmmirror = dnuCatcher("$vmmirror");
				this._$setOnce$vmmirror$ = $.$setOnce$vmmirror$;
				this.$setOnce$vmmirror$ = dnuCatcher("$setOnce$vmmirror$");
				this.$platform = this._$platform = $.$platform;
				this.$platform$ = this._$platform$ = $.$platform$;
				this.$KernelForV8$Array = this._$KernelForV8$Array = $.$KernelForV8$Array;
				this.$KernelForV8$Array$ = this._$KernelForV8$Array$ = $.$KernelForV8$Array$;
				this.$KernelForV8$Block = this._$KernelForV8$Block = $.$KernelForV8$Block;
				this.$KernelForV8$Block$ = this._$KernelForV8$Block$ = $.$KernelForV8$Block$;
				this.$KernelForV8$Boolean = this._$KernelForV8$Boolean = $.$KernelForV8$Boolean;
				this.$KernelForV8$Boolean$ = this._$KernelForV8$Boolean$ = $.$KernelForV8$Boolean$;
				this.$KernelForV8$Class = this._$KernelForV8$Class = $.$KernelForV8$Class;
				this.$KernelForV8$Class$ = this._$KernelForV8$Class$ = $.$KernelForV8$Class$;
				this.$KernelForV8$Error = this._$KernelForV8$Error = $.$KernelForV8$Error;
				this.$KernelForV8$Error$ = this._$KernelForV8$Error$ = $.$KernelForV8$Error$;
				this.$KernelForV8$Future = this._$KernelForV8$Future = $.$KernelForV8$Future;
				this.$KernelForV8$Future$ = this._$KernelForV8$Future$ = $.$KernelForV8$Future$;
				this.$KernelForV8$Message = this._$KernelForV8$Message = $.$KernelForV8$Message;
				this.$KernelForV8$Message$ = this._$KernelForV8$Message$ = $.$KernelForV8$Message$;
				this.$KernelForV8$MessageNotUnderstood = this._$KernelForV8$MessageNotUnderstood = $.$KernelForV8$MessageNotUnderstood;
				this.$KernelForV8$MessageNotUnderstood$ = this._$KernelForV8$MessageNotUnderstood$ = $.$KernelForV8$MessageNotUnderstood$;
				this.$KernelForV8$Metaclass = this._$KernelForV8$Metaclass = $.$KernelForV8$Metaclass;
				this.$KernelForV8$Metaclass$ = this._$KernelForV8$Metaclass$ = $.$KernelForV8$Metaclass$;
				this.$KernelForV8$Mixin = this._$KernelForV8$Mixin = $.$KernelForV8$Mixin;
				this.$KernelForV8$Mixin$ = this._$KernelForV8$Mixin$ = $.$KernelForV8$Mixin$;
				this.$KernelForV8$Number = this._$KernelForV8$Number = $.$KernelForV8$Number;
				this.$KernelForV8$Number$ = this._$KernelForV8$Number$ = $.$KernelForV8$Number$;
				this.$KernelForV8$Object = this._$KernelForV8$Object = $.$KernelForV8$Object;
				this.$KernelForV8$Object$ = this._$KernelForV8$Object$ = $.$KernelForV8$Object$;
				this.$KernelForV8$String = this._$KernelForV8$String = $.$KernelForV8$String;
				this.$KernelForV8$String$ = this._$KernelForV8$String$ = $.$KernelForV8$String$;
				this.$KernelForV8$UndefinedObject = this._$KernelForV8$UndefinedObject = $.$KernelForV8$UndefinedObject;
				this.$KernelForV8$UndefinedObject$ = this._$KernelForV8$UndefinedObject$ = $.$KernelForV8$UndefinedObject$;
				this.$enclosingObjects$KernelForV8 = enclosingObjects;
				this.$super$KernelForV8$slot = runtimeSuperclass;
				this.KernelForV8 = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$vmmirror$slot = nil;
					this.$platform$slot = nil;
					this.$KernelForV8$Array$slot = nil;
					this.$KernelForV8$Block$slot = nil;
					this.$KernelForV8$Boolean$slot = nil;
					this.$KernelForV8$Class$slot = nil;
					this.$KernelForV8$Error$slot = nil;
					this.$KernelForV8$Future$slot = nil;
					this.$KernelForV8$Message$slot = nil;
					this.$KernelForV8$MessageNotUnderstood$slot = nil;
					this.$KernelForV8$Metaclass$slot = nil;
					this.$KernelForV8$Mixin$slot = nil;
					this.$KernelForV8$Number$slot = nil;
					this.$KernelForV8$Object$slot = nil;
					this.$KernelForV8$String$slot = nil;
					this.$KernelForV8$UndefinedObject$slot = nil;
				});
				this.basicNew = this.KernelForV8;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for KernelForV8";
			this.slots = [];
			this.methods = [new MM("usingVmMirror:", true, null)];
			this.nestedClasses = [];
			this.$usingVmMirror$ = (function ($vmm) {
				return (new this.nonMeta.basicNew()).$instance$initializer($vmm);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for KernelForV8";
					this.$usingVmMirror$ = this._$usingVmMirror$ = $.$usingVmMirror$;
					this.$enclosingObjects$KernelForV8 = enclosingObjects;
					this.$super$KernelForV8 = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$AliensForV8 = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for AliensForV8";
		this.name = "AliensForV8";
		this.header = "AliensForV8 usingPlatform: p = ((* Aliens are a capability-based API for a foreign function interface (FFI). On NS2V8, they allow Newspeak code to invoke JavaScript code and vice versa.\r\rAn Alien is a Newspeak proxy for a JavaScript object. Upon receiving a message, an Alien expatriates the arguments, sends the message to the target JavaScript object, and alienates the result.\r\rAn Expat is a JavaScript proxy for a Newspeak object. Unpon receiving a message, an Expat alienates the arguments, sends the message to the target Newspeak object, and expatriates the result.\r\rA bilingual object is one whose representation is the same in both languages: unwrapped basic types such as numbers, booleans. Note that even though Newspeak and JavaScript closures have the same representation, they are not bilingual and wrapping should occur because Newspeak closures expect Newspeak/Alien arguments and JavaScript closures expect JavaScript/Expat arguments. What about strings and arrays? It would seem we have to wrap arrays because their elements should be alieniated/expatriated. It may be safe to treat strings as bilingual if they always respond to messages with other bilingual objects.\r\rAlien mappings:\ralien sort: a ignored: b ignored: c -> alien.sort(a, b, c)\ralien new: a ignored: b ignored: c  -> new alien(a, b, c)\ralien at: 'a' -> alien.a\ralien at: 'a' put: b -> alien.a = b\r\rExpat mappings:\r?\r\r*)|\rpublic global = Alien wrapping: (js ident: 'theGlobalObject').\r|)";
		this.slots = [
			new SM("global", false, false),
			new SM("AliensForV8`Alien", true, true),
			new SM("AliensForV8`Expat", true, true)
		];
		this.methods = [
			new MM("superInit`AliensForV8", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("alienate:", false, "alienate: jsObj = (\r	#TODO.\r	(js prefixOperator: 'typeof ' on: jsObj) == 'string' ifTrue: [^jsObj].\r	(js prefixOperator: 'typeof ' on: jsObj) == 'number' ifTrue: [^jsObj].\r	(js prefixOperator: 'typeof ' on: jsObj) == 'boolean' ifTrue: [^jsObj].\r	(* This does not discrimate NS vs JS closures *)\r	(js prefixOperator: 'typeof ' on: jsObj) == 'function' ifTrue: [^Alien wrapping: jsObj].\r	(js operator: 'instanceof' with: jsObj and: (js propertyOf: (js propertyOf: Object at: (js literal: 'runtimeClass')) at: (js literal: 'basicNew')))\r		ifTrue:\r			[jsObj isAlien ifTrue: [Error signal: 'Shouldnt be asked to double alienate...'].\r			jsObj isExpat ifTrue: [^jsObj _nsTarget].\r			Error signal: 'Asked to alienate a raw Newspeak object...'].\r	(js operator: 'instanceof' with: jsObj and: (js ident: 'Array'))\r		ifTrue: [Error signal: 'TODO: Support arrays'].\r	^Alien wrapping: jsObj\r)"),
			new MM("copyUntilFirstColon:", false, "copyUntilFirstColon: sel = (\r	#BOGUS. (* DNU does not yet pass unmangled selectors. *)\r	2 to: sel size do: [:i |\r		((sel at: i) = \"$\") ifTrue: [^sel copyFrom: 2 to: i-1]].\r	^sel copyFrom: 2 to: sel size\r)"),
			new MM("expatriate:", false, "expatriate: nsObj = (\r	#TODO.\r	(js prefixOperator: 'typeof ' on: nsObj) == 'string' ifTrue: [^nsObj].\r	(js prefixOperator: 'typeof ' on: nsObj) == 'number' ifTrue: [^nsObj].\r	(js prefixOperator: 'typeof ' on: nsObj) == 'boolean' ifTrue: [^nsObj].\r	(* This does not discrimate NS vs JS closures *)\r	(js prefixOperator: 'typeof ' on: nsObj) == 'function' ifTrue: [^expatriateBlock: nsObj].\r	(js operator: 'instanceof' with: nsObj and: (js propertyOf: (js propertyOf: Object at: (js literal: 'runtimeClass')) at: (js literal: 'basicNew')))\r		ifTrue:\r			[nsObj isAlien ifTrue: [^js propertyOf: nsObj at: (js literal: 'jsTarget')].\r			nsObj isExpat ifTrue: [Error signal: 'Shouldnt be asked to double expatriate...'].\r			^Expat wrapping: nsObj.].\r	(js operator: 'instanceof' with: nsObj and: (js ident: 'Array'))\r		ifTrue: [Error signal: 'TODO: Support arrays'].\r	Error signal: 'Asked to expatriate a raw JS object...'\r)"),
			new MM("expatriateBlock:", false, "expatriateBlock: b = (\r	^js functionOf: {} body: (\r		js return: (\r			expatriate: (\r				b valueWithArguments: (\r					(js verbatim: 'Array.prototype.slice.call(arguments, 0)') collect: [:ea | alienate: ea]))))\r)"),
			new MM("Alien", true, null),
			new MM("Expat", true, null),
			new MM("global", true, null),
			new MM("setOnce`global:", true, null),
			new MM("AliensForV8`Alien", true, null),
			new MM("AliensForV8`Alien:", true, null),
			new MM("AliensForV8`Expat", true, null),
			new MM("AliensForV8`Expat:", true, null)
		];
		this.nestedClasses = [
			"AliensForV8`Alien",
			"AliensForV8`Expat"
		];
		this.applications = [];
		this.$superInit$AliensForV8 = (function ($p) {
			var self = this;
			self.$super$AliensForV8$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($p) {
			var self = this;
			self._$superInit$AliensForV8($p);
			self._$setOnce$global$(self._$Alien().$wrapping$(theGlobalObject));
			return self;
		});
		this.$alienate$ = (function ($jsObj) {
			var self = this;
			"TODO";
			if (typeof $jsObj === "string") {
				return $jsObj;
			} else {
				nil;
			};
			if (typeof $jsObj === "number") {
				return $jsObj;
			} else {
				nil;
			};
			if (typeof $jsObj === "boolean") {
				return $jsObj;
			} else {
				nil;
			};
			if (typeof $jsObj === "function") {
				return self._$Alien().$wrapping$($jsObj);
			} else {
				nil;
			};
			if ($jsObj instanceof self._$Object().runtimeClass.basicNew) {
				if ($jsObj.$isAlien()) {
					self._$Error().$signal$("Shouldnt be asked to double alienate...");
				} else {
					nil;
				};
				if ($jsObj.$isExpat()) {
					return $jsObj.$_nsTarget();
				} else {
					nil;
				};
				self._$Error().$signal$("Asked to alienate a raw Newspeak object...");
			} else {
				nil;
			};
			if ($jsObj instanceof Array) {
				self._$Error().$signal$("TODO: Support arrays");
			} else {
				nil;
			};
			return self._$Alien().$wrapping$($jsObj);
		});
		this.$copyUntilFirstColon$ = (function ($sel) {
			var self = this;
			"BOGUS";
			{
				var $$limit = nil;
				var $i = nil;
				nil;
				$i = 2;
				$$limit = $sel.$size();
				for (; $$limit.$$greater$equal($i); ) {
					if ($sel.$at$($i).$$equal("$")) {
						return $sel.$copyFrom$to$(2, $i - 1);
					} else {
						nil;
					};
					$i = (1).$$plus($i);
				};
			};
			return $sel.$copyFrom$to$(2, $sel.$size());
		});
		this.$expatriate$ = (function ($nsObj) {
			var self = this;
			"TODO";
			if (typeof $nsObj === "string") {
				return $nsObj;
			} else {
				nil;
			};
			if (typeof $nsObj === "number") {
				return $nsObj;
			} else {
				nil;
			};
			if (typeof $nsObj === "boolean") {
				return $nsObj;
			} else {
				nil;
			};
			if (typeof $nsObj === "function") {
				return self._$expatriateBlock$($nsObj);
			} else {
				nil;
			};
			if ($nsObj instanceof self._$Object().runtimeClass.basicNew) {
				if ($nsObj.$isAlien()) {
					return $nsObj.jsTarget;
				} else {
					nil;
				};
				if ($nsObj.$isExpat()) {
					self._$Error().$signal$("Shouldnt be asked to double expatriate...");
				} else {
					nil;
				};
				return self._$Expat().$wrapping$($nsObj);
			} else {
				nil;
			};
			if ($nsObj instanceof Array) {
				self._$Error().$signal$("TODO: Support arrays");
			} else {
				nil;
			};
			self._$Error().$signal$("Asked to expatriate a raw JS object...");
			return self;
		});
		this.$expatriateBlock$ = (function ($b) {
			var self = this;
			return (function () {
				return self._$expatriate$($b.$valueWithArguments$((Array.prototype.slice.call(arguments, 0)).$collect$((function ($ea) {
					return self._$alienate$($ea);
				}))));
			});
		});
		this.$Alien = (function () {
			if (nil === this.$AliensForV8$Alien$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$AliensForV8);
				var mixin = $.$AliensForV8$Alien;
				this.$AliensForV8$Alien$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$AliensForV8$Alien$slot;
		});
		this.$Expat = (function () {
			if (nil === this.$AliensForV8$Expat$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$AliensForV8);
				var mixin = $.$AliensForV8$Expat;
				this.$AliensForV8$Expat$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$AliensForV8$Expat$slot;
		});
		this.$global = (function () {
			return this.$global$slot;
		});
		this.$setOnce$global$ = (function (v) {
			this.$global$slot = v;
			return this;
		});
		this.$AliensForV8$Alien = (function () {
			return this.$AliensForV8$Alien$slot;
		});
		this.$AliensForV8$Alien$ = (function (v) {
			this.$AliensForV8$Alien$slot = v;
			return this;
		});
		this.$AliensForV8$Expat = (function () {
			return this.$AliensForV8$Expat$slot;
		});
		this.$AliensForV8$Expat$ = (function (v) {
			this.$AliensForV8$Expat$slot = v;
			return this;
		});
		this.$AliensForV8$Alien = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for AliensForV8`Alien";
			this.name = "AliensForV8`Alien";
			this.header = "Alien wrapping: o = (js assign: (js propertyOf: self at: (js literal: 'jsTarget')) toBe: o)";
			this.slots = [];
			this.methods = [
				new MM("superInit`AliensForV8`Alien", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("applyConstructorUsingEval:", false, "applyConstructorUsingEval: jsArguments = (\r	(* On at least Safari, some objects used as constructors are not functions (*face palm*) and the trick with bind and apply doesn't work. Fall back to eval, sigh... *)\r	js verbatim: \r'function applyNewUsingEval(weirdConstructor, args) {\r	var a = [];\r	for (var i = 0; i < args.length; i++)\r		a[i] = \"args[\" + i + \"]\";\r	return eval(\"new weirdConstructor(\" + a.join() + \")\");\r}'.\r	^js call: (js ident: 'applyNewUsingEval') with: {(js propertyOf: self at: (js literal: 'jsTarget')). jsArguments}\r)"),
				new MM("at:", false, "public at: memberName = (\r	^alienate: (js propertyOf: (js propertyOf: self at: (js literal: 'jsTarget')) at: memberName)\r)"),
				new MM("at:put:", false, "public at: memberName put: value = (\r	js assign: (js propertyOf: (js propertyOf: self at: (js literal: 'jsTarget')) at: memberName) toBe: (expatriate: value).\r	^value\r)"),
				new MM("doesNotUnderstand:", false, "doesNotUnderstand: msg = (\r	| jsTarget jsArguments jsSelector |\r	jsTarget:: js propertyOf: self at: (js literal: 'jsTarget').\r	jsArguments:: msg arguments collect: [:arg | expatriate: arg].\r	jsSelector:: copyUntilFirstColon: msg mangledSelector.\r	jsSelector = 'new'\r		ifTrue:\r			[ (* var args = [null].concat(jsArguments);\r				var boundFunction = _jsTarget.bind.apply(_jsTarget, args);\r				return new boundFunction(); *)\r			| args boundFunction |\r			(js operator: '===' with: (js prefixOperator: 'typeof ' on: jsTarget) and: (js literal: 'function')) \r				ifFalse: [^alienate: (applyConstructorUsingEval: jsArguments)].\r			args:: js call: (js propertyOf: (js array: {js ident: 'null'}) at: (js literal: 'concat')) with: {jsArguments}.\r			boundFunction:: (js call: (js propertyOf: (js propertyOf: jsTarget at: (js literal: 'bind')) at: (js literal: 'apply')) with: {jsTarget. args}).\r			^alienate: (js new: boundFunction with: {}) ]\r		\r		ifFalse:\r			[ | jsFunction jsResult |\r			jsFunction:: js propertyOf: jsTarget at: jsSelector.\r			(js operator: '===' with: jsFunction and: (js ident: 'undefined'))\r				ifTrue: [^super doesNotUnderstand: msg].\r			jsResult:: js call: (js propertyOf: jsFunction at: (js literal: 'apply')) with: {jsTarget. jsArguments}.\r			^alienate: jsResult].\r)"),
				new MM("isAlien", false, "public isAlien ^<Boolean> = (\r	^true\r)"),
				new MM("isExpat", false, "public isExpat ^<Boolean> = (\r	^false\r)"),
				new MM("isUndefined", false, "public isUndefined = (\r	^js operator: '===' with: (js propertyOf: self at: (js literal: 'jsTarget')) and: (js ident: 'undefined')\r)"),
				new MM("printString", false, "public printString = (\r	^'Alien wrapping: ', (js call: (js propertyOf: (js propertyOf: self at: (js literal: 'jsTarget')) at: (js literal: 'toString')) with: {})\r)"),
				new MM("value", false, "public value = (\r	| jsTarget = js propertyOf: self at: (js literal: 'jsTarget'). |\r	^alienate: (js \r		call: (js propertyOf: jsTarget at: (js literal: 'apply')) \r		with: {jsTarget})\r)"),
				new MM("value:", false, "public value: a1 = (\r	| jsTarget = js propertyOf: self at: (js literal: 'jsTarget'). |\r	^alienate: (js \r		call: (js propertyOf: jsTarget at: (js literal: 'apply')) \r		with: {jsTarget. expatriate: a1})\r)"),
				new MM("value:value:", false, "public value: a1 value: a2 = (\r	| jsTarget = js propertyOf: self at: (js literal: 'jsTarget'). |\r	^alienate: (js \r		call: (js propertyOf: jsTarget at: (js literal: 'apply')) \r		with: {jsTarget. expatriate: a1. expatriate: a2})\r)"),
				new MM("value:value:value:", false, "public value: a1 value: a2 value: a3 = (\r	| jsTarget = js propertyOf: self at: (js literal: 'jsTarget'). |\r	^alienate: (js \r		call: (js propertyOf: jsTarget at: (js literal: 'apply')) \r		with: {jsTarget. expatriate: a1. expatriate: a2. expatriate: a3})\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$AliensForV8$Alien = (function ($o) {
				var self = this;
				self.$super$AliensForV8$Alien$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($o) {
				var self = this;
				self._$superInit$AliensForV8$Alien($o);
				self.jsTarget = $o;
				return self;
			});
			this.$applyConstructorUsingEval$ = (function ($jsArguments) {
				var self = this;
				function applyNewUsingEval(weirdConstructor, args) {
	var a = [];
	for (var i = 0; i < args.length; i++)
		a[i] = "args[" + i + "]";
	return eval("new weirdConstructor(" + a.join() + ")");
};
				return applyNewUsingEval(self.jsTarget, $jsArguments);
			});
			this.$at$ = (function ($memberName) {
				var self = this;
				return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$(self.jsTarget[$memberName]);
			});
			this.$at$put$ = (function ($memberName, $value) {
				var self = this;
				self.jsTarget[$memberName] = self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($value);
				return $value;
			});
			this.$doesNotUnderstand$ = (function ($msg) {
				var self = this;
				var $jsTarget = nil;
				var $jsArguments = nil;
				var $jsSelector = nil;
				$jsTarget = self.jsTarget;
				$jsArguments = $msg.$arguments().$collect$((function ($arg) {
					return self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($arg);
				}));
				$jsSelector = self.$enclosingObjects$AliensForV8$Alien[0]._$copyUntilFirstColon$($msg.$mangledSelector());
				if ($jsSelector.$$equal("new")) {
					var $args = nil;
					var $boundFunction = nil;
					if (!(typeof $jsTarget === "function")) {
						return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$(self._$applyConstructorUsingEval$($jsArguments));
					} else {
						nil;
					};
					$args = ([null]).concat($jsArguments);
					$boundFunction = $jsTarget.bind.apply($jsTarget, $args);
					return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$(new $boundFunction());
				} else {
					var $jsFunction = nil;
					var $jsResult = nil;
					$jsFunction = $jsTarget[$jsSelector];
					if ($jsFunction === undefined) {
						return self.$super$AliensForV8$Alien$slot._$doesNotUnderstand$.call(self, $msg);
					} else {
						nil;
					};
					$jsResult = $jsFunction.apply($jsTarget, $jsArguments);
					return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$($jsResult);
				};
				return self;
			});
			this.$isAlien = (function () {
				var self = this;
				return true;
			});
			this.$isExpat = (function () {
				var self = this;
				return false;
			});
			this.$isUndefined = (function () {
				var self = this;
				return self.jsTarget === undefined;
			});
			this.$printString = (function () {
				var self = this;
				return ("Alien wrapping: ").$$comma(self.jsTarget.toString());
			});
			this.$value = (function () {
				var self = this;
				var $jsTarget = nil;
				$jsTarget = self.jsTarget;
				return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$($jsTarget.apply($jsTarget));
			});
			this.$value$ = (function ($a1) {
				var self = this;
				var $jsTarget = nil;
				$jsTarget = self.jsTarget;
				return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$($jsTarget.apply($jsTarget, self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a1)));
			});
			this.$value$value$ = (function ($a1, $a2) {
				var self = this;
				var $jsTarget = nil;
				$jsTarget = self.jsTarget;
				return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$($jsTarget.apply($jsTarget, self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a1), self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a2)));
			});
			this.$value$value$value$ = (function ($a1, $a2, $a3) {
				var self = this;
				var $jsTarget = nil;
				$jsTarget = self.jsTarget;
				return self.$enclosingObjects$AliensForV8$Alien[0]._$alienate$($jsTarget.apply($jsTarget, self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a1), self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a2), self.$enclosingObjects$AliensForV8$Alien[0]._$expatriate$($a3)));
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for AliensForV8`Alien";
					this._$superInit$AliensForV8$Alien = $.$superInit$AliensForV8$Alien;
					this.$superInit$AliensForV8$Alien = dnuCatcher("$superInit$AliensForV8$Alien");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$applyConstructorUsingEval$ = $.$applyConstructorUsingEval$;
					this.$applyConstructorUsingEval$ = dnuCatcher("$applyConstructorUsingEval$");
					this.$at$ = this._$at$ = $.$at$;
					this.$at$put$ = this._$at$put$ = $.$at$put$;
					this._$doesNotUnderstand$ = $.$doesNotUnderstand$;
					this.$doesNotUnderstand$ = dnuCatcher("$doesNotUnderstand$");
					this.dnu = $.$doesNotUnderstand$;
					this.$isAlien = this._$isAlien = $.$isAlien;
					this.$isExpat = this._$isExpat = $.$isExpat;
					this.$isUndefined = this._$isUndefined = $.$isUndefined;
					this.$printString = this._$printString = $.$printString;
					this.$value = this._$value = $.$value;
					this.$value$ = this._$value$ = $.$value$;
					this.$value$value$ = this._$value$value$ = $.$value$value$;
					this.$value$value$value$ = this._$value$value$value$ = $.$value$value$value$;
					this.$enclosingObjects$AliensForV8$Alien = enclosingObjects;
					this.$super$AliensForV8$Alien$slot = runtimeSuperclass;
					this["AliensForV8`Alien"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["AliensForV8`Alien"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for AliensForV8`Alien";
				this.slots = [];
				this.methods = [new MM("wrapping:", true, null)];
				this.nestedClasses = [];
				this.$wrapping$ = (function ($o) {
					return (new this.nonMeta.basicNew()).$instance$initializer($o);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for AliensForV8`Alien";
						this.$wrapping$ = this._$wrapping$ = $.$wrapping$;
						this.$enclosingObjects$AliensForV8$Alien = enclosingObjects;
						this.$super$AliensForV8$Alien = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$AliensForV8$Expat = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for AliensForV8`Expat";
			this.name = "AliensForV8`Expat";
			this.header = "Expat wrapping: o = (|\rprivate _nsTarget = o.\r|)";
			this.slots = [new SM("_nsTarget", false, false)];
			this.methods = [
				new MM("superInit`AliensForV8`Expat", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("doesNotUnderstand:", false, "doesNotUnderstand: msg = (\r	|\r	nsSelector = something: msg selector.\r	nsArguments = msg arguments collect: [:arg | alienate: arg].\r	nsResult = js\r		call: (js propertyOf: (js propertyOf:_nsTarget at: nsSelector) at: (js literal: 'apply')) \r		with: {_nsTarget. nsArguments}.\r	|\r	^expatriate: nsResult\r)"),
				new MM("isAlien", false, "public isAlien ^<Boolean> = (\r	^false\r)"),
				new MM("isExpat", false, "public isExpat ^<Boolean> = (\r	^true\r)"),
				new MM("_nsTarget", true, null),
				new MM("setOnce`_nsTarget:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$AliensForV8$Expat = (function ($o) {
				var self = this;
				self.$super$AliensForV8$Expat$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($o) {
				var self = this;
				self._$superInit$AliensForV8$Expat($o);
				$1.$setOnce$_nsTarget$.call(self, $o);
				return self;
			});
			this.$doesNotUnderstand$ = (function ($msg) {
				var self = this;
				var $nsSelector = nil;
				var $nsArguments = nil;
				var $nsResult = nil;
				$nsSelector = self._$something$($msg.$selector());
				$nsArguments = $msg.$arguments().$collect$((function ($arg) {
					return self.$enclosingObjects$AliensForV8$Expat[0]._$alienate$($arg);
				}));
				$nsResult = $1.$_nsTarget.call(self)[$nsSelector].apply($1.$_nsTarget.call(self), $nsArguments);
				return self.$enclosingObjects$AliensForV8$Expat[0]._$expatriate$($nsResult);
			});
			this.$isAlien = (function () {
				var self = this;
				return false;
			});
			this.$isExpat = (function () {
				var self = this;
				return true;
			});
			this.$_nsTarget = (function () {
				return this.$_nsTarget$slot;
			});
			this.$setOnce$_nsTarget$ = (function (v) {
				this.$_nsTarget$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for AliensForV8`Expat";
					this._$superInit$AliensForV8$Expat = $.$superInit$AliensForV8$Expat;
					this.$superInit$AliensForV8$Expat = dnuCatcher("$superInit$AliensForV8$Expat");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$doesNotUnderstand$ = $.$doesNotUnderstand$;
					this.$doesNotUnderstand$ = dnuCatcher("$doesNotUnderstand$");
					this.dnu = $.$doesNotUnderstand$;
					this.$isAlien = this._$isAlien = $.$isAlien;
					this.$isExpat = this._$isExpat = $.$isExpat;
					this.$enclosingObjects$AliensForV8$Expat = enclosingObjects;
					this.$super$AliensForV8$Expat$slot = runtimeSuperclass;
					this["AliensForV8`Expat"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$_nsTarget$slot = nil;
					});
					this.basicNew = this["AliensForV8`Expat"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for AliensForV8`Expat";
				this.slots = [];
				this.methods = [new MM("wrapping:", true, null)];
				this.nestedClasses = [];
				this.$wrapping$ = (function ($o) {
					return (new this.nonMeta.basicNew()).$instance$initializer($o);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for AliensForV8`Expat";
						this.$wrapping$ = this._$wrapping$ = $.$wrapping$;
						this.$enclosingObjects$AliensForV8$Expat = enclosingObjects;
						this.$super$AliensForV8$Expat = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$AliensForV8$Alien.enclosingMixin = this;
		this.$AliensForV8$Expat.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for AliensForV8";
				this._$superInit$AliensForV8 = $.$superInit$AliensForV8;
				this.$superInit$AliensForV8 = dnuCatcher("$superInit$AliensForV8");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this._$alienate$ = $.$alienate$;
				this.$alienate$ = dnuCatcher("$alienate$");
				this._$copyUntilFirstColon$ = $.$copyUntilFirstColon$;
				this.$copyUntilFirstColon$ = dnuCatcher("$copyUntilFirstColon$");
				this._$expatriate$ = $.$expatriate$;
				this.$expatriate$ = dnuCatcher("$expatriate$");
				this._$expatriateBlock$ = $.$expatriateBlock$;
				this.$expatriateBlock$ = dnuCatcher("$expatriateBlock$");
				this._$Alien = $.$Alien;
				this.$Alien = dnuCatcher("$Alien");
				this._$Expat = $.$Expat;
				this.$Expat = dnuCatcher("$Expat");
				this.$global = this._$global = $.$global;
				this.$setOnce$global$ = this._$setOnce$global$ = $.$setOnce$global$;
				this.$AliensForV8$Alien = this._$AliensForV8$Alien = $.$AliensForV8$Alien;
				this.$AliensForV8$Alien$ = this._$AliensForV8$Alien$ = $.$AliensForV8$Alien$;
				this.$AliensForV8$Expat = this._$AliensForV8$Expat = $.$AliensForV8$Expat;
				this.$AliensForV8$Expat$ = this._$AliensForV8$Expat$ = $.$AliensForV8$Expat$;
				this.$enclosingObjects$AliensForV8 = enclosingObjects;
				this.$super$AliensForV8$slot = runtimeSuperclass;
				this.AliensForV8 = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$global$slot = nil;
					this.$AliensForV8$Alien$slot = nil;
					this.$AliensForV8$Expat$slot = nil;
				});
				this.basicNew = this.AliensForV8;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for AliensForV8";
			this.slots = [];
			this.methods = [new MM("usingPlatform:", true, null)];
			this.nestedClasses = [];
			this.$usingPlatform$ = (function ($p) {
				return (new this.nonMeta.basicNew()).$instance$initializer($p);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for AliensForV8";
					this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
					this.$enclosingObjects$AliensForV8 = enclosingObjects;
					this.$super$AliensForV8 = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$Collections = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for Collections";
		this.name = "Collections";
		this.header = "Collections usingPlatform: p = (\r(* This code was derived by converting the Strongtalk Collections classes to Newspeak, which is why the Sun Microsystems copyright and BSD license below applies.\r\rCopyright (c) 1995-2006 Sun Microsystems, Inc. ALL RIGHTS RESERVED.\rCopyright 2008-2009 Yardena Meymann, Gilad Bracha and other contributors.\r \rRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\r* Redistributions of source code must retain the above copyright notice, \r this  list of conditions and the following disclaimer.\r\r* Redistribution in binary form must reproduce the above copyright notice, \rthis list of conditions and the following disclaimer in the documentation and/o other materials provided with the distribution.\r\rNeither the name of Sun Microsystems or the names of contributors may \rbe used to endorse or promote products derived from this software without \rspecific prior written permission.\r\r>>\rTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, \rTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS \rBE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE \rGOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT \rLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH \rDAMAGE.>> *)|\r	private MutableAddableList = MutableList mixinApply: AddableList.\r	(* -- collection aliases -- *)\r	public OrderedCollection = MutableArrayList.\r	public Dictionary = MutableHashedMap.\r	public IdentityDictionary = IdentityMutableHashedMap.\r	public SortedCollection = SortedList.\r	(* -- streams -- *)\r	private ListReadStream = p streams SeqCltnReadStream. \r	private ListReadWriteStream = p streams SeqCltnReadWriteStream. \r	private BasicInputStream = p streams BasicInputStream. \r	private BasicOutputStream = p streams BasicOutputStream. \r	\r	private IOSequence = Future computing: [MutableList mixinApply: (BasicInputStream mixinApply: BasicOutputStream).].\r	\r	(* magic collections *)\r	(* Not yet supported by NS2JS or NS2Dart *)\r	public WeakArray = Future computing: [p blackMarket Collections WeakArray].\r|)";
		this.slots = [
			new SM("MutableAddableList", false, false),
			new SM("OrderedCollection", false, false),
			new SM("Dictionary", false, false),
			new SM("IdentityDictionary", false, false),
			new SM("SortedCollection", false, false),
			new SM("ListReadStream", false, false),
			new SM("ListReadWriteStream", false, false),
			new SM("BasicInputStream", false, false),
			new SM("BasicOutputStream", false, false),
			new SM("IOSequence", false, false),
			new SM("WeakArray", false, false),
			new SM("Collections`AddableList", true, true),
			new SM("Collections`Association", true, true),
			new SM("Collections`Bag", true, true),
			new SM("Collections`Collection", true, true),
			new SM("Collections`HashedCollection", true, true),
			new SM("Collections`IdentityMutableHashedMap", true, true),
			new SM("Collections`IdentitySet", true, true),
			new SM("Collections`Interval", true, true),
			new SM("Collections`List", true, true),
			new SM("Collections`MutableArrayList", true, true),
			new SM("Collections`MutableHashedMap", true, true),
			new SM("Collections`MutableList", true, true),
			new SM("Collections`Queue", true, true),
			new SM("Collections`Set", true, true),
			new SM("Collections`SortedList", true, true)
		];
		this.methods = [
			new MM("superInit`Collections", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("error:", false, "error: msg <String> = (\r	^Error signal: msg\r)"),
			new MM("AddableList", true, null),
			new MM("Association", true, null),
			new MM("Bag", true, null),
			new MM("Collection", true, null),
			new MM("HashedCollection", true, null),
			new MM("IdentityMutableHashedMap", true, null),
			new MM("IdentitySet", true, null),
			new MM("Interval", true, null),
			new MM("List", true, null),
			new MM("MutableArrayList", true, null),
			new MM("MutableHashedMap", true, null),
			new MM("MutableList", true, null),
			new MM("Queue", true, null),
			new MM("Set", true, null),
			new MM("SortedList", true, null),
			new MM("MutableAddableList", true, null),
			new MM("setOnce`MutableAddableList:", true, null),
			new MM("OrderedCollection", true, null),
			new MM("setOnce`OrderedCollection:", true, null),
			new MM("Dictionary", true, null),
			new MM("setOnce`Dictionary:", true, null),
			new MM("IdentityDictionary", true, null),
			new MM("setOnce`IdentityDictionary:", true, null),
			new MM("SortedCollection", true, null),
			new MM("setOnce`SortedCollection:", true, null),
			new MM("ListReadStream", true, null),
			new MM("setOnce`ListReadStream:", true, null),
			new MM("ListReadWriteStream", true, null),
			new MM("setOnce`ListReadWriteStream:", true, null),
			new MM("BasicInputStream", true, null),
			new MM("setOnce`BasicInputStream:", true, null),
			new MM("BasicOutputStream", true, null),
			new MM("setOnce`BasicOutputStream:", true, null),
			new MM("IOSequence", true, null),
			new MM("setOnce`IOSequence:", true, null),
			new MM("WeakArray", true, null),
			new MM("setOnce`WeakArray:", true, null),
			new MM("Collections`AddableList", true, null),
			new MM("Collections`AddableList:", true, null),
			new MM("Collections`Association", true, null),
			new MM("Collections`Association:", true, null),
			new MM("Collections`Bag", true, null),
			new MM("Collections`Bag:", true, null),
			new MM("Collections`Collection", true, null),
			new MM("Collections`Collection:", true, null),
			new MM("Collections`HashedCollection", true, null),
			new MM("Collections`HashedCollection:", true, null),
			new MM("Collections`IdentityMutableHashedMap", true, null),
			new MM("Collections`IdentityMutableHashedMap:", true, null),
			new MM("Collections`IdentitySet", true, null),
			new MM("Collections`IdentitySet:", true, null),
			new MM("Collections`Interval", true, null),
			new MM("Collections`Interval:", true, null),
			new MM("Collections`List", true, null),
			new MM("Collections`List:", true, null),
			new MM("Collections`MutableArrayList", true, null),
			new MM("Collections`MutableArrayList:", true, null),
			new MM("Collections`MutableHashedMap", true, null),
			new MM("Collections`MutableHashedMap:", true, null),
			new MM("Collections`MutableList", true, null),
			new MM("Collections`MutableList:", true, null),
			new MM("Collections`Queue", true, null),
			new MM("Collections`Queue:", true, null),
			new MM("Collections`Set", true, null),
			new MM("Collections`Set:", true, null),
			new MM("Collections`SortedList", true, null),
			new MM("Collections`SortedList:", true, null)
		];
		this.nestedClasses = [
			"Collections`AddableList",
			"Collections`Association",
			"Collections`Bag",
			"Collections`Collection",
			"Collections`HashedCollection",
			"Collections`IdentityMutableHashedMap",
			"Collections`IdentitySet",
			"Collections`Interval",
			"Collections`List",
			"Collections`MutableArrayList",
			"Collections`MutableHashedMap",
			"Collections`MutableList",
			"Collections`Queue",
			"Collections`Set",
			"Collections`SortedList"
		];
		this.applications = [];
		this.$superInit$Collections = (function ($p) {
			var self = this;
			self.$super$Collections$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($p) {
			var self = this;
			self._$superInit$Collections($p);
			$0.$setOnce$MutableAddableList$.call(self, self._$MutableList().$mixinApply$(self._$AddableList()));
			self._$setOnce$OrderedCollection$(self._$MutableArrayList());
			self._$setOnce$Dictionary$(self._$MutableHashedMap());
			self._$setOnce$IdentityDictionary$(self._$IdentityMutableHashedMap());
			self._$setOnce$SortedCollection$(self._$SortedList());
			$0.$setOnce$ListReadStream$.call(self, $p.$streams().$SeqCltnReadStream());
			$0.$setOnce$ListReadWriteStream$.call(self, $p.$streams().$SeqCltnReadWriteStream());
			$0.$setOnce$BasicInputStream$.call(self, $p.$streams().$BasicInputStream());
			$0.$setOnce$BasicOutputStream$.call(self, $p.$streams().$BasicOutputStream());
			$0.$setOnce$IOSequence$.call(self, self._$Future().$computing$((function () {
				return self._$MutableList().$mixinApply$($0.$BasicInputStream.call(self).$mixinApply$($0.$BasicOutputStream.call(self)));
			})));
			self._$setOnce$WeakArray$(self._$Future().$computing$((function () {
				return $p.$blackMarket().$Collections().$WeakArray();
			})));
			return self;
		});
		this.$error$ = (function ($msg) {
			var self = this;
			return self._$Error().$signal$($msg);
		});
		this.$AddableList = (function () {
			if (nil === this.$Collections$AddableList$slot) {
				var self = this;
				var superclass = self._$List();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Collections);
				var mixin = $.$Collections$AddableList;
				this.$Collections$AddableList$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Collections$AddableList$slot;
		});
		this.$Association = (function () {
			if (nil === this.$Collections$Association$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Collections);
				var mixin = $.$Collections$Association;
				this.$Collections$Association$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Collections$Association$slot;
		});
		this.$Bag = (function () {
			if (nil === this.$Collections$Bag$slot) {
				var self = this;
				var superclass = self._$Collection();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Collections);
				var mixin = $.$Collections$Bag;
				this.$Collections$Bag$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Collections$Bag$slot;
		});
		this.$Collection = (function () {
			if (nil === this.$Collections$Collection$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Collections);
				var mixin = $.$Collections$Collection;
				this.$Collections$Collection$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Collections$Collection$slot;
		});
		this.$HashedCollection = (function () {
			if (nil === this.$Collections$HashedCollection$slot) {
				var self = this;
				var superclass = self._$Collection();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Collections);
				var mixin = $.$Collections$HashedCollection;
				this.$Collections$HashedCollection$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Collections$HashedCollection$slot;
		});
		this.$IdentityMutableHashedMap = (function () {
			if (nil === this.$Collections$IdentityMutableHashedMap$slot) {
				var self = this;
				var superclass = self._$MutableHashedMap();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Collections);
				var mixin = $.$Collections$IdentityMutableHashedMap;
				this.$Collections$IdentityMutableHashedMap$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Collections$IdentityMutableHashedMap$slot;
		});
		this.$IdentitySet = (function () {
			if (nil === this.$Collections$IdentitySet$slot) {
				var self = this;
				var superclass = self._$Set();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Collections);
				var mixin = $.$Collections$IdentitySet;
				this.$Collections$IdentitySet$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Collections$IdentitySet$slot;
		});
		this.$Interval = (function () {
			if (nil === this.$Collections$Interval$slot) {
				var self = this;
				var superclass = self._$List();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Collections);
				var mixin = $.$Collections$Interval;
				this.$Collections$Interval$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Collections$Interval$slot;
		});
		this.$List = (function () {
			if (nil === this.$Collections$List$slot) {
				var self = this;
				var superclass = self._$Collection();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Collections);
				var mixin = $.$Collections$List;
				this.$Collections$List$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Collections$List$slot;
		});
		this.$MutableArrayList = (function () {
			if (nil === this.$Collections$MutableArrayList$slot) {
				var self = this;
				var superclass = $0.$MutableAddableList.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Collections);
				var mixin = $.$Collections$MutableArrayList;
				this.$Collections$MutableArrayList$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Collections$MutableArrayList$slot;
		});
		this.$MutableHashedMap = (function () {
			if (nil === this.$Collections$MutableHashedMap$slot) {
				var self = this;
				var superclass = self._$HashedCollection();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Collections);
				var mixin = $.$Collections$MutableHashedMap;
				this.$Collections$MutableHashedMap$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Collections$MutableHashedMap$slot;
		});
		this.$MutableList = (function () {
			if (nil === this.$Collections$MutableList$slot) {
				var self = this;
				var superclass = self._$List();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Collections);
				var mixin = $.$Collections$MutableList;
				this.$Collections$MutableList$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Collections$MutableList$slot;
		});
		this.$Queue = (function () {
			if (nil === this.$Collections$Queue$slot) {
				var self = this;
				var superclass = $0.$IOSequence.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Collections);
				var mixin = $.$Collections$Queue;
				this.$Collections$Queue$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Collections$Queue$slot;
		});
		this.$Set = (function () {
			if (nil === this.$Collections$Set$slot) {
				var self = this;
				var superclass = self._$HashedCollection();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Collections);
				var mixin = $.$Collections$Set;
				this.$Collections$Set$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Collections$Set$slot;
		});
		this.$SortedList = (function () {
			if (nil === this.$Collections$SortedList$slot) {
				var self = this;
				var superclass = self._$AddableList();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Collections);
				var mixin = $.$Collections$SortedList;
				this.$Collections$SortedList$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Collections$SortedList$slot;
		});
		this.$MutableAddableList = (function () {
			return this.$MutableAddableList$slot;
		});
		this.$setOnce$MutableAddableList$ = (function (v) {
			this.$MutableAddableList$slot = v;
			return this;
		});
		this.$OrderedCollection = (function () {
			return this.$OrderedCollection$slot;
		});
		this.$setOnce$OrderedCollection$ = (function (v) {
			this.$OrderedCollection$slot = v;
			return this;
		});
		this.$Dictionary = (function () {
			return this.$Dictionary$slot;
		});
		this.$setOnce$Dictionary$ = (function (v) {
			this.$Dictionary$slot = v;
			return this;
		});
		this.$IdentityDictionary = (function () {
			return this.$IdentityDictionary$slot;
		});
		this.$setOnce$IdentityDictionary$ = (function (v) {
			this.$IdentityDictionary$slot = v;
			return this;
		});
		this.$SortedCollection = (function () {
			return this.$SortedCollection$slot;
		});
		this.$setOnce$SortedCollection$ = (function (v) {
			this.$SortedCollection$slot = v;
			return this;
		});
		this.$ListReadStream = (function () {
			return this.$ListReadStream$slot;
		});
		this.$setOnce$ListReadStream$ = (function (v) {
			this.$ListReadStream$slot = v;
			return this;
		});
		this.$ListReadWriteStream = (function () {
			return this.$ListReadWriteStream$slot;
		});
		this.$setOnce$ListReadWriteStream$ = (function (v) {
			this.$ListReadWriteStream$slot = v;
			return this;
		});
		this.$BasicInputStream = (function () {
			return this.$BasicInputStream$slot;
		});
		this.$setOnce$BasicInputStream$ = (function (v) {
			this.$BasicInputStream$slot = v;
			return this;
		});
		this.$BasicOutputStream = (function () {
			return this.$BasicOutputStream$slot;
		});
		this.$setOnce$BasicOutputStream$ = (function (v) {
			this.$BasicOutputStream$slot = v;
			return this;
		});
		this.$IOSequence = (function () {
			return this.$IOSequence$slot;
		});
		this.$setOnce$IOSequence$ = (function (v) {
			this.$IOSequence$slot = v;
			return this;
		});
		this.$WeakArray = (function () {
			return this.$WeakArray$slot;
		});
		this.$setOnce$WeakArray$ = (function (v) {
			this.$WeakArray$slot = v;
			return this;
		});
		this.$Collections$AddableList = (function () {
			return this.$Collections$AddableList$slot;
		});
		this.$Collections$AddableList$ = (function (v) {
			this.$Collections$AddableList$slot = v;
			return this;
		});
		this.$Collections$Association = (function () {
			return this.$Collections$Association$slot;
		});
		this.$Collections$Association$ = (function (v) {
			this.$Collections$Association$slot = v;
			return this;
		});
		this.$Collections$Bag = (function () {
			return this.$Collections$Bag$slot;
		});
		this.$Collections$Bag$ = (function (v) {
			this.$Collections$Bag$slot = v;
			return this;
		});
		this.$Collections$Collection = (function () {
			return this.$Collections$Collection$slot;
		});
		this.$Collections$Collection$ = (function (v) {
			this.$Collections$Collection$slot = v;
			return this;
		});
		this.$Collections$HashedCollection = (function () {
			return this.$Collections$HashedCollection$slot;
		});
		this.$Collections$HashedCollection$ = (function (v) {
			this.$Collections$HashedCollection$slot = v;
			return this;
		});
		this.$Collections$IdentityMutableHashedMap = (function () {
			return this.$Collections$IdentityMutableHashedMap$slot;
		});
		this.$Collections$IdentityMutableHashedMap$ = (function (v) {
			this.$Collections$IdentityMutableHashedMap$slot = v;
			return this;
		});
		this.$Collections$IdentitySet = (function () {
			return this.$Collections$IdentitySet$slot;
		});
		this.$Collections$IdentitySet$ = (function (v) {
			this.$Collections$IdentitySet$slot = v;
			return this;
		});
		this.$Collections$Interval = (function () {
			return this.$Collections$Interval$slot;
		});
		this.$Collections$Interval$ = (function (v) {
			this.$Collections$Interval$slot = v;
			return this;
		});
		this.$Collections$List = (function () {
			return this.$Collections$List$slot;
		});
		this.$Collections$List$ = (function (v) {
			this.$Collections$List$slot = v;
			return this;
		});
		this.$Collections$MutableArrayList = (function () {
			return this.$Collections$MutableArrayList$slot;
		});
		this.$Collections$MutableArrayList$ = (function (v) {
			this.$Collections$MutableArrayList$slot = v;
			return this;
		});
		this.$Collections$MutableHashedMap = (function () {
			return this.$Collections$MutableHashedMap$slot;
		});
		this.$Collections$MutableHashedMap$ = (function (v) {
			this.$Collections$MutableHashedMap$slot = v;
			return this;
		});
		this.$Collections$MutableList = (function () {
			return this.$Collections$MutableList$slot;
		});
		this.$Collections$MutableList$ = (function (v) {
			this.$Collections$MutableList$slot = v;
			return this;
		});
		this.$Collections$Queue = (function () {
			return this.$Collections$Queue$slot;
		});
		this.$Collections$Queue$ = (function (v) {
			this.$Collections$Queue$slot = v;
			return this;
		});
		this.$Collections$Set = (function () {
			return this.$Collections$Set$slot;
		});
		this.$Collections$Set$ = (function (v) {
			this.$Collections$Set$slot = v;
			return this;
		});
		this.$Collections$SortedList = (function () {
			return this.$Collections$SortedList$slot;
		});
		this.$Collections$SortedList$ = (function (v) {
			this.$Collections$SortedList$slot = v;
			return this;
		});
		this.$Collections$AddableList = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Collections`AddableList";
			this.name = "Collections`AddableList";
			this.header = "AddableList = List (\r(* AddableLists are Lists that support the Extensible protocol, \rand which support indexing in constant time. *)| \r	protected  contents <Array[E]>\r	protected startGap <Integer>  (* number of empty slots at the beginning of contents *)\r	protected lastIndex <Integer>  (* (internal) index of last occupied table entry *)\r|initCapacity: self class defaultCapacity)";
			this.slots = [
				new SM("contents", true, false),
				new SM("startGap", true, false),
				new SM("lastIndex", true, false)
			];
			this.methods = [
				new MM("superInit`Collections`AddableList", true, "List"),
				new MM("instance`initializer", true, "List"),
				new MM("add:", false, "public add: e <E> ^<E> = (\r	subclassResponsibility\r)"),
				new MM("addAll:", false, "public addAll: c <Collection[E]> ^<Collection[E]> = (\r	c do: [ :el <E> |\r		add: el	].\r	^c\r)"),
				new MM("at:", false, "public at: i <Integer> ^<E> = (\r	| adjusted <Int> |\r	adjusted:: i + startGap.\r	((0 < i) and: [adjusted <= self lastIndex])\r		ifFalse: [ error: 'invalid index' ].\r	^contents at: adjusted\r\r)"),
				new MM("at:ifAbsent:", false, "public at: i <Integer> ifAbsent: f <[X def]>  ^<E | X> = (\r	| internal <Int> |\r	internal:: i + self startGap.\r	^(internalIndexIsValid: internal)\r		ifTrue: [ contents at: internal ]\r		ifFalse: [ f value ]\r)"),
				new MM("includeAll:", false, "public includeAll: c <Collection[E]> ^<Collection[E]> = (\r	c do: [ :el <E> |\r		include: el   ].\r	^c\r)"),
				new MM("indexOf:ifAbsent:", false, "public indexOf: el <Object> ifAbsent: f <[X def]> ^<Integer | X> = (\r	1 to: size do: [ :i <Integer> |\r		(at: i) = el\r			ifTrue: [ ^i ].	].\r	^f value\r)"),
				new MM("remove:at:", false, "public remove: nElements <Integer> at: i <Integer>\r = (\r	| el <E> internal <Integer> |\r	el:: at: i.\r	internal:: startGap + i.\r	internalRangeCheck: internal.\r	internalRangeCheck: (internal + nElements) - 1.\r	internal  to: lastIndex - nElements\r		 do: [ :index <Integer> |\r			  contents at: index put: (contents at: index + nElements).	].\r	contents at: lastIndex put: nil.\r	lastIndex: lastIndex - nElements.\r)"),
				new MM("remove:ifAbsent:", false, "public remove: el <E> ifAbsent: f <[X def]> ^<E|X> = (\r	removeAt: (indexOf: el ifAbsent: [^f value]).\r	^el\r)"),
				new MM("removeAll", false, "public removeAll = (\r\r	startGap + 1 to: lastIndex do:\r		[ :i <Integer> |\r			contents at: i put: nil].\r	lastIndex: startGap\r)"),
				new MM("removeAll:", false, "public removeAll: c <Collection[E]> ^<Collection[E]> = (\r\r	c do: [ :el <E> |\r		remove: el   ].\r	^c\r)"),
				new MM("removeAt:", false, "public removeAt: index <Integer> ^<E> = (\r	| el <E> |\r	el:: at: index.\r	remove: 1 at: index.\r	^el\r)"),
				new MM("removeEvery:", false, "public removeEvery: val <E> ^<E> = (\r	^removeEvery: val startingAt: 1\r)"),
				new MM("removeEvery:startingAt:", false, "public removeEvery: val <X def> startingAt: start <Integer> ^<X> = (\r\r	| index <Integer> |\r	index:: indexOf: val ifAbsent: [ ^val ].\r	removeAt: index.\r	^removeEvery: val startingAt: index\r)"),
				new MM("removeFirst", false, "public removeFirst ^<E> = (\r	^removeAt: 1\r)"),
				new MM("removeLast", false, "public removeLast ^<E> = (\r	^removeAt: size\r)"),
				new MM("size", false, "public size ^<Integer> = (\r	^lastIndex - startGap\r)"),
				new MM("size:", false, "public size: s <Integer> = (\r	(* Change the size of the ordered collection to s (not the capacity).  This will truncate elements at the end if the current size\r	  is larger.  If the current size is smaller, the added elements will be undefined, in which case it is erroneous to access them until they have been set.\r	  This method should be used very rarely and carefully as a result. *)\r\r	| delta <Integer> newLastIndex <Integer> |\r	delta:: s - size.\r	newLastIndex:: lastIndex + delta.\r	delta < 0\r		ifTrue: [ newLastIndex + 1 to: lastIndex do:\r					[ :i <Integer> |\r						contents at: i put: nil]].\r	delta > 0\r		ifTrue: [ needSpaceAtEnd: delta ].\r	lastIndex: lastIndex + delta.\r)"),
				new MM("include:", false, "public include: e <E> ^<E> = (\r	^include: e ifNew: []\r)"),
				new MM("include:ifNew:", false, "public include: e <E> ifNew: blk <[]> ^<E> = (\r	(includes: e)\r		ifFalse: [	add: e.\r						blk value. ].\r	^e\r)"),
				new MM("remove:", false, "public remove: el <E> ^<E> = (\r\r	^remove: el\r		ifAbsent: [ error: 'element not found' ]\r)"),
				new MM("removeAllSuchThat:", false, "public removeAllSuchThat: test <[:E| Boolean]>  = (\r\r	| i <Integer> |\r	i:: 1.\r	[ i <= size ]\r		whileTrue:\r			[	(test value: (at: i))\r					ifTrue: [ removeAt: i ]\r					ifFalse: [ i:: i + 1 ]	]\r)"),
				new MM("makeSpaceAtStart:", false, "makeSpaceAtStart: nslots <Integer> ^<Integer> = (\r\r	(* Make sure that there are at least nslots of unused capacity at the low\r	 end of contents.  The # of slots added at the beginning is returned. *)\r\r	|	newGap <Integer>\r		diff <Integer>\r		newContents <AbsoluteArray[E]>\r		sz <Integer>\r		newLastIndex <Integer> |\r	(isEmpty and: [nslots <= contents size])\r		ifTrue: [startGap: nslots.\r  				lastIndex: nslots.\r				^nslots].\r\r	sz:: size.\r	newGap:: nslots max: sz.\r	diff:: newGap - startGap.\r	newLastIndex:: newGap + sz.\r	newContents:: Array(* [E] *) new:\r		contents size + diff.\r	newContents\r		replaceFrom: newGap + 1\r		to: newLastIndex\r		with: contents\r		startingAt: firstIndex.\r	startGap: newGap.\r	contents: newContents.\r	lastIndex: newLastIndex.\r	^diff	\r)"),
				new MM("copyWithSize:", false, "public copyWithSize: s <Integer> ^<MutableList[EX]> = (\r	(* {where EX is returnType of #anElement message of receiverType} *)\r\r	| safeself <List[EX]> |\r\r	(* This guarantee is safe because the inference clause guarantees\r		that E < EX at each call site *)\r	safeself:: (* guaranteed <List[EX]> *) self.\r\r	^(Array(* [EX] *) new: s)\r		replaceFrom: 1 to: (s min: size) with: safeself	\r)"),
				new MM("initCapacity:", false, "public initCapacity: c <Integer> = (\r	(* Need proper factories to pass initial capacity and make this non-public. *)\r\r	contents:: Array(* [E] *) new: c.\r	startGap:: 0.\r	lastIndex:: 0.\r)"),
				new MM("do:", false, "public do: action <[:E]> = (\r	startGap + 1 to: lastIndex do:\r		[:index <Integer> | action value: (contents at: index) ]\r)"),
				new MM("endGap", false, "endGap ^<Integer> = (\r	^contents size - lastIndex\r)"),
				new MM("firstIndex", false, "firstIndex ^<Integer> = (\r	^1 + startGap\r)"),
				new MM("internalIndexIsValid:", false, "internalIndexIsValid: index <Integer> ^<Boolean> = (\r	^index > startGap and: [ index <= lastIndex ]\r)"),
				new MM("internalRangeCheck:", false, "internalRangeCheck: index <Integer> = (\r	(internalIndexIsValid: index )\r		ifFalse: [ error: 'invalid index' ].\r)"),
				new MM("makeSpace:beforeIndex:", false, "makeSpace: slots <Integer> beforeIndex: i <Integer> ^<Integer> = (\r\r	(* assume:  i is a valid internal index.  The index is returned, adjusted\r	 for any resizing of the internal array that may have taken place \r	 (i.e. the index of the beginning of the created gap is returned) *)\r\r	(* # before i is (i - startGap) - 1, # after is (lastIndex - i) + 1 *)\r	^((i - startGap) - 1) > ((lastIndex - i) + 1)\r		ifTrue: [ 	(* fewer elements after, so move them *)\r			      	needSpaceAtEnd: slots.\r			      	contents\r					replaceFrom: i + slots\r					to: lastIndex + slots\r					with: contents\r					startingAt: i.\r			    	lastIndex:: lastIndex + slots.\r				i	]\r		ifFalse: [	(* fewer elements before, so move them *)\r				| newI <Integer> |\r				newI:: i + (needSpaceAtStart: slots) - slots.\r				contents\r					replaceFrom: (startGap + 1) - slots\r					to:  newI - 1\r					with: contents\r					startingAt: startGap + 1.\r				startGap:: startGap - slots.\r				newI	].\r)"),
				new MM("needSpaceAtEnd:", false, "needSpaceAtEnd: slots <Integer>\r = (\r\r	slots > endGap\r		ifTrue: [	contents:\r							(contents copyWithSize:\r								contents size + (slots max: size)	)]\r)"),
				new MM("needSpaceAtStart:", false, "needSpaceAtStart: nslots <Integer> ^<Integer> = (\r\r	(* Make sure that there are at least nslots of unused capacity at the low\r	 end of contents.  The # of slots added at the beginning is returned. *)\r\r	^nslots > startGap\r		ifTrue: [makeSpaceAtStart: nslots]\r		ifFalse: [ 0 ]\r)"),
				new MM("postCopy", false, "public postCopy\r = (\r\r	super postCopy.\r	(* We potentially may change the size of the contents array so that this can work for copyWithSize:\r	  as well *)\r	contents: (contents copyWithSize: (contents size max: lastIndex))\r)"),
				new MM("with:", false, "public with: el <E> = (\r\r	subclassResponsibility\r)"),
				new MM("withAll:", false, "public withAll: els <Collection[E]> = (\r\r	subclassResponsibility\r)"),
				new MM("contents", true, null),
				new MM("contents:", true, null),
				new MM("startGap", true, null),
				new MM("startGap:", true, null),
				new MM("lastIndex", true, null),
				new MM("lastIndex:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Collections$AddableList = (function () {
				var self = this;
				self.$super$Collections$AddableList$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Collections$AddableList();
				self._$initCapacity$(self._$class().$defaultCapacity());
				return self;
			});
			this.$add$ = (function ($e) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$addAll$ = (function ($c) {
				var self = this;
				$c.$do$((function ($el) {
					return self._$add$($el);
				}));
				return $c;
			});
			this.$at$ = (function ($i) {
				var self = this;
				var $adjusted = nil;
				$adjusted = $i + self._$startGap();
				if (!((0 < $i) && $adjusted.$$less$equal(self._$lastIndex()))) {
					self.$enclosingObjects$Collections$AddableList[0]._$error$("invalid index");
				} else {
					nil;
				};
				return self._$contents().$at$($adjusted);
			});
			this.$at$ifAbsent$ = (function ($i, $f) {
				var self = this;
				var $internal = nil;
				$internal = $i + self._$startGap();
				return self._$internalIndexIsValid$($internal).$ifTrue$ifFalse$((function () {
					return self._$contents().$at$($internal);
				}), (function () {
					return $f.$value();
				}));
			});
			this.$includeAll$ = (function ($c) {
				var self = this;
				$c.$do$((function ($el) {
					return self._$include$($el);
				}));
				return $c;
			});
			this.$indexOf$ifAbsent$ = (function ($el, $f) {
				var self = this;
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = self._$size();
					for (; $$limit.$$greater$equal($i); ) {
						if (self._$at$($i).$$equal($el)) {
							return $i;
						} else {
							nil;
						};
						$i = (1).$$plus($i);
					};
				};
				return $f.$value();
			});
			this.$remove$at$ = (function ($nElements, $i) {
				var self = this;
				var $el = nil;
				var $internal = nil;
				$el = self._$at$($i);
				$internal = self._$startGap() + $i;
				self._$internalRangeCheck$($internal);
				self._$internalRangeCheck$(($internal + $nElements) - 1);
				{
					var $$limit = nil;
					var $index = nil;
					nil;
					$index = $internal;
					$$limit = self._$lastIndex() - $nElements;
					for (; $$limit.$$greater$equal($index); ) {
						self._$contents().$at$put$($index, self._$contents().$at$($index + $nElements));
						$index = (1).$$plus($index);
					};
				};
				self._$contents().$at$put$(self._$lastIndex(), nil);
				self._$lastIndex$(self._$lastIndex() - $nElements);
				return self;
			});
			this.$remove$ifAbsent$ = (function ($el, $f) {
				var self = this;
				var NLR = new Object();
				try {
					self._$removeAt$(self._$indexOf$ifAbsent$($el, (function () {
						{
							NLR.value = $f.$value();
							throw NLR;
						};
					})));
					return $el;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$removeAll = (function () {
				var self = this;
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = self._$startGap() + 1;
					$$limit = self._$lastIndex();
					for (; $$limit.$$greater$equal($i); ) {
						self._$contents().$at$put$($i, nil);
						$i = (1).$$plus($i);
					};
				};
				self._$lastIndex$(self._$startGap());
				return self;
			});
			this.$removeAll$ = (function ($c) {
				var self = this;
				$c.$do$((function ($el) {
					return self._$remove$($el);
				}));
				return $c;
			});
			this.$removeAt$ = (function ($index) {
				var self = this;
				var $el = nil;
				$el = self._$at$($index);
				self._$remove$at$(1, $index);
				return $el;
			});
			this.$removeEvery$ = (function ($val) {
				var self = this;
				return self._$removeEvery$startingAt$($val, 1);
			});
			this.$removeEvery$startingAt$ = (function ($val, $start) {
				var self = this;
				var NLR = new Object();
				try {
					var $index = nil;
					$index = self._$indexOf$ifAbsent$($val, (function () {
						{
							NLR.value = $val;
							throw NLR;
						};
					}));
					self._$removeAt$($index);
					return self._$removeEvery$startingAt$($val, $index);
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$removeFirst = (function () {
				var self = this;
				return self._$removeAt$(1);
			});
			this.$removeLast = (function () {
				var self = this;
				return self._$removeAt$(self._$size());
			});
			this.$size = (function () {
				var self = this;
				return self._$lastIndex() - self._$startGap();
			});
			this.$size$ = (function ($s) {
				var self = this;
				var $delta = nil;
				var $newLastIndex = nil;
				$delta = $s - self._$size();
				$newLastIndex = self._$lastIndex() + $delta;
				if ($delta < 0) {
					{
						var $$limit = nil;
						var $i = nil;
						nil;
						$i = $newLastIndex + 1;
						$$limit = self._$lastIndex();
						for (; $$limit.$$greater$equal($i); ) {
							self._$contents().$at$put$($i, nil);
							$i = (1).$$plus($i);
						};
					};
				} else {
					nil;
				};
				if ($delta > 0) {
					self._$needSpaceAtEnd$($delta);
				} else {
					nil;
				};
				self._$lastIndex$(self._$lastIndex() + $delta);
				return self;
			});
			this.$include$ = (function ($e) {
				var self = this;
				return self._$include$ifNew$($e, (function () {
					return nil;
				}));
			});
			this.$include$ifNew$ = (function ($e, $blk) {
				var self = this;
				if (!self._$includes$($e)) {
					self._$add$($e);
					$blk.$value();
				} else {
					nil;
				};
				return $e;
			});
			this.$remove$ = (function ($el) {
				var self = this;
				return self._$remove$ifAbsent$($el, (function () {
					return self.$enclosingObjects$Collections$AddableList[0]._$error$("element not found");
				}));
			});
			this.$removeAllSuchThat$ = (function ($test) {
				var self = this;
				var $i = nil;
				$i = 1;
				{
					nil;
					for (; $i.$$less$equal(self._$size()); ) {
						if ($test.$value$(self._$at$($i))) {
							self._$removeAt$($i);
						} else {
							$i = $i + 1;
						};
					};
				};
				return self;
			});
			this.$makeSpaceAtStart$ = (function ($nslots) {
				var self = this;
				var $newGap = nil;
				var $diff = nil;
				var $newContents = nil;
				var $sz = nil;
				var $newLastIndex = nil;
				if (self._$isEmpty() && $nslots.$$less$equal(self._$contents().$size())) {
					self._$startGap$($nslots);
					self._$lastIndex$($nslots);
					return $nslots;
				} else {
					nil;
				};
				$sz = self._$size();
				$newGap = $nslots.$max$($sz);
				$diff = $newGap - self._$startGap();
				$newLastIndex = $newGap + $sz;
				$newContents = self._$Array().$new$(self._$contents().$size() + $diff);
				$newContents.$replaceFrom$to$with$startingAt$($newGap + 1, $newLastIndex, self._$contents(), self._$firstIndex());
				self._$startGap$($newGap);
				self._$contents$($newContents);
				self._$lastIndex$($newLastIndex);
				return $diff;
			});
			this.$copyWithSize$ = (function ($s) {
				var self = this;
				var $safeself = nil;
				$safeself = self;
				return self._$Array().$new$($s).$replaceFrom$to$with$(1, $s.$min$(self._$size()), $safeself);
			});
			this.$initCapacity$ = (function ($c) {
				var self = this;
				self._$contents$(self._$Array().$new$($c));
				self._$startGap$(0);
				self._$lastIndex$(0);
				return self;
			});
			this.$do$ = (function ($action) {
				var self = this;
				{
					var $$limit = nil;
					var $index = nil;
					nil;
					$index = self._$startGap() + 1;
					$$limit = self._$lastIndex();
					for (; $$limit.$$greater$equal($index); ) {
						$action.$value$(self._$contents().$at$($index));
						$index = (1).$$plus($index);
					};
				};
				return self;
			});
			this.$endGap = (function () {
				var self = this;
				return self._$contents().$size() - self._$lastIndex();
			});
			this.$firstIndex = (function () {
				var self = this;
				return 1 + self._$startGap();
			});
			this.$internalIndexIsValid$ = (function ($index) {
				var self = this;
				return $index.$$greater(self._$startGap()) && $index.$$less$equal(self._$lastIndex());
			});
			this.$internalRangeCheck$ = (function ($index) {
				var self = this;
				if (!self._$internalIndexIsValid$($index)) {
					self.$enclosingObjects$Collections$AddableList[0]._$error$("invalid index");
				} else {
					nil;
				};
				return self;
			});
			this.$makeSpace$beforeIndex$ = (function ($slots, $i) {
				var self = this;
				return (($i - self._$startGap()) - 1).$$greater((self._$lastIndex() - $i) + 1).$ifTrue$ifFalse$((function () {
					self._$needSpaceAtEnd$($slots);
					self._$contents().$replaceFrom$to$with$startingAt$($i + $slots, self._$lastIndex() + $slots, self._$contents(), $i);
					self._$lastIndex$(self._$lastIndex() + $slots);
					return $i;
				}), (function () {
					var $newI = nil;
					$newI = ($i + self._$needSpaceAtStart$($slots)) - $slots;
					self._$contents().$replaceFrom$to$with$startingAt$((self._$startGap() + 1) - $slots, $newI - 1, self._$contents(), self._$startGap() + 1);
					self._$startGap$(self._$startGap() - $slots);
					return $newI;
				}));
			});
			this.$needSpaceAtEnd$ = (function ($slots) {
				var self = this;
				if ($slots.$$greater(self._$endGap())) {
					self._$contents$(self._$contents().$copyWithSize$(self._$contents().$size() + $slots.$max$(self._$size())));
				} else {
					nil;
				};
				return self;
			});
			this.$needSpaceAtStart$ = (function ($nslots) {
				var self = this;
				return $nslots.$$greater(self._$startGap()).$ifTrue$ifFalse$((function () {
					return self._$makeSpaceAtStart$($nslots);
				}), (function () {
					return 0;
				}));
			});
			this.$postCopy = (function () {
				var self = this;
				self.$super$Collections$AddableList$slot._$postCopy.call(self);
				self._$contents$(self._$contents().$copyWithSize$(self._$contents().$size().$max$(self._$lastIndex())));
				return self;
			});
			this.$with$ = (function ($el) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$withAll$ = (function ($els) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$contents = (function () {
				return this.$contents$slot;
			});
			this.$contents$ = (function (v) {
				this.$contents$slot = v;
				return this;
			});
			this.$startGap = (function () {
				return this.$startGap$slot;
			});
			this.$startGap$ = (function (v) {
				this.$startGap$slot = v;
				return this;
			});
			this.$lastIndex = (function () {
				return this.$lastIndex$slot;
			});
			this.$lastIndex$ = (function (v) {
				this.$lastIndex$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Collections`AddableList";
					this._$superInit$Collections$AddableList = $.$superInit$Collections$AddableList;
					this.$superInit$Collections$AddableList = dnuCatcher("$superInit$Collections$AddableList");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$add$ = this._$add$ = $.$add$;
					this.$addAll$ = this._$addAll$ = $.$addAll$;
					this.$at$ = this._$at$ = $.$at$;
					this.$at$ifAbsent$ = this._$at$ifAbsent$ = $.$at$ifAbsent$;
					this.$includeAll$ = this._$includeAll$ = $.$includeAll$;
					this.$indexOf$ifAbsent$ = this._$indexOf$ifAbsent$ = $.$indexOf$ifAbsent$;
					this.$remove$at$ = this._$remove$at$ = $.$remove$at$;
					this.$remove$ifAbsent$ = this._$remove$ifAbsent$ = $.$remove$ifAbsent$;
					this.$removeAll = this._$removeAll = $.$removeAll;
					this.$removeAll$ = this._$removeAll$ = $.$removeAll$;
					this.$removeAt$ = this._$removeAt$ = $.$removeAt$;
					this.$removeEvery$ = this._$removeEvery$ = $.$removeEvery$;
					this.$removeEvery$startingAt$ = this._$removeEvery$startingAt$ = $.$removeEvery$startingAt$;
					this.$removeFirst = this._$removeFirst = $.$removeFirst;
					this.$removeLast = this._$removeLast = $.$removeLast;
					this.$size = this._$size = $.$size;
					this.$size$ = this._$size$ = $.$size$;
					this.$include$ = this._$include$ = $.$include$;
					this.$include$ifNew$ = this._$include$ifNew$ = $.$include$ifNew$;
					this.$remove$ = this._$remove$ = $.$remove$;
					this.$removeAllSuchThat$ = this._$removeAllSuchThat$ = $.$removeAllSuchThat$;
					this._$makeSpaceAtStart$ = $.$makeSpaceAtStart$;
					this.$makeSpaceAtStart$ = dnuCatcher("$makeSpaceAtStart$");
					this.$copyWithSize$ = this._$copyWithSize$ = $.$copyWithSize$;
					this.$initCapacity$ = this._$initCapacity$ = $.$initCapacity$;
					this.$do$ = this._$do$ = $.$do$;
					this._$endGap = $.$endGap;
					this.$endGap = dnuCatcher("$endGap");
					this._$firstIndex = $.$firstIndex;
					this.$firstIndex = dnuCatcher("$firstIndex");
					this._$internalIndexIsValid$ = $.$internalIndexIsValid$;
					this.$internalIndexIsValid$ = dnuCatcher("$internalIndexIsValid$");
					this._$internalRangeCheck$ = $.$internalRangeCheck$;
					this.$internalRangeCheck$ = dnuCatcher("$internalRangeCheck$");
					this._$makeSpace$beforeIndex$ = $.$makeSpace$beforeIndex$;
					this.$makeSpace$beforeIndex$ = dnuCatcher("$makeSpace$beforeIndex$");
					this._$needSpaceAtEnd$ = $.$needSpaceAtEnd$;
					this.$needSpaceAtEnd$ = dnuCatcher("$needSpaceAtEnd$");
					this._$needSpaceAtStart$ = $.$needSpaceAtStart$;
					this.$needSpaceAtStart$ = dnuCatcher("$needSpaceAtStart$");
					this.$postCopy = this._$postCopy = $.$postCopy;
					this.$with$ = this._$with$ = $.$with$;
					this.$withAll$ = this._$withAll$ = $.$withAll$;
					this._$contents = $.$contents;
					this.$contents = dnuCatcher("$contents");
					this._$contents$ = $.$contents$;
					this.$contents$ = dnuCatcher("$contents$");
					this._$startGap = $.$startGap;
					this.$startGap = dnuCatcher("$startGap");
					this._$startGap$ = $.$startGap$;
					this.$startGap$ = dnuCatcher("$startGap$");
					this._$lastIndex = $.$lastIndex;
					this.$lastIndex = dnuCatcher("$lastIndex");
					this._$lastIndex$ = $.$lastIndex$;
					this.$lastIndex$ = dnuCatcher("$lastIndex$");
					this.$enclosingObjects$Collections$AddableList = enclosingObjects;
					this.$super$Collections$AddableList$slot = runtimeSuperclass;
					this["Collections`AddableList"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$contents$slot = nil;
						this.$startGap$slot = nil;
						this.$lastIndex$slot = nil;
					});
					this.basicNew = this["Collections`AddableList"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Collections`AddableList";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("defaultCapacity", false, "public defaultCapacity ^<Integer> = (\r	^5\r)"),
					new MM("new:", false, "public new: capacity <Integer> ^<Instance> = (\r\r	^new initCapacity: capacity\r)"),
					new MM("with:", false, "public with: val1 <E> ^<Instance> = (\r	^(new: 1) add: val1; yourself\r)"),
					new MM("withAll:", false, "public withAll: cltn <Collection[E]> ^<Instance> = (\r	^(new: cltn size) addAll: cltn; yourself\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$defaultCapacity = (function () {
					var self = this;
					return 5;
				});
				this.$new$ = (function ($capacity) {
					var self = this;
					return self._$new().$initCapacity$($capacity);
				});
				this.$with$ = (function ($val1) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$add$($val1);
						return cascadeReceiver.$yourself();
					})(self._$new$(1));
				});
				this.$withAll$ = (function ($cltn) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$addAll$($cltn);
						return cascadeReceiver.$yourself();
					})(self._$new$($cltn.$size()));
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Collections`AddableList";
						this.$new = this._$new = $.$new;
						this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
						this.$new$ = this._$new$ = $.$new$;
						this.$with$ = this._$with$ = $.$with$;
						this.$withAll$ = this._$withAll$ = $.$withAll$;
						this.$enclosingObjects$Collections$AddableList = enclosingObjects;
						this.$super$Collections$AddableList = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Collections$Association = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Collections`Association";
			this.name = "Collections`Association";
			this.header = "Association key: k value: v = (\r(* Associates an object of type K with an object of type V. *)|\r	public key <K> ::= k.\r	public value <V> ::= v.\r|)";
			this.slots = [
				new SM("key", true, false),
				new SM("value", true, false)
			];
			this.methods = [
				new MM("superInit`Collections`Association", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("copy", false, "public copy = (\r	^class key: key value: value\r)"),
				new MM("=", false, "public = other <Object> ^<Boolean> = (\r	(* | othera <Assoc[Object,Object]> | *)\r	(* %todo: replace Association with Assoc when typecase is fully impl *)\r	(* othera:: Association[Object,Object] coerce: other else: [ ^false ]. *)\r	^key = other key and: [ value = other value ].\r)"),
				new MM("hash", false, "public hash ^<Integer> = (\r	^key hash bitXor: value hash\r)"),
				new MM("printOn:", false, "public printOn: strm <CharOutputStream> = (\r	key printOn: strm.\r	strm nextPutAll: ' -> '.\r	value printOn: strm.\r)"),
				new MM("key", true, null),
				new MM("key:", true, null),
				new MM("value", true, null),
				new MM("value:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Collections$Association = (function ($k, $v) {
				var self = this;
				self.$super$Collections$Association$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($k, $v) {
				var self = this;
				self._$superInit$Collections$Association($k, $v);
				self._$key$($k);
				self._$value$($v);
				return self;
			});
			this.$copy = (function () {
				var self = this;
				return self._$class().$key$value$(self._$key(), self._$value());
			});
			this.$$equal = (function ($other) {
				var self = this;
				return self._$key().$$equal($other.$key()) && self._$value().$$equal($other.$value());
			});
			this.$hash = (function () {
				var self = this;
				return self._$key().$hash().$bitXor$(self._$value().$hash());
			});
			this.$printOn$ = (function ($strm) {
				var self = this;
				self._$key().$printOn$($strm);
				$strm.$nextPutAll$(" -> ");
				self._$value().$printOn$($strm);
				return self;
			});
			this.$key = (function () {
				return this.$key$slot;
			});
			this.$key$ = (function (v) {
				this.$key$slot = v;
				return this;
			});
			this.$value = (function () {
				return this.$value$slot;
			});
			this.$value$ = (function (v) {
				this.$value$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Collections`Association";
					this._$superInit$Collections$Association = $.$superInit$Collections$Association;
					this.$superInit$Collections$Association = dnuCatcher("$superInit$Collections$Association");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$copy = this._$copy = $.$copy;
					this.$$equal = this._$$equal = $.$$equal;
					this.$hash = this._$hash = $.$hash;
					this.$printOn$ = this._$printOn$ = $.$printOn$;
					this.$key = this._$key = $.$key;
					this.$key$ = this._$key$ = $.$key$;
					this.$value = this._$value = $.$value;
					this.$value$ = this._$value$ = $.$value$;
					this.$enclosingObjects$Collections$Association = enclosingObjects;
					this.$super$Collections$Association$slot = runtimeSuperclass;
					this["Collections`Association"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$key$slot = nil;
						this.$value$slot = nil;
					});
					this.basicNew = this["Collections`Association"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Collections`Association";
				this.slots = [];
				this.methods = [
					new MM("key:value:", true, null),
					new MM("new", false, "public new ^<Instance> = (\r	^self key: nil value: nil\r)")
				];
				this.nestedClasses = [];
				this.$key$value$ = (function ($k, $v) {
					return (new this.nonMeta.basicNew()).$instance$initializer($k, $v);
				});
				this.$new = (function () {
					var self = this;
					return self._$key$value$(nil, nil);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Collections`Association";
						this.$key$value$ = this._$key$value$ = $.$key$value$;
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Collections$Association = enclosingObjects;
						this.$super$Collections$Association = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Collections$Bag = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Collections`Bag";
			this.name = "Collections`Bag";
			this.header = "Bag new: capacity <Int> ^<Instance> = Collection (\r(* Bags are unordered collections of possibly duplicate elements.\r\rContrast this with Sets, which will hold no more than one entry\rfor a given object (as distinguished by #=). *)|\r	private contents_private <MutableMap[E,Int]> ::= MutableHashedMap new: capacity.	(* holds (element -> occurrence) *)\r|)";
			this.slots = [new SM("contents_private", true, false)];
			this.methods = [
				new MM("superInit`Collections`Bag", true, "Collection"),
				new MM("instance`initializer", true, "Collection"),
				new MM("occurrencesOf:", false, "occurrencesOf: o <Object> ^<Int> = (\r	^contents at: o ifAbsent: [ 0 ]\r)"),
				new MM("size", false, "size ^<Int> = (\r	^contents inject: 0 into:\r		[ :tot <Int> :occurrences <Int> |\r			tot + occurrences	]\r)"),
				new MM("add:", false, "add: el <E> ^<E> = (\r	^add: el withOccurrences: 1\r)"),
				new MM("add:withOccurrences:", false, "add: el <E> withOccurrences: oc <Int> ^<E>  = (\r	contents at: el put: oc + (occurrencesOf: el) .\r	^el\r)"),
				new MM("addAll:", false, "addAll: els <Collection[E]> ^<Collection[E]> = (\r	^els do: [ :el <E> | add: el ]\r)"),
				new MM("include:", false, "include: el <E> ^<E> = (\r	| ocs <Int> |\r	ocs:: occurrencesOf: el.\r	ocs > 0	\r		ifFalse: [ contents at: el put: 1 ].\r	^el\r)"),
				new MM("include:ifNew:", false, "include: el <E> ifNew: blk <[]> ^<E> = (\r	| isnew <Boolean> |\r	isnew:: includes: el.\r	include: el.\r	isnew\r		ifTrue: [ blk value ].\r	^el\r)"),
				new MM("includeAll:", false, "includeAll: els <Collection[E]> ^<Collection[E]> = (\r	^els do: [ :el <E> |	include: el ]\r)"),
				new MM("remove:", false, "remove: el <E> ^<E> = (\r	^remove: el ifAbsent: [ error: 'Element not found' ]\r)"),
				new MM("remove:ifAbsent:", false, "remove: el <E> ifAbsent: f <[X def]> ^<E | X> = (\r	^remove: el withOccurrences: 1 ifAbsent: f\r)"),
				new MM("remove:withOccurrences:ifAbsent:", false, "remove: el <E> withOccurrences: ocs <Int> ifAbsent: f <[X def]> ^<E | X> = (\r	| curOcs <Int> |\r	curOcs:: occurrencesOf: el.\r	^ocs > curOcs\r		ifTrue: [ f value ]\r		ifFalse: [  curOcs = ocs\r					ifTrue: [	contents removeKey: el ]\r					ifFalse: [	contents at: el put: curOcs - ocs ].\r				   el	]\r)"),
				new MM("contents:", false, "contents: c <MutableMap[E,Int]> = (\r	contents_private:: c.\r)"),
				new MM("isKindOfBag", false, "isKindOfBag = (\r\r	^ true\r)"),
				new MM("removeAll:", false, "removeAll: els <Collection[E]> ^<Collection[E]> = (\r	els do: [ :el <E> | remove: el ].\r	^els\r)"),
				new MM("removeAllSuchThat:", false, "removeAllSuchThat: test <[:E| Boolean]> = (\r	copy do:\r		[ :el |\r			(test value: el)\r				ifTrue: [ self remove: el ]		]\r)"),
				new MM("removeEvery:", false, "removeEvery: el <E> ^<E> = (\r	contents removeKey: el ifAbsent: [].\r	^el\r)"),
				new MM("asBag", false, "asBag ^<Bag[EX]> = (\r	(* {where EX is returnType of #anElement message of receiverType} *)\r	^(* guaranteed <Bag[EX]> *)self\r)"),
				new MM("initCapacity:", false, "initCapacity: cap <Int> = (\r	contents: (MutableHashedMap(* [E,Int] *) new: cap).\r)"),
				new MM("do:", false, "do: f <[:E]> = (\r	contents keysAndValuesDo:\r		[ :el <E> :occurrences <Int> |\r			occurrences timesRepeat:\r				[ f value: el ]		].\r)"),
				new MM("equalsBag:", false, "equalsBag: other <Bag[Object]> ^<Boolean> = (\r\r\r	(* %kludge: This is ugly, but will have to do until typecase can deal with type variables.  It is safe\r	  since we know that MutableHashedMaps can actually perform an at:ifAbsent: safely with\r	  an arbitrary key type, even thought its signature doesn't reflect that currently (although it could) *)\r\r	contents size = other contents size\r		ifFalse: [ ^false ].\r	contents keysAndValuesDo:\r		[ :el <E> :occurrences <Int> |\r			(other contents at: el ifAbsent: [ 0 ]) = occurrences\r				ifFalse: [ ^false ].	].\r	^true\r)"),
				new MM("postCopy", false, "postCopy = (\r	super postCopy.\r	contents: contents copy.\r)"),
				new MM("contents", false, "contents ^<MutableMap[E,Int]> = (\r	^contents_private\r)"),
				new MM("=", false, "= other <Object> ^<Boolean> = (\r	^self == other\r		or: [ equalsBag: (Bag(* [Object] *) coerce: other else: [ ^false ]) ]\r)"),
				new MM("includes:", false, "includes: el <Object> ^<Boolean> = (\r	^contents includesKey: el\r)"),
				new MM("~=", false, "~= other = (\r	^(self = other) not.\r)"),
				new MM("contents_private", true, null),
				new MM("contents_private:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Collections$Bag = (function ($capacity) {
				var self = this;
				self.$super$Collections$Bag$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($capacity) {
				var self = this;
				self._$superInit$Collections$Bag($capacity);
				$1.$contents_private$.call(self, self.$enclosingObjects$Collections$Bag[0]._$MutableHashedMap().$new$($capacity));
				return self;
			});
			this.$occurrencesOf$ = (function ($o) {
				var self = this;
				return self._$contents().$at$ifAbsent$($o, (function () {
					return 0;
				}));
			});
			this.$size = (function () {
				var self = this;
				return self._$contents().$inject$into$(0, (function ($tot, $occurrences) {
					return $tot + $occurrences;
				}));
			});
			this.$add$ = (function ($el) {
				var self = this;
				return self._$add$withOccurrences$($el, 1);
			});
			this.$add$withOccurrences$ = (function ($el, $oc) {
				var self = this;
				self._$contents().$at$put$($el, $oc + self._$occurrencesOf$($el));
				return $el;
			});
			this.$addAll$ = (function ($els) {
				var self = this;
				return $els.$do$((function ($el) {
					return self._$add$($el);
				}));
			});
			this.$include$ = (function ($el) {
				var self = this;
				var $ocs = nil;
				$ocs = self._$occurrencesOf$($el);
				if (!($ocs > 0)) {
					self._$contents().$at$put$($el, 1);
				} else {
					nil;
				};
				return $el;
			});
			this.$include$ifNew$ = (function ($el, $blk) {
				var self = this;
				var $isnew = nil;
				$isnew = self._$includes$($el);
				self._$include$($el);
				if ($isnew) {
					$blk.$value();
				} else {
					nil;
				};
				return $el;
			});
			this.$includeAll$ = (function ($els) {
				var self = this;
				return $els.$do$((function ($el) {
					return self._$include$($el);
				}));
			});
			this.$remove$ = (function ($el) {
				var self = this;
				return self._$remove$ifAbsent$($el, (function () {
					return self.$enclosingObjects$Collections$Bag[0]._$error$("Element not found");
				}));
			});
			this.$remove$ifAbsent$ = (function ($el, $f) {
				var self = this;
				return self._$remove$withOccurrences$ifAbsent$($el, 1, $f);
			});
			this.$remove$withOccurrences$ifAbsent$ = (function ($el, $ocs, $f) {
				var self = this;
				var $curOcs = nil;
				$curOcs = self._$occurrencesOf$($el);
				return $ocs.$$greater($curOcs).$ifTrue$ifFalse$((function () {
					return $f.$value();
				}), (function () {
					if ($curOcs.$$equal($ocs)) {
						self._$contents().$removeKey$($el);
					} else {
						self._$contents().$at$put$($el, $curOcs - $ocs);
					};
					return $el;
				}));
			});
			this.$contents$ = (function ($c) {
				var self = this;
				$1.$contents_private$.call(self, $c);
				return self;
			});
			this.$isKindOfBag = (function () {
				var self = this;
				return true;
			});
			this.$removeAll$ = (function ($els) {
				var self = this;
				$els.$do$((function ($el) {
					return self._$remove$($el);
				}));
				return $els;
			});
			this.$removeAllSuchThat$ = (function ($test) {
				var self = this;
				self._$copy().$do$((function ($el) {
					return $test.$value$($el).$ifTrue$((function () {
						return self._$remove$($el);
					}));
				}));
				return self;
			});
			this.$removeEvery$ = (function ($el) {
				var self = this;
				self._$contents().$removeKey$ifAbsent$($el, (function () {
					return nil;
				}));
				return $el;
			});
			this.$asBag = (function () {
				var self = this;
				return self;
			});
			this.$initCapacity$ = (function ($cap) {
				var self = this;
				self._$contents$(self.$enclosingObjects$Collections$Bag[0]._$MutableHashedMap().$new$($cap));
				return self;
			});
			this.$do$ = (function ($f) {
				var self = this;
				self._$contents().$keysAndValuesDo$((function ($el, $occurrences) {
					return $occurrences.$timesRepeat$((function () {
						return $f.$value$($el);
					}));
				}));
				return self;
			});
			this.$equalsBag$ = (function ($other) {
				var self = this;
				var NLR = new Object();
				try {
					if (!self._$contents().$size().$$equal($other.$contents().$size())) {
						return false;
					} else {
						nil;
					};
					self._$contents().$keysAndValuesDo$((function ($el, $occurrences) {
						return $other.$contents().$at$ifAbsent$($el, (function () {
							return 0;
						})).$$equal($occurrences).$ifFalse$((function () {
							{
								NLR.value = false;
								throw NLR;
							};
						}));
					}));
					return true;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$postCopy = (function () {
				var self = this;
				self.$super$Collections$Bag$slot._$postCopy.call(self);
				self._$contents$(self._$contents().$copy());
				return self;
			});
			this.$contents = (function () {
				var self = this;
				return $1.$contents_private.call(self);
			});
			this.$$equal = (function ($other) {
				var self = this;
				var NLR = new Object();
				try {
					return (self === $other) || self._$equalsBag$(self.$enclosingObjects$Collections$Bag[0]._$Bag().$coerce$else$($other, (function () {
						{
							NLR.value = false;
							throw NLR;
						};
					})));
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$includes$ = (function ($el) {
				var self = this;
				return self._$contents().$includesKey$($el);
			});
			this.$$tilde$equal = (function ($other) {
				var self = this;
				return self._$$equal($other).$not();
			});
			this.$contents_private = (function () {
				return this.$contents_private$slot;
			});
			this.$contents_private$ = (function (v) {
				this.$contents_private$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Collections`Bag";
					this._$superInit$Collections$Bag = $.$superInit$Collections$Bag;
					this.$superInit$Collections$Bag = dnuCatcher("$superInit$Collections$Bag");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$occurrencesOf$ = $.$occurrencesOf$;
					this.$occurrencesOf$ = dnuCatcher("$occurrencesOf$");
					this._$size = $.$size;
					this.$size = dnuCatcher("$size");
					this._$add$ = $.$add$;
					this.$add$ = dnuCatcher("$add$");
					this._$add$withOccurrences$ = $.$add$withOccurrences$;
					this.$add$withOccurrences$ = dnuCatcher("$add$withOccurrences$");
					this._$addAll$ = $.$addAll$;
					this.$addAll$ = dnuCatcher("$addAll$");
					this._$include$ = $.$include$;
					this.$include$ = dnuCatcher("$include$");
					this._$include$ifNew$ = $.$include$ifNew$;
					this.$include$ifNew$ = dnuCatcher("$include$ifNew$");
					this._$includeAll$ = $.$includeAll$;
					this.$includeAll$ = dnuCatcher("$includeAll$");
					this._$remove$ = $.$remove$;
					this.$remove$ = dnuCatcher("$remove$");
					this._$remove$ifAbsent$ = $.$remove$ifAbsent$;
					this.$remove$ifAbsent$ = dnuCatcher("$remove$ifAbsent$");
					this._$remove$withOccurrences$ifAbsent$ = $.$remove$withOccurrences$ifAbsent$;
					this.$remove$withOccurrences$ifAbsent$ = dnuCatcher("$remove$withOccurrences$ifAbsent$");
					this._$contents$ = $.$contents$;
					this.$contents$ = dnuCatcher("$contents$");
					this._$isKindOfBag = $.$isKindOfBag;
					this.$isKindOfBag = dnuCatcher("$isKindOfBag");
					this._$removeAll$ = $.$removeAll$;
					this.$removeAll$ = dnuCatcher("$removeAll$");
					this._$removeAllSuchThat$ = $.$removeAllSuchThat$;
					this.$removeAllSuchThat$ = dnuCatcher("$removeAllSuchThat$");
					this._$removeEvery$ = $.$removeEvery$;
					this.$removeEvery$ = dnuCatcher("$removeEvery$");
					this._$asBag = $.$asBag;
					this.$asBag = dnuCatcher("$asBag");
					this._$initCapacity$ = $.$initCapacity$;
					this.$initCapacity$ = dnuCatcher("$initCapacity$");
					this._$do$ = $.$do$;
					this.$do$ = dnuCatcher("$do$");
					this._$equalsBag$ = $.$equalsBag$;
					this.$equalsBag$ = dnuCatcher("$equalsBag$");
					this._$postCopy = $.$postCopy;
					this.$postCopy = dnuCatcher("$postCopy");
					this._$contents = $.$contents;
					this.$contents = dnuCatcher("$contents");
					this._$$equal = $.$$equal;
					this.$$equal = dnuCatcher("$$equal");
					this._$includes$ = $.$includes$;
					this.$includes$ = dnuCatcher("$includes$");
					this._$$tilde$equal = $.$$tilde$equal;
					this.$$tilde$equal = dnuCatcher("$$tilde$equal");
					this.$enclosingObjects$Collections$Bag = enclosingObjects;
					this.$super$Collections$Bag$slot = runtimeSuperclass;
					this["Collections`Bag"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$contents_private$slot = nil;
					});
					this.basicNew = this["Collections`Bag"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Collections`Bag";
				this.slots = [];
				this.methods = [
					new MM("new:", true, null),
					new MM("defaultCapacity", false, "public defaultCapacity = (\r\r	^ 8\r)"),
					new MM("with:with:", false, "with: el1 with: el2 = (\r	^(with: el1) add: el2; yourself.\r)"),
					new MM("with:with:with:", false, "with: el1 with: el2 with: el3 = (\r	^(with: el1 with: el2) add: el3; yourself\r)"),
					new MM("coerce:else:", false, "coerce: o <Object> else: fail <[X def]>   ^<Instance|X> = (\r	(* %remove when typecase correctly implemented. *)\r\r	(* Explicit test for nil as long as the in-image nil is no Newspeak object *)\r	^ (o ~= nil and: [o isKindOfBag])\r		ifTrue: [ o ]\r		ifFalse: [ fail value ]\r)"),
					new MM("new", false, "new = (\r	^new: defaultCapacity\r)"),
					new MM("with:", false, "with: val1 <E> ^<Instance> = (\r	^(new: 1) add: val1; yourself\r)"),
					new MM("withAll:", false, "withAll: cltn <Collection[E]> ^<Instance> = (\r	^(new: cltn size) addAll: cltn; yourself\r)")
				];
				this.nestedClasses = [];
				this.$new$ = (function ($capacity) {
					return (new this.nonMeta.basicNew()).$instance$initializer($capacity);
				});
				this.$defaultCapacity = (function () {
					var self = this;
					return 8;
				});
				this.$with$with$ = (function ($el1, $el2) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$add$($el2);
						return cascadeReceiver.$yourself();
					})(self._$with$($el1));
				});
				this.$with$with$with$ = (function ($el1, $el2, $el3) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$add$($el3);
						return cascadeReceiver.$yourself();
					})(self._$with$with$($el1, $el2));
				});
				this.$coerce$else$ = (function ($o, $fail) {
					var self = this;
					return ($o.$$tilde$equal(nil) && $o.$isKindOfBag()).$ifTrue$ifFalse$((function () {
						return $o;
					}), (function () {
						return $fail.$value();
					}));
				});
				this.$new = (function () {
					var self = this;
					return self._$new$(self._$defaultCapacity());
				});
				this.$with$ = (function ($val1) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$add$($val1);
						return cascadeReceiver.$yourself();
					})(self._$new$(1));
				});
				this.$withAll$ = (function ($cltn) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$addAll$($cltn);
						return cascadeReceiver.$yourself();
					})(self._$new$($cltn.$size()));
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Collections`Bag";
						this.$new$ = this._$new$ = $.$new$;
						this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
						this._$with$with$ = $.$with$with$;
						this.$with$with$ = dnuCatcher("$with$with$");
						this._$with$with$with$ = $.$with$with$with$;
						this.$with$with$with$ = dnuCatcher("$with$with$with$");
						this._$coerce$else$ = $.$coerce$else$;
						this.$coerce$else$ = dnuCatcher("$coerce$else$");
						this._$new = $.$new;
						this.$new = dnuCatcher("$new");
						this._$with$ = $.$with$;
						this.$with$ = dnuCatcher("$with$");
						this._$withAll$ = $.$withAll$;
						this.$withAll$ = dnuCatcher("$withAll$");
						this.$enclosingObjects$Collections$Bag = enclosingObjects;
						this.$super$Collections$Bag = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Collections$Collection = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Collections`Collection";
			this.name = "Collections`Collection";
			this.header = "Collection = (\r(* A Collection is an object that represents a group of objects.\r\rThe only message that must be implemented by subclasses is the #do: message.\rAll other Collection messages are then defined in terms of #do:.\r\r%responsibility size\r    Subclasses usually reimplement the #size message if possible, since the\r	implementation provided in this class is very inefficient.\r%responsibility collect:\r    Subclasses may wish to consider overriding the #collect: (and #select: and #reject:)\r    messages to specialize their return\r    types to match the receiver type more closely. *)| |)";
			this.slots = [];
			this.methods = [
				new MM("superInit`Collections`Collection", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("copy", false, "public copy = (\r	#BOGUS. (* Questionable. Probably should be shallowCopy if we keep it. *)\r	^self class withAll: self\r)"),
				new MM("postCopy", false, "public postCopy = (\r	#BOGUS. (* Squeakism *)\r)"),
				new MM("value", false, "public value = (\r	#BOGUS. (* Questionable *)\r	^self\r)"),
				new MM("hash", false, "public hash ^<Integer> = (\r	| count ::= 0. |\r	^self inject: 0 into:\r		[:previousHash <Integer> :element <E> |\r		| newHash |\r		newHash:: previousHash bitXor: element hash.\r		count:: count + 1.\r		count > 2 ifTrue: [^newHash].\r		newHash]\r)"),
				new MM("occurrencesOf:", false, "protected occurrencesOf: o <Object> ^<Int> = (\r	| c <Int> |\r	#BOGUS. (* Questionable *)\r	c:: 0.\r	do: [ :e <E> | e = o ifTrue:[ c:: c + 1 ]].\r	^c\r)"),
				new MM("size", false, "public size ^<Integer> = (\r	| count ::= 0. |\r	self do: [:element <E> | count:: count + 1 ].\r	^count\r)"),
				new MM("species", false, "public species ^<Collection[E] class> = (\r	^Set\r)"),
				new MM("allSatisfy:", false, "public allSatisfy: predicate <[:E | Boolean]> ^<Boolean> = (\r	self do: [:each | (predicate value: each) ifFalse: [^false]].\r	^true\r)"),
				new MM("anySatisfy:", false, "public anySatisfy: predicate <[:E | Boolean]> ^<Boolean> = (\r	self do: [:each | (predicate value: each) ifTrue: [^true]].\r	^false\r)"),
				new MM("do:separatedBy:", false, "public do: action <[:E]> separatedBy: betweenAction <[]> = (\r	(* Useful when you need to do something 'between' elements (i.e. not before the first one, and not after the last one). [action] is evaluated the same way as for #do:, but [betweenAction] is evaluated once between each pair of elements. *)\r	| firstTime <Boolean> ::= true. |\r	firstTime:: true.\r	self do: \r		[:element <E> |\r		firstTime\r			ifTrue: [firstTime:: false]\r			ifFalse: [betweenAction value].\r			action value: element].\r)"),
				new MM("isCollection", false, "public isCollection ^<Boolean> = (\r	^true\r)"),
				new MM("isKindOfCollection", false, "isKindOfCollection = (\r	(* Should be auto-generated *)\r	^ true\r)"),
				new MM("noneSatisfy:", false, "public noneSatisfy: predicate <[:E | Boolean]> ^<Boolean> = (\r	self do: [:each | (predicate value: each) ifTrue: [^false]].\r	^true\r)"),
				new MM("union:", false, "public union: other <Collection[Object]> ^ <Set[Object]> = (\r	^self asSet addAll: other; yourself\r)"),
				new MM("asArray", false, "public asArray  ^<Array[E]> = (\r	|\r	array <Array[E]> = Array new: size.\r	index <Integer> ::= 1.\r	|\r	self do: [:element <E> |\r		array at: index put: element.\r		index:: index + 1].\r	^array\r)"),
				new MM("asBag", false, "public asBag ^<Bag[EX]> = (\r	(* {where EX is returnType of #anElement message of receiverType} *)\r	(* Return a new Bag holding the elements of this collection.  The element type of the bag is whatever the\r	 static type of the receiver is at the point of send. *)\r\r	^Bag withAll: self\r)"),
				new MM("asMutableArrayList", false, "public asMutableArrayList ^<MutableArrayList[EX]> = (\r	(* {where EX is returnType of #anElement message of receiverType} *)\r(* Return a new MutableArrayList holding the elements of this collection.  The element type of the ordered collection\r       is whatever the static type of the receiver is at the point of send. *)\r	^MutableArrayList(* [EX] *) withAll: (* (guaranteed <CollectionEX]> *)self(* ) *)\r)"),
				new MM("asSet", false, "public asSet ^<Extensible[EX]> = (\r	 (* Return a new extensible collection holding the elements of this collection. *)\r\r	^Set(* [EX] *) withAll: (* (guaranteed <Collection[EX]> *)self(* ) *)\r)"),
				new MM("asSortedList", false, "public asSortedList ^<List[Object]> = (\r	(* This message is NOT typesafe, and should only be used for compatibility reasons, since there is\r 	 no way of knowing whether the elements of this collection support #< or not.  You should use\r	 #asSortedList: instead, if possible *)\r\r	^SortedList(* [Object] *) withAll: self\r)"),
				new MM("asSortedList:", false, "public asSortedList: sortPredicate <[:E:EX | Boolean]>	^<SortedList[EX]> = (\r	(* { where EX is  arg 1 of #value:value: message of arg 1 } *)\r	(* Return a new sorted collection ordered by the given sortPredicate.  Note that Magnitude\r	 supports the defaultSort message for convenience, so that for example if you have a collection\r	 of strings strc, you can say:\r		strc asSortedList: String defaultSort\r	*)\r\r	(* This is typesafe despite the guarantee because the inference clause requires that E = EX at the\r          call site *)\r	^(SortedList(* [EX] *) new: size sortBlock: (* (guaranteed <[EX,EX,^Boolean]> *)sortPredicate(* ) *))\r		addAll: (* (guaranteed <Collection[EX]> *)self(* ) *); yourself\r)"),
				new MM("collect:", false, "public collect: map <[:E | R def]> ^<Collection[R]> = (\r	^self collectUsingAdd: map\r)"),
				new MM("detect:", false, "public detect: predicate <[:E | Boolean]> ^<E> = (\r	^self detect: predicate ifNone: [Error signal: 'No matching element detected']\r)"),
				new MM("detect:ifNone:", false, "public detect: predicate <[:E | Boolean]> ifNone: fail <[X def]> ^<E | X> = (\r	self do: [:element | (predicate value: element) ifTrue: [^element]].\r	^fail value\r)"),
				new MM("do:", false, "public do: action <[:E]> = (\r	subclassResponsibility\r)"),
				new MM("inject:into:", false, "public inject: initialValue <X> into: foldBlock <[:X def :E | X]> ^<X> = (\r	| runningValue <X> |\r	runningValue:: initialValue.\r	self do: [:element <X> | runningValue:: foldBlock value: runningValue value: element].\r	^runningValue\r)"),
				new MM("intersection:", false, "public intersection: other <Collection[Object]> ^<List[E]> = (\r	^self select: [:each | other includes: each]\r)"),
				new MM("reduce:", false, "public reduce: reduceFn <[:RE def :RE | RE]> ^<RE> = (\r	(* {where CONSTRAINER <RE> is returnType of #anElement message of receiverType} *)\r	(* Like reduce:ifEmpty: except that it is a dynamic error to send this to an empty collection *)\r	\r	^self reduce: reduceFn ifEmpty: [Error signal: 'Cannot reduce an empty collection' ] \r)"),
				new MM("reduce:ifEmpty:", false, "public reduce: reduceFn <[:RE def:RE| RE]> ifEmpty: onEmpty <[X def]>  ^<RE | X> = (\r	(* {where CONSTRAINER <RE> is returnType of #anElement message of receiverType} *)\r	(* Reduce is similar to inject except that the first element is used as the injected\r	  element for the rest of the collection.  It is often handier than inject.  For example:\r		(#(1 2 3 4) reduce: [ :a <Int> :b <Int> |   a + b ]) sums a collection of numbers. *)\r\r	(* esoteric typing %note: We need to ensure that E is a subtype of RE (the argument type for the reduction\r		function), but since that would require a\r		supertype constraint (which neither we nor anyone else support, we accomplish the same\r	    thing indirectly by introducing an unreferenced type \r		variable CONSTRAINER that is inferred to be E at the call site, and then constraining it with a bound\r		of RE.  This will prevent any call where E > RE from typechecking.  However, since the\r		typesystem doesn't 'know' that, we have to tell it that with a guarantee in the method body.\r		Because of the CONSTRAINER, we know that the guarantee is true for all calls that typecheck.\r		Of course, this is tricky, but at least we can express it, and in a way that hides the guarantee from\r		callers! *)\r\r	| current <RE> |\r	self do:\r		[:element <E> |\r		| rel <RE> |\r		rel:: element.\r		current isNil\r			ifTrue: [ current:: rel ]\r			ifFalse: [ current:: reduceFn value: current value: rel ]	].\r	^current isNil\r		ifFalse: [ current ]\r		ifTrue: [ onEmpty value ]\r)"),
				new MM("reject:", false, "public reject: predicate <[:E | Boolean]> ^<List[E]> = (\r	^self select: [ :e | (predicate value: e) not ]\r)"),
				new MM("select:", false, "public select: predicate <[:E | Boolean]> ^<List[E]> = (\r	| result <MutableArrayList[E]> |\r	result:: self newForCollectUsingAdd: size.\r	self do: [:element | (predicate value: element) ifTrue: [result add: element]].\r	^result\r)"),
				new MM("printOn:", false, "public printOn: stream <CharOutputStream> = (\r	| count <Integer> first <Boolean> |\r	stream	nextPutAll: class mixin simpleName;\r			nextPut: \"(\".\r	count:: 0.\r	first:: true.\r	self printElementsDo:\r		[:element <Object> |\r		first\r			ifTrue: [ first:: false ]\r			ifFalse: [ stream space ].\r		element printOn: stream.\r		count:: count + 1.\r		count >= maxPrintElements\r			ifTrue: [ stream nextPut: \"<\"; print: size - count; nextPutAll: ' more elements>)'.\r						^self]].\r	stream nextPut: \")\".\r)"),
				new MM("collectUsingAdd:", false, "protected collectUsingAdd: map <[:E | R def]> ^<Collection[R]> = (\r	| c |\r	(* See #newForCollect: for explanation of why the guarantee is safe *)\r	c:: (newForCollectUsingAdd: size). \r	do: [ :e | c add: (map value: e) ].\r	^c\r)"),
				new MM("maxPrintElements", false, "protected maxPrintElements ^<Int> = (\r	^100\r)"),
				new MM("newForCollectUsingAdd:", false, "protected newForCollectUsingAdd: size <Int> ^<MutableArrayList[Object]> = (\r	(* Return a new extensible collection that is as closely related to the receiver's class as possible.  The\r	 returned collection must be unaliased and empty, so it is safe for the caller to guarantee that the type\r	 variable is of a more specific type *)\r\r	^MutableArrayList new: size\r)"),
				new MM("printElementsDo:", false, "protected printElementsDo: f <[:Object]> = (\r	(* Evaluate the block with all the elements that should be shown as the contents in the printstring.  This provides a hook for things like MutableHashedMaps, which want to show their associations, not their values *)\r	self do: f\r)"),
				new MM("=", false, "public = other <Object> ^<Boolean> = (\r	^self == other\r		or: [ self class == other class\r		and: [ self hasSameElementsAs: other ]]\r)"),
				new MM("hasSameElementsAs:", false, "protected hasSameElementsAs: other <Collection[Object]>  ^<Boolean> = (\r	(* Like =, but doesn't care whether the receiver and other are the same kind of collection or not *)\r	#BOGUS. (* Questionable *)\r	^size = other size  and:\r		[ asBag = other asBag ] \r)"),
				new MM("includes:", false, "public includes: o <Object> ^<Boolean> = (\r	self do: [:element <E> | element = o ifTrue: [^true]].\r	^false\r)"),
				new MM("isEmpty", false, "public isEmpty ^<Boolean> = (\r	^0 == self size\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Collections$Collection = (function () {
				var self = this;
				self.$super$Collections$Collection$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Collections$Collection();
				return self;
			});
			this.$copy = (function () {
				var self = this;
				"BOGUS";
				return self._$class().$withAll$(self);
			});
			this.$postCopy = (function () {
				var self = this;
				"BOGUS";
				return self;
			});
			this.$value = (function () {
				var self = this;
				"BOGUS";
				return self;
			});
			this.$hash = (function () {
				var self = this;
				var NLR = new Object();
				try {
					var $count = nil;
					$count = 0;
					return self._$inject$into$(0, (function ($previousHash, $element) {
						var $newHash = nil;
						$newHash = $previousHash.$bitXor$($element.$hash());
						$count = $count + 1;
						if ($count > 2) {
							{
								NLR.value = $newHash;
								throw NLR;
							};
						} else {
							nil;
						};
						return $newHash;
					}));
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$occurrencesOf$ = (function ($o) {
				var self = this;
				var $c = nil;
				"BOGUS";
				$c = 0;
				self._$do$((function ($e) {
					return $e.$$equal($o).$ifTrue$((function () {
						return $c = $c + 1;
					}));
				}));
				return $c;
			});
			this.$size = (function () {
				var self = this;
				var $count = nil;
				$count = 0;
				self._$do$((function ($element) {
					return $count = $count + 1;
				}));
				return $count;
			});
			this.$species = (function () {
				var self = this;
				return self.$enclosingObjects$Collections$Collection[0]._$Set();
			});
			this.$allSatisfy$ = (function ($predicate) {
				var self = this;
				var NLR = new Object();
				try {
					self._$do$((function ($each) {
						return $predicate.$value$($each).$ifFalse$((function () {
							{
								NLR.value = false;
								throw NLR;
							};
						}));
					}));
					return true;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$anySatisfy$ = (function ($predicate) {
				var self = this;
				var NLR = new Object();
				try {
					self._$do$((function ($each) {
						return $predicate.$value$($each).$ifTrue$((function () {
							{
								NLR.value = true;
								throw NLR;
							};
						}));
					}));
					return false;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$do$separatedBy$ = (function ($action, $betweenAction) {
				var self = this;
				var $firstTime = nil;
				$firstTime = true;
				$firstTime = true;
				self._$do$((function ($element) {
					if ($firstTime) {
						$firstTime = false;
					} else {
						$betweenAction.$value();
					};
					return $action.$value$($element);
				}));
				return self;
			});
			this.$isCollection = (function () {
				var self = this;
				return true;
			});
			this.$isKindOfCollection = (function () {
				var self = this;
				return true;
			});
			this.$noneSatisfy$ = (function ($predicate) {
				var self = this;
				var NLR = new Object();
				try {
					self._$do$((function ($each) {
						return $predicate.$value$($each).$ifTrue$((function () {
							{
								NLR.value = false;
								throw NLR;
							};
						}));
					}));
					return true;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$union$ = (function ($other) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$addAll$($other);
					return cascadeReceiver.$yourself();
				})(self._$asSet());
			});
			this.$asArray = (function () {
				var self = this;
				var $array = nil;
				var $index = nil;
				$array = self._$Array().$new$(self._$size());
				$index = 1;
				self._$do$((function ($element) {
					$array.$at$put$($index, $element);
					return $index = $index + 1;
				}));
				return $array;
			});
			this.$asBag = (function () {
				var self = this;
				return self.$enclosingObjects$Collections$Collection[0]._$Bag().$withAll$(self);
			});
			this.$asMutableArrayList = (function () {
				var self = this;
				return self.$enclosingObjects$Collections$Collection[0]._$MutableArrayList().$withAll$(self);
			});
			this.$asSet = (function () {
				var self = this;
				return self.$enclosingObjects$Collections$Collection[0]._$Set().$withAll$(self);
			});
			this.$asSortedList = (function () {
				var self = this;
				return self.$enclosingObjects$Collections$Collection[0]._$SortedList().$withAll$(self);
			});
			this.$asSortedList$ = (function ($sortPredicate) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$addAll$(self);
					return cascadeReceiver.$yourself();
				})(self.$enclosingObjects$Collections$Collection[0]._$SortedList().$new$sortBlock$(self._$size(), $sortPredicate));
			});
			this.$collect$ = (function ($map) {
				var self = this;
				return self._$collectUsingAdd$($map);
			});
			this.$detect$ = (function ($predicate) {
				var self = this;
				return self._$detect$ifNone$($predicate, (function () {
					return self._$Error().$signal$("No matching element detected");
				}));
			});
			this.$detect$ifNone$ = (function ($predicate, $fail) {
				var self = this;
				var NLR = new Object();
				try {
					self._$do$((function ($element) {
						return $predicate.$value$($element).$ifTrue$((function () {
							{
								NLR.value = $element;
								throw NLR;
							};
						}));
					}));
					return $fail.$value();
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$do$ = (function ($action) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$inject$into$ = (function ($initialValue, $foldBlock) {
				var self = this;
				var $runningValue = nil;
				$runningValue = $initialValue;
				self._$do$((function ($element) {
					return $runningValue = $foldBlock.$value$value$($runningValue, $element);
				}));
				return $runningValue;
			});
			this.$intersection$ = (function ($other) {
				var self = this;
				return self._$select$((function ($each) {
					return $other.$includes$($each);
				}));
			});
			this.$reduce$ = (function ($reduceFn) {
				var self = this;
				return self._$reduce$ifEmpty$($reduceFn, (function () {
					return self._$Error().$signal$("Cannot reduce an empty collection");
				}));
			});
			this.$reduce$ifEmpty$ = (function ($reduceFn, $onEmpty) {
				var self = this;
				var $current = nil;
				self._$do$((function ($element) {
					var $rel = nil;
					$rel = $element;
					return $current.$isNil().$ifTrue$ifFalse$((function () {
						return $current = $rel;
					}), (function () {
						return $current = $reduceFn.$value$value$($current, $rel);
					}));
				}));
				return $current.$isNil().$ifFalse$ifTrue$((function () {
					return $current;
				}), (function () {
					return $onEmpty.$value();
				}));
			});
			this.$reject$ = (function ($predicate) {
				var self = this;
				return self._$select$((function ($e) {
					return $predicate.$value$($e).$not();
				}));
			});
			this.$select$ = (function ($predicate) {
				var self = this;
				var $result = nil;
				$result = self._$newForCollectUsingAdd$(self._$size());
				self._$do$((function ($element) {
					return $predicate.$value$($element).$ifTrue$((function () {
						return $result.$add$($element);
					}));
				}));
				return $result;
			});
			this.$printOn$ = (function ($stream) {
				var self = this;
				var NLR = new Object();
				try {
					var $count = nil;
					var $first = nil;
					(function (cascadeReceiver) {
						cascadeReceiver.$nextPutAll$(self._$class().$mixin().$simpleName());
						return cascadeReceiver.$nextPut$("(");
					})($stream);
					$count = 0;
					$first = true;
					self._$printElementsDo$((function ($element) {
						if ($first) {
							$first = false;
						} else {
							$stream.$space();
						};
						$element.$printOn$($stream);
						$count = $count + 1;
						return $count.$$greater$equal(self._$maxPrintElements()).$ifTrue$((function () {
							(function (cascadeReceiver) {
								cascadeReceiver.$nextPut$("<");
								cascadeReceiver.$print$(self._$size() - $count);
								return cascadeReceiver.$nextPutAll$(" more elements>)");
							})($stream);
							{
								NLR.value = self;
								throw NLR;
							};
						}));
					}));
					$stream.$nextPut$(")");
					return self;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$collectUsingAdd$ = (function ($map) {
				var self = this;
				var $c = nil;
				$c = self._$newForCollectUsingAdd$(self._$size());
				self._$do$((function ($e) {
					return $c.$add$($map.$value$($e));
				}));
				return $c;
			});
			this.$maxPrintElements = (function () {
				var self = this;
				return 100;
			});
			this.$newForCollectUsingAdd$ = (function ($size) {
				var self = this;
				return self.$enclosingObjects$Collections$Collection[0]._$MutableArrayList().$new$($size);
			});
			this.$printElementsDo$ = (function ($f) {
				var self = this;
				self._$do$($f);
				return self;
			});
			this.$$equal = (function ($other) {
				var self = this;
				return (self === $other) || ((self._$class() === $other.$class()) && self._$hasSameElementsAs$($other));
			});
			this.$hasSameElementsAs$ = (function ($other) {
				var self = this;
				"BOGUS";
				return self._$size().$$equal($other.$size()) && self._$asBag().$$equal($other.$asBag());
			});
			this.$includes$ = (function ($o) {
				var self = this;
				var NLR = new Object();
				try {
					self._$do$((function ($element) {
						return $element.$$equal($o).$ifTrue$((function () {
							{
								NLR.value = true;
								throw NLR;
							};
						}));
					}));
					return false;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$isEmpty = (function () {
				var self = this;
				return 0 === self._$size();
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Collections`Collection";
					this._$superInit$Collections$Collection = $.$superInit$Collections$Collection;
					this.$superInit$Collections$Collection = dnuCatcher("$superInit$Collections$Collection");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$copy = this._$copy = $.$copy;
					this.$postCopy = this._$postCopy = $.$postCopy;
					this.$value = this._$value = $.$value;
					this.$hash = this._$hash = $.$hash;
					this._$occurrencesOf$ = $.$occurrencesOf$;
					this.$occurrencesOf$ = dnuCatcher("$occurrencesOf$");
					this.$size = this._$size = $.$size;
					this.$species = this._$species = $.$species;
					this.$allSatisfy$ = this._$allSatisfy$ = $.$allSatisfy$;
					this.$anySatisfy$ = this._$anySatisfy$ = $.$anySatisfy$;
					this.$do$separatedBy$ = this._$do$separatedBy$ = $.$do$separatedBy$;
					this.$isCollection = this._$isCollection = $.$isCollection;
					this._$isKindOfCollection = $.$isKindOfCollection;
					this.$isKindOfCollection = dnuCatcher("$isKindOfCollection");
					this.$noneSatisfy$ = this._$noneSatisfy$ = $.$noneSatisfy$;
					this.$union$ = this._$union$ = $.$union$;
					this.$asArray = this._$asArray = $.$asArray;
					this.$asBag = this._$asBag = $.$asBag;
					this.$asMutableArrayList = this._$asMutableArrayList = $.$asMutableArrayList;
					this.$asSet = this._$asSet = $.$asSet;
					this.$asSortedList = this._$asSortedList = $.$asSortedList;
					this.$asSortedList$ = this._$asSortedList$ = $.$asSortedList$;
					this.$collect$ = this._$collect$ = $.$collect$;
					this.$detect$ = this._$detect$ = $.$detect$;
					this.$detect$ifNone$ = this._$detect$ifNone$ = $.$detect$ifNone$;
					this.$do$ = this._$do$ = $.$do$;
					this.$inject$into$ = this._$inject$into$ = $.$inject$into$;
					this.$intersection$ = this._$intersection$ = $.$intersection$;
					this.$reduce$ = this._$reduce$ = $.$reduce$;
					this.$reduce$ifEmpty$ = this._$reduce$ifEmpty$ = $.$reduce$ifEmpty$;
					this.$reject$ = this._$reject$ = $.$reject$;
					this.$select$ = this._$select$ = $.$select$;
					this.$printOn$ = this._$printOn$ = $.$printOn$;
					this._$collectUsingAdd$ = $.$collectUsingAdd$;
					this.$collectUsingAdd$ = dnuCatcher("$collectUsingAdd$");
					this._$maxPrintElements = $.$maxPrintElements;
					this.$maxPrintElements = dnuCatcher("$maxPrintElements");
					this._$newForCollectUsingAdd$ = $.$newForCollectUsingAdd$;
					this.$newForCollectUsingAdd$ = dnuCatcher("$newForCollectUsingAdd$");
					this._$printElementsDo$ = $.$printElementsDo$;
					this.$printElementsDo$ = dnuCatcher("$printElementsDo$");
					this.$$equal = this._$$equal = $.$$equal;
					this._$hasSameElementsAs$ = $.$hasSameElementsAs$;
					this.$hasSameElementsAs$ = dnuCatcher("$hasSameElementsAs$");
					this.$includes$ = this._$includes$ = $.$includes$;
					this.$isEmpty = this._$isEmpty = $.$isEmpty;
					this.$enclosingObjects$Collections$Collection = enclosingObjects;
					this.$super$Collections$Collection$slot = runtimeSuperclass;
					this["Collections`Collection"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Collections`Collection"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Collections`Collection";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Collections`Collection";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Collections$Collection = enclosingObjects;
						this.$super$Collections$Collection = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Collections$HashedCollection = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Collections`HashedCollection";
			this.name = "Collections`HashedCollection";
			this.header = "HashedCollection new: cap = Collection (|\r	protected table_0 <Array[A|Object]>\r			(* The table holds either included entries, or an object indicating a deleted entry,\r			which is currently the table itself.  This of course means that the table is not allowed\r			as a valid element of the collection, but this is only an issue when writing reflective\r			system code that violates encapsulation. *)\r	protected size_0 <Integer> \r			(* the number of collection elements (not the size of the table) *)\r	protected deleted <Integer> \r			(* the number of slots marked with the deletion placeholder *)\r\r|initCapacity: cap)";
			this.slots = [
				new SM("table_0", true, false),
				new SM("size_0", true, false),
				new SM("deleted", true, false)
			];
			this.methods = [
				new MM("superInit`Collections`HashedCollection", true, "Collection"),
				new MM("instance`initializer", true, "Collection"),
				new MM("at:", false, "public at: key <K> ^<E> = (\r	^at: key ifAbsent: [ error: 'key not found' ] \r)"),
				new MM("at:ifAbsent:", false, "public at: key <Object> ifAbsent: f <[X def]> ^<E|X> = (\r	^elementFor: \r			(valAt: key ifAbsent: [ ^f value ])\r)"),
				new MM("indexOf:", false, "public indexOf: el <Object> ^<K> = (\r	^indexOf: el\r			ifAbsent: [ error: 'Element not found' ]\r)"),
				new MM("indexOf:ifAbsent:", false, "public indexOf: el <Object> ifAbsent: blk <[X def]> ^<K | X> = (\r	contentsDo:\r		[ :v <A> |\r			(elementFor: v) = el\r				ifTrue: [ ^keyFor: v ]  ].\r	^blk value\r)"),
				new MM("keyAtValue:", false, "public keyAtValue: v <Object> ^<K> = (\r	^indexOf: v\r)"),
				new MM("keyAtValue:ifAbsent:", false, "public keyAtValue: v <Object> ifAbsent: blk <[X def]> ^<K | X> = (\r	^indexOf: v ifAbsent: blk \r)"),
				new MM("size", false, "public size ^<Int> = (\r	^size_0\r)"),
				new MM("table", false, "table = (\r	^table_0\r)"),
				new MM("firstTableSize", false, "firstTableSize ^<Integer> = (\r	(* The size used for the table when the capacity is 0 and the first element is added *)\r	\r	^8\r)"),
				new MM("checkValidity", false, "checkValidity = (\r	(* This method performs various validity checks on the receiver *)\r\r	| c <Int> |\r	c:: 0.\r	contentsDo:\r		[ :val <A> |\r			assert: [ (at: (keyFor: val)) = (elementFor: val) ] message: ''.\r			c:: c + 1.		].\r\r	assert: [ c = size ] message: ''.\r)"),
				new MM("add:", false, "public add: val <A> ^<A> = (\r	^include: val\r)"),
				new MM("addAll:", false, "public addAll: c <Collection[A]> ^<Collection[A]> = (\r\r	c do: [ :e <A> |\r		add: e. ].\r	^c\r)"),
				new MM("include:", false, "public include: val <A> ^<A> = (\r\r	^include: val ifNew: []\r\r)"),
				new MM("include:ifNew:", false, "public include: val <A> ifNew: ifNew <[]> ^<A> = (\r\r	^tableAt: (keyFor: val) put: (elementFor: val) ifNew: ifNew\r\r)"),
				new MM("includeAll:", false, "public includeAll: c <Collection[A]> ^<Collection[A]> = (\r\r	c do: [ :el <A> |\r		include: el   ].\r	^c\r)"),
				new MM("do:", false, "public do: f <[:E]> = (\r\r	contentsDo:\r		[ :val <A> |\r			f value: (elementFor: val)		]\r)"),
				new MM("keysDo:", false, "public keysDo: f <[:K]> = (\r\r	contentsDo:\r		[ :val <A> |\r			f value: (keyFor: val)		]\r)"),
				new MM("setTable:", false, "setTable: t <Array[A|Object]> = (\r	table_0:: t.\r)"),
				new MM("size:", false, "size: s <Int> = (\r	size_0:: s\r)"),
				new MM("table:", false, "table: t <Array[A|Object]> = (\r	setTable: t.\r	assert: [deleted = 0] message: ''.\r)"),
				new MM("advanceAmount", false, "advanceAmount ^<Int> = (\r	(* a large prime - 1 *)	\r		^99990\r)"),
				new MM("indexOf:tableMask:", false, "indexOf: key <Object> tableMask: mask <Int> ^<Int> = (\r	^((hashFor: key) bitAnd: mask) + 1\r)"),
				new MM("minTableSize", false, "minTableSize ^<Int> = (\r	^4\r)"),
				new MM("minTableSizeForCapacity:", false, "minTableSizeForCapacity: cap <Integer> ^<Integer> = (\r	(* max density is 50% full *)\r	^cap + cap\r)"),
				new MM("newTableWithSize:", false, "newTableWithSize: tableSize <Int>  ^<Array[A|Object]> = (\r	^Array new: tableSize\r)"),
				new MM("occupied", false, "occupied ^<Integer> = (\r	^size + deleted\r)"),
				new MM("tableSizeForCapacity:", false, "tableSizeForCapacity: cap <Integer> ^<Integer> = (\r        | min <Integer> tsize <Integer> |\r        min:: minTableSizeForCapacity: cap.\r        (* search for the smallest power of two that is >= min *)\r        tsize:: minTableSize.\r        [ tsize < min ]\r                whileTrue: [ tsize:: tsize + tsize ].\r        ^tsize\r)"),
				new MM("initCapacity:", false, "initCapacity: cap <Int> = (\r\r	size: 0.\r	deleted: 0.\r	cap > 0\r		ifTrue: [ table:: newTableWithSize: (tableSizeForCapacity: cap). ].\r\r)"),
				new MM("markDeleted:", false, "markDeleted: index <Int> = (\r\r	| tbl <Array[A|Object]> |\r	tbl:: table.\r	tbl at: index put: tbl.\r	deleted: deleted + 1\r)"),
				new MM("postCopy", false, "postCopy = (\r\r	| tbl <Array[A|Object]> newtbl <Array[A|Object]> |\r\r	super postCopy.\r	tbl:: table.\r	tbl == nil\r		ifTrue: [ ^self ].\r\r	newtbl:: newTableWithSize: tbl size.\r	1 to: tbl size do:\r		[ :index <Int> |\r			atIndex: index\r					inTable: tbl\r					occupiedSlotDo:\r						[ :val <A> |\r							newtbl at: index put: (elementForCopy: val)	]\r					emptySlotDo: [ ]\r					deletedSlotDo:\r						[	newtbl at: index put: newtbl		]\r		].\r	setTable: newtbl\r)"),
				new MM("printElementsDo:", false, "printElementsDo: f <[:Object]> = (\r	\r	contentsDo: f\r)"),
				new MM("buildValForKey:element:", false, "buildValForKey: k <K> element: el <E> ^<A> = (\r	(* construct an A from a K and an E *)\r	subclassResponsibility\r)"),
				new MM("elementFor:", false, "elementFor: val <A> ^<E> = (\r	(* extract an E from an A *)\r	subclassResponsibility\r)"),
				new MM("elementForCopy:", false, "elementForCopy: el <A> ^<A> = (\r\r	(* When a copy of the collection is made, this method implements what happens\r	  to each element.  For example, MutableHashedMaps copy their elements, since the\r	  associations are really part of the MutableHashedMap, whereas KeyedSets don't since the\r	  associations are really elements of the collection. *)\r\r	subclassResponsibility\r)"),
				new MM("hashFor:", false, "hashFor: key <Object> ^<Int> = (\r	(* return the appropriate hash value for a key *)\r	subclassResponsibility\r)"),
				new MM("key:matches:", false, "key: key1 <Object> matches: key2 <Object> ^<Boolean> = (\r\r	(* Test whether two keys match *)\r	self subclassResponsibility\r)"),
				new MM("keyFor:", false, "keyFor: val <A> ^<K> = (\r\r	(* extract an K from an A *)\r	subclassResponsibility\r)"),
				new MM("objToIncludeFor:withExisting:", false, "objToIncludeFor: new <A> withExisting: other <A> ^<A> = (\r\r	(* In the situation where a new value  is being 'include'ed in the collection, and there is already an existing\r	 value with a matching key, this method determines what value is actually placed in the collection *)\r\r	subclassResponsibility\r)"),
				new MM("tableAt:put:inDeletedSlot:", false, "tableAt: key <K>\rput: el <E>\rinDeletedSlot: index <Integer>\r^<A> = (\r\r	| val <A> |\r	val:: tableAt: key put: el inUnusedSlot: index.\r	deleted: deleted - 1.\r	(* we don't have to check for growth when reusing a previously used slot *)\r	^val\r)"),
				new MM("tableAt:put:inEmptySlot:", false, "tableAt: key <K>\rput: el <E>\rinEmptySlot: index <Integer>\r^<A> = (\r\r	| val <A> |\r	val:: tableAt: key put: el inUnusedSlot: index.\r	growIfNeeded.\r	^val\r)"),
				new MM("tableAt:put:inMatchingSlot:value:", false, "tableAt: key <K>\rput: el <E>\rinMatchingSlot: index <Integer>\rvalue: val <A>\r^<A> = (\r\r	| newVal <A> |\r	newVal:: objToIncludeFor: (buildValForKey: key element: el)\r								withExisting: val.\r	table at: index put: newVal.\r	^newVal\r)"),
				new MM("tableAt:put:inUnusedSlot:", false, "tableAt: key <K>\rput: el <E>\rinUnusedSlot: index <Integer>\r^<A> = (\r\r	(* This does the core work for #tableAt:put:[inDeletedSlot:|inEmptySlot:] *)\r\r	| newVal <A> |\r	newVal:: buildValForKey: key element: el.\r	table at: index put: newVal.\r	size: size + 1.\r	^newVal\r)"),
				new MM("atIndex:inTable:occupiedSlotDo:emptySlotDo:deletedSlotDo:", false, "atIndex: i <Int>\rinTable: tbl <Array[Object|A]>\roccupiedSlotDo: occupied <[:A| X def]>\remptySlotDo: empty <[Y def]>\rdeletedSlotDo: deleted <[Z def]>\r^<X|Y|Z> = (\r\r	(* This is the core method that does the case analysis for a slot to\r		determine whether it is occupied, deleted, or empty *)\r\r	| el <A|Object>  |\r	el:: tbl at: i.\r	el == nil\r		ifTrue: [ ^empty value ].\r	el == tbl\r		ifTrue: [ ^deleted value ].\r\r	(* The following guarantee is because the table uses a non-typesafe trick in \r	  which the table pointer itself is used to indicate a deleted slot; thus the table\r	  doesn't hold only values of type A.  The guarantee is safe because we know that\r	  we only put either values or the table into the table, and the previous\r	  statement already handled the case when el is the table pointer-\r	  thus at this point by elimination el has to be a value of type A *)		\r	^occupied value: (* (guaranteed <A> *)el(* ) *)\r)"),
				new MM("contentsDo:", false, "contentsDo: f <[:A]>\r = (\r\r	| tbl <Array[A|Object]> |\r	tbl:: table.\r	tbl == nil\r		ifTrue: [ ^self ].\r\r	1 to: tbl size do:\r		[ :index <Int> |\r				atIndex: index\r					inTable: tbl\r					occupiedSlotDo:\r						[ :val <A> |\r							f value: val	]\r					emptySlotDo: [ ]\r					deletedSlotDo: [ ]\r		]\r\r)"),
				new MM("createFirstTable", false, "createFirstTable = (\r	table:: newTableWithSize: firstTableSize.\r)"),
				new MM("growIfNeeded", false, "growIfNeeded = (\r\r	(minTableSizeForCapacity: occupied) > table size\r		ifTrue: [ growTable ]\r)"),
				new MM("growTable", false, "growTable\r = (\r\r	| new <Array[A|Object]> |\r	new:: newTableWithSize: table size + table size.\r	contentsDo:\r		[ :a_value <A> |\r				lookup: (keyFor: a_value)\r					inTable: new\r					matchingSlotDo:\r						[ :index <Int> :val <A> |\r							shouldNotHappen	]\r					emptySlotDo:\r						[ :index <Int> |\r							new at: index put: a_value	]\r					deletedSlotsDo:\r						[ :index <Int> |\r							shouldNotHappen ]\r					mismatchingSlotsDo:\r						[ :index <Int> | (* ignore *) ]\r		].\r	deleted: 0.\r	table: new.\r)"),
				new MM("lookup:inTable:matchingSlotDo:emptySlotDo:deletedSlotsDo:mismatchingSlotsDo:", false, "lookup: key <Object>\rinTable: tbl <Array[Object|A]>\rmatchingSlotDo: matching <[:Int:A| X def]>\remptySlotDo: empty <[:Int | Y def]>\rdeletedSlotsDo: marked <[:Int]>\rmismatchingSlotsDo: mismatch <[:Int]>\r^<X|Y> = (\r\r	(* This is the core method that looks for a slot suitable for the key,\r		and evaluates the appropriate blocks.\r	   The lookup process is iterative, terminating when a slot that is empty\r	   or has a matching key is found *)\r\r	| i <Int> mask <Int> |\r	mask:: tbl size - 1.\r	i:: indexOf: key tableMask: mask.\r	[ 			atIndex: i\r				inTable: tbl\r				occupiedSlotDo:\r					[ :val <A> |\r						(key: key matches: (keyFor: val))\r							ifTrue: [ ^matching value: i value: val	 ]\r							ifFalse: [ mismatch value: i	 ]\r					]\r				emptySlotDo:\r					[ ^empty value: i ]\r				deletedSlotDo:\r					[	marked value: i	 ].\r		i:: ((i + advanceAmount) bitAnd: mask) + 1.\r	] repeat\r)"),
				new MM("lookup:matchingSlotDo:emptySlotDo:deletedSlotsDo:", false, "lookup: key <Object>\rmatchingSlotDo: matching <[:Integer:A| X def]>\remptySlotDo: empty <[:Integer | Y def]>\rdeletedSlotsDo: marked <[:Integer]>\r^<X|Y> = (\r\r\r	^self		lookup: key\r				inTable: self table\r				matchingSlotDo: matching\r				emptySlotDo: empty\r				deletedSlotsDo: marked\r				mismatchingSlotsDo: [ :index <Integer> | (* ignore *) ]\r)"),
				new MM("tableAt:put:ifNew:", false, "tableAt: key <K> put: el <E> ifNew: onNew <[]> ^<A> = (\r\r	(* put a value for el in the right spot in the table, and return the val *)\r\r	| reusableSlot <Integer> |\r	table == nil\r		ifTrue: [	self createFirstTable.	 ].\r	^			lookup: key\r				matchingSlotDo:\r						[ :index <Integer> :val <A> |\r							self tableAt: key put: el inMatchingSlot: index value: val		]\r				emptySlotDo:\r						[ :index <Integer> |\r							| newVal <A> |\r							reusableSlot == nil\r								ifTrue: [ newVal:: self tableAt: key put: el inEmptySlot: index ]\r								ifFalse: [ newVal:: self tableAt: key put: el inDeletedSlot: reusableSlot ].\r							onNew value.\r							newVal	]\r				deletedSlotsDo:\r						[ :index <Integer> |\r							reusableSlot == nil\r								ifTrue: [ reusableSlot:: index ].\r						]\r)"),
				new MM("valAt:ifAbsent:", false, "valAt: key <Object> ifAbsent: f <[X def]> ^<A|X> = (\r\r	table == nil\r		ifTrue: [	^f value ].\r		\r	^			lookup: key\r				matchingSlotDo:\r					[ :index <Integer> :val <A> |\r						val	]\r				emptySlotDo:\r					[ :index <Integer> |\r						f value	]\r				deletedSlotsDo:\r					[ :index <Integer> |\r						(* ignore deleted slots *) ]\r)"),
				new MM("remove:", false, "public remove: val <A> ^<A> = (\r	^remove: val ifAbsent: [ error: 'value not in collection' ]\r)"),
				new MM("remove:ifAbsent:", false, "public remove: val <A> ifAbsent: f <[X def]> ^<A|X> = (\r	removeKey: (keyFor: val) ifAbsent: f.\r	^val\r)"),
				new MM("removeAll:", false, "public removeAll: c <Collection[A]> ^<Collection[A]> = (\r\r	c do: [ :el <A> |\r		remove: el   ].\r	^c\r)"),
				new MM("removeAllSuchThat:", false, "public removeAllSuchThat: test <[:A | Boolean]>  = (\r\r	copy contentsDo:\r		[ :el <A> |\r			(test value: el)\r				ifTrue: [ remove: el ]		]\r)"),
				new MM("removeAt:", false, "public removeAt: k <K> ^<E> = (\r	(* A synonym for #removeKey: for consistency with AddableList *)\r\r	^removeKey: k\r)"),
				new MM("removeAt:ifAbsent:", false, "public removeAt: k <K> ifAbsent: f <[X def]> ^<E|X> = (\r	(* A synonym for #removeKey:ifAbsent: for consistency with AddableList *)\r\r	^removeKey: k ifAbsent: f\r)"),
				new MM("removeEvery:", false, "public removeEvery: val <A> ^<A> = (\r	remove: val ifAbsent: [].\r	^val\r)"),
				new MM("removeKey:", false, "public removeKey: key <K> ^<E> = (\r	^removeKey: key ifAbsent: [ error: 'key not found' ]\r)"),
				new MM("removeKey:ifAbsent:", false, "public removeKey: key <K> ifAbsent: f <[X def]> ^<E|X> = (\r	table == nil\r		ifTrue: [	^f value	 ].\r	^			lookup: key\r				matchingSlotDo:\r						[ :index <Int> :val <A> |\r							markDeleted: index.\r							size: size - 1.\r							elementFor: val		]\r				emptySlotDo:\r						[ :index <Int> |\r							f value	]\r				deletedSlotsDo:\r						[ :index <Int> |\r							(* ignore *)\r						]\r)"),
				new MM("includesElement:", false, "public includesElement: val <A> ^<Boolean> = (\r\r	(* This is like includes: but it requires an A as an argument, which allows a faster\r	  search *)\r\r	^includesKey: (keyFor: val)\r)"),
				new MM("includesIndex:", false, "public includesIndex: k <Object> ^<Boolean> = (\r\r	valAt: k ifAbsent: [ ^false ].\r	^true\r)"),
				new MM("includesKey:", false, "public includesKey: k <Object> ^<Boolean> = (\r\r	^includesIndex: k\r)"),
				new MM("table_0", true, null),
				new MM("table_0:", true, null),
				new MM("size_0", true, null),
				new MM("size_0:", true, null),
				new MM("deleted", true, null),
				new MM("deleted:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Collections$HashedCollection = (function ($cap) {
				var self = this;
				self.$super$Collections$HashedCollection$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($cap) {
				var self = this;
				self._$superInit$Collections$HashedCollection($cap);
				self._$initCapacity$($cap);
				return self;
			});
			this.$at$ = (function ($key) {
				var self = this;
				return self._$at$ifAbsent$($key, (function () {
					return self.$enclosingObjects$Collections$HashedCollection[0]._$error$("key not found");
				}));
			});
			this.$at$ifAbsent$ = (function ($key, $f) {
				var self = this;
				var NLR = new Object();
				try {
					return self._$elementFor$(self._$valAt$ifAbsent$($key, (function () {
						{
							NLR.value = $f.$value();
							throw NLR;
						};
					})));
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$indexOf$ = (function ($el) {
				var self = this;
				return self._$indexOf$ifAbsent$($el, (function () {
					return self.$enclosingObjects$Collections$HashedCollection[0]._$error$("Element not found");
				}));
			});
			this.$indexOf$ifAbsent$ = (function ($el, $blk) {
				var self = this;
				var NLR = new Object();
				try {
					self._$contentsDo$((function ($v) {
						return self._$elementFor$($v).$$equal($el).$ifTrue$((function () {
							{
								NLR.value = self._$keyFor$($v);
								throw NLR;
							};
						}));
					}));
					return $blk.$value();
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$keyAtValue$ = (function ($v) {
				var self = this;
				return self._$indexOf$($v);
			});
			this.$keyAtValue$ifAbsent$ = (function ($v, $blk) {
				var self = this;
				return self._$indexOf$ifAbsent$($v, $blk);
			});
			this.$size = (function () {
				var self = this;
				return self._$size_0();
			});
			this.$table = (function () {
				var self = this;
				return self._$table_0();
			});
			this.$firstTableSize = (function () {
				var self = this;
				return 8;
			});
			this.$checkValidity = (function () {
				var self = this;
				var $c = nil;
				$c = 0;
				self._$contentsDo$((function ($val) {
					self._$assert$message$((function () {
						return self._$at$(self._$keyFor$($val)).$$equal(self._$elementFor$($val));
					}), "");
					return $c = $c + 1;
				}));
				self._$assert$message$((function () {
					return $c.$$equal(self._$size());
				}), "");
				return self;
			});
			this.$add$ = (function ($val) {
				var self = this;
				return self._$include$($val);
			});
			this.$addAll$ = (function ($c) {
				var self = this;
				$c.$do$((function ($e) {
					return self._$add$($e);
				}));
				return $c;
			});
			this.$include$ = (function ($val) {
				var self = this;
				return self._$include$ifNew$($val, (function () {
					return nil;
				}));
			});
			this.$include$ifNew$ = (function ($val, $ifNew) {
				var self = this;
				return self._$tableAt$put$ifNew$(self._$keyFor$($val), self._$elementFor$($val), $ifNew);
			});
			this.$includeAll$ = (function ($c) {
				var self = this;
				$c.$do$((function ($el) {
					return self._$include$($el);
				}));
				return $c;
			});
			this.$do$ = (function ($f) {
				var self = this;
				self._$contentsDo$((function ($val) {
					return $f.$value$(self._$elementFor$($val));
				}));
				return self;
			});
			this.$keysDo$ = (function ($f) {
				var self = this;
				self._$contentsDo$((function ($val) {
					return $f.$value$(self._$keyFor$($val));
				}));
				return self;
			});
			this.$setTable$ = (function ($t) {
				var self = this;
				self._$table_0$($t);
				return self;
			});
			this.$size$ = (function ($s) {
				var self = this;
				self._$size_0$($s);
				return self;
			});
			this.$table$ = (function ($t) {
				var self = this;
				self._$setTable$($t);
				self._$assert$message$((function () {
					return self._$deleted().$$equal(0);
				}), "");
				return self;
			});
			this.$advanceAmount = (function () {
				var self = this;
				return 99990;
			});
			this.$indexOf$tableMask$ = (function ($key, $mask) {
				var self = this;
				return self._$hashFor$($key).$bitAnd$($mask) + 1;
			});
			this.$minTableSize = (function () {
				var self = this;
				return 4;
			});
			this.$minTableSizeForCapacity$ = (function ($cap) {
				var self = this;
				return $cap + $cap;
			});
			this.$newTableWithSize$ = (function ($tableSize) {
				var self = this;
				return self._$Array().$new$($tableSize);
			});
			this.$occupied = (function () {
				var self = this;
				return self._$size() + self._$deleted();
			});
			this.$tableSizeForCapacity$ = (function ($cap) {
				var self = this;
				var $min = nil;
				var $tsize = nil;
				$min = self._$minTableSizeForCapacity$($cap);
				$tsize = self._$minTableSize();
				{
					nil;
					for (; $tsize.$$less($min); ) {
						$tsize = $tsize + $tsize;
					};
				};
				return $tsize;
			});
			this.$initCapacity$ = (function ($cap) {
				var self = this;
				self._$size$(0);
				self._$deleted$(0);
				if ($cap > 0) {
					self._$table$(self._$newTableWithSize$(self._$tableSizeForCapacity$($cap)));
				} else {
					nil;
				};
				return self;
			});
			this.$markDeleted$ = (function ($index) {
				var self = this;
				var $tbl = nil;
				$tbl = self._$table();
				$tbl.$at$put$($index, $tbl);
				self._$deleted$(self._$deleted() + 1);
				return self;
			});
			this.$postCopy = (function () {
				var self = this;
				var $tbl = nil;
				var $newtbl = nil;
				self.$super$Collections$HashedCollection$slot._$postCopy.call(self);
				$tbl = self._$table();
				if ($tbl === nil) {
					return self;
				} else {
					nil;
				};
				$newtbl = self._$newTableWithSize$($tbl.$size());
				{
					var $$limit = nil;
					var $index = nil;
					nil;
					$index = 1;
					$$limit = $tbl.$size();
					for (; $$limit.$$greater$equal($index); ) {
						self._$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$($index, $tbl, (function ($val) {
							return $newtbl.$at$put$($index, self._$elementForCopy$($val));
						}), (function () {
							return nil;
						}), (function () {
							return $newtbl.$at$put$($index, $newtbl);
						}));
						$index = (1).$$plus($index);
					};
				};
				self._$setTable$($newtbl);
				return self;
			});
			this.$printElementsDo$ = (function ($f) {
				var self = this;
				self._$contentsDo$($f);
				return self;
			});
			this.$buildValForKey$element$ = (function ($k, $el) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$elementFor$ = (function ($val) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$elementForCopy$ = (function ($el) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$hashFor$ = (function ($key) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$key$matches$ = (function ($key1, $key2) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$keyFor$ = (function ($val) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$objToIncludeFor$withExisting$ = (function ($new, $other) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$tableAt$put$inDeletedSlot$ = (function ($key, $el, $index) {
				var self = this;
				var $val = nil;
				$val = self._$tableAt$put$inUnusedSlot$($key, $el, $index);
				self._$deleted$(self._$deleted() - 1);
				return $val;
			});
			this.$tableAt$put$inEmptySlot$ = (function ($key, $el, $index) {
				var self = this;
				var $val = nil;
				$val = self._$tableAt$put$inUnusedSlot$($key, $el, $index);
				self._$growIfNeeded();
				return $val;
			});
			this.$tableAt$put$inMatchingSlot$value$ = (function ($key, $el, $index, $val) {
				var self = this;
				var $newVal = nil;
				$newVal = self._$objToIncludeFor$withExisting$(self._$buildValForKey$element$($key, $el), $val);
				self._$table().$at$put$($index, $newVal);
				return $newVal;
			});
			this.$tableAt$put$inUnusedSlot$ = (function ($key, $el, $index) {
				var self = this;
				var $newVal = nil;
				$newVal = self._$buildValForKey$element$($key, $el);
				self._$table().$at$put$($index, $newVal);
				self._$size$(self._$size() + 1);
				return $newVal;
			});
			this.$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$ = (function ($i, $tbl, $occupied, $empty, $deleted) {
				var self = this;
				var $el = nil;
				$el = $tbl.$at$($i);
				if ($el === nil) {
					return $empty.$value();
				} else {
					nil;
				};
				if ($el === $tbl) {
					return $deleted.$value();
				} else {
					nil;
				};
				return $occupied.$value$($el);
			});
			this.$contentsDo$ = (function ($f) {
				var self = this;
				var $tbl = nil;
				$tbl = self._$table();
				if ($tbl === nil) {
					return self;
				} else {
					nil;
				};
				{
					var $$limit = nil;
					var $index = nil;
					nil;
					$index = 1;
					$$limit = $tbl.$size();
					for (; $$limit.$$greater$equal($index); ) {
						self._$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$($index, $tbl, (function ($val) {
							return $f.$value$($val);
						}), (function () {
							return nil;
						}), (function () {
							return nil;
						}));
						$index = (1).$$plus($index);
					};
				};
				return self;
			});
			this.$createFirstTable = (function () {
				var self = this;
				self._$table$(self._$newTableWithSize$(self._$firstTableSize()));
				return self;
			});
			this.$growIfNeeded = (function () {
				var self = this;
				if (self._$minTableSizeForCapacity$(self._$occupied()).$$greater(self._$table().$size())) {
					self._$growTable();
				} else {
					nil;
				};
				return self;
			});
			this.$growTable = (function () {
				var self = this;
				var $new = nil;
				$new = self._$newTableWithSize$(self._$table().$size() + self._$table().$size());
				self._$contentsDo$((function ($a_value) {
					return self._$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$(self._$keyFor$($a_value), $new, (function ($index, $val) {
						return self._$shouldNotHappen();
					}), (function ($index) {
						return $new.$at$put$($index, $a_value);
					}), (function ($index) {
						return self._$shouldNotHappen();
					}), (function ($index) {
						return nil;
					}));
				}));
				self._$deleted$(0);
				self._$table$($new);
				return self;
			});
			this.$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$ = (function ($key, $tbl, $matching, $empty, $marked, $mismatch) {
				var self = this;
				var NLR = new Object();
				try {
					var $i = nil;
					var $mask = nil;
					$mask = $tbl.$size() - 1;
					$i = self._$indexOf$tableMask$($key, $mask);
					{
						nil;
						self._$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$($i, $tbl, (function ($val) {
							return self._$key$matches$($key, self._$keyFor$($val)).$ifTrue$ifFalse$((function () {
								{
									NLR.value = $matching.$value$value$($i, $val);
									throw NLR;
								};
							}), (function () {
								return $mismatch.$value$($i);
							}));
						}), (function () {
							{
								NLR.value = $empty.$value$($i);
								throw NLR;
							};
						}), (function () {
							return $marked.$value$($i);
						}));
						$i = ($i + self._$advanceAmount()).$bitAnd$($mask) + 1;
						for (; true; ) {
							nil;
							self._$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$($i, $tbl, (function ($val) {
								return self._$key$matches$($key, self._$keyFor$($val)).$ifTrue$ifFalse$((function () {
									{
										NLR.value = $matching.$value$value$($i, $val);
										throw NLR;
									};
								}), (function () {
									return $mismatch.$value$($i);
								}));
							}), (function () {
								{
									NLR.value = $empty.$value$($i);
									throw NLR;
								};
							}), (function () {
								return $marked.$value$($i);
							}));
							$i = ($i + self._$advanceAmount()).$bitAnd$($mask) + 1;
						};
					};
					return self;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$ = (function ($key, $matching, $empty, $marked) {
				var self = this;
				return self._$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$($key, self._$table(), $matching, $empty, $marked, (function ($index) {
					return nil;
				}));
			});
			this.$tableAt$put$ifNew$ = (function ($key, $el, $onNew) {
				var self = this;
				var $reusableSlot = nil;
				if (self._$table() === nil) {
					self._$createFirstTable();
				} else {
					nil;
				};
				return self._$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$($key, (function ($index, $val) {
					return self._$tableAt$put$inMatchingSlot$value$($key, $el, $index, $val);
				}), (function ($index) {
					var $newVal = nil;
					if ($reusableSlot === nil) {
						$newVal = self._$tableAt$put$inEmptySlot$($key, $el, $index);
					} else {
						$newVal = self._$tableAt$put$inDeletedSlot$($key, $el, $reusableSlot);
					};
					$onNew.$value();
					return $newVal;
				}), (function ($index) {
					return ($reusableSlot === nil).$ifTrue$((function () {
						return $reusableSlot = $index;
					}));
				}));
			});
			this.$valAt$ifAbsent$ = (function ($key, $f) {
				var self = this;
				if (self._$table() === nil) {
					return $f.$value();
				} else {
					nil;
				};
				return self._$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$($key, (function ($index, $val) {
					return $val;
				}), (function ($index) {
					return $f.$value();
				}), (function ($index) {
					return nil;
				}));
			});
			this.$remove$ = (function ($val) {
				var self = this;
				return self._$remove$ifAbsent$($val, (function () {
					return self.$enclosingObjects$Collections$HashedCollection[0]._$error$("value not in collection");
				}));
			});
			this.$remove$ifAbsent$ = (function ($val, $f) {
				var self = this;
				self._$removeKey$ifAbsent$(self._$keyFor$($val), $f);
				return $val;
			});
			this.$removeAll$ = (function ($c) {
				var self = this;
				$c.$do$((function ($el) {
					return self._$remove$($el);
				}));
				return $c;
			});
			this.$removeAllSuchThat$ = (function ($test) {
				var self = this;
				self._$copy().$contentsDo$((function ($el) {
					return $test.$value$($el).$ifTrue$((function () {
						return self._$remove$($el);
					}));
				}));
				return self;
			});
			this.$removeAt$ = (function ($k) {
				var self = this;
				return self._$removeKey$($k);
			});
			this.$removeAt$ifAbsent$ = (function ($k, $f) {
				var self = this;
				return self._$removeKey$ifAbsent$($k, $f);
			});
			this.$removeEvery$ = (function ($val) {
				var self = this;
				self._$remove$ifAbsent$($val, (function () {
					return nil;
				}));
				return $val;
			});
			this.$removeKey$ = (function ($key) {
				var self = this;
				return self._$removeKey$ifAbsent$($key, (function () {
					return self.$enclosingObjects$Collections$HashedCollection[0]._$error$("key not found");
				}));
			});
			this.$removeKey$ifAbsent$ = (function ($key, $f) {
				var self = this;
				if (self._$table() === nil) {
					return $f.$value();
				} else {
					nil;
				};
				return self._$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$($key, (function ($index, $val) {
					self._$markDeleted$($index);
					self._$size$(self._$size() - 1);
					return self._$elementFor$($val);
				}), (function ($index) {
					return $f.$value();
				}), (function ($index) {
					return nil;
				}));
			});
			this.$includesElement$ = (function ($val) {
				var self = this;
				return self._$includesKey$(self._$keyFor$($val));
			});
			this.$includesIndex$ = (function ($k) {
				var self = this;
				var NLR = new Object();
				try {
					self._$valAt$ifAbsent$($k, (function () {
						{
							NLR.value = false;
							throw NLR;
						};
					}));
					return true;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$includesKey$ = (function ($k) {
				var self = this;
				return self._$includesIndex$($k);
			});
			this.$table_0 = (function () {
				return this.$table_0$slot;
			});
			this.$table_0$ = (function (v) {
				this.$table_0$slot = v;
				return this;
			});
			this.$size_0 = (function () {
				return this.$size_0$slot;
			});
			this.$size_0$ = (function (v) {
				this.$size_0$slot = v;
				return this;
			});
			this.$deleted = (function () {
				return this.$deleted$slot;
			});
			this.$deleted$ = (function (v) {
				this.$deleted$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Collections`HashedCollection";
					this._$superInit$Collections$HashedCollection = $.$superInit$Collections$HashedCollection;
					this.$superInit$Collections$HashedCollection = dnuCatcher("$superInit$Collections$HashedCollection");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$at$ = this._$at$ = $.$at$;
					this.$at$ifAbsent$ = this._$at$ifAbsent$ = $.$at$ifAbsent$;
					this.$indexOf$ = this._$indexOf$ = $.$indexOf$;
					this.$indexOf$ifAbsent$ = this._$indexOf$ifAbsent$ = $.$indexOf$ifAbsent$;
					this.$keyAtValue$ = this._$keyAtValue$ = $.$keyAtValue$;
					this.$keyAtValue$ifAbsent$ = this._$keyAtValue$ifAbsent$ = $.$keyAtValue$ifAbsent$;
					this.$size = this._$size = $.$size;
					this._$table = $.$table;
					this.$table = dnuCatcher("$table");
					this._$firstTableSize = $.$firstTableSize;
					this.$firstTableSize = dnuCatcher("$firstTableSize");
					this._$checkValidity = $.$checkValidity;
					this.$checkValidity = dnuCatcher("$checkValidity");
					this.$add$ = this._$add$ = $.$add$;
					this.$addAll$ = this._$addAll$ = $.$addAll$;
					this.$include$ = this._$include$ = $.$include$;
					this.$include$ifNew$ = this._$include$ifNew$ = $.$include$ifNew$;
					this.$includeAll$ = this._$includeAll$ = $.$includeAll$;
					this.$do$ = this._$do$ = $.$do$;
					this.$keysDo$ = this._$keysDo$ = $.$keysDo$;
					this._$setTable$ = $.$setTable$;
					this.$setTable$ = dnuCatcher("$setTable$");
					this._$size$ = $.$size$;
					this.$size$ = dnuCatcher("$size$");
					this._$table$ = $.$table$;
					this.$table$ = dnuCatcher("$table$");
					this._$advanceAmount = $.$advanceAmount;
					this.$advanceAmount = dnuCatcher("$advanceAmount");
					this._$indexOf$tableMask$ = $.$indexOf$tableMask$;
					this.$indexOf$tableMask$ = dnuCatcher("$indexOf$tableMask$");
					this._$minTableSize = $.$minTableSize;
					this.$minTableSize = dnuCatcher("$minTableSize");
					this._$minTableSizeForCapacity$ = $.$minTableSizeForCapacity$;
					this.$minTableSizeForCapacity$ = dnuCatcher("$minTableSizeForCapacity$");
					this._$newTableWithSize$ = $.$newTableWithSize$;
					this.$newTableWithSize$ = dnuCatcher("$newTableWithSize$");
					this._$occupied = $.$occupied;
					this.$occupied = dnuCatcher("$occupied");
					this._$tableSizeForCapacity$ = $.$tableSizeForCapacity$;
					this.$tableSizeForCapacity$ = dnuCatcher("$tableSizeForCapacity$");
					this._$initCapacity$ = $.$initCapacity$;
					this.$initCapacity$ = dnuCatcher("$initCapacity$");
					this._$markDeleted$ = $.$markDeleted$;
					this.$markDeleted$ = dnuCatcher("$markDeleted$");
					this._$postCopy = $.$postCopy;
					this.$postCopy = dnuCatcher("$postCopy");
					this._$printElementsDo$ = $.$printElementsDo$;
					this.$printElementsDo$ = dnuCatcher("$printElementsDo$");
					this._$buildValForKey$element$ = $.$buildValForKey$element$;
					this.$buildValForKey$element$ = dnuCatcher("$buildValForKey$element$");
					this._$elementFor$ = $.$elementFor$;
					this.$elementFor$ = dnuCatcher("$elementFor$");
					this._$elementForCopy$ = $.$elementForCopy$;
					this.$elementForCopy$ = dnuCatcher("$elementForCopy$");
					this._$hashFor$ = $.$hashFor$;
					this.$hashFor$ = dnuCatcher("$hashFor$");
					this._$key$matches$ = $.$key$matches$;
					this.$key$matches$ = dnuCatcher("$key$matches$");
					this._$keyFor$ = $.$keyFor$;
					this.$keyFor$ = dnuCatcher("$keyFor$");
					this._$objToIncludeFor$withExisting$ = $.$objToIncludeFor$withExisting$;
					this.$objToIncludeFor$withExisting$ = dnuCatcher("$objToIncludeFor$withExisting$");
					this._$tableAt$put$inDeletedSlot$ = $.$tableAt$put$inDeletedSlot$;
					this.$tableAt$put$inDeletedSlot$ = dnuCatcher("$tableAt$put$inDeletedSlot$");
					this._$tableAt$put$inEmptySlot$ = $.$tableAt$put$inEmptySlot$;
					this.$tableAt$put$inEmptySlot$ = dnuCatcher("$tableAt$put$inEmptySlot$");
					this._$tableAt$put$inMatchingSlot$value$ = $.$tableAt$put$inMatchingSlot$value$;
					this.$tableAt$put$inMatchingSlot$value$ = dnuCatcher("$tableAt$put$inMatchingSlot$value$");
					this._$tableAt$put$inUnusedSlot$ = $.$tableAt$put$inUnusedSlot$;
					this.$tableAt$put$inUnusedSlot$ = dnuCatcher("$tableAt$put$inUnusedSlot$");
					this._$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$ = $.$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$;
					this.$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$ = dnuCatcher("$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$");
					this._$contentsDo$ = $.$contentsDo$;
					this.$contentsDo$ = dnuCatcher("$contentsDo$");
					this._$createFirstTable = $.$createFirstTable;
					this.$createFirstTable = dnuCatcher("$createFirstTable");
					this._$growIfNeeded = $.$growIfNeeded;
					this.$growIfNeeded = dnuCatcher("$growIfNeeded");
					this._$growTable = $.$growTable;
					this.$growTable = dnuCatcher("$growTable");
					this._$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$ = $.$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$;
					this.$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$ = dnuCatcher("$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$");
					this._$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$ = $.$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$;
					this.$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$ = dnuCatcher("$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$");
					this._$tableAt$put$ifNew$ = $.$tableAt$put$ifNew$;
					this.$tableAt$put$ifNew$ = dnuCatcher("$tableAt$put$ifNew$");
					this._$valAt$ifAbsent$ = $.$valAt$ifAbsent$;
					this.$valAt$ifAbsent$ = dnuCatcher("$valAt$ifAbsent$");
					this.$remove$ = this._$remove$ = $.$remove$;
					this.$remove$ifAbsent$ = this._$remove$ifAbsent$ = $.$remove$ifAbsent$;
					this.$removeAll$ = this._$removeAll$ = $.$removeAll$;
					this.$removeAllSuchThat$ = this._$removeAllSuchThat$ = $.$removeAllSuchThat$;
					this.$removeAt$ = this._$removeAt$ = $.$removeAt$;
					this.$removeAt$ifAbsent$ = this._$removeAt$ifAbsent$ = $.$removeAt$ifAbsent$;
					this.$removeEvery$ = this._$removeEvery$ = $.$removeEvery$;
					this.$removeKey$ = this._$removeKey$ = $.$removeKey$;
					this.$removeKey$ifAbsent$ = this._$removeKey$ifAbsent$ = $.$removeKey$ifAbsent$;
					this.$includesElement$ = this._$includesElement$ = $.$includesElement$;
					this.$includesIndex$ = this._$includesIndex$ = $.$includesIndex$;
					this.$includesKey$ = this._$includesKey$ = $.$includesKey$;
					this._$table_0 = $.$table_0;
					this.$table_0 = dnuCatcher("$table_0");
					this._$table_0$ = $.$table_0$;
					this.$table_0$ = dnuCatcher("$table_0$");
					this._$size_0 = $.$size_0;
					this.$size_0 = dnuCatcher("$size_0");
					this._$size_0$ = $.$size_0$;
					this.$size_0$ = dnuCatcher("$size_0$");
					this._$deleted = $.$deleted;
					this.$deleted = dnuCatcher("$deleted");
					this._$deleted$ = $.$deleted$;
					this.$deleted$ = dnuCatcher("$deleted$");
					this.$enclosingObjects$Collections$HashedCollection = enclosingObjects;
					this.$super$Collections$HashedCollection$slot = runtimeSuperclass;
					this["Collections`HashedCollection"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$table_0$slot = nil;
						this.$size_0$slot = nil;
						this.$deleted$slot = nil;
					});
					this.basicNew = this["Collections`HashedCollection"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Collections`HashedCollection";
				this.slots = [];
				this.methods = [
					new MM("new:", true, null),
					new MM("defaultCapacity", false, "public defaultCapacity ^<Integer> = (\r	^0\r)")
				];
				this.nestedClasses = [];
				this.$new$ = (function ($cap) {
					return (new this.nonMeta.basicNew()).$instance$initializer($cap);
				});
				this.$defaultCapacity = (function () {
					var self = this;
					return 0;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Collections`HashedCollection";
						this.$new$ = this._$new$ = $.$new$;
						this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
						this.$enclosingObjects$Collections$HashedCollection = enclosingObjects;
						this.$super$Collections$HashedCollection = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Collections$IdentityMutableHashedMap = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Collections`IdentityMutableHashedMap";
			this.name = "Collections`IdentityMutableHashedMap";
			this.header = "IdentityMutableHashedMap new: cap = MutableHashedMap new: cap (\r(* IdentityMutableHashedMaps are efficient HashedCollections that let you dynamically associate key->value\rpairs,  where the keys are matched using the #== message. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`Collections`IdentityMutableHashedMap", true, "new: cap"),
				new MM("instance`initializer", true, "new: cap"),
				new MM("hashFor:", false, "hashFor: key <Object> ^<Int> = (\r	^key identityHash\r)"),
				new MM("key:matches:", false, "key: k <Object> matches: another <Object> ^<Boolean> = (\r	^k == another\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Collections$IdentityMutableHashedMap = (function ($cap) {
				var self = this;
				self.$super$Collections$IdentityMutableHashedMap$slot._$instance$initializer.call(self, $cap);
				return self;
			});
			this.$instance$initializer = (function ($cap) {
				var self = this;
				self._$superInit$Collections$IdentityMutableHashedMap($cap);
				return self;
			});
			this.$hashFor$ = (function ($key) {
				var self = this;
				return $key.$identityHash();
			});
			this.$key$matches$ = (function ($k, $another) {
				var self = this;
				return $k === $another;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Collections`IdentityMutableHashedMap";
					this._$superInit$Collections$IdentityMutableHashedMap = $.$superInit$Collections$IdentityMutableHashedMap;
					this.$superInit$Collections$IdentityMutableHashedMap = dnuCatcher("$superInit$Collections$IdentityMutableHashedMap");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$hashFor$ = $.$hashFor$;
					this.$hashFor$ = dnuCatcher("$hashFor$");
					this._$key$matches$ = $.$key$matches$;
					this.$key$matches$ = dnuCatcher("$key$matches$");
					this.$enclosingObjects$Collections$IdentityMutableHashedMap = enclosingObjects;
					this.$super$Collections$IdentityMutableHashedMap$slot = runtimeSuperclass;
					this["Collections`IdentityMutableHashedMap"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Collections`IdentityMutableHashedMap"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Collections`IdentityMutableHashedMap";
				this.slots = [];
				this.methods = [
					new MM("new:", true, null),
					new MM("new", false, "public new = (\r	^new: defaultCapacity\r)"),
					new MM("defaultCapacity", false, "public defaultCapacity ^<Int> = (\r	^0\r)")
				];
				this.nestedClasses = [];
				this.$new$ = (function ($cap) {
					return (new this.nonMeta.basicNew()).$instance$initializer($cap);
				});
				this.$new = (function () {
					var self = this;
					return self._$new$(self._$defaultCapacity());
				});
				this.$defaultCapacity = (function () {
					var self = this;
					return 0;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Collections`IdentityMutableHashedMap";
						this.$new$ = this._$new$ = $.$new$;
						this.$new = this._$new = $.$new;
						this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
						this.$enclosingObjects$Collections$IdentityMutableHashedMap = enclosingObjects;
						this.$super$Collections$IdentityMutableHashedMap = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Collections$IdentitySet = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Collections`IdentitySet";
			this.name = "Collections`IdentitySet";
			this.header = "IdentitySet new: cap <Integer> = Set new: cap ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`Collections`IdentitySet", true, "new: cap"),
				new MM("instance`initializer", true, "new: cap"),
				new MM("hashFor:", false, "hashFor: key <Object> ^<Int> = (\r		^key identityHash\r)"),
				new MM("key:matches:", false, "key: k <Object> matches: another <Object> ^<Boolean> = (\r	^k == another\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Collections$IdentitySet = (function ($cap) {
				var self = this;
				self.$super$Collections$IdentitySet$slot._$instance$initializer.call(self, $cap);
				return self;
			});
			this.$instance$initializer = (function ($cap) {
				var self = this;
				self._$superInit$Collections$IdentitySet($cap);
				return self;
			});
			this.$hashFor$ = (function ($key) {
				var self = this;
				return $key.$identityHash();
			});
			this.$key$matches$ = (function ($k, $another) {
				var self = this;
				return $k === $another;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Collections`IdentitySet";
					this._$superInit$Collections$IdentitySet = $.$superInit$Collections$IdentitySet;
					this.$superInit$Collections$IdentitySet = dnuCatcher("$superInit$Collections$IdentitySet");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$hashFor$ = $.$hashFor$;
					this.$hashFor$ = dnuCatcher("$hashFor$");
					this._$key$matches$ = $.$key$matches$;
					this.$key$matches$ = dnuCatcher("$key$matches$");
					this.$enclosingObjects$Collections$IdentitySet = enclosingObjects;
					this.$super$Collections$IdentitySet$slot = runtimeSuperclass;
					this["Collections`IdentitySet"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Collections`IdentitySet"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Collections`IdentitySet";
				this.slots = [];
				this.methods = [
					new MM("new:", true, null),
					new MM("defaultCapacity", false, "public defaultCapacity = (\r\r	^ 0\r)"),
					new MM("new", false, "public new ^ <Instance> = (\r	^self new: defaultCapacity\r)")
				];
				this.nestedClasses = [];
				this.$new$ = (function ($cap) {
					return (new this.nonMeta.basicNew()).$instance$initializer($cap);
				});
				this.$defaultCapacity = (function () {
					var self = this;
					return 0;
				});
				this.$new = (function () {
					var self = this;
					return self._$new$(self._$defaultCapacity());
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Collections`IdentitySet";
						this.$new$ = this._$new$ = $.$new$;
						this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Collections$IdentitySet = enclosingObjects;
						this.$super$Collections$IdentitySet = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Collections$Interval = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Collections`Interval";
			this.name = "Collections`Interval";
			this.header = "Interval from: p_start <Number> to: p_stop <Number> by: p_step <Number> = List (\r(* Intervals are Lists that generate their contents on the fly as a progression\rof numbers from a start number to a stop number, separated by a step number.  Usually, the\rto:[by:]do: messages defined in the Number subclasses are used instead of Intervals\rwhen just a control structure is needed, since they are much faster.\r\rNote on strong typing issues:\r\rThe to:[by:]do: messages in the Number hierarchy are typed restrictively, in such a way that they\rcan only be used in non-coercive situations (i.e. where the start, stop, and step are all integers,\ror all floats, etc.).  This is done to preserve the type of the iteration value passed to the iteration block\rin the pure integer form, so that bit operations etc. can be performed etc.  This would not be possible\rif Number was the type for the step.  Although this may seem restrictive, the following points should\rbe noted about this design:\r\r	1) explicit coercions handle the vast majority of these cases;\r		for example, use (j asFloat to: k asFloat by: 0.1) rather than\r		 (j to: k by: 0.1) when j and k are typed as Numbers or Integers.\r	2) this scheme is perfectly compatible with untyped code, since the typed versions will work correctly\r	    even if called with arguments of mismatched numeric types, so that things like (1 to: 10 by: 0.1) will \r	    work, even though they don't typecheck.\r	3) If full coercive generality is needed in typesafe code, the Interval class can be used, which has been\r	    designed using values of type Number, so that things like (1 to: 10 by: 0.1) are ok.  They cannot, however,\r		preserve more detailed information about the kinds of numbers in the Interval. *)|\r	public start <Number> = p_start.\r	public stop <Number> = p_stop.\r	public increment <Number> = p_step.\r|)";
			this.slots = [
				new SM("start", false, false),
				new SM("stop", false, false),
				new SM("increment", false, false)
			];
			this.methods = [
				new MM("superInit`Collections`Interval", true, "List"),
				new MM("instance`initializer", true, "List"),
				new MM("at:", false, "public at: index <Integer> ^<Number> = (\r	(start - stop) sign = increment sign\r		ifFalse: [	| value <Number> |\r						value: start + (increment * (index - 1)).\r						increment >= 0\r							ifTrue: [	( value between: start and: stop)\r												ifTrue: [ ^value ]	]\r							ifFalse: [	(value between: stop and: start)\r												ifTrue: [ ^value ]	]	].\r	Error signal: 'Index out-of-range'.\r)"),
				new MM("do:", false, "public do: action <[:Number]> = (\r	|\r	value <Number> ::= self start.\r	incr <Number> = self increment.\r	stp <Number> = self stop.\r	|\r	incr >= 0\r		ifTrue: [	[ value <= stp ]\r							whileTrue: [	action value: value.\r										value:: value + incr.	]	]\r		ifFalse: [	[ value >= stp ]\r							whileTrue: [ action value: value.\r										value:: value + incr.	]	]\r)"),
				new MM("size", false, "public size ^<Integer> = (\r	^((stop - start) // increment) + 1 max: 0\r)"),
				new MM("copyWithSize:", false, "copyWithSize: s <Int> ^<MutableList[EX]> = (\r	(* {where EX is returnType of #anElement message of receiverType} *)\r	self unimplemented\r)"),
				new MM("start", true, null),
				new MM("setOnce`start:", true, null),
				new MM("stop", true, null),
				new MM("setOnce`stop:", true, null),
				new MM("increment", true, null),
				new MM("setOnce`increment:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Collections$Interval = (function ($p_start, $p_stop, $p_step) {
				var self = this;
				self.$super$Collections$Interval$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($p_start, $p_stop, $p_step) {
				var self = this;
				self._$superInit$Collections$Interval($p_start, $p_stop, $p_step);
				self._$setOnce$start$($p_start);
				self._$setOnce$stop$($p_stop);
				self._$setOnce$increment$($p_step);
				return self;
			});
			this.$at$ = (function ($index) {
				var self = this;
				if (!(self._$start() - self._$stop()).$sign().$$equal(self._$increment().$sign())) {
					var $value = nil;
					$value = self._$start() + (self._$increment() * ($index - 1));
					if (self._$increment() >= 0) {
						if ($value.$between$and$(self._$start(), self._$stop())) {
							return $value;
						} else {
							nil;
						};
					} else {
						if ($value.$between$and$(self._$stop(), self._$start())) {
							return $value;
						} else {
							nil;
						};
					};
				} else {
					nil;
				};
				self._$Error().$signal$("Index out-of-range");
				return self;
			});
			this.$do$ = (function ($action) {
				var self = this;
				var $value = nil;
				var $incr = nil;
				var $stp = nil;
				$value = self._$start();
				$incr = self._$increment();
				$stp = self._$stop();
				if ($incr >= 0) {
					{
						nil;
						for (; $value.$$less$equal($stp); ) {
							$action.$value$($value);
							$value = $value + $incr;
						};
					};
				} else {
					{
						nil;
						for (; $value.$$greater$equal($stp); ) {
							$action.$value$($value);
							$value = $value + $incr;
						};
					};
				};
				return self;
			});
			this.$size = (function () {
				var self = this;
				return ((self._$stop() - self._$start()).$$over$over(self._$increment()) + 1).$max$(0);
			});
			this.$copyWithSize$ = (function ($s) {
				var self = this;
				self._$unimplemented();
				return self;
			});
			this.$start = (function () {
				return this.$start$slot;
			});
			this.$setOnce$start$ = (function (v) {
				this.$start$slot = v;
				return this;
			});
			this.$stop = (function () {
				return this.$stop$slot;
			});
			this.$setOnce$stop$ = (function (v) {
				this.$stop$slot = v;
				return this;
			});
			this.$increment = (function () {
				return this.$increment$slot;
			});
			this.$setOnce$increment$ = (function (v) {
				this.$increment$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Collections`Interval";
					this._$superInit$Collections$Interval = $.$superInit$Collections$Interval;
					this.$superInit$Collections$Interval = dnuCatcher("$superInit$Collections$Interval");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$at$ = this._$at$ = $.$at$;
					this.$do$ = this._$do$ = $.$do$;
					this.$size = this._$size = $.$size;
					this._$copyWithSize$ = $.$copyWithSize$;
					this.$copyWithSize$ = dnuCatcher("$copyWithSize$");
					this.$start = this._$start = $.$start;
					this.$setOnce$start$ = this._$setOnce$start$ = $.$setOnce$start$;
					this.$stop = this._$stop = $.$stop;
					this.$setOnce$stop$ = this._$setOnce$stop$ = $.$setOnce$stop$;
					this.$increment = this._$increment = $.$increment;
					this.$setOnce$increment$ = this._$setOnce$increment$ = $.$setOnce$increment$;
					this.$enclosingObjects$Collections$Interval = enclosingObjects;
					this.$super$Collections$Interval$slot = runtimeSuperclass;
					this["Collections`Interval"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$start$slot = nil;
						this.$stop$slot = nil;
						this.$increment$slot = nil;
					});
					this.basicNew = this["Collections`Interval"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Collections`Interval";
				this.slots = [];
				this.methods = [
					new MM("from:to:by:", true, null),
					new MM("from:to:", false, "public from: start <Number> to: stop <Number> ^<Instance> = (\r	^self from: start to: stop by: 1\r)")
				];
				this.nestedClasses = [];
				this.$from$to$by$ = (function ($p_start, $p_stop, $p_step) {
					return (new this.nonMeta.basicNew()).$instance$initializer($p_start, $p_stop, $p_step);
				});
				this.$from$to$ = (function ($start, $stop) {
					var self = this;
					return self._$from$to$by$($start, $stop, 1);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Collections`Interval";
						this.$from$to$by$ = this._$from$to$by$ = $.$from$to$by$;
						this.$from$to$ = this._$from$to$ = $.$from$to$;
						this.$enclosingObjects$Collections$Interval = enclosingObjects;
						this.$super$Collections$Interval = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Collections$List = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Collections`List";
			this.name = "Collections`List";
			this.header = "List = Collection (\r(* This class implements the read-only protocol for indexed collections that order their elements using integer indices. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`Collections`List", true, "Collection"),
				new MM("instance`initializer", true, "Collection"),
				new MM("at:", false, "public at: index <Integer> ^<E> = (\r	subclassResponsibility\r)"),
				new MM("at:ifAbsent:", false, "public at: index <Integer> ifAbsent: fail <[X def]> ^<E|X> = (\r	^(index between: 1 and: size)\r		ifTrue: [ at: index ]\r		ifFalse: [ fail value ]\r)"),
				new MM("collection:matchesElementsAt:", false, "collection: cltn <List[Object]>\rmatchesElementsAt: index <Integer>\r^<Boolean> = (\r\r	(* Test whether we contain the given subcollection at index.  This method assumes\r	  that there are at least as many elements in this collection after index as cltn size *)\r\r	| offset <Integer> |\r	offset:: index - 1.\r	1 to: cltn size do:\r		[ :i <Integer> |\r			(cltn at: i) = (at: i+offset)\r				ifFalse: [ ^false ]		].\r	^true\r)"),
				new MM("findFirst:", false, "findFirst: predicate <[:E| Boolean]>  ^<Integer> = (\r\r	1 to: size do:\r		[ :i <Integer> |\r			(predicate value: (at: i))\r				ifTrue: [ ^i ]	].\r	^0\r)"),
				new MM("findLast:", false, "findLast: predicate <[:E| Boolean]>  ^<Integer> = (\r\r	size to: 1 by: -1 do:\r		[ :i <Integer> |\r			(predicate value: (at: i))\r				ifTrue: [ ^i ]	].\r	^0\r)"),
				new MM("first", false, "public first ^<E> = (\r	^self at: 1\r)"),
				new MM("hash", false, "public hash ^<Integer> = (\r\r	(* This function should not be changed, since it is designed to produce the\r		same results as the identityHash primitive, for strings and symbols *)\r	| sz <Integer> val <Integer> |\r	sz:: size.\r	sz < 2\r		ifTrue: [ ^sz = 1 ifTrue: [ self hashAt: 1 ] ifFalse: [ 1 ] ].\r	val:: hashAt: 1.\r	val:: (val bitShift: 3) bitXor: ((hashAt: 2) bitXor: val).\r	val:: (val bitShift: 3) bitXor: ((hashAt: sz) bitXor: val).\r	val:: (val bitShift: 3) bitXor: ((hashAt: sz - 1) bitXor: val).\r	val:: (val bitShift: 3) bitXor: ((hashAt: (sz bitShift: -1) + 1) bitXor: val).\r	val:: (val bitShift: 3) bitXor: (sz bitXor: val).\r\r	(* mask it to 20 bits to match VM *)\r	val:: val bitAnd: 16rFFFFF.\r	^val\r)"),
				new MM("indexOf:", false, "public indexOf: element <Object> ^<Integer> = (\r\r	^self indexOf: element ifAbsent: [ 0 ]\r)"),
				new MM("indexOf:ifAbsent:", false, "public indexOf: element <Object> ifAbsent: f <[X def]>  ^<Integer | X> = (\r\r	1 to: size do:\r [:index <Integer> |\r (at: index) = \relement ifTrue: [^index]].\r	^f value\r)"),
				new MM("indexOfSubCollection:startingAt:", false, "indexOfSubCollection: sub <List[Object]>\rstartingAt: index <Integer>\r^<Integer> = (\r\r	^indexOfSubCollection: sub\r		startingAt: index\r		ifAbsent: [ error: 'subcollection not found' ]\r)"),
				new MM("indexOfSubCollection:startingAt:ifAbsent:", false, "indexOfSubCollection: sub <List[Object]>\rstartingAt: index <Integer>\rifAbsent: f <[X def]>\r^<Integer | X> = (\r\r	index to: (size - sub size) + 1 do:\r		[ :i <Integer> |\r			(collection: sub matchesElementsAt: i)\r				ifTrue: [ ^i ]		].\r	^f value\r)"),
				new MM("indicesOfSubCollection:", false, "indicesOfSubCollection: sub <List[Object]>  ^<List[Int]> = (\r\r	^indicesOfSubCollection: sub startingAt: 1\r)"),
				new MM("indicesOfSubCollection:startingAt:", false, "indicesOfSubCollection: sub <List[Object]>\rstartingAt: index <Integer>\r^<List[Integer]> = (\r\r	| indices <MutableArrayList[Integer]> subSize <Integer> current <Integer> |\r	indices:: MutableArrayList(* [Int] *) new.\r	subSize:: sub size.\r	current:: index.\r	[ current:: self indexOfSubCollection: sub startingAt: current ifAbsent: [ 0 ].\r	  current = 0\r		] whileFalse: \r			[	indices addLast: current.\r				current:: current + subSize.		].\r	^indices\r)"),
				new MM("last", false, "public last ^<E> = (\r	^self at: self size\r)"),
				new MM("size", false, "public size ^<Integer> = (\r	subclassResponsibility\r)"),
				new MM("species", false, "public species ^<Collection[E] class> = (\r	^Array(* [E] *)\r)"),
				new MM(",", false, "public , other <List[X]> ^<MutableList[E | X]> = (\r	^self copyReplaceFrom: size + 1 to: size with: other\r)"),
				new MM("allButFirst", false, "allButFirst  ^ <MutableList[E]> = (\r	^copyFrom: 2 to: size\r)"),
				new MM("allButLast", false, "allButLast ^ <MutableList[E]> = (\r	^copyFrom: 1 to: size-1\r)"),
				new MM("isSequenceable", false, "isSequenceable = (\r	^true\r)"),
				new MM("copyFrom:to:", false, "copyFrom: start <Integer> to: stop <Integer>   ^<MutableList[EX]> = (\r	(* {where EX is returnType of #anElement message of receiverType} *)\r\r	(* The guarantee is typesafe since the inference clause guarantees that E < EX at the call site *)\r	| cp <MutableList[EX]> safeme <List[EX]> |\r	safeme:: (* guaranteed <List[EX]> *) self.\r	cp:: (* guaranteed <MutableList[EX]> *) \r				newCopyOfSize: (stop - start) + 1 thatCanAlsoHoldElementsOf: safeme.\r	cp replaceFrom: 1 to: cp size with: safeme startingAt: start.\r	^cp\r)"),
				new MM("copyReplaceAll:with:", false, "copyReplaceAll: oldSub <List[Object]> with: newSub <List[X]>  ^<MutableList[EX | X]> = (\r	(* {where EX is returnType of #anElement message of receiverType;\r			where X is returnType of #anElement message of arg 2} *)\r\r	|	spots <List[Integer]>\r		subDelta <Integer>\r		copy <MutableList[EX | X]>\r		current <Integer>\r		offset <Integer>\r		newSubSize <Integer>\r		oldSubSize <Integer>\r		safeself <List[EX]>\r		|\r	newSubSize:: newSub size.\r	oldSubSize:: oldSub size.\r	subDelta:: newSub size - oldSubSize.\r	spots:: indicesOfSubCollection: oldSub.\r\r	(* This guarantee is typesafe since the inference clause guarantees that E < EX at the call site *)\r	safeself:: (* guaranteed <List[EX]> *) self.\r\r	spots size = 0 \r		ifTrue: [	copy::  safeself newCopyOfSize: size\r								thatCanAlsoHoldElementsOf: newSub.\r						copy replaceFrom: 1 to: size with: safeself.\r						^copy\r						].\r\r	copy:: safeself newCopyOfSize: size + (spots size * subDelta)\r				thatCanAlsoHoldElementsOf: newSub.\r	current:: 1.\r	offset:: 0.\r	spots do: \r		[ :spot <Int> |	| offspot <Int> |\r			offspot:: spot + offset.\r\r			(* copy segment of self before the next occurrence *)\r			copy	replaceFrom: current + offset\r					to: offspot - 1\r					with: safeself\r					startingAt: current.\r			(* copy the new subcollection at the next occurrence *)\r			copy	replaceFrom: offspot\r					to: (offspot + newSubSize) - 1\r					with: newSub.\r			current:: spot + oldSubSize.\r			offset:: offset + subDelta.	].\r	(* copy the final segment from self after the last occurrence *)\r	copy	replaceFrom: current + offset\r			to: copy size\r			with: safeself\r			startingAt: current.\r	^copy\r)"),
				new MM("copyReplaceFrom:to:with:", false, "copyReplaceFrom: start <Integer> to: stop <Integer> with: other <List[X]>  ^<MutableList[EX | X]> = (\r	(* {where EX is returnType of #anElement message of receiverType;\r			where X is returnType of #anElement message of arg 3} *)\r\r	|	copy <MutableList[EX | X]>\r		sizeChange <Integer>\r		sz <Integer>\r		afterNew <Integer>\r		safeself <List[EX]> |\r\r	(* The guarantee is typesafe since the inference clause guarantees that E < EX at the call site *)\r	safeself:: (* guaranteed <List[EX]> *) self.\r\r	sizeChange:: other size - ((stop - start) + 1).\r	sz:: size.\r	copy:: safeself newCopyOfSize: sz + sizeChange\r				thatCanAlsoHoldElementsOf: other.\r	afterNew:: start + other size.\r	copy replaceFrom: 1 to: start - 1 with: safeself startingAt: 1.\r	copy replaceFrom: start to: afterNew - 1 with: other.\r	copy replaceFrom: afterNew to: copy size with: ((* guaranteed <List[EX]> *) self) startingAt: stop + 1.\r	^copy	\r)"),
				new MM("copyWith:", false, "copyWith: element <X>  ^<MutableList[E | X]> = (\r	^self , {element}\r)"),
				new MM("copyWithSize:", false, "copyWithSize: s <Integer> ^<MutableList[EX]> = (\r	(* {where EX is returnType of #anElement message of receiverType} *)\r	\r	(* return a mutable copy of the receiver of a different size, that is either truncated\r		or extended with nils as necessary.  Note this works even if the receiver itself\r		is not mutable *)\r\r	(* %note: the inference clause above is a tricky way of doing something very difficult:\r	  it allows us to effectively return a mutable copy of the receiver in a typesafe way,\r	  even though the\r	  receiver itself may not be mutable.  This would be impossible to type reasonably\r	  without the inference clause, because we would have to have a return type of\r	  <MutableList[E]>, which isn't typesafe since  E is a 'covariant' generic variable of this\r	  class, whereas E is an 'unrelated' generic variable in MutableList. - D.G. *)\r	  \r	(* %note: The inference clause above should really read ... EX <E> ..., but the type\r		system implementation for some reason can't deal with implementations\r		of such a method in subclasses that have bound E (i.e. are not generic on E).\r		For an example, see the implementation in ReadString, which would not have to\r		have a guarantee in the method body if this worked right - D.G. *)\r\r	subclassResponsibility	\r)"),
				new MM("copyWithout:", false, "copyWithout: el <Object>  ^<MutableList[EX]> = (\r	(* {where EX is returnType of #anElement message of receiverType} *)\r\r	| safeself <List[EX]> |\r\r	(* The following guarantee is safe because the inference clause ensures that E < EX\r		at the call site *)\r	safeself:: (* guaranteed <List[EX]> *) self. \r\r	^safeself copyReplaceAll: (Array(* [Object] *) with: el) with: {} 	\r)"),
				new MM("reverse", false, "public reverse   ^<MutableList[EX]> = (\r	(* {where EX is returnType of #anElement message of receiverType} *)\r\r	(* The guarantees are typesafe since the inference clause guarantees that E < EX at the call site *)\r	| copy <MutableList[EX]> |\r	\r	#BOGUS. (* #reverse implies an in-place operation, should be #reversed *)\r	copy:: (* guaranteed <MutableList[EX]> *)\r		(newCopyOfSize: size thatCanAlsoHoldElementsOf: self).\r	1 to: size do: \r		[ :i <Integer> |\r			| el <EX> |\r			el:: ((* guaranteed <MutableList[EX]> *) self) at: i.\r			copy at: size + 1 - i put: el.	].\r	^copy	\r)"),
				new MM("collect:", false, "public collect: map <[:E | R def]> ^<List[R]> = (\r	^collectUsingAtPut: map\r)"),
				new MM("do:", false, "public do: f <[:E]> = (\r\r	1 to: size do:\r		[ :i <Integer> |\r			f value: (at: i)	]\r)"),
				new MM("doWithIndex:", false, "doWithIndex: f <[:E :Integer]> = (\r\r	1 to: size do:\r		[ :i <Integer> |\r			f value: (at: i) value: i]\r)"),
				new MM("keysAndValuesDo:", false, "public keysAndValuesDo: action <[:Integer :E]> = (\r\r	1 to: size do:\r		[:index <Integer> |\r action value: index value: (at: index)]\r)"),
				new MM("reverseDo:", false, "public reverseDo: action <[:E]> = (\r\r	size to: 1 by: -1 do:\r		[:index <Integer> |\r action value: (at: index)]\r)"),
				new MM("with:do:", false, "public with: other <List[X def]> do: action <[:E :X]> = (\r\r	assert: [ self size = other size ] message: 'Cannot jointly interate collections of different size'.\r	1 to: size do:\r		[:index <Integer> |\r action value: (at: index) value: (other at: index)].\r)"),
				new MM("collectUsingAtPut:", false, "protected collectUsingAtPut: map <[:E | R def]> ^<List[R]> = (\r\r\r	| c <MutableList[R]> |\r	(* See #newForCollect: for explanation of why the guarantee is safe *)\r	c:: (* guaranteed <MutableList[R]> ( *)newForCollectUsingAtPut: size(* ) *).\r	1 to: self size do:\r		[ :i <Integer> |\r			c at: i put: (map value: (at: i))  ].\r	^c\r)"),
				new MM("hashAt:", false, "protected hashAt: index <Integer> ^<Integer> = (\r	^(at: index) hash\r)"),
				new MM("newForCollectUsingAtPut:", false, "newForCollectUsingAtPut: size <Integer> ^<MutableList[Object]> = (\r	(* Return a new extensible collection that is as closely related to the receiver's class as possible.  The\r	 returned collection must be unaliased and empty, so it is safe for the caller to guarantee that the type\r	 variable is of a more specific type *)\r\r	^Array(* [Object] *) new: size\r)"),
				new MM("newCopyOfSize:thatCanAlsoHoldElementsOf:", false, "public newCopyOfSize: size <Integer>\rthatCanAlsoHoldElementsOf: other <List[X]>\r^<MutableList[EX | X]> \r= (\r		(* {where X is returnType of #anElement message of arg 2;\r		     where EX is returnType of #anElement message of receiverType} *)\r\r	(* Return a fresh collection of a closely related type\r	that can hold both elements of self and elements of the other collection *)\r\r	^Array(* [EX | X] *) new: size\r	\r)"),
				new MM("readStream", false, "public readStream ^<ReadStream[E]> = (\r	^ListReadStream(* [E] *) on: self\r)"),
				new MM("=", false, "public = other <Object> ^<Boolean> = (\r\r	^self == other\r		or: [ class = other class\r				and: [ (* We have the same class, so we can guarantee other is a List *)\r					  hasSameElementsAndOrderAs: ((* guaranteed <List[Object]> *) other)   ]]\r)"),
				new MM("hasSameElementsAndOrderAs:", false, "hasSameElementsAndOrderAs: other <List[Object]>  ^<Boolean> = (\r\r	(* Like #hasSameElementsAs:, but also requires the elements to be in the same order *)\r\r	size = other size\r		ifFalse: [ ^false ].  \r	1 to: size do:\r		[ :i <Integer> |\r			(at: i) = (other at: i)\r				ifFalse: [ ^false ]	].\r	^true\r)"),
				new MM("includesIndex:", false, "protected includesIndex: index <Integer> ^<Boolean> = (\r	^index between: 1 and: size\r)"),
				new MM("isSortedBy:", false, "isSortedBy: compare <[:E:E| Boolean]> ^<Boolean> = (\r\r	(* Returns true if the receiver is in sorted order, using the specified comparison *)\r\r	| last <E> |\r	size < 2\r		ifTrue: [ ^true ].\r	last:: at: 1.\r	2 to: size do:\r		[ :i <Integer> |\r			(compare value: last value: (at: i))\r				ifFalse: [ ^false ]	].\r	^true\r)"),
				new MM("binarySearchFor:between:and:toCompare:", false, "binarySearchFor: el <EL>\rbetween: start <Integer>\rand: end <Integer>\rtoCompare: compare <[:EL def:EL| Boolean]>\r^<Int>\r= (\r			(* {where CONSTRAINER <EL> is returnType of #anElement message of receiverType} *)\r	(* This does a binary search for the index such that if el was inserted before it\r	  the receiver would remain sorted.  The receiver must be sorted relative to the\r	  comparison block.  The comparison block should return true if the first block argument\r	  cannot appear after the second block argument *)\r\r	| low <Integer> high <Integer> |\r	low:: start.\r	high:: end.\r	[ low <= high ]\r		whileTrue:\r				[	| mid <Integer> |\r					mid:: (low + high)  // 2.\r	  				(* The guaranteed below is safe because of the inference clause *)\r					(compare value: ((* guaranteed <EL> *) (at: mid)) value: el)\r						ifTrue: [ low:: mid + 1 ]	\r						ifFalse: [ high:: mid - 1 ].\r				].\r	^low\r	\r)"),
				new MM("binarySearchFor:toCompare:", false, "binarySearchFor: el <EL>\rtoCompare: compare <[:EL def:EL| Boolean]>\r^ <Integer>\r= (\r	(* {where CONSTRAINER <EL> is returnType of #anElement message of receiverType} *)\r\r	(* The guarantee is safe because of the inference clause *)\r	^((* guaranteed <List[EL]> *) self)\r			binarySearchFor: el\r			between: 1\r			and: size\r			toCompare: compare	\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Collections$List = (function () {
				var self = this;
				self.$super$Collections$List$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Collections$List();
				return self;
			});
			this.$at$ = (function ($index) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$at$ifAbsent$ = (function ($index, $fail) {
				var self = this;
				return $index.$between$and$(1, self._$size()).$ifTrue$ifFalse$((function () {
					return self._$at$($index);
				}), (function () {
					return $fail.$value();
				}));
			});
			this.$collection$matchesElementsAt$ = (function ($cltn, $index) {
				var self = this;
				var $offset = nil;
				$offset = $index - 1;
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = $cltn.$size();
					for (; $$limit.$$greater$equal($i); ) {
						if (!$cltn.$at$($i).$$equal(self._$at$($i + $offset))) {
							return false;
						} else {
							nil;
						};
						$i = (1).$$plus($i);
					};
				};
				return true;
			});
			this.$findFirst$ = (function ($predicate) {
				var self = this;
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = self._$size();
					for (; $$limit.$$greater$equal($i); ) {
						if ($predicate.$value$(self._$at$($i))) {
							return $i;
						} else {
							nil;
						};
						$i = (1).$$plus($i);
					};
				};
				return 0;
			});
			this.$findLast$ = (function ($predicate) {
				var self = this;
				{
					var $i = nil;
					nil;
					$i = self._$size();
					for (; (1).$$less$equal($i); ) {
						if ($predicate.$value$(self._$at$($i))) {
							return $i;
						} else {
							nil;
						};
						$i = (-1).$$plus($i);
					};
				};
				return 0;
			});
			this.$first = (function () {
				var self = this;
				return self._$at$(1);
			});
			this.$hash = (function () {
				var self = this;
				var $sz = nil;
				var $val = nil;
				$sz = self._$size();
				if ($sz < 2) {
					return $sz.$$equal(1).$ifTrue$ifFalse$((function () {
						return self._$hashAt$(1);
					}), (function () {
						return 1;
					}));
				} else {
					nil;
				};
				$val = self._$hashAt$(1);
				$val = $val.$bitShift$(3).$bitXor$(self._$hashAt$(2).$bitXor$($val));
				$val = $val.$bitShift$(3).$bitXor$(self._$hashAt$($sz).$bitXor$($val));
				$val = $val.$bitShift$(3).$bitXor$(self._$hashAt$($sz - 1).$bitXor$($val));
				$val = $val.$bitShift$(3).$bitXor$(self._$hashAt$($sz.$bitShift$(-1) + 1).$bitXor$($val));
				$val = $val.$bitShift$(3).$bitXor$($sz.$bitXor$($val));
				$val = $val.$bitAnd$(1048575);
				return $val;
			});
			this.$indexOf$ = (function ($element) {
				var self = this;
				return self._$indexOf$ifAbsent$($element, (function () {
					return 0;
				}));
			});
			this.$indexOf$ifAbsent$ = (function ($element, $f) {
				var self = this;
				{
					var $$limit = nil;
					var $index = nil;
					nil;
					$index = 1;
					$$limit = self._$size();
					for (; $$limit.$$greater$equal($index); ) {
						if (self._$at$($index).$$equal($element)) {
							return $index;
						} else {
							nil;
						};
						$index = (1).$$plus($index);
					};
				};
				return $f.$value();
			});
			this.$indexOfSubCollection$startingAt$ = (function ($sub, $index) {
				var self = this;
				return self._$indexOfSubCollection$startingAt$ifAbsent$($sub, $index, (function () {
					return self.$enclosingObjects$Collections$List[0]._$error$("subcollection not found");
				}));
			});
			this.$indexOfSubCollection$startingAt$ifAbsent$ = (function ($sub, $index, $f) {
				var self = this;
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = $index;
					$$limit = (self._$size() - $sub.$size()) + 1;
					for (; $$limit.$$greater$equal($i); ) {
						if (self._$collection$matchesElementsAt$($sub, $i)) {
							return $i;
						} else {
							nil;
						};
						$i = (1).$$plus($i);
					};
				};
				return $f.$value();
			});
			this.$indicesOfSubCollection$ = (function ($sub) {
				var self = this;
				return self._$indicesOfSubCollection$startingAt$($sub, 1);
			});
			this.$indicesOfSubCollection$startingAt$ = (function ($sub, $index) {
				var self = this;
				var $indices = nil;
				var $subSize = nil;
				var $current = nil;
				$indices = self.$enclosingObjects$Collections$List[0]._$MutableArrayList().$new();
				$subSize = $sub.$size();
				$current = $index;
				{
					nil;
					$current = self._$indexOfSubCollection$startingAt$ifAbsent$($sub, $current, (function () {
						return 0;
					}));
					for (; !$current.$$equal(0); ) {
						$indices.$addLast$($current);
						$current = $current + $subSize;
						$current = self._$indexOfSubCollection$startingAt$ifAbsent$($sub, $current, (function () {
							return 0;
						}));
					};
				};
				return $indices;
			});
			this.$last = (function () {
				var self = this;
				return self._$at$(self._$size());
			});
			this.$size = (function () {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$species = (function () {
				var self = this;
				return self._$Array();
			});
			this.$$comma = (function ($other) {
				var self = this;
				return self._$copyReplaceFrom$to$with$(self._$size() + 1, self._$size(), $other);
			});
			this.$allButFirst = (function () {
				var self = this;
				return self._$copyFrom$to$(2, self._$size());
			});
			this.$allButLast = (function () {
				var self = this;
				return self._$copyFrom$to$(1, self._$size() - 1);
			});
			this.$isSequenceable = (function () {
				var self = this;
				return true;
			});
			this.$copyFrom$to$ = (function ($start, $stop) {
				var self = this;
				var $cp = nil;
				var $safeme = nil;
				$safeme = self;
				$cp = self._$newCopyOfSize$thatCanAlsoHoldElementsOf$(($stop - $start) + 1, $safeme);
				$cp.$replaceFrom$to$with$startingAt$(1, $cp.$size(), $safeme, $start);
				return $cp;
			});
			this.$copyReplaceAll$with$ = (function ($oldSub, $newSub) {
				var self = this;
				var $spots = nil;
				var $subDelta = nil;
				var $copy = nil;
				var $current = nil;
				var $offset = nil;
				var $newSubSize = nil;
				var $oldSubSize = nil;
				var $safeself = nil;
				$newSubSize = $newSub.$size();
				$oldSubSize = $oldSub.$size();
				$subDelta = $newSub.$size() - $oldSubSize;
				$spots = self._$indicesOfSubCollection$($oldSub);
				$safeself = self;
				if ($spots.$size().$$equal(0)) {
					$copy = $safeself.$newCopyOfSize$thatCanAlsoHoldElementsOf$(self._$size(), $newSub);
					$copy.$replaceFrom$to$with$(1, self._$size(), $safeself);
					return $copy;
				} else {
					nil;
				};
				$copy = $safeself.$newCopyOfSize$thatCanAlsoHoldElementsOf$(self._$size() + ($spots.$size() * $subDelta), $newSub);
				$current = 1;
				$offset = 0;
				$spots.$do$((function ($spot) {
					var $offspot = nil;
					$offspot = $spot + $offset;
					$copy.$replaceFrom$to$with$startingAt$($current + $offset, $offspot - 1, $safeself, $current);
					$copy.$replaceFrom$to$with$($offspot, ($offspot + $newSubSize) - 1, $newSub);
					$current = $spot + $oldSubSize;
					return $offset = $offset + $subDelta;
				}));
				$copy.$replaceFrom$to$with$startingAt$($current + $offset, $copy.$size(), $safeself, $current);
				return $copy;
			});
			this.$copyReplaceFrom$to$with$ = (function ($start, $stop, $other) {
				var self = this;
				var $copy = nil;
				var $sizeChange = nil;
				var $sz = nil;
				var $afterNew = nil;
				var $safeself = nil;
				$safeself = self;
				$sizeChange = $other.$size() - (($stop - $start) + 1);
				$sz = self._$size();
				$copy = $safeself.$newCopyOfSize$thatCanAlsoHoldElementsOf$($sz + $sizeChange, $other);
				$afterNew = $start + $other.$size();
				$copy.$replaceFrom$to$with$startingAt$(1, $start - 1, $safeself, 1);
				$copy.$replaceFrom$to$with$($start, $afterNew - 1, $other);
				$copy.$replaceFrom$to$with$startingAt$($afterNew, $copy.$size(), self, $stop + 1);
				return $copy;
			});
			this.$copyWith$ = (function ($element) {
				var self = this;
				return self._$$comma([$element]);
			});
			this.$copyWithSize$ = (function ($s) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$copyWithout$ = (function ($el) {
				var self = this;
				var $safeself = nil;
				$safeself = self;
				return $safeself.$copyReplaceAll$with$(self._$Array().$with$($el), []);
			});
			this.$reverse = (function () {
				var self = this;
				var $copy = nil;
				"BOGUS";
				$copy = self._$newCopyOfSize$thatCanAlsoHoldElementsOf$(self._$size(), self);
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = self._$size();
					for (; $$limit.$$greater$equal($i); ) {
						var $el = nil;
						$el = self._$at$($i);
						$copy.$at$put$((self._$size() + 1) - $i, $el);
						$i = (1).$$plus($i);
					};
				};
				return $copy;
			});
			this.$collect$ = (function ($map) {
				var self = this;
				return self._$collectUsingAtPut$($map);
			});
			this.$do$ = (function ($f) {
				var self = this;
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = self._$size();
					for (; $$limit.$$greater$equal($i); ) {
						$f.$value$(self._$at$($i));
						$i = (1).$$plus($i);
					};
				};
				return self;
			});
			this.$doWithIndex$ = (function ($f) {
				var self = this;
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = self._$size();
					for (; $$limit.$$greater$equal($i); ) {
						$f.$value$value$(self._$at$($i), $i);
						$i = (1).$$plus($i);
					};
				};
				return self;
			});
			this.$keysAndValuesDo$ = (function ($action) {
				var self = this;
				{
					var $$limit = nil;
					var $index = nil;
					nil;
					$index = 1;
					$$limit = self._$size();
					for (; $$limit.$$greater$equal($index); ) {
						$action.$value$value$($index, self._$at$($index));
						$index = (1).$$plus($index);
					};
				};
				return self;
			});
			this.$reverseDo$ = (function ($action) {
				var self = this;
				{
					var $index = nil;
					nil;
					$index = self._$size();
					for (; (1).$$less$equal($index); ) {
						$action.$value$(self._$at$($index));
						$index = (-1).$$plus($index);
					};
				};
				return self;
			});
			this.$with$do$ = (function ($other, $action) {
				var self = this;
				self._$assert$message$((function () {
					return self._$size().$$equal($other.$size());
				}), "Cannot jointly interate collections of different size");
				{
					var $$limit = nil;
					var $index = nil;
					nil;
					$index = 1;
					$$limit = self._$size();
					for (; $$limit.$$greater$equal($index); ) {
						$action.$value$value$(self._$at$($index), $other.$at$($index));
						$index = (1).$$plus($index);
					};
				};
				return self;
			});
			this.$collectUsingAtPut$ = (function ($map) {
				var self = this;
				var $c = nil;
				$c = self._$newForCollectUsingAtPut$(self._$size());
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = self._$size();
					for (; $$limit.$$greater$equal($i); ) {
						$c.$at$put$($i, $map.$value$(self._$at$($i)));
						$i = (1).$$plus($i);
					};
				};
				return $c;
			});
			this.$hashAt$ = (function ($index) {
				var self = this;
				return self._$at$($index).$hash();
			});
			this.$newForCollectUsingAtPut$ = (function ($size) {
				var self = this;
				return self._$Array().$new$($size);
			});
			this.$newCopyOfSize$thatCanAlsoHoldElementsOf$ = (function ($size, $other) {
				var self = this;
				return self._$Array().$new$($size);
			});
			this.$readStream = (function () {
				var self = this;
				return $0.$ListReadStream.call(self.$enclosingObjects$Collections$List[0]).$on$(self);
			});
			this.$$equal = (function ($other) {
				var self = this;
				return (self === $other) || (self._$class().$$equal($other.$class()) && self._$hasSameElementsAndOrderAs$($other));
			});
			this.$hasSameElementsAndOrderAs$ = (function ($other) {
				var self = this;
				if (!self._$size().$$equal($other.$size())) {
					return false;
				} else {
					nil;
				};
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = self._$size();
					for (; $$limit.$$greater$equal($i); ) {
						if (!self._$at$($i).$$equal($other.$at$($i))) {
							return false;
						} else {
							nil;
						};
						$i = (1).$$plus($i);
					};
				};
				return true;
			});
			this.$includesIndex$ = (function ($index) {
				var self = this;
				return $index.$between$and$(1, self._$size());
			});
			this.$isSortedBy$ = (function ($compare) {
				var self = this;
				var $last = nil;
				if (self._$size() < 2) {
					return true;
				} else {
					nil;
				};
				$last = self._$at$(1);
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 2;
					$$limit = self._$size();
					for (; $$limit.$$greater$equal($i); ) {
						if (!$compare.$value$value$($last, self._$at$($i))) {
							return false;
						} else {
							nil;
						};
						$i = (1).$$plus($i);
					};
				};
				return true;
			});
			this.$binarySearchFor$between$and$toCompare$ = (function ($el, $start, $end, $compare) {
				var self = this;
				var $low = nil;
				var $high = nil;
				$low = $start;
				$high = $end;
				{
					nil;
					for (; $low.$$less$equal($high); ) {
						var $mid = nil;
						$mid = ($low + $high).$$over$over(2);
						if ($compare.$value$value$(self._$at$($mid), $el)) {
							$low = $mid + 1;
						} else {
							$high = $mid - 1;
						};
					};
				};
				return $low;
			});
			this.$binarySearchFor$toCompare$ = (function ($el, $compare) {
				var self = this;
				return self._$binarySearchFor$between$and$toCompare$($el, 1, self._$size(), $compare);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Collections`List";
					this._$superInit$Collections$List = $.$superInit$Collections$List;
					this.$superInit$Collections$List = dnuCatcher("$superInit$Collections$List");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$at$ = this._$at$ = $.$at$;
					this.$at$ifAbsent$ = this._$at$ifAbsent$ = $.$at$ifAbsent$;
					this._$collection$matchesElementsAt$ = $.$collection$matchesElementsAt$;
					this.$collection$matchesElementsAt$ = dnuCatcher("$collection$matchesElementsAt$");
					this._$findFirst$ = $.$findFirst$;
					this.$findFirst$ = dnuCatcher("$findFirst$");
					this._$findLast$ = $.$findLast$;
					this.$findLast$ = dnuCatcher("$findLast$");
					this.$first = this._$first = $.$first;
					this.$hash = this._$hash = $.$hash;
					this.$indexOf$ = this._$indexOf$ = $.$indexOf$;
					this.$indexOf$ifAbsent$ = this._$indexOf$ifAbsent$ = $.$indexOf$ifAbsent$;
					this._$indexOfSubCollection$startingAt$ = $.$indexOfSubCollection$startingAt$;
					this.$indexOfSubCollection$startingAt$ = dnuCatcher("$indexOfSubCollection$startingAt$");
					this._$indexOfSubCollection$startingAt$ifAbsent$ = $.$indexOfSubCollection$startingAt$ifAbsent$;
					this.$indexOfSubCollection$startingAt$ifAbsent$ = dnuCatcher("$indexOfSubCollection$startingAt$ifAbsent$");
					this._$indicesOfSubCollection$ = $.$indicesOfSubCollection$;
					this.$indicesOfSubCollection$ = dnuCatcher("$indicesOfSubCollection$");
					this._$indicesOfSubCollection$startingAt$ = $.$indicesOfSubCollection$startingAt$;
					this.$indicesOfSubCollection$startingAt$ = dnuCatcher("$indicesOfSubCollection$startingAt$");
					this.$last = this._$last = $.$last;
					this.$size = this._$size = $.$size;
					this.$species = this._$species = $.$species;
					this.$$comma = this._$$comma = $.$$comma;
					this._$allButFirst = $.$allButFirst;
					this.$allButFirst = dnuCatcher("$allButFirst");
					this._$allButLast = $.$allButLast;
					this.$allButLast = dnuCatcher("$allButLast");
					this._$isSequenceable = $.$isSequenceable;
					this.$isSequenceable = dnuCatcher("$isSequenceable");
					this._$copyFrom$to$ = $.$copyFrom$to$;
					this.$copyFrom$to$ = dnuCatcher("$copyFrom$to$");
					this._$copyReplaceAll$with$ = $.$copyReplaceAll$with$;
					this.$copyReplaceAll$with$ = dnuCatcher("$copyReplaceAll$with$");
					this._$copyReplaceFrom$to$with$ = $.$copyReplaceFrom$to$with$;
					this.$copyReplaceFrom$to$with$ = dnuCatcher("$copyReplaceFrom$to$with$");
					this._$copyWith$ = $.$copyWith$;
					this.$copyWith$ = dnuCatcher("$copyWith$");
					this._$copyWithSize$ = $.$copyWithSize$;
					this.$copyWithSize$ = dnuCatcher("$copyWithSize$");
					this._$copyWithout$ = $.$copyWithout$;
					this.$copyWithout$ = dnuCatcher("$copyWithout$");
					this.$reverse = this._$reverse = $.$reverse;
					this.$collect$ = this._$collect$ = $.$collect$;
					this.$do$ = this._$do$ = $.$do$;
					this._$doWithIndex$ = $.$doWithIndex$;
					this.$doWithIndex$ = dnuCatcher("$doWithIndex$");
					this.$keysAndValuesDo$ = this._$keysAndValuesDo$ = $.$keysAndValuesDo$;
					this.$reverseDo$ = this._$reverseDo$ = $.$reverseDo$;
					this.$with$do$ = this._$with$do$ = $.$with$do$;
					this._$collectUsingAtPut$ = $.$collectUsingAtPut$;
					this.$collectUsingAtPut$ = dnuCatcher("$collectUsingAtPut$");
					this._$hashAt$ = $.$hashAt$;
					this.$hashAt$ = dnuCatcher("$hashAt$");
					this._$newForCollectUsingAtPut$ = $.$newForCollectUsingAtPut$;
					this.$newForCollectUsingAtPut$ = dnuCatcher("$newForCollectUsingAtPut$");
					this.$newCopyOfSize$thatCanAlsoHoldElementsOf$ = this._$newCopyOfSize$thatCanAlsoHoldElementsOf$ = $.$newCopyOfSize$thatCanAlsoHoldElementsOf$;
					this.$readStream = this._$readStream = $.$readStream;
					this.$$equal = this._$$equal = $.$$equal;
					this._$hasSameElementsAndOrderAs$ = $.$hasSameElementsAndOrderAs$;
					this.$hasSameElementsAndOrderAs$ = dnuCatcher("$hasSameElementsAndOrderAs$");
					this._$includesIndex$ = $.$includesIndex$;
					this.$includesIndex$ = dnuCatcher("$includesIndex$");
					this._$isSortedBy$ = $.$isSortedBy$;
					this.$isSortedBy$ = dnuCatcher("$isSortedBy$");
					this._$binarySearchFor$between$and$toCompare$ = $.$binarySearchFor$between$and$toCompare$;
					this.$binarySearchFor$between$and$toCompare$ = dnuCatcher("$binarySearchFor$between$and$toCompare$");
					this._$binarySearchFor$toCompare$ = $.$binarySearchFor$toCompare$;
					this.$binarySearchFor$toCompare$ = dnuCatcher("$binarySearchFor$toCompare$");
					this.$enclosingObjects$Collections$List = enclosingObjects;
					this.$super$Collections$List$slot = runtimeSuperclass;
					this["Collections`List"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Collections`List"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Collections`List";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Collections`List";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Collections$List = enclosingObjects;
						this.$super$Collections$List = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Collections$MutableArrayList = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Collections`MutableArrayList";
			this.name = "Collections`MutableArrayList";
			this.header = "MutableArrayList = MutableAddableList (\r(* MutableArrayLists are AddableLists that also support setting\relements in place (the MutableList protocol). *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`Collections`MutableArrayList", true, "MutableAddableList"),
				new MM("instance`initializer", true, "MutableAddableList"),
				new MM("add:", false, "public add: e <E> ^<E> = (\r	^addLast: e\r)"),
				new MM("add:after:", false, "public add: el <E> after: existing <E> ^<E> = (\r\r	| index <Int> |\r	index:: indexOf: existing.\r	index = size\r		ifFalse: [ index:: makeSpace: 1\r							beforeIndex: index + startGap + 1 ]\r		ifTrue: [ needSpaceAtEnd: 1.\r						index:: index + startGap + 1.	].\r	^contents at: index put: el.\r)"),
				new MM("add:afterIndex:", false, "public add: el <E> afterIndex: i <Int> ^<E> = (\r	^add: el beforeIndex: i + 1\r)"),
				new MM("add:before:", false, "public add: el <E> before: existing <E> ^<E> = (\r\r	| index <Int> |\r	index:: indexOf: existing.\r	index:: makeSpace: 1 beforeIndex: index + startGap.\r	^contents at: index put: el.\r)"),
				new MM("add:beforeIndex:", false, "public add: el <E> beforeIndex: i <Int> ^<E> = (\r\r	| index <Int> |\r	i > size\r		ifFalse: [	index:: makeSpace: 1 beforeIndex: i + startGap.	]\r		ifTrue: [	needSpaceAtEnd: 1.\r					index:: i + startGap. ].\r	^contents at: index put: el.\r)"),
				new MM("addAllFirst:", false, "public addAllFirst: c <Collection[E]> ^<Collection[E]> = (\r	c do: [ :el <E> | 	addFirst: el ].\r	^c\r)"),
				new MM("addAllLast:", false, "public addAllLast: c <Collection[E]> ^<Collection[E]> = (\r	c do: [ :el <E> | 	addLast: el ].\r	^c\r)"),
				new MM("addFirst:", false, "public addFirst: e <E> ^<E> = (\r\r	needSpaceAtStart: 1.\r	contents at: startGap put: e.\r	startGap: startGap - 1.\r	^e\r)"),
				new MM("addLast:", false, "public addLast: e <E> ^<E> = (\r\r	needSpaceAtEnd: 1.\r	lastIndex: lastIndex + 1.\r	contents at: lastIndex put: e.\r	^e\r)"),
				new MM("at:put:", false, "public at: i <Int> put: el <E> ^<E> = (\r\r	| adjusted <Int> |\r	adjusted:: i + startGap.\r	((0 < i) and: [adjusted <= lastIndex])\r		ifFalse: [ error: 'invalid index' ].\r	^contents at: adjusted put: el\r\r)"),
				new MM("with:", false, "public with: el <E>  = (\r	add: el\r)"),
				new MM("withAll:", false, "public withAll: els <Collection[E]> ^<Self> = (\r	addAll: els\r)"),
				new MM("asMutableArrayList", false, "public asMutableArrayList ^<MutableArrayList[EX]>  = (\r		(* {where EX is returnType of #anElement message of receiverType} *)\r\r	(* the guarantee is safe because of the inference clause *)\r	^(* guaranteed <MutableArrayList[EX]> *) self\r)"),
				new MM("copyWithSize:", false, "public copyWithSize: s <Int> ^<MutableArrayList[EX]> = ( \r	(* {where EX is returnType of #anElement message of receiverType} *)\r\r	(* Note: this method temporarily mutates the receiver, so it should not be sent to an object that\r		another process might be accessing. *)\r\r	(* We use a trick here: we temporarily fudge the lastIndex to be the value we want to use in the copy,\r	  which will cause postCopy to copy the contents with a different size, and then we restore the old\r	  lastIndex value for this instance.  This lets the normal copy mechanism handle subclass instance\r	  variable copying. *)\r	| oldLastIndex <Int> safeself <MutableArrayList[EX]> copy <MutableArrayList[EX]> |\r\r	(* This guarantee is safe because the inference clause guarantees\r		that E < EX at each call site *)\r	safeself:: (* guaranteed <MutableArrayList[EX]> *) self.\r\r	oldLastIndex:: lastIndex.\r	lastIndex: s + startGap.\r	copy:: safeself copy.\r	lastIndex: oldLastIndex.\r\r	^copy\r)"),
				new MM("collect:", false, "public collect: map <[:E | R def]> ^<MutableArrayList[R]> = (\r	^(collectUsingAdd: map) asMutableArrayList\r)"),
				new MM("replaceFrom:to:with:startingAt:", false, "public replaceFrom: start <Int>\rto: stop <Int>\rwith: other <List[E]>\rstartingAt: repStart <Int>\r = (\r\r	(* replace the elements of the receiver from start to stop with elements from other,\r	  starting with the element of other with index repStart. *)\r\r	| otheri <Int> |\r	(start >= 1 and: [ stop <= size ])\r		ifFalse: [ error: 'range out of bounds' ].\r\r	contents replaceFrom: start + startGap to: stop + startGap with: other startingAt: repStart\r)"),
				new MM("newCopyOfSize:thatCanAlsoHoldElementsOf:", false, "public newCopyOfSize: size <Int>\rthatCanAlsoHoldElementsOf: other <List[X]>\r^<MutableArrayList[EX | X]>\r = (\r		(* {where X is returnType of #anElement message of arg 2;\r		     where EX is returnType of #anElement message of receiverType} *)\r\r	^(MutableArrayList(* [EX | X] *) new: size) size: size\r)"),
				new MM("bottomToTopDo:", false, "bottomToTopDo: blk <[:E]> = (\r	do: blk\r)"),
				new MM("pop", false, "pop ^<E> = (\r	^removeLast\r)"),
				new MM("push:", false, "push: el <E> = (\r	addLast: el\r)"),
				new MM("top", false, "top ^<E> = (\r	^last\r)"),
				new MM("topToBottomDo:", false, "topToBottomDo: blk <[:E]> = (\r	reverseDo: blk\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Collections$MutableArrayList = (function () {
				var self = this;
				self.$super$Collections$MutableArrayList$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Collections$MutableArrayList();
				return self;
			});
			this.$add$ = (function ($e) {
				var self = this;
				return self._$addLast$($e);
			});
			this.$add$after$ = (function ($el, $existing) {
				var self = this;
				var $index = nil;
				$index = self._$indexOf$($existing);
				if (!$index.$$equal(self._$size())) {
					$index = self._$makeSpace$beforeIndex$(1, ($index + self._$startGap()) + 1);
				} else {
					self._$needSpaceAtEnd$(1);
					$index = ($index + self._$startGap()) + 1;
				};
				return self._$contents().$at$put$($index, $el);
			});
			this.$add$afterIndex$ = (function ($el, $i) {
				var self = this;
				return self._$add$beforeIndex$($el, $i + 1);
			});
			this.$add$before$ = (function ($el, $existing) {
				var self = this;
				var $index = nil;
				$index = self._$indexOf$($existing);
				$index = self._$makeSpace$beforeIndex$(1, $index + self._$startGap());
				return self._$contents().$at$put$($index, $el);
			});
			this.$add$beforeIndex$ = (function ($el, $i) {
				var self = this;
				var $index = nil;
				if (!$i.$$greater(self._$size())) {
					$index = self._$makeSpace$beforeIndex$(1, $i + self._$startGap());
				} else {
					self._$needSpaceAtEnd$(1);
					$index = $i + self._$startGap();
				};
				return self._$contents().$at$put$($index, $el);
			});
			this.$addAllFirst$ = (function ($c) {
				var self = this;
				$c.$do$((function ($el) {
					return self._$addFirst$($el);
				}));
				return $c;
			});
			this.$addAllLast$ = (function ($c) {
				var self = this;
				$c.$do$((function ($el) {
					return self._$addLast$($el);
				}));
				return $c;
			});
			this.$addFirst$ = (function ($e) {
				var self = this;
				self._$needSpaceAtStart$(1);
				self._$contents().$at$put$(self._$startGap(), $e);
				self._$startGap$(self._$startGap() - 1);
				return $e;
			});
			this.$addLast$ = (function ($e) {
				var self = this;
				self._$needSpaceAtEnd$(1);
				self._$lastIndex$(self._$lastIndex() + 1);
				self._$contents().$at$put$(self._$lastIndex(), $e);
				return $e;
			});
			this.$at$put$ = (function ($i, $el) {
				var self = this;
				var $adjusted = nil;
				$adjusted = $i + self._$startGap();
				if (!((0 < $i) && $adjusted.$$less$equal(self._$lastIndex()))) {
					self.$enclosingObjects$Collections$MutableArrayList[0]._$error$("invalid index");
				} else {
					nil;
				};
				return self._$contents().$at$put$($adjusted, $el);
			});
			this.$with$ = (function ($el) {
				var self = this;
				self._$add$($el);
				return self;
			});
			this.$withAll$ = (function ($els) {
				var self = this;
				self._$addAll$($els);
				return self;
			});
			this.$asMutableArrayList = (function () {
				var self = this;
				return self;
			});
			this.$copyWithSize$ = (function ($s) {
				var self = this;
				var $oldLastIndex = nil;
				var $safeself = nil;
				var $copy = nil;
				$safeself = self;
				$oldLastIndex = self._$lastIndex();
				self._$lastIndex$($s + self._$startGap());
				$copy = $safeself.$copy();
				self._$lastIndex$($oldLastIndex);
				return $copy;
			});
			this.$collect$ = (function ($map) {
				var self = this;
				return self._$collectUsingAdd$($map).$asMutableArrayList();
			});
			this.$replaceFrom$to$with$startingAt$ = (function ($start, $stop, $other, $repStart) {
				var self = this;
				var $otheri = nil;
				if (!(($start >= 1) && $stop.$$less$equal(self._$size()))) {
					self.$enclosingObjects$Collections$MutableArrayList[0]._$error$("range out of bounds");
				} else {
					nil;
				};
				self._$contents().$replaceFrom$to$with$startingAt$($start + self._$startGap(), $stop + self._$startGap(), $other, $repStart);
				return self;
			});
			this.$newCopyOfSize$thatCanAlsoHoldElementsOf$ = (function ($size, $other) {
				var self = this;
				return self.$enclosingObjects$Collections$MutableArrayList[0]._$MutableArrayList().$new$($size).$size$($size);
			});
			this.$bottomToTopDo$ = (function ($blk) {
				var self = this;
				self._$do$($blk);
				return self;
			});
			this.$pop = (function () {
				var self = this;
				return self._$removeLast();
			});
			this.$push$ = (function ($el) {
				var self = this;
				self._$addLast$($el);
				return self;
			});
			this.$top = (function () {
				var self = this;
				return self._$last();
			});
			this.$topToBottomDo$ = (function ($blk) {
				var self = this;
				self._$reverseDo$($blk);
				return self;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Collections`MutableArrayList";
					this._$superInit$Collections$MutableArrayList = $.$superInit$Collections$MutableArrayList;
					this.$superInit$Collections$MutableArrayList = dnuCatcher("$superInit$Collections$MutableArrayList");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$add$ = this._$add$ = $.$add$;
					this.$add$after$ = this._$add$after$ = $.$add$after$;
					this.$add$afterIndex$ = this._$add$afterIndex$ = $.$add$afterIndex$;
					this.$add$before$ = this._$add$before$ = $.$add$before$;
					this.$add$beforeIndex$ = this._$add$beforeIndex$ = $.$add$beforeIndex$;
					this.$addAllFirst$ = this._$addAllFirst$ = $.$addAllFirst$;
					this.$addAllLast$ = this._$addAllLast$ = $.$addAllLast$;
					this.$addFirst$ = this._$addFirst$ = $.$addFirst$;
					this.$addLast$ = this._$addLast$ = $.$addLast$;
					this.$at$put$ = this._$at$put$ = $.$at$put$;
					this.$with$ = this._$with$ = $.$with$;
					this.$withAll$ = this._$withAll$ = $.$withAll$;
					this.$asMutableArrayList = this._$asMutableArrayList = $.$asMutableArrayList;
					this.$copyWithSize$ = this._$copyWithSize$ = $.$copyWithSize$;
					this.$collect$ = this._$collect$ = $.$collect$;
					this.$replaceFrom$to$with$startingAt$ = this._$replaceFrom$to$with$startingAt$ = $.$replaceFrom$to$with$startingAt$;
					this.$newCopyOfSize$thatCanAlsoHoldElementsOf$ = this._$newCopyOfSize$thatCanAlsoHoldElementsOf$ = $.$newCopyOfSize$thatCanAlsoHoldElementsOf$;
					this._$bottomToTopDo$ = $.$bottomToTopDo$;
					this.$bottomToTopDo$ = dnuCatcher("$bottomToTopDo$");
					this._$pop = $.$pop;
					this.$pop = dnuCatcher("$pop");
					this._$push$ = $.$push$;
					this.$push$ = dnuCatcher("$push$");
					this._$top = $.$top;
					this.$top = dnuCatcher("$top");
					this._$topToBottomDo$ = $.$topToBottomDo$;
					this.$topToBottomDo$ = dnuCatcher("$topToBottomDo$");
					this.$enclosingObjects$Collections$MutableArrayList = enclosingObjects;
					this.$super$Collections$MutableArrayList$slot = runtimeSuperclass;
					this["Collections`MutableArrayList"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Collections`MutableArrayList"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Collections`MutableArrayList";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("defaultCapacity", false, "public defaultCapacity ^<Int> = (\r	^5\r)"),
					new MM("new:", false, "public new: capacity <Int> ^<Instance> = (\r	^new initCapacity: capacity\r)"),
					new MM("with:", false, "public with: val1 <E> ^<Instance> = (\r	^(new: 1) add: val1; yourself\r)"),
					new MM("withAll:", false, "public withAll: cltn <Collection[E]> ^<Instance> = (\r	^(new: cltn size) addAll: cltn; yourself\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$defaultCapacity = (function () {
					var self = this;
					return 5;
				});
				this.$new$ = (function ($capacity) {
					var self = this;
					return self._$new().$initCapacity$($capacity);
				});
				this.$with$ = (function ($val1) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$add$($val1);
						return cascadeReceiver.$yourself();
					})(self._$new$(1));
				});
				this.$withAll$ = (function ($cltn) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$addAll$($cltn);
						return cascadeReceiver.$yourself();
					})(self._$new$($cltn.$size()));
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Collections`MutableArrayList";
						this.$new = this._$new = $.$new;
						this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
						this.$new$ = this._$new$ = $.$new$;
						this.$with$ = this._$with$ = $.$with$;
						this.$withAll$ = this._$withAll$ = $.$withAll$;
						this.$enclosingObjects$Collections$MutableArrayList = enclosingObjects;
						this.$super$Collections$MutableArrayList = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Collections$MutableHashedMap = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Collections`MutableHashedMap";
			this.name = "Collections`MutableHashedMap";
			this.header = "MutableHashedMap new: cap = HashedCollection new: cap (\r(* MutableHashMaps are efficient HashedCollections that let you dynamically associate key->value\rpairs,  where the keys are matched using the #= message.  Equal keys must have equal #hash\rvalues. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`Collections`MutableHashedMap", true, "new: cap"),
				new MM("instance`initializer", true, "new: cap"),
				new MM("keys", false, "public keys ^<Set[K]> = (\r	| s <Set[K]> |\r	s:: Set new: size.\r	self keysDo: [:key <K> | s include: key ].\r	^s\r)"),
				new MM("values", false, "public values ^<MutableArrayList[V]> = (\r	^self inject: (MutableArrayList new: size) into:\r		[:oc <MutableArrayList[V]> :el <V> |\r			oc add: el; yourself  ]\r)"),
				new MM("at:put:", false, "public at: key <K> put: el <E> ^<E> = (\r	^at: key put: el ifNew: []\r)"),
				new MM("at:put:ifNew:", false, "protected at: key <K> put: el <E> ifNew: blk <[]> ^<E> = (\r	#BOGUS. (* Remove this method. *)\r	tableAt: key put: el ifNew: blk.\r	^el\r)"),
				new MM("at:ifAbsentPut:", false, "public at: key <K> ifAbsentPut: ablk <[V]> ^<V> = (\r	^self at: key ifPresent: [:e | e] ifAbsentPut: ablk\r)"),
				new MM("isDictionary", false, "public isDictionary ^<Boolean> = (\r	^true\r)"),
				new MM("associationAt:", false, "associationAt: key <K> ^<Assoc[K,E]> = (\r	^associationAt: key ifAbsent: [ error: 'key not found' ]\r)"),
				new MM("associationAt:ifAbsent:", false, "associationAt: key <K> ifAbsent: failBlock <[X def]> ^<Assoc[K,E] | X> = (\r	^valAt: key ifAbsent: failBlock\r)"),
				new MM("associations", false, "associations ^<MutableArrayList[Assoc[K,E]]> = (\r	| oc <MutableArrayList[Assoc[K,E]]> |\r\r	oc:: MutableArrayList new: size.\r	associationsDo:\r		[ :assoc <Assoc[K,E]> |\r			oc add: assoc	].\r	^oc\r)"),
				new MM("associationsDo:", false, "associationsDo: f <[:Assoc[K,E]]>\r = (\r	contentsDo:\r		[ :assoc <Assoc[K,E]> |\r			f value: assoc ]\r)"),
				new MM("includesAssociation:", false, "public includesAssociation: assoc <Assoc[K,Object]>  ^<Boolean> = (\r	^(at: assoc key ifAbsent: [ ^false ]) = assoc value\r)"),
				new MM("at:ifPresent:ifAbsentPut:", false, "public at: key <K> ifPresent: pblk <[:E]> ifAbsentPut: ablk <[E]> ^<E> = (\r\r	(* This is a method that is useful in the common case when you want\r		to find out if a key is present, and if it isn't, put an entry in for it.\r		It is much faster than a construct like (hc at: k ifAbsent: [ hc at: k put: e ])\r		for the case when a new entry must be added.\r		If the key is present, pblk is evaluated with the associated element.\r		If it is absent, then ablk is evaluated, and the value that it returns\r		is associated with k in the receiver.  In either case, the associated element\r		is returned. *)\r\r	| reusableSlot <Int> |\r	#BOGUS. (* Remove this method. *)\r	table == nil\r		ifTrue: [	createFirstTable.	 ].\r	^lookup: key\r				matchingSlotDo:\r						[ :index <Int> :assoc <VarAssoc[K,E]> |\r							| el <E> |\r							el:: assoc value.\r							pblk value: el.\r							el		]\r				emptySlotDo:\r						[ :index <Int> |\r							| newEl <E> |\r							newEl:: ablk value.\r							reusableSlot == nil\r								ifTrue: [ tableAt: key put: newEl inEmptySlot: index ]\r								ifFalse: [ tableAt: key put: newEl inDeletedSlot: reusableSlot ].\r							newEl	]\r				deletedSlotsDo:\r						[ :index <Int> |\r							reusableSlot == nil\r								ifTrue: [ reusableSlot:: index ].\r						]\r)"),
				new MM("keysAndValuesDo:", false, "public keysAndValuesDo: action <[:K :V]> = (\r	self contentsDo:\r		[:assoc <Association[K, V]> | action value: assoc key value: assoc value ]\r)"),
				new MM("tableAt:put:inMatchingSlot:value:", false, "protected tableAt: key <K>\rput: el <E>\rinMatchingSlot: index <Int>\rvalue: val <VarAssoc[K,E]>\r^<VarAssoc[K,E]> = (\r\r	val value: el.\r	^val\r)"),
				new MM("buildValForKey:element:", false, "protected buildValForKey: k <K> element: el <E> ^<VarAssoc[K,E]> = (\r	^Association key: k value: el\r)"),
				new MM("elementFor:", false, "protected elementFor: assoc <Assoc[K,E]> ^<E> = (\r	^assoc value\r)"),
				new MM("elementForCopy:", false, "protected elementForCopy: el <VarAssoc[K,E]> ^<VarAssoc[K,E]> = (\r	^el copy\r)"),
				new MM("hashFor:", false, "protected hashFor: key <Object> ^<Int> = (\r	^key hash\r)"),
				new MM("key:matches:", false, "protected key: k <Object> matches: another <Object> ^<Boolean> = (\r	^k = another\r)"),
				new MM("keyFor:", false, "protected keyFor: assoc <Association[K, V]> ^<K> = (\r	^assoc key\r)"),
				new MM("objToIncludeFor:withExisting:", false, "protected objToIncludeFor: newAssoc <VarAssoc[K,E]> withExisting: assoc <VarAssoc[K,E]> ^<VarAssoc[K,E]> = (\r	(* MutableHashMaps reuse the previous association *)\r	assoc value: newAssoc value.\r	^assoc\r)"),
				new MM("=", false, "public = other <Object> ^<Boolean> = (\r	^super = other and: [\r		self == other or: [\r			(* We already know that the other object must be a MutableHashedMap *)\r			self keys = other keys	]]\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Collections$MutableHashedMap = (function ($cap) {
				var self = this;
				self.$super$Collections$MutableHashedMap$slot._$instance$initializer.call(self, $cap);
				return self;
			});
			this.$instance$initializer = (function ($cap) {
				var self = this;
				self._$superInit$Collections$MutableHashedMap($cap);
				return self;
			});
			this.$keys = (function () {
				var self = this;
				var $s = nil;
				$s = self.$enclosingObjects$Collections$MutableHashedMap[0]._$Set().$new$(self._$size());
				self._$keysDo$((function ($key) {
					return $s.$include$($key);
				}));
				return $s;
			});
			this.$values = (function () {
				var self = this;
				return self._$inject$into$(self.$enclosingObjects$Collections$MutableHashedMap[0]._$MutableArrayList().$new$(self._$size()), (function ($oc, $el) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$add$($el);
						return cascadeReceiver.$yourself();
					})($oc);
				}));
			});
			this.$at$put$ = (function ($key, $el) {
				var self = this;
				return self._$at$put$ifNew$($key, $el, (function () {
					return nil;
				}));
			});
			this.$at$put$ifNew$ = (function ($key, $el, $blk) {
				var self = this;
				"BOGUS";
				self._$tableAt$put$ifNew$($key, $el, $blk);
				return $el;
			});
			this.$at$ifAbsentPut$ = (function ($key, $ablk) {
				var self = this;
				return self._$at$ifPresent$ifAbsentPut$($key, (function ($e) {
					return $e;
				}), $ablk);
			});
			this.$isDictionary = (function () {
				var self = this;
				return true;
			});
			this.$associationAt$ = (function ($key) {
				var self = this;
				return self._$associationAt$ifAbsent$($key, (function () {
					return self.$enclosingObjects$Collections$MutableHashedMap[0]._$error$("key not found");
				}));
			});
			this.$associationAt$ifAbsent$ = (function ($key, $failBlock) {
				var self = this;
				return self._$valAt$ifAbsent$($key, $failBlock);
			});
			this.$associations = (function () {
				var self = this;
				var $oc = nil;
				$oc = self.$enclosingObjects$Collections$MutableHashedMap[0]._$MutableArrayList().$new$(self._$size());
				self._$associationsDo$((function ($assoc) {
					return $oc.$add$($assoc);
				}));
				return $oc;
			});
			this.$associationsDo$ = (function ($f) {
				var self = this;
				self._$contentsDo$((function ($assoc) {
					return $f.$value$($assoc);
				}));
				return self;
			});
			this.$includesAssociation$ = (function ($assoc) {
				var self = this;
				var NLR = new Object();
				try {
					return self._$at$ifAbsent$($assoc.$key(), (function () {
						{
							NLR.value = false;
							throw NLR;
						};
					})).$$equal($assoc.$value());
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$at$ifPresent$ifAbsentPut$ = (function ($key, $pblk, $ablk) {
				var self = this;
				var $reusableSlot = nil;
				"BOGUS";
				if (self._$table() === nil) {
					self._$createFirstTable();
				} else {
					nil;
				};
				return self._$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$($key, (function ($index, $assoc) {
					var $el = nil;
					$el = $assoc.$value();
					$pblk.$value$($el);
					return $el;
				}), (function ($index) {
					var $newEl = nil;
					$newEl = $ablk.$value();
					if ($reusableSlot === nil) {
						self._$tableAt$put$inEmptySlot$($key, $newEl, $index);
					} else {
						self._$tableAt$put$inDeletedSlot$($key, $newEl, $reusableSlot);
					};
					return $newEl;
				}), (function ($index) {
					return ($reusableSlot === nil).$ifTrue$((function () {
						return $reusableSlot = $index;
					}));
				}));
			});
			this.$keysAndValuesDo$ = (function ($action) {
				var self = this;
				self._$contentsDo$((function ($assoc) {
					return $action.$value$value$($assoc.$key(), $assoc.$value());
				}));
				return self;
			});
			this.$tableAt$put$inMatchingSlot$value$ = (function ($key, $el, $index, $val) {
				var self = this;
				$val.$value$($el);
				return $val;
			});
			this.$buildValForKey$element$ = (function ($k, $el) {
				var self = this;
				return self.$enclosingObjects$Collections$MutableHashedMap[0]._$Association().$key$value$($k, $el);
			});
			this.$elementFor$ = (function ($assoc) {
				var self = this;
				return $assoc.$value();
			});
			this.$elementForCopy$ = (function ($el) {
				var self = this;
				return $el.$copy();
			});
			this.$hashFor$ = (function ($key) {
				var self = this;
				return $key.$hash();
			});
			this.$key$matches$ = (function ($k, $another) {
				var self = this;
				return $k.$$equal($another);
			});
			this.$keyFor$ = (function ($assoc) {
				var self = this;
				return $assoc.$key();
			});
			this.$objToIncludeFor$withExisting$ = (function ($newAssoc, $assoc) {
				var self = this;
				$assoc.$value$($newAssoc.$value());
				return $assoc;
			});
			this.$$equal = (function ($other) {
				var self = this;
				return self.$super$Collections$MutableHashedMap$slot._$$equal.call(self, $other) && ((self === $other) || self._$keys().$$equal($other.$keys()));
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Collections`MutableHashedMap";
					this._$superInit$Collections$MutableHashedMap = $.$superInit$Collections$MutableHashedMap;
					this.$superInit$Collections$MutableHashedMap = dnuCatcher("$superInit$Collections$MutableHashedMap");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$keys = this._$keys = $.$keys;
					this.$values = this._$values = $.$values;
					this.$at$put$ = this._$at$put$ = $.$at$put$;
					this._$at$put$ifNew$ = $.$at$put$ifNew$;
					this.$at$put$ifNew$ = dnuCatcher("$at$put$ifNew$");
					this.$at$ifAbsentPut$ = this._$at$ifAbsentPut$ = $.$at$ifAbsentPut$;
					this.$isDictionary = this._$isDictionary = $.$isDictionary;
					this._$associationAt$ = $.$associationAt$;
					this.$associationAt$ = dnuCatcher("$associationAt$");
					this._$associationAt$ifAbsent$ = $.$associationAt$ifAbsent$;
					this.$associationAt$ifAbsent$ = dnuCatcher("$associationAt$ifAbsent$");
					this._$associations = $.$associations;
					this.$associations = dnuCatcher("$associations");
					this._$associationsDo$ = $.$associationsDo$;
					this.$associationsDo$ = dnuCatcher("$associationsDo$");
					this.$includesAssociation$ = this._$includesAssociation$ = $.$includesAssociation$;
					this.$at$ifPresent$ifAbsentPut$ = this._$at$ifPresent$ifAbsentPut$ = $.$at$ifPresent$ifAbsentPut$;
					this.$keysAndValuesDo$ = this._$keysAndValuesDo$ = $.$keysAndValuesDo$;
					this._$tableAt$put$inMatchingSlot$value$ = $.$tableAt$put$inMatchingSlot$value$;
					this.$tableAt$put$inMatchingSlot$value$ = dnuCatcher("$tableAt$put$inMatchingSlot$value$");
					this._$buildValForKey$element$ = $.$buildValForKey$element$;
					this.$buildValForKey$element$ = dnuCatcher("$buildValForKey$element$");
					this._$elementFor$ = $.$elementFor$;
					this.$elementFor$ = dnuCatcher("$elementFor$");
					this._$elementForCopy$ = $.$elementForCopy$;
					this.$elementForCopy$ = dnuCatcher("$elementForCopy$");
					this._$hashFor$ = $.$hashFor$;
					this.$hashFor$ = dnuCatcher("$hashFor$");
					this._$key$matches$ = $.$key$matches$;
					this.$key$matches$ = dnuCatcher("$key$matches$");
					this._$keyFor$ = $.$keyFor$;
					this.$keyFor$ = dnuCatcher("$keyFor$");
					this._$objToIncludeFor$withExisting$ = $.$objToIncludeFor$withExisting$;
					this.$objToIncludeFor$withExisting$ = dnuCatcher("$objToIncludeFor$withExisting$");
					this.$$equal = this._$$equal = $.$$equal;
					this.$enclosingObjects$Collections$MutableHashedMap = enclosingObjects;
					this.$super$Collections$MutableHashedMap$slot = runtimeSuperclass;
					this["Collections`MutableHashedMap"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Collections`MutableHashedMap"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Collections`MutableHashedMap";
				this.slots = [];
				this.methods = [
					new MM("new:", true, null),
					new MM("defaultCapacity", false, "public defaultCapacity ^<Integer> = (\r	^0\r)"),
					new MM("new", false, "public new = (\r	^self new: defaultCapacity\r)"),
					new MM("with:", false, "public with: val1 <A> ^<Instance> = (\r	^(self new: 1) include: val1; yourself\r)"),
					new MM("withAll:", false, "public withAll: cltn <Collection[A]> ^<Instance> = (\r	^(self new: cltn size) includeAll: cltn; yourself\r)")
				];
				this.nestedClasses = [];
				this.$new$ = (function ($cap) {
					return (new this.nonMeta.basicNew()).$instance$initializer($cap);
				});
				this.$defaultCapacity = (function () {
					var self = this;
					return 0;
				});
				this.$new = (function () {
					var self = this;
					return self._$new$(self._$defaultCapacity());
				});
				this.$with$ = (function ($val1) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$include$($val1);
						return cascadeReceiver.$yourself();
					})(self._$new$(1));
				});
				this.$withAll$ = (function ($cltn) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$includeAll$($cltn);
						return cascadeReceiver.$yourself();
					})(self._$new$($cltn.$size()));
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Collections`MutableHashedMap";
						this.$new$ = this._$new$ = $.$new$;
						this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
						this.$new = this._$new = $.$new;
						this.$with$ = this._$with$ = $.$with$;
						this.$withAll$ = this._$withAll$ = $.$withAll$;
						this.$enclosingObjects$Collections$MutableHashedMap = enclosingObjects;
						this.$super$Collections$MutableHashedMap = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Collections$MutableList = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Collections`MutableList";
			this.name = "Collections`MutableList";
			this.header = "MutableList = List (\r(* This class extends List[E] with mutation operations defined in terms of #at:put:. \rThe List[E] protocol is defined from this class' interface. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`Collections`MutableList", true, "List"),
				new MM("instance`initializer", true, "List"),
				new MM("at:put:", false, "public at: index <Int> put: el <E> ^<E> = (\r	self subclassResponsibility\r)"),
				new MM("atAll:put:", false, "public atAll: indices <Collection[Int]> put: val <E> = (\r\r	indices do:\r		[ :i <Int> |\r			at: i put: val		].\r)"),
				new MM("atAllPut:", false, "public atAllPut: val <E> = (\r\r	1 to: size do:\r		[ :i <Int> |\r			at: i put: val		].\r)"),
				new MM("defaultMedianOf:and:and:", false, "defaultMedianOf: a <Int> and: b <Int> and: c <Int> ^<Int> = (\r\r\r	(* This is an untypesafe method that only works for MutableLists of elements that\r		have Magnitude relationships with each other.  It is used by the default sorting\r		method. *)\r\r	| atA <E> atB <E> atC <E> |\r	atA:: at: a.\r	atB:: at: b.\r	atC:: at: c.\r	^ atB <= atA\r		ifFalse: [ atC <= atB\r							ifFalse:[ b ]\r							ifTrue: [	 atC <= atA\r												ifFalse: [ c ]\r												ifTrue: [ a ] 	] ]\r		ifTrue: [ atB <= atC\r							ifFalse:[ b ]\r							ifTrue: [	 atA <= atC\r												ifFalse: [ c ]\r												ifTrue: [ a ] 	] ]\r\r)"),
				new MM("medianOf:and:and:using:", false, "medianOf: a <Int> and: b <Int> and: c <Int> using: compare <[:E:E| Boolean]> ^<Int> = (\r\r\r	| atA <E> atB <E> atC <E> |\r	atA:: at: a.\r	atB:: at: b.\r	atC:: at: c.\r	^(compare value: atB value: atA)\r		ifFalse: [	(compare value: atC value: atB)\r							ifFalse:[ b ]\r							ifTrue: [	(compare value: atC value: atA)\r												ifFalse: [ c ]\r												ifTrue: [ a ] 	] ]\r		ifTrue: [	(compare value: atB value: atC)\r							ifFalse:[ b ]\r							ifTrue: [	(compare value: atA value: atC)\r												ifFalse: [ c ]\r												ifTrue: [ a ] 	] ]\r\r)"),
				new MM("swap:with:", false, "swap: i <Int> with: j <Int>\r = (\r	| t <E> |\r	t:: at: i.\r	at: i put: (at: j).\r	at: j put: t.\r)"),
				new MM("replaceFrom:to:with:", false, "public replaceFrom: start <Int>\rto: stop <Int>\rwith: other <List[E]>\r = (\r\r	(* replace the elements of the receiver from start to stop with elements from other,\r	  starting with the first element of other. *)\r\r	^replaceFrom: start to: stop with: other startingAt: 1\r)"),
				new MM("replaceFrom:to:with:startingAt:", false, "public replaceFrom: start <Int>\rto: stop <Int>\rwith: other <List[E]>\rstartingAt: repStart <Int>\r = (\r\r	(* replace the elements of the receiver from start to stop with elements from other,\r	  starting with the element of other with index repStart. *)\r\r	| otheri <Int> |\r\r	repStart < start\r		ifFalse: [ otheri:: repStart.\r				  start to: stop do:\r					[ :i <Int> |\r						at: i put: (other at: otheri).\r						otheri:: otheri + 1.	]]\r		ifTrue: [ otheri:: repStart + (stop - start).\r				stop to: start by: -1 do:\r					[ :i <Int> |\r						at: i put: (other at: otheri).\r						otheri:: otheri - 1.	]]\r)"),
				new MM("readWriteStream", false, "readWriteStream ^<ReadWriteStream[E]> = (\r    ^ListReadWriteStream(* [E] *) on: self\r)"),
				new MM("writeStream", false, "writeStream ^<WriteStream[E]> = (\r    ^readWriteStream\r)"),
				new MM("defaultSort:to:", false, "defaultSort: l <Int> to: r <Int>\r = (\r	(* This is an untypesafe method that only works for MutableLists of elements that\r		have Magnitude relationships with each other *)\r\r	| i <Int> j <Int> x <E> m <Int> n <Int> |\r	i:: l.\r	j:: r.\r	n:: ((r - l) + 1).\r	n == 0\r		ifTrue: [ ^self ].\r\r	(* Pick the partition value.  For <=7 elements, use the middle element.\r		For more than 7 but <= 40, use a median of three elements.  For > 40,\r		use a median of three medians of three *)\r	m:: (l + r) // 2.\r	n > 7\r		ifTrue: [	| pl <Int> pn <Int> s <Int> |\r						pl:: l.\r						pn:: r.\r						n > 40\r							ifTrue: [	s::  n // 8.\r											pl:: defaultMedianOf: pl and: pl+s and: pl+s+s.\r											m:: defaultMedianOf: m-s and: m and: m+s.\r											pn:: defaultMedianOf: (pn-s)-s and: pn-s and: pn.	].\r						m:: defaultMedianOf: pl and: m and: pn.		].\r	x:: at: m.\r\r	[i <= j]\r		whileTrue: \r			[	| ati <E> atj <E> |\r			 	[ x <= (ati:: at: i)]\r					whileFalse: [i:: i + 1].\r				[(atj:: at: j) <=  x]\r					whileFalse: [j:: j - 1].\r				i <= j\r					ifTrue: [	at: i put: atj.\r									at: j put: ati.\r									i:: i + 1.\r									j:: j - 1.	]\r			].\r	l < j ifTrue: [defaultSort: l to: j ].\r	i < r ifTrue: [defaultSort: i to: r ].\r)"),
				new MM("sort:to:using:", false, "sort: l <Int> to: r <Int> using: compare <[:E:E| Boolean]>\r = (\r\r	| i <Int> j <Int> x <E> m <Int> n <Int> |\r	i:: l.\r	j:: r.\r	n:: ((r - l) + 1).\r	n == 0\r		ifTrue: [ ^self ].\r\r	(* Pick the partition value.  For <=7 elements, use the middle element.\r		For more than 7 but <= 40, use a median of three elements.  For > 40,\r		use a median of three medians of three *)\r	m:: (l + r) // 2.\r	n > 7\r		ifTrue: [	| pl <Int> pn <Int> s <Int> |\r						pl:: l.\r						pn:: r.\r						n > 40\r							ifTrue: [	s::  n // 8.\r											pl:: medianOf: pl and: pl+s and: pl+s+s using: compare.\r											m:: medianOf: m-s and: m and: m+s using: compare.\r											pn:: medianOf: (pn-s)-s and: pn-s and: pn using: compare.	].\r						m:: medianOf: pl and: m and: pn using: compare.		].\r	x:: at: m.\r\r	[i <= j]\r		whileTrue: \r			[	| ati <E> atj <E> |\r			 	[compare value: x value: (ati:: at: i)]\r					whileFalse: [i:: i + 1].\r				[compare value: (atj:: at: j) value: x]\r					whileFalse: [j:: j - 1].\r				i <= j\r					ifTrue: [	at: i put: atj.\r									at: j put: ati.\r									i:: i + 1.\r									j:: j - 1.	]\r			].\r	l < j ifTrue: [self sort: l to: j using: compare].\r	i < r ifTrue: [self sort: i to: r using: compare].\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Collections$MutableList = (function () {
				var self = this;
				self.$super$Collections$MutableList$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Collections$MutableList();
				return self;
			});
			this.$at$put$ = (function ($index, $el) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$atAll$put$ = (function ($indices, $val) {
				var self = this;
				$indices.$do$((function ($i) {
					return self._$at$put$($i, $val);
				}));
				return self;
			});
			this.$atAllPut$ = (function ($val) {
				var self = this;
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = self._$size();
					for (; $$limit.$$greater$equal($i); ) {
						self._$at$put$($i, $val);
						$i = (1).$$plus($i);
					};
				};
				return self;
			});
			this.$defaultMedianOf$and$and$ = (function ($a, $b, $c) {
				var self = this;
				var $atA = nil;
				var $atB = nil;
				var $atC = nil;
				$atA = self._$at$($a);
				$atB = self._$at$($b);
				$atC = self._$at$($c);
				return $atB.$$less$equal($atA).$ifFalse$ifTrue$((function () {
					return $atC.$$less$equal($atB).$ifFalse$ifTrue$((function () {
						return $b;
					}), (function () {
						return $atC.$$less$equal($atA).$ifFalse$ifTrue$((function () {
							return $c;
						}), (function () {
							return $a;
						}));
					}));
				}), (function () {
					return $atB.$$less$equal($atC).$ifFalse$ifTrue$((function () {
						return $b;
					}), (function () {
						return $atA.$$less$equal($atC).$ifFalse$ifTrue$((function () {
							return $c;
						}), (function () {
							return $a;
						}));
					}));
				}));
			});
			this.$medianOf$and$and$using$ = (function ($a, $b, $c, $compare) {
				var self = this;
				var $atA = nil;
				var $atB = nil;
				var $atC = nil;
				$atA = self._$at$($a);
				$atB = self._$at$($b);
				$atC = self._$at$($c);
				return $compare.$value$value$($atB, $atA).$ifFalse$ifTrue$((function () {
					return $compare.$value$value$($atC, $atB).$ifFalse$ifTrue$((function () {
						return $b;
					}), (function () {
						return $compare.$value$value$($atC, $atA).$ifFalse$ifTrue$((function () {
							return $c;
						}), (function () {
							return $a;
						}));
					}));
				}), (function () {
					return $compare.$value$value$($atB, $atC).$ifFalse$ifTrue$((function () {
						return $b;
					}), (function () {
						return $compare.$value$value$($atA, $atC).$ifFalse$ifTrue$((function () {
							return $c;
						}), (function () {
							return $a;
						}));
					}));
				}));
			});
			this.$swap$with$ = (function ($i, $j) {
				var self = this;
				var $t = nil;
				$t = self._$at$($i);
				self._$at$put$($i, self._$at$($j));
				self._$at$put$($j, $t);
				return self;
			});
			this.$replaceFrom$to$with$ = (function ($start, $stop, $other) {
				var self = this;
				return self._$replaceFrom$to$with$startingAt$($start, $stop, $other, 1);
			});
			this.$replaceFrom$to$with$startingAt$ = (function ($start, $stop, $other, $repStart) {
				var self = this;
				var $otheri = nil;
				if (!$repStart.$$less($start)) {
					$otheri = $repStart;
					{
						var $$limit = nil;
						var $i = nil;
						nil;
						$i = $start;
						$$limit = $stop;
						for (; $$limit.$$greater$equal($i); ) {
							self._$at$put$($i, $other.$at$($otheri));
							$otheri = $otheri + 1;
							$i = (1).$$plus($i);
						};
					};
				} else {
					$otheri = $repStart + ($stop - $start);
					{
						var $$limit = nil;
						var $i = nil;
						nil;
						$i = $stop;
						$$limit = $start;
						for (; $$limit.$$less$equal($i); ) {
							self._$at$put$($i, $other.$at$($otheri));
							$otheri = $otheri - 1;
							$i = (-1).$$plus($i);
						};
					};
				};
				return self;
			});
			this.$readWriteStream = (function () {
				var self = this;
				return $0.$ListReadWriteStream.call(self.$enclosingObjects$Collections$MutableList[0]).$on$(self);
			});
			this.$writeStream = (function () {
				var self = this;
				return self._$readWriteStream();
			});
			this.$defaultSort$to$ = (function ($l, $r) {
				var self = this;
				var $i = nil;
				var $j = nil;
				var $x = nil;
				var $m = nil;
				var $n = nil;
				$i = $l;
				$j = $r;
				$n = ($r - $l) + 1;
				if ($n === 0) {
					return self;
				} else {
					nil;
				};
				$m = ($l + $r).$$over$over(2);
				if ($n > 7) {
					var $pl = nil;
					var $pn = nil;
					var $s = nil;
					$pl = $l;
					$pn = $r;
					if ($n > 40) {
						$s = $n.$$over$over(8);
						$pl = self._$defaultMedianOf$and$and$($pl, $pl + $s, ($pl + $s) + $s);
						$m = self._$defaultMedianOf$and$and$($m - $s, $m, $m + $s);
						$pn = self._$defaultMedianOf$and$and$(($pn - $s) - $s, $pn - $s, $pn);
					} else {
						nil;
					};
					$m = self._$defaultMedianOf$and$and$($pl, $m, $pn);
				} else {
					nil;
				};
				$x = self._$at$($m);
				{
					nil;
					for (; $i.$$less$equal($j); ) {
						var $ati = nil;
						var $atj = nil;
						{
							nil;
							for (; !$x.$$less$equal($ati = self._$at$($i)); ) {
								$i = $i + 1;
							};
						};
						{
							nil;
							for (; !($atj = self._$at$($j)).$$less$equal($x); ) {
								$j = $j - 1;
							};
						};
						if ($i.$$less$equal($j)) {
							self._$at$put$($i, $atj);
							self._$at$put$($j, $ati);
							$i = $i + 1;
							$j = $j - 1;
						} else {
							nil;
						};
					};
				};
				if ($l.$$less($j)) {
					self._$defaultSort$to$($l, $j);
				} else {
					nil;
				};
				if ($i.$$less($r)) {
					self._$defaultSort$to$($i, $r);
				} else {
					nil;
				};
				return self;
			});
			this.$sort$to$using$ = (function ($l, $r, $compare) {
				var self = this;
				var $i = nil;
				var $j = nil;
				var $x = nil;
				var $m = nil;
				var $n = nil;
				$i = $l;
				$j = $r;
				$n = ($r - $l) + 1;
				if ($n === 0) {
					return self;
				} else {
					nil;
				};
				$m = ($l + $r).$$over$over(2);
				if ($n > 7) {
					var $pl = nil;
					var $pn = nil;
					var $s = nil;
					$pl = $l;
					$pn = $r;
					if ($n > 40) {
						$s = $n.$$over$over(8);
						$pl = self._$medianOf$and$and$using$($pl, $pl + $s, ($pl + $s) + $s, $compare);
						$m = self._$medianOf$and$and$using$($m - $s, $m, $m + $s, $compare);
						$pn = self._$medianOf$and$and$using$(($pn - $s) - $s, $pn - $s, $pn, $compare);
					} else {
						nil;
					};
					$m = self._$medianOf$and$and$using$($pl, $m, $pn, $compare);
				} else {
					nil;
				};
				$x = self._$at$($m);
				{
					nil;
					for (; $i.$$less$equal($j); ) {
						var $ati = nil;
						var $atj = nil;
						{
							nil;
							for (; !$compare.$value$value$($x, $ati = self._$at$($i)); ) {
								$i = $i + 1;
							};
						};
						{
							nil;
							for (; !$compare.$value$value$($atj = self._$at$($j), $x); ) {
								$j = $j - 1;
							};
						};
						if ($i.$$less$equal($j)) {
							self._$at$put$($i, $atj);
							self._$at$put$($j, $ati);
							$i = $i + 1;
							$j = $j - 1;
						} else {
							nil;
						};
					};
				};
				if ($l.$$less($j)) {
					self._$sort$to$using$($l, $j, $compare);
				} else {
					nil;
				};
				if ($i.$$less($r)) {
					self._$sort$to$using$($i, $r, $compare);
				} else {
					nil;
				};
				return self;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Collections`MutableList";
					this._$superInit$Collections$MutableList = $.$superInit$Collections$MutableList;
					this.$superInit$Collections$MutableList = dnuCatcher("$superInit$Collections$MutableList");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$at$put$ = this._$at$put$ = $.$at$put$;
					this.$atAll$put$ = this._$atAll$put$ = $.$atAll$put$;
					this.$atAllPut$ = this._$atAllPut$ = $.$atAllPut$;
					this._$defaultMedianOf$and$and$ = $.$defaultMedianOf$and$and$;
					this.$defaultMedianOf$and$and$ = dnuCatcher("$defaultMedianOf$and$and$");
					this._$medianOf$and$and$using$ = $.$medianOf$and$and$using$;
					this.$medianOf$and$and$using$ = dnuCatcher("$medianOf$and$and$using$");
					this._$swap$with$ = $.$swap$with$;
					this.$swap$with$ = dnuCatcher("$swap$with$");
					this.$replaceFrom$to$with$ = this._$replaceFrom$to$with$ = $.$replaceFrom$to$with$;
					this.$replaceFrom$to$with$startingAt$ = this._$replaceFrom$to$with$startingAt$ = $.$replaceFrom$to$with$startingAt$;
					this._$readWriteStream = $.$readWriteStream;
					this.$readWriteStream = dnuCatcher("$readWriteStream");
					this._$writeStream = $.$writeStream;
					this.$writeStream = dnuCatcher("$writeStream");
					this._$defaultSort$to$ = $.$defaultSort$to$;
					this.$defaultSort$to$ = dnuCatcher("$defaultSort$to$");
					this._$sort$to$using$ = $.$sort$to$using$;
					this.$sort$to$using$ = dnuCatcher("$sort$to$using$");
					this.$enclosingObjects$Collections$MutableList = enclosingObjects;
					this.$super$Collections$MutableList$slot = runtimeSuperclass;
					this["Collections`MutableList"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Collections`MutableList"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Collections`MutableList";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Collections`MutableList";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Collections$MutableList = enclosingObjects;
						this.$super$Collections$MutableList = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Collections$Queue = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Collections`Queue";
			this.name = "Collections`Queue";
			this.header = "Queue = IOSequence (\r(* The Queue class of collections. . *)|\r	private head <DoubleLink[E]>\r	private tail <DoubleLink[E]>\r	private actualSize <Int> ::= 0.\r|)";
			this.slots = [
				new SM("head", true, false),
				new SM("tail", true, false),
				new SM("actualSize", true, false),
				new SM("Collections`Queue`DoubleLink", true, true)
			];
			this.methods = [
				new MM("superInit`Collections`Queue", true, "IOSequence"),
				new MM("instance`initializer", true, "IOSequence"),
				new MM("at:", false, "at: index <Int> ^<E> = (\r	^havePeeked\r		ifFalse: [ (linkAt: index) value ]\r		ifTrue: [ index = 1\r						ifFalse: [ (linkAt: index - 1) value ]\r						ifTrue: [ peekVal ]\r					]\r)"),
				new MM("at:put:", false, "at: index <Int> put: el <E>  ^<E> = (\r	havePeeked\r		ifFalse: [ (linkAt: index) value: el ]\r		ifTrue: [ index = 1\r						ifFalse: [ (linkAt: index - 1) value: el ]\r						ifTrue: [ peekVal: el ]\r					].\r	^el\r)"),
				new MM("nextPut:", false, "nextPut: el <E> ^<E> = (\r	| l <DoubleLink[E]> |\r	l:: DoubleLink(* [E] *) new value: el.\r	tail isNil\r		ifFalse: [	tail next: l.\r						l prev: tail.	]\r		ifTrue: [ head: l ].\r	tail: l.\r	actualSize: actualSize + 1.\r	^el\r)"),
				new MM("size", false, "size ^<Int> = (\r	^havePeeked\r		ifFalse: [ actualSize ]\r		ifTrue: [ actualSize + 1 ]\r)"),
				new MM("assert:", false, "assert: value = (\r	\r)"),
				new MM("checkValidity", false, "checkValidity\r = (\r\r	| c <Int> l <DoubleLink[E]> peekCount <Int> |\r	peekCount:: havePeeked ifTrue: [ 1 ] ifFalse: [ 0 ].\r	l:: head.\r	l isNil\r		ifTrue: [ assert: [ size = peekCount and: [ tail isNil ] ] message: ''.\r						^self ].\r	assert: [l prev isNil] message: ''.\r\r	c:: 1.\r	[ l next isNil ]\r		whileFalse: [	| next <DoubleLink[E]> |\r								next:: l next.\r								assert: [ next prev == l ] message: ''.\r								l:: next.\r								c:: c + 1 ].\r	assert: [tail == l] message: ''.\r	assert: [(c + peekCount) = size ] message: ''.\r)"),
				new MM("copyWithSize:", false, "copyWithSize: s <Int> ^<MutableList[EX]> = (\r	(* {where EX is returnType of #anElement message of receiverType} *)\r\r	(* The guarantee is safe because of the inference clause *)\r	^(Array(* [EX] *) new: s) replaceFrom: 1 to: (size min: s) with: ((* guaranteed <List[EX]> *) self)	\r)"),
				new MM("actualAtEnd", false, "actualAtEnd ^<Boolean> = (\r	^head isNil\r)"),
				new MM("actualNext", false, "actualNext ^<E> = (\r\r	| l <DoubleLink[E]> |\r	l:: head.\r	head: l next.\r	head isNil\r		ifTrue: [ tail: head ].\r	actualSize: actualSize - 1.\r	^l value\r)"),
				new MM("linkAt:", false, "linkAt: index <Int> ^<DoubleLink[E]> = (\r\r	| i <Int> next <DoubleLink[E]> |\r	i:: 1.\r	next:: head.\r	[ i < index ]\r		whileTrue: [ next:: next next.\r								i:: i + 1. ].\r	^next\r)"),
				new MM("linkHolding:", false, "linkHolding: el <E> ^<DoubleLink[E]> = (\r\r	(* return the link holding el.  Note that an element can be in the peek buffer as well as in \r		a link, so this can't be done for all queue elements *)\r\r	| next <DoubleLink[E]> |\r	next:: head.\r	[ next value = el ]\r		whileFalse: [ next:: next next ].\r	^next\r)"),
				new MM("removeLink:", false, "removeLink: l <DoubleLink[E]>\r = (\r	(* remove the link holding el.  Note that an element can be in the peek buffer as well as in \r		a link, so this can't be done for all queue elements *)\r\r	l == head\r		ifTrue: [ head: l next ]\r		ifFalse: [ l prev next: l next ].\r	l == tail\r		ifTrue: [ tail: l prev ]\r		ifFalse: [ l next prev: l prev ].\r	actualSize: actualSize - 1.\r)"),
				new MM("remove:", false, "remove: el <E> ^<E> = (\r	(havePeeked and: [ peekVal = el ])\r		ifTrue: [	next.	]\r		ifFalse: [ removeLink: (linkHolding: el) ].\r	^el\r)"),
				new MM("DoubleLink", true, null),
				new MM("head", true, null),
				new MM("head:", true, null),
				new MM("tail", true, null),
				new MM("tail:", true, null),
				new MM("actualSize", true, null),
				new MM("actualSize:", true, null),
				new MM("Collections`Queue`DoubleLink", true, null),
				new MM("Collections`Queue`DoubleLink:", true, null)
			];
			this.nestedClasses = ["Collections`Queue`DoubleLink"];
			this.applications = [];
			this.$superInit$Collections$Queue = (function () {
				var self = this;
				self.$super$Collections$Queue$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Collections$Queue();
				$1.$actualSize$.call(self, 0);
				return self;
			});
			this.$at$ = (function ($index) {
				var self = this;
				return self._$havePeeked().$ifFalse$ifTrue$((function () {
					return self._$linkAt$($index).$value();
				}), (function () {
					return $index.$$equal(1).$ifFalse$ifTrue$((function () {
						return self._$linkAt$($index - 1).$value();
					}), (function () {
						return self._$peekVal();
					}));
				}));
			});
			this.$at$put$ = (function ($index, $el) {
				var self = this;
				if (!self._$havePeeked()) {
					self._$linkAt$($index).$value$($el);
				} else {
					if (!$index.$$equal(1)) {
						self._$linkAt$($index - 1).$value$($el);
					} else {
						self._$peekVal$($el);
					};
				};
				return $el;
			});
			this.$nextPut$ = (function ($el) {
				var self = this;
				var $l = nil;
				$l = self._$DoubleLink().$new().$value$($el);
				if (!$1.$tail.call(self).$isNil()) {
					$1.$tail.call(self).$next$($l);
					$l.$prev$($1.$tail.call(self));
				} else {
					$1.$head$.call(self, $l);
				};
				$1.$tail$.call(self, $l);
				$1.$actualSize$.call(self, $1.$actualSize.call(self) + 1);
				return $el;
			});
			this.$size = (function () {
				var self = this;
				return self._$havePeeked().$ifFalse$ifTrue$((function () {
					return $1.$actualSize.call(self);
				}), (function () {
					return $1.$actualSize.call(self) + 1;
				}));
			});
			this.$assert$ = (function ($value) {
				var self = this;
				return self;
			});
			this.$checkValidity = (function () {
				var self = this;
				var $c = nil;
				var $l = nil;
				var $peekCount = nil;
				$peekCount = self._$havePeeked().$ifTrue$ifFalse$((function () {
					return 1;
				}), (function () {
					return 0;
				}));
				$l = $1.$head.call(self);
				if ($l.$isNil()) {
					self._$assert$message$((function () {
						return self._$size().$$equal($peekCount) && $1.$tail.call(self).$isNil();
					}), "");
					return self;
				} else {
					nil;
				};
				self._$assert$message$((function () {
					return $l.$prev().$isNil();
				}), "");
				$c = 1;
				{
					nil;
					for (; !$l.$next().$isNil(); ) {
						var $next = nil;
						$next = $l.$next();
						self._$assert$message$((function () {
							return $next.$prev() === $l;
						}), "");
						$l = $next;
						$c = $c + 1;
					};
				};
				self._$assert$message$((function () {
					return $1.$tail.call(self) === $l;
				}), "");
				self._$assert$message$((function () {
					return ($c + $peekCount).$$equal(self._$size());
				}), "");
				return self;
			});
			this.$copyWithSize$ = (function ($s) {
				var self = this;
				return self._$Array().$new$($s).$replaceFrom$to$with$(1, self._$size().$min$($s), self);
			});
			this.$actualAtEnd = (function () {
				var self = this;
				return $1.$head.call(self).$isNil();
			});
			this.$actualNext = (function () {
				var self = this;
				var $l = nil;
				$l = $1.$head.call(self);
				$1.$head$.call(self, $l.$next());
				if ($1.$head.call(self).$isNil()) {
					$1.$tail$.call(self, $1.$head.call(self));
				} else {
					nil;
				};
				$1.$actualSize$.call(self, $1.$actualSize.call(self) - 1);
				return $l.$value();
			});
			this.$linkAt$ = (function ($index) {
				var self = this;
				var $i = nil;
				var $next = nil;
				$i = 1;
				$next = $1.$head.call(self);
				{
					nil;
					for (; $i.$$less($index); ) {
						$next = $next.$next();
						$i = $i + 1;
					};
				};
				return $next;
			});
			this.$linkHolding$ = (function ($el) {
				var self = this;
				var $next = nil;
				$next = $1.$head.call(self);
				{
					nil;
					for (; !$next.$value().$$equal($el); ) {
						$next = $next.$next();
					};
				};
				return $next;
			});
			this.$removeLink$ = (function ($l) {
				var self = this;
				if ($l === $1.$head.call(self)) {
					$1.$head$.call(self, $l.$next());
				} else {
					$l.$prev().$next$($l.$next());
				};
				if ($l === $1.$tail.call(self)) {
					$1.$tail$.call(self, $l.$prev());
				} else {
					$l.$next().$prev$($l.$prev());
				};
				$1.$actualSize$.call(self, $1.$actualSize.call(self) - 1);
				return self;
			});
			this.$remove$ = (function ($el) {
				var self = this;
				if (self._$havePeeked() && self._$peekVal().$$equal($el)) {
					self._$next();
				} else {
					self._$removeLink$(self._$linkHolding$($el));
				};
				return $el;
			});
			this.$DoubleLink = (function () {
				if (nil === this.$Collections$Queue$DoubleLink$slot) {
					var self = this;
					var superclass = self._$Object();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$Collections$Queue);
					var mixin = $.$Collections$Queue$DoubleLink;
					this.$Collections$Queue$DoubleLink$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$Collections$Queue$DoubleLink$slot;
			});
			this.$head = (function () {
				return this.$head$slot;
			});
			this.$head$ = (function (v) {
				this.$head$slot = v;
				return this;
			});
			this.$tail = (function () {
				return this.$tail$slot;
			});
			this.$tail$ = (function (v) {
				this.$tail$slot = v;
				return this;
			});
			this.$actualSize = (function () {
				return this.$actualSize$slot;
			});
			this.$actualSize$ = (function (v) {
				this.$actualSize$slot = v;
				return this;
			});
			this.$Collections$Queue$DoubleLink = (function () {
				return this.$Collections$Queue$DoubleLink$slot;
			});
			this.$Collections$Queue$DoubleLink$ = (function (v) {
				this.$Collections$Queue$DoubleLink$slot = v;
				return this;
			});
			this.$Collections$Queue$DoubleLink = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for Collections`Queue`DoubleLink";
				this.name = "Collections`Queue`DoubleLink";
				this.header = "DoubleLink = (|\r	prev <DoubleLink[T]>\r	value <T>\r	next <DoubleLink[T]>\r|)";
				this.slots = [
					new SM("prev", true, false),
					new SM("value", true, false),
					new SM("next", true, false)
				];
				this.methods = [
					new MM("superInit`Collections`Queue`DoubleLink", true, " "),
					new MM("instance`initializer", true, " "),
					new MM("prev", true, null),
					new MM("prev:", true, null),
					new MM("value", true, null),
					new MM("value:", true, null),
					new MM("next", true, null),
					new MM("next:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$Collections$Queue$DoubleLink = (function () {
					var self = this;
					self.$super$Collections$Queue$DoubleLink$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function () {
					var self = this;
					self._$superInit$Collections$Queue$DoubleLink();
					return self;
				});
				this.$prev = (function () {
					return this.$prev$slot;
				});
				this.$prev$ = (function (v) {
					this.$prev$slot = v;
					return this;
				});
				this.$value = (function () {
					return this.$value$slot;
				});
				this.$value$ = (function (v) {
					this.$value$slot = v;
					return this;
				});
				this.$next = (function () {
					return this.$next$slot;
				});
				this.$next$ = (function (v) {
					this.$next$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for Collections`Queue`DoubleLink";
						this._$superInit$Collections$Queue$DoubleLink = $.$superInit$Collections$Queue$DoubleLink;
						this.$superInit$Collections$Queue$DoubleLink = dnuCatcher("$superInit$Collections$Queue$DoubleLink");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this._$prev = $.$prev;
						this.$prev = dnuCatcher("$prev");
						this._$prev$ = $.$prev$;
						this.$prev$ = dnuCatcher("$prev$");
						this._$value = $.$value;
						this.$value = dnuCatcher("$value");
						this._$value$ = $.$value$;
						this.$value$ = dnuCatcher("$value$");
						this._$next = $.$next;
						this.$next = dnuCatcher("$next");
						this._$next$ = $.$next$;
						this.$next$ = dnuCatcher("$next$");
						this.$enclosingObjects$Collections$Queue$DoubleLink = enclosingObjects;
						this.$super$Collections$Queue$DoubleLink$slot = runtimeSuperclass;
						this["Collections`Queue`DoubleLink"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$prev$slot = nil;
							this.$value$slot = nil;
							this.$next$slot = nil;
						});
						this.basicNew = this["Collections`Queue`DoubleLink"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for Collections`Queue`DoubleLink";
					this.slots = [];
					this.methods = [new MM("new", true, null)];
					this.nestedClasses = [];
					this.$new = (function () {
						return (new this.nonMeta.basicNew()).$instance$initializer();
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for Collections`Queue`DoubleLink";
							this.$new = this._$new = $.$new;
							this.$enclosingObjects$Collections$Queue$DoubleLink = enclosingObjects;
							this.$super$Collections$Queue$DoubleLink = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$Collections$Queue$DoubleLink.enclosingMixin = this;
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Collections`Queue";
					this._$superInit$Collections$Queue = $.$superInit$Collections$Queue;
					this.$superInit$Collections$Queue = dnuCatcher("$superInit$Collections$Queue");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$at$ = $.$at$;
					this.$at$ = dnuCatcher("$at$");
					this._$at$put$ = $.$at$put$;
					this.$at$put$ = dnuCatcher("$at$put$");
					this._$nextPut$ = $.$nextPut$;
					this.$nextPut$ = dnuCatcher("$nextPut$");
					this._$size = $.$size;
					this.$size = dnuCatcher("$size");
					this._$assert$ = $.$assert$;
					this.$assert$ = dnuCatcher("$assert$");
					this._$checkValidity = $.$checkValidity;
					this.$checkValidity = dnuCatcher("$checkValidity");
					this._$copyWithSize$ = $.$copyWithSize$;
					this.$copyWithSize$ = dnuCatcher("$copyWithSize$");
					this._$actualAtEnd = $.$actualAtEnd;
					this.$actualAtEnd = dnuCatcher("$actualAtEnd");
					this._$actualNext = $.$actualNext;
					this.$actualNext = dnuCatcher("$actualNext");
					this._$linkAt$ = $.$linkAt$;
					this.$linkAt$ = dnuCatcher("$linkAt$");
					this._$linkHolding$ = $.$linkHolding$;
					this.$linkHolding$ = dnuCatcher("$linkHolding$");
					this._$removeLink$ = $.$removeLink$;
					this.$removeLink$ = dnuCatcher("$removeLink$");
					this._$remove$ = $.$remove$;
					this.$remove$ = dnuCatcher("$remove$");
					this._$DoubleLink = $.$DoubleLink;
					this.$DoubleLink = dnuCatcher("$DoubleLink");
					this.$Collections$Queue$DoubleLink = this._$Collections$Queue$DoubleLink = $.$Collections$Queue$DoubleLink;
					this.$Collections$Queue$DoubleLink$ = this._$Collections$Queue$DoubleLink$ = $.$Collections$Queue$DoubleLink$;
					this.$enclosingObjects$Collections$Queue = enclosingObjects;
					this.$super$Collections$Queue$slot = runtimeSuperclass;
					this["Collections`Queue"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$head$slot = nil;
						this.$tail$slot = nil;
						this.$actualSize$slot = nil;
						this.$Collections$Queue$DoubleLink$slot = nil;
					});
					this.basicNew = this["Collections`Queue"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Collections`Queue";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Collections`Queue";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Collections$Queue = enclosingObjects;
						this.$super$Collections$Queue = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Collections$Set = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Collections`Set";
			this.name = "Collections`Set";
			this.header = "Set new: cap = HashedCollection new: cap ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`Collections`Set", true, "new: cap"),
				new MM("instance`initializer", true, "new: cap"),
				new MM("asSet", false, "public asSet ^<Extensible[EX]> = (\r		(* {where EX is returnType of #anElement message of receiverType} *)\r\r	(* The guarantee is safe because of the inference clause *)\r	^(* guaranteed <Set[EX]> *) self\r)"),
				new MM("buildValForKey:element:", false, "buildValForKey:  key <Object> element: el <E> ^<E> = (\r	^el\r)"),
				new MM("elementFor:", false, "elementFor: el <E> ^<E> = (\r	^el\r)"),
				new MM("elementForCopy:", false, "elementForCopy: el <E> ^<E> = (\r	^el\r)"),
				new MM("hashFor:", false, "hashFor: key <Object> ^<Int> = (\r	^key hash\r)"),
				new MM("key:matches:", false, "key: k <Object> matches: another <Object> ^<Boolean> = (\r	^k = another\r)"),
				new MM("keyFor:", false, "keyFor: e <E> ^<Object> = (\r	^e\r)"),
				new MM("objToIncludeFor:withExisting:", false, "objToIncludeFor: new <E> withExisting: other <E> ^<E> = (\r	^new\r)"),
				new MM("hasSameElementsAs:", false, "public hasSameElementsAs: other <Collection[Object]>  ^<Boolean> = (\r	(* A faster reimplementation of the inherited version, to speed up set comparisons *)\r\r	| otherSet <Extensible[Object]> |\r	size = other size\r		ifFalse: [ ^false ].\r	otherSet:: other asSet.\r	size = otherSet size\r		ifFalse: [ ^false ].\r	do:\r		[ :el <Object> |\r			(otherSet includes: el)\r				ifFalse: [ ^false ]  ].\r	^true\r)"),
				new MM("includes:", false, "public includes: o <Object> ^<Boolean> = (\r	^includesKey: o\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Collections$Set = (function ($cap) {
				var self = this;
				self.$super$Collections$Set$slot._$instance$initializer.call(self, $cap);
				return self;
			});
			this.$instance$initializer = (function ($cap) {
				var self = this;
				self._$superInit$Collections$Set($cap);
				return self;
			});
			this.$asSet = (function () {
				var self = this;
				return self;
			});
			this.$buildValForKey$element$ = (function ($key, $el) {
				var self = this;
				return $el;
			});
			this.$elementFor$ = (function ($el) {
				var self = this;
				return $el;
			});
			this.$elementForCopy$ = (function ($el) {
				var self = this;
				return $el;
			});
			this.$hashFor$ = (function ($key) {
				var self = this;
				return $key.$hash();
			});
			this.$key$matches$ = (function ($k, $another) {
				var self = this;
				return $k.$$equal($another);
			});
			this.$keyFor$ = (function ($e) {
				var self = this;
				return $e;
			});
			this.$objToIncludeFor$withExisting$ = (function ($new, $other) {
				var self = this;
				return $new;
			});
			this.$hasSameElementsAs$ = (function ($other) {
				var self = this;
				var NLR = new Object();
				try {
					var $otherSet = nil;
					if (!self._$size().$$equal($other.$size())) {
						return false;
					} else {
						nil;
					};
					$otherSet = $other.$asSet();
					if (!self._$size().$$equal($otherSet.$size())) {
						return false;
					} else {
						nil;
					};
					self._$do$((function ($el) {
						return $otherSet.$includes$($el).$ifFalse$((function () {
							{
								NLR.value = false;
								throw NLR;
							};
						}));
					}));
					return true;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$includes$ = (function ($o) {
				var self = this;
				return self._$includesKey$($o);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Collections`Set";
					this._$superInit$Collections$Set = $.$superInit$Collections$Set;
					this.$superInit$Collections$Set = dnuCatcher("$superInit$Collections$Set");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$asSet = this._$asSet = $.$asSet;
					this._$buildValForKey$element$ = $.$buildValForKey$element$;
					this.$buildValForKey$element$ = dnuCatcher("$buildValForKey$element$");
					this._$elementFor$ = $.$elementFor$;
					this.$elementFor$ = dnuCatcher("$elementFor$");
					this._$elementForCopy$ = $.$elementForCopy$;
					this.$elementForCopy$ = dnuCatcher("$elementForCopy$");
					this._$hashFor$ = $.$hashFor$;
					this.$hashFor$ = dnuCatcher("$hashFor$");
					this._$key$matches$ = $.$key$matches$;
					this.$key$matches$ = dnuCatcher("$key$matches$");
					this._$keyFor$ = $.$keyFor$;
					this.$keyFor$ = dnuCatcher("$keyFor$");
					this._$objToIncludeFor$withExisting$ = $.$objToIncludeFor$withExisting$;
					this.$objToIncludeFor$withExisting$ = dnuCatcher("$objToIncludeFor$withExisting$");
					this.$hasSameElementsAs$ = this._$hasSameElementsAs$ = $.$hasSameElementsAs$;
					this.$includes$ = this._$includes$ = $.$includes$;
					this.$enclosingObjects$Collections$Set = enclosingObjects;
					this.$super$Collections$Set$slot = runtimeSuperclass;
					this["Collections`Set"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Collections`Set"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Collections`Set";
				this.slots = [];
				this.methods = [
					new MM("new:", true, null),
					new MM("defaultCapacity", false, "public defaultCapacity = (\r\r	^ 0\r)"),
					new MM("new", false, "public new = (\r	^new: defaultCapacity\r)"),
					new MM("with:", false, "public with: val1 <A> ^<Instance> = (\r	^(new: 1) include: val1; yourself\r)"),
					new MM("withAll:", false, "public withAll: cltn <Collection[A]> ^<Instance> = (\r	^(new: cltn size) includeAll: cltn; yourself\r)")
				];
				this.nestedClasses = [];
				this.$new$ = (function ($cap) {
					return (new this.nonMeta.basicNew()).$instance$initializer($cap);
				});
				this.$defaultCapacity = (function () {
					var self = this;
					return 0;
				});
				this.$new = (function () {
					var self = this;
					return self._$new$(self._$defaultCapacity());
				});
				this.$with$ = (function ($val1) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$include$($val1);
						return cascadeReceiver.$yourself();
					})(self._$new$(1));
				});
				this.$withAll$ = (function ($cltn) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$includeAll$($cltn);
						return cascadeReceiver.$yourself();
					})(self._$new$($cltn.$size()));
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Collections`Set";
						this.$new$ = this._$new$ = $.$new$;
						this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
						this.$new = this._$new = $.$new;
						this.$with$ = this._$with$ = $.$with$;
						this.$withAll$ = this._$withAll$ = $.$withAll$;
						this.$enclosingObjects$Collections$Set = enclosingObjects;
						this.$super$Collections$Set = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Collections$SortedList = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Collections`SortedList";
			this.name = "Collections`SortedList";
			this.header = "SortedList = AddableList (\r	(* Sorted collections are addable collections that always keep their elements in sorted order.  The\r	sort order is determined by the sortPredicate, which is a function that compares 2 elements and\r	returns true if the first argument should be before the second argument in the collection.\r	The sortPredicate should be provided when the collection is created.\r\r	Unfortunately, Smalltalk defines SortedList as having a default sortPredicate that uses #<= to compare\r	elements.  This is NOT typesafe, since there are many kinds of objects that you might want to sort that don't support\r	the #<= operator; however, this feature is retained in Strongtalk for compatibility.   If you wish to write typesafe programs,\r	then SortedLists should always be given a sort block when they are created.  This involves using the creation\r	messages #new:sortBlock:, #sortBlock: and the Collection utility message #asSortedList: instead of #new:, #new,\r	and #asSortedList, respectively. *)|\r	private usesDefaultSortBlock_private <Boolean>\r	private sortBlock_private <[:E:E| Boolean]>\r|initCapacity: self class defaultCapacity. \r	sortBlock_private:: SortedList defaultSortBlock.\r	usesDefaultSortBlock_private:: true)";
			this.slots = [
				new SM("usesDefaultSortBlock_private", true, false),
				new SM("sortBlock_private", true, false)
			];
			this.methods = [
				new MM("superInit`Collections`SortedList", true, "AddableList"),
				new MM("instance`initializer", true, "AddableList"),
				new MM("add:", false, "public add: el <E> ^<E> = (\r	| index <Integer> |\r	index::indexFor: el.\r	index > contents size\r		ifFalse: [ index:: makeSpace: 1 beforeIndex: index. ]\r		ifTrue: [	needSpaceAtEnd: 1.\r						lastIndex: lastIndex + 1. ].\r	^contents at: index put: el.\r)"),
				new MM("addAll:", false, "public addAll: els <Collection[E]> ^<Collection[E]> = (\r	els size > (size // 8) 		 (* %todo: do measurements to see if 8 is reasonable *)\r		ifTrue: [ 	needSpaceAtEnd: els size.\r				els do: [ :el <E> |\r					lastIndex: lastIndex + 1.\r					contents at: lastIndex put: el.	].\r				sort.		]\r		ifFalse: [ els do: [ :el <E> |\r					add: el	]].\r	^els\r)"),
				new MM("sortBlock", false, "public sortBlock ^<[:E:E| Boolean]> = (\r\r	^sortBlock_private\r)"),
				new MM("sortBlock:", false, "public sortBlock: sortBy <[:E:E| Boolean]> = (\r	sortBlock_private:: sortBy.\r	usesDefaultSortBlock_private:: false.\r	isEmpty ifFalse: [ sort. ].\r)"),
				new MM("usesDefaultSortBlock", false, "public usesDefaultSortBlock ^<Boolean> = (\r	^usesDefaultSortBlock_private\r)"),
				new MM("asSortedList", false, "public asSortedList ^<List[Object]> = (\r	^self\r)"),
				new MM("initCapacity:", false, "initCapacity: cap <Int> = (\r	super initCapacity: cap.\r)"),
				new MM("indexFor:", false, "indexFor: el <E> ^<Integer> = (\r\r	(* This returns an internal index such that if el was inserted before it\r	  the collection would remain sorted *)\r\r	^contents\r		binarySearchFor: el\r		between: startGap + 1\r		and: lastIndex\r		toCompare: sortBlock\r)"),
				new MM("sort", false, "public sort = (\r	usesDefaultSortBlock\r		ifTrue: [	contents defaultSort: startGap + 1 to: lastIndex ]\r		ifFalse: [ 	contents sort: startGap + 1 to: lastIndex using: sortBlock ]\r)"),
				new MM("isSorted", false, "public isSorted ^<Boolean> = (\r\r	(* testing function used for sort routine validation *)\r\r	^isSortedBy: sortBlock\r)"),
				new MM("usesDefaultSortBlock_private", true, null),
				new MM("usesDefaultSortBlock_private:", true, null),
				new MM("sortBlock_private", true, null),
				new MM("sortBlock_private:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Collections$SortedList = (function () {
				var self = this;
				self.$super$Collections$SortedList$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Collections$SortedList();
				self._$initCapacity$(self._$class().$defaultCapacity());
				$1.$sortBlock_private$.call(self, self.$enclosingObjects$Collections$SortedList[0]._$SortedList().$defaultSortBlock());
				$1.$usesDefaultSortBlock_private$.call(self, true);
				return self;
			});
			this.$add$ = (function ($el) {
				var self = this;
				var $index = nil;
				$index = self._$indexFor$($el);
				if (!$index.$$greater(self._$contents().$size())) {
					$index = self._$makeSpace$beforeIndex$(1, $index);
				} else {
					self._$needSpaceAtEnd$(1);
					self._$lastIndex$(self._$lastIndex() + 1);
				};
				return self._$contents().$at$put$($index, $el);
			});
			this.$addAll$ = (function ($els) {
				var self = this;
				if ($els.$size().$$greater(self._$size().$$over$over(8))) {
					self._$needSpaceAtEnd$($els.$size());
					$els.$do$((function ($el) {
						self._$lastIndex$(self._$lastIndex() + 1);
						return self._$contents().$at$put$(self._$lastIndex(), $el);
					}));
					self._$sort();
				} else {
					$els.$do$((function ($el) {
						return self._$add$($el);
					}));
				};
				return $els;
			});
			this.$sortBlock = (function () {
				var self = this;
				return $1.$sortBlock_private.call(self);
			});
			this.$sortBlock$ = (function ($sortBy) {
				var self = this;
				$1.$sortBlock_private$.call(self, $sortBy);
				$1.$usesDefaultSortBlock_private$.call(self, false);
				if (!self._$isEmpty()) {
					self._$sort();
				} else {
					nil;
				};
				return self;
			});
			this.$usesDefaultSortBlock = (function () {
				var self = this;
				return $1.$usesDefaultSortBlock_private.call(self);
			});
			this.$asSortedList = (function () {
				var self = this;
				return self;
			});
			this.$initCapacity$ = (function ($cap) {
				var self = this;
				self.$super$Collections$SortedList$slot._$initCapacity$.call(self, $cap);
				return self;
			});
			this.$indexFor$ = (function ($el) {
				var self = this;
				return self._$contents().$binarySearchFor$between$and$toCompare$($el, self._$startGap() + 1, self._$lastIndex(), self._$sortBlock());
			});
			this.$sort = (function () {
				var self = this;
				if (self._$usesDefaultSortBlock()) {
					self._$contents().$defaultSort$to$(self._$startGap() + 1, self._$lastIndex());
				} else {
					self._$contents().$sort$to$using$(self._$startGap() + 1, self._$lastIndex(), self._$sortBlock());
				};
				return self;
			});
			this.$isSorted = (function () {
				var self = this;
				return self._$isSortedBy$(self._$sortBlock());
			});
			this.$usesDefaultSortBlock_private = (function () {
				return this.$usesDefaultSortBlock_private$slot;
			});
			this.$usesDefaultSortBlock_private$ = (function (v) {
				this.$usesDefaultSortBlock_private$slot = v;
				return this;
			});
			this.$sortBlock_private = (function () {
				return this.$sortBlock_private$slot;
			});
			this.$sortBlock_private$ = (function (v) {
				this.$sortBlock_private$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Collections`SortedList";
					this._$superInit$Collections$SortedList = $.$superInit$Collections$SortedList;
					this.$superInit$Collections$SortedList = dnuCatcher("$superInit$Collections$SortedList");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$add$ = this._$add$ = $.$add$;
					this.$addAll$ = this._$addAll$ = $.$addAll$;
					this.$sortBlock = this._$sortBlock = $.$sortBlock;
					this.$sortBlock$ = this._$sortBlock$ = $.$sortBlock$;
					this.$usesDefaultSortBlock = this._$usesDefaultSortBlock = $.$usesDefaultSortBlock;
					this.$asSortedList = this._$asSortedList = $.$asSortedList;
					this._$initCapacity$ = $.$initCapacity$;
					this.$initCapacity$ = dnuCatcher("$initCapacity$");
					this._$indexFor$ = $.$indexFor$;
					this.$indexFor$ = dnuCatcher("$indexFor$");
					this.$sort = this._$sort = $.$sort;
					this.$isSorted = this._$isSorted = $.$isSorted;
					this.$enclosingObjects$Collections$SortedList = enclosingObjects;
					this.$super$Collections$SortedList$slot = runtimeSuperclass;
					this["Collections`SortedList"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$usesDefaultSortBlock_private$slot = nil;
						this.$sortBlock_private$slot = nil;
					});
					this.basicNew = this["Collections`SortedList"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Collections`SortedList";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("defaultCapacity", false, "public defaultCapacity ^<Int> = (\r	^5\r)"),
					new MM("defaultSortBlock", false, "public defaultSortBlock ^<[:E:E| Boolean]> = (\r	^[ :el1 <E> :el2 <E> |\r		(* The default sort block for SortedLists is is not typesafe, but is included for\r		 Smalltalk compatibility (that's the way Smalltalk is!). *)\r		((* guaranteed <Magnitude[E]> *) el1) <= el2	].\r)"),
					new MM("new:", false, "public new: capacity <Integer> ^<Instance> = (\r	^new initCapacity: capacity\r)"),
					new MM("new:sortBlock:", false, "public new: capacity <Integer> sortBlock: sort <[:E :E | Boolean]> ^<Instance> = (\r	^(new: capacity) sortBlock: sort\r)"),
					new MM("sortBlock:", false, "public sortBlock: sort <[:E :E | Boolean]> ^<Instance> = (\r	^new: defaultCapacity sortBlock: sort\r)"),
					new MM("with:", false, "public with: val1 <E> ^<Instance> = (\r	^(new: 1) add: val1; yourself\r)"),
					new MM("withAll:", false, "public withAll: cltn <Collection[E]> ^<Instance> = (\r	^(new: cltn size) addAll: cltn; yourself\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$defaultCapacity = (function () {
					var self = this;
					return 5;
				});
				this.$defaultSortBlock = (function () {
					var self = this;
					return (function ($el1, $el2) {
						return $el1.$$less$equal($el2);
					});
				});
				this.$new$ = (function ($capacity) {
					var self = this;
					return self._$new().$initCapacity$($capacity);
				});
				this.$new$sortBlock$ = (function ($capacity, $sort) {
					var self = this;
					return self._$new$($capacity).$sortBlock$($sort);
				});
				this.$sortBlock$ = (function ($sort) {
					var self = this;
					return self._$new$sortBlock$(self._$defaultCapacity(), $sort);
				});
				this.$with$ = (function ($val1) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$add$($val1);
						return cascadeReceiver.$yourself();
					})(self._$new$(1));
				});
				this.$withAll$ = (function ($cltn) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$addAll$($cltn);
						return cascadeReceiver.$yourself();
					})(self._$new$($cltn.$size()));
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Collections`SortedList";
						this.$new = this._$new = $.$new;
						this.$defaultCapacity = this._$defaultCapacity = $.$defaultCapacity;
						this.$defaultSortBlock = this._$defaultSortBlock = $.$defaultSortBlock;
						this.$new$ = this._$new$ = $.$new$;
						this.$new$sortBlock$ = this._$new$sortBlock$ = $.$new$sortBlock$;
						this.$sortBlock$ = this._$sortBlock$ = $.$sortBlock$;
						this.$with$ = this._$with$ = $.$with$;
						this.$withAll$ = this._$withAll$ = $.$withAll$;
						this.$enclosingObjects$Collections$SortedList = enclosingObjects;
						this.$super$Collections$SortedList = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Collections$AddableList.enclosingMixin = this;
		this.$Collections$Association.enclosingMixin = this;
		this.$Collections$Bag.enclosingMixin = this;
		this.$Collections$Collection.enclosingMixin = this;
		this.$Collections$HashedCollection.enclosingMixin = this;
		this.$Collections$IdentityMutableHashedMap.enclosingMixin = this;
		this.$Collections$IdentitySet.enclosingMixin = this;
		this.$Collections$Interval.enclosingMixin = this;
		this.$Collections$List.enclosingMixin = this;
		this.$Collections$MutableArrayList.enclosingMixin = this;
		this.$Collections$MutableHashedMap.enclosingMixin = this;
		this.$Collections$MutableList.enclosingMixin = this;
		this.$Collections$Queue.enclosingMixin = this;
		this.$Collections$Set.enclosingMixin = this;
		this.$Collections$SortedList.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for Collections";
				this._$superInit$Collections = $.$superInit$Collections;
				this.$superInit$Collections = dnuCatcher("$superInit$Collections");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this._$error$ = $.$error$;
				this.$error$ = dnuCatcher("$error$");
				this._$AddableList = $.$AddableList;
				this.$AddableList = dnuCatcher("$AddableList");
				this.$Association = this._$Association = $.$Association;
				this.$Bag = this._$Bag = $.$Bag;
				this.$Collection = this._$Collection = $.$Collection;
				this._$HashedCollection = $.$HashedCollection;
				this.$HashedCollection = dnuCatcher("$HashedCollection");
				this._$IdentityMutableHashedMap = $.$IdentityMutableHashedMap;
				this.$IdentityMutableHashedMap = dnuCatcher("$IdentityMutableHashedMap");
				this.$IdentitySet = this._$IdentitySet = $.$IdentitySet;
				this.$Interval = this._$Interval = $.$Interval;
				this._$List = $.$List;
				this.$List = dnuCatcher("$List");
				this.$MutableArrayList = this._$MutableArrayList = $.$MutableArrayList;
				this._$MutableHashedMap = $.$MutableHashedMap;
				this.$MutableHashedMap = dnuCatcher("$MutableHashedMap");
				this._$MutableList = $.$MutableList;
				this.$MutableList = dnuCatcher("$MutableList");
				this.$Queue = this._$Queue = $.$Queue;
				this.$Set = this._$Set = $.$Set;
				this.$SortedList = this._$SortedList = $.$SortedList;
				this.$OrderedCollection = this._$OrderedCollection = $.$OrderedCollection;
				this.$setOnce$OrderedCollection$ = this._$setOnce$OrderedCollection$ = $.$setOnce$OrderedCollection$;
				this.$Dictionary = this._$Dictionary = $.$Dictionary;
				this.$setOnce$Dictionary$ = this._$setOnce$Dictionary$ = $.$setOnce$Dictionary$;
				this.$IdentityDictionary = this._$IdentityDictionary = $.$IdentityDictionary;
				this.$setOnce$IdentityDictionary$ = this._$setOnce$IdentityDictionary$ = $.$setOnce$IdentityDictionary$;
				this.$SortedCollection = this._$SortedCollection = $.$SortedCollection;
				this.$setOnce$SortedCollection$ = this._$setOnce$SortedCollection$ = $.$setOnce$SortedCollection$;
				this.$WeakArray = this._$WeakArray = $.$WeakArray;
				this.$setOnce$WeakArray$ = this._$setOnce$WeakArray$ = $.$setOnce$WeakArray$;
				this.$Collections$AddableList = this._$Collections$AddableList = $.$Collections$AddableList;
				this.$Collections$AddableList$ = this._$Collections$AddableList$ = $.$Collections$AddableList$;
				this.$Collections$Association = this._$Collections$Association = $.$Collections$Association;
				this.$Collections$Association$ = this._$Collections$Association$ = $.$Collections$Association$;
				this.$Collections$Bag = this._$Collections$Bag = $.$Collections$Bag;
				this.$Collections$Bag$ = this._$Collections$Bag$ = $.$Collections$Bag$;
				this.$Collections$Collection = this._$Collections$Collection = $.$Collections$Collection;
				this.$Collections$Collection$ = this._$Collections$Collection$ = $.$Collections$Collection$;
				this.$Collections$HashedCollection = this._$Collections$HashedCollection = $.$Collections$HashedCollection;
				this.$Collections$HashedCollection$ = this._$Collections$HashedCollection$ = $.$Collections$HashedCollection$;
				this.$Collections$IdentityMutableHashedMap = this._$Collections$IdentityMutableHashedMap = $.$Collections$IdentityMutableHashedMap;
				this.$Collections$IdentityMutableHashedMap$ = this._$Collections$IdentityMutableHashedMap$ = $.$Collections$IdentityMutableHashedMap$;
				this.$Collections$IdentitySet = this._$Collections$IdentitySet = $.$Collections$IdentitySet;
				this.$Collections$IdentitySet$ = this._$Collections$IdentitySet$ = $.$Collections$IdentitySet$;
				this.$Collections$Interval = this._$Collections$Interval = $.$Collections$Interval;
				this.$Collections$Interval$ = this._$Collections$Interval$ = $.$Collections$Interval$;
				this.$Collections$List = this._$Collections$List = $.$Collections$List;
				this.$Collections$List$ = this._$Collections$List$ = $.$Collections$List$;
				this.$Collections$MutableArrayList = this._$Collections$MutableArrayList = $.$Collections$MutableArrayList;
				this.$Collections$MutableArrayList$ = this._$Collections$MutableArrayList$ = $.$Collections$MutableArrayList$;
				this.$Collections$MutableHashedMap = this._$Collections$MutableHashedMap = $.$Collections$MutableHashedMap;
				this.$Collections$MutableHashedMap$ = this._$Collections$MutableHashedMap$ = $.$Collections$MutableHashedMap$;
				this.$Collections$MutableList = this._$Collections$MutableList = $.$Collections$MutableList;
				this.$Collections$MutableList$ = this._$Collections$MutableList$ = $.$Collections$MutableList$;
				this.$Collections$Queue = this._$Collections$Queue = $.$Collections$Queue;
				this.$Collections$Queue$ = this._$Collections$Queue$ = $.$Collections$Queue$;
				this.$Collections$Set = this._$Collections$Set = $.$Collections$Set;
				this.$Collections$Set$ = this._$Collections$Set$ = $.$Collections$Set$;
				this.$Collections$SortedList = this._$Collections$SortedList = $.$Collections$SortedList;
				this.$Collections$SortedList$ = this._$Collections$SortedList$ = $.$Collections$SortedList$;
				this.$enclosingObjects$Collections = enclosingObjects;
				this.$super$Collections$slot = runtimeSuperclass;
				this.Collections = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$MutableAddableList$slot = nil;
					this.$OrderedCollection$slot = nil;
					this.$Dictionary$slot = nil;
					this.$IdentityDictionary$slot = nil;
					this.$SortedCollection$slot = nil;
					this.$ListReadStream$slot = nil;
					this.$ListReadWriteStream$slot = nil;
					this.$BasicInputStream$slot = nil;
					this.$BasicOutputStream$slot = nil;
					this.$IOSequence$slot = nil;
					this.$WeakArray$slot = nil;
					this.$Collections$AddableList$slot = nil;
					this.$Collections$Association$slot = nil;
					this.$Collections$Bag$slot = nil;
					this.$Collections$Collection$slot = nil;
					this.$Collections$HashedCollection$slot = nil;
					this.$Collections$IdentityMutableHashedMap$slot = nil;
					this.$Collections$IdentitySet$slot = nil;
					this.$Collections$Interval$slot = nil;
					this.$Collections$List$slot = nil;
					this.$Collections$MutableArrayList$slot = nil;
					this.$Collections$MutableHashedMap$slot = nil;
					this.$Collections$MutableList$slot = nil;
					this.$Collections$Queue$slot = nil;
					this.$Collections$Set$slot = nil;
					this.$Collections$SortedList$slot = nil;
				});
				this.basicNew = this.Collections;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for Collections";
			this.slots = [];
			this.methods = [new MM("usingPlatform:", true, null)];
			this.nestedClasses = [];
			this.$usingPlatform$ = (function ($p) {
				return (new this.nonMeta.basicNew()).$instance$initializer($p);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for Collections";
					this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
					this.$enclosingObjects$Collections = enclosingObjects;
					this.$super$Collections = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$GraphicsForHTML5 = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for GraphicsForHTML5";
		this.name = "GraphicsForHTML5";
		this.header = "GraphicsForHTML5 usingPlatform: p = (|\rdocument = p aliens global at: 'document'.\rbody = document at: 'body'.\r|)";
		this.slots = [
			new SM("document", false, false),
			new SM("body", false, false),
			new SM("GraphicsForHTML5`Canvas", true, true),
			new SM("GraphicsForHTML5`Color", true, true),
			new SM("GraphicsForHTML5`Context", true, true),
			new SM("GraphicsForHTML5`Point", true, true),
			new SM("GraphicsForHTML5`Rectangle", true, true)
		];
		this.methods = [
			new MM("superInit`GraphicsForHTML5", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("openTestCanvas:", false, "openTestCanvas: extent = (\r	| div canvas |\r	canvas:: Canvas width: extent x height: extent y.\r	div:: document createElement: 'div'.\r	(div at: 'style')\r		at: 'borderStyle' put: 'solid';\r		at: 'borderWidth' put: '20px';\r		at: 'borderRadius' put: '25px';\r		at: 'borderColor' put: 'black';\r		at: 'padding' put: '10px'.\r	div appendChild: canvas alien.\r	body appendChild: div.\r	^canvas\r)"),
			new MM("Canvas", true, null),
			new MM("Color", true, null),
			new MM("Context", true, null),
			new MM("Point", true, null),
			new MM("Rectangle", true, null),
			new MM("document", true, null),
			new MM("setOnce`document:", true, null),
			new MM("body", true, null),
			new MM("setOnce`body:", true, null),
			new MM("GraphicsForHTML5`Canvas", true, null),
			new MM("GraphicsForHTML5`Canvas:", true, null),
			new MM("GraphicsForHTML5`Color", true, null),
			new MM("GraphicsForHTML5`Color:", true, null),
			new MM("GraphicsForHTML5`Context", true, null),
			new MM("GraphicsForHTML5`Context:", true, null),
			new MM("GraphicsForHTML5`Point", true, null),
			new MM("GraphicsForHTML5`Point:", true, null),
			new MM("GraphicsForHTML5`Rectangle", true, null),
			new MM("GraphicsForHTML5`Rectangle:", true, null)
		];
		this.nestedClasses = [
			"GraphicsForHTML5`Canvas",
			"GraphicsForHTML5`Color",
			"GraphicsForHTML5`Context",
			"GraphicsForHTML5`Point",
			"GraphicsForHTML5`Rectangle"
		];
		this.applications = [];
		this.$superInit$GraphicsForHTML5 = (function ($p) {
			var self = this;
			self.$super$GraphicsForHTML5$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($p) {
			var self = this;
			self._$superInit$GraphicsForHTML5($p);
			self._$setOnce$document$($p.$aliens().$global().$at$("document"));
			self._$setOnce$body$(self._$document().$at$("body"));
			return self;
		});
		this.$openTestCanvas$ = (function ($extent) {
			var self = this;
			var $div = nil;
			var $canvas = nil;
			$canvas = self._$Canvas().$width$height$($extent.$x(), $extent.$y());
			$div = self._$document().$createElement$("div");
			(function (cascadeReceiver) {
				cascadeReceiver.$at$put$("borderStyle", "solid");
				cascadeReceiver.$at$put$("borderWidth", "20px");
				cascadeReceiver.$at$put$("borderRadius", "25px");
				cascadeReceiver.$at$put$("borderColor", "black");
				return cascadeReceiver.$at$put$("padding", "10px");
			})($div.$at$("style"));
			$div.$appendChild$($canvas.$alien());
			self._$body().$appendChild$($div);
			return $canvas;
		});
		this.$Canvas = (function () {
			if (nil === this.$GraphicsForHTML5$Canvas$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$GraphicsForHTML5);
				var mixin = $.$GraphicsForHTML5$Canvas;
				this.$GraphicsForHTML5$Canvas$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$GraphicsForHTML5$Canvas$slot;
		});
		this.$Color = (function () {
			if (nil === this.$GraphicsForHTML5$Color$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$GraphicsForHTML5);
				var mixin = $.$GraphicsForHTML5$Color;
				this.$GraphicsForHTML5$Color$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$GraphicsForHTML5$Color$slot;
		});
		this.$Context = (function () {
			if (nil === this.$GraphicsForHTML5$Context$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$GraphicsForHTML5);
				var mixin = $.$GraphicsForHTML5$Context;
				this.$GraphicsForHTML5$Context$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$GraphicsForHTML5$Context$slot;
		});
		this.$Point = (function () {
			if (nil === this.$GraphicsForHTML5$Point$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$GraphicsForHTML5);
				var mixin = $.$GraphicsForHTML5$Point;
				this.$GraphicsForHTML5$Point$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$GraphicsForHTML5$Point$slot;
		});
		this.$Rectangle = (function () {
			if (nil === this.$GraphicsForHTML5$Rectangle$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$GraphicsForHTML5);
				var mixin = $.$GraphicsForHTML5$Rectangle;
				this.$GraphicsForHTML5$Rectangle$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$GraphicsForHTML5$Rectangle$slot;
		});
		this.$document = (function () {
			return this.$document$slot;
		});
		this.$setOnce$document$ = (function (v) {
			this.$document$slot = v;
			return this;
		});
		this.$body = (function () {
			return this.$body$slot;
		});
		this.$setOnce$body$ = (function (v) {
			this.$body$slot = v;
			return this;
		});
		this.$GraphicsForHTML5$Canvas = (function () {
			return this.$GraphicsForHTML5$Canvas$slot;
		});
		this.$GraphicsForHTML5$Canvas$ = (function (v) {
			this.$GraphicsForHTML5$Canvas$slot = v;
			return this;
		});
		this.$GraphicsForHTML5$Color = (function () {
			return this.$GraphicsForHTML5$Color$slot;
		});
		this.$GraphicsForHTML5$Color$ = (function (v) {
			this.$GraphicsForHTML5$Color$slot = v;
			return this;
		});
		this.$GraphicsForHTML5$Context = (function () {
			return this.$GraphicsForHTML5$Context$slot;
		});
		this.$GraphicsForHTML5$Context$ = (function (v) {
			this.$GraphicsForHTML5$Context$slot = v;
			return this;
		});
		this.$GraphicsForHTML5$Point = (function () {
			return this.$GraphicsForHTML5$Point$slot;
		});
		this.$GraphicsForHTML5$Point$ = (function (v) {
			this.$GraphicsForHTML5$Point$slot = v;
			return this;
		});
		this.$GraphicsForHTML5$Rectangle = (function () {
			return this.$GraphicsForHTML5$Rectangle$slot;
		});
		this.$GraphicsForHTML5$Rectangle$ = (function (v) {
			this.$GraphicsForHTML5$Rectangle$slot = v;
			return this;
		});
		this.$GraphicsForHTML5$Canvas = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for GraphicsForHTML5`Canvas";
			this.name = "GraphicsForHTML5`Canvas";
			this.header = "Canvas width: w height: h = (|\rprivate alien ::= document createElement: 'canvas'.\r|alien at: 'width' put: w.\ralien at: 'height' put: h.\r(alien at: 'style') at: 'position' put: 'relative')";
			this.slots = [new SM("alien", true, false)];
			this.methods = [
				new MM("superInit`GraphicsForHTML5`Canvas", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("appendToBody", false, "appendToBody = (\r	body appendChild: alien.\r)"),
				new MM("context", false, "context = (\r	^Context on: (alien getContext: '2d')\r)"),
				new MM("keyDownAction:", false, "keyDownAction: onKeyPressed <[:String]> = (\r	(* The canvas element itself doesn't seem to get key events. *)\r	body\r		addEventListener: 'keydown'\r		with: [:e | onKeyPressed value: (String fromCharCode: (e at: 'keyCode'))]\r)"),
				new MM("mouseDownAction:", false, "mouseDownAction: onMouseDown <[:Point]> = (\r	alien\r		addEventListener: 'mousedown'\r		with: [:e | onMouseDown value: (Point x: (e at: 'offsetX') y: (e at: 'offsetY'))].\r)"),
				new MM("mouseMovedAction:", false, "mouseMovedAction: onMouseMoved <[:Point]> = (\r	alien\r		addEventListener: 'mousemove'\r		with: [:e | onMouseMoved value: (Point x: (e at: 'offsetX') y: (e at: 'offsetY'))].\r)"),
				new MM("alien", true, null),
				new MM("alien:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$GraphicsForHTML5$Canvas = (function ($w, $h) {
				var self = this;
				self.$super$GraphicsForHTML5$Canvas$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($w, $h) {
				var self = this;
				self._$superInit$GraphicsForHTML5$Canvas($w, $h);
				$1.$alien$.call(self, self.$enclosingObjects$GraphicsForHTML5$Canvas[0]._$document().$createElement$("canvas"));
				$1.$alien.call(self).$at$put$("width", $w);
				$1.$alien.call(self).$at$put$("height", $h);
				$1.$alien.call(self).$at$("style").$at$put$("position", "relative");
				return self;
			});
			this.$appendToBody = (function () {
				var self = this;
				self.$enclosingObjects$GraphicsForHTML5$Canvas[0]._$body().$appendChild$($1.$alien.call(self));
				return self;
			});
			this.$context = (function () {
				var self = this;
				return self.$enclosingObjects$GraphicsForHTML5$Canvas[0]._$Context().$on$($1.$alien.call(self).$getContext$("2d"));
			});
			this.$keyDownAction$ = (function ($onKeyPressed) {
				var self = this;
				self.$enclosingObjects$GraphicsForHTML5$Canvas[0]._$body().$addEventListener$with$("keydown", (function ($e) {
					return $onKeyPressed.$value$(self._$String().$fromCharCode$($e.$at$("keyCode")));
				}));
				return self;
			});
			this.$mouseDownAction$ = (function ($onMouseDown) {
				var self = this;
				$1.$alien.call(self).$addEventListener$with$("mousedown", (function ($e) {
					return $onMouseDown.$value$(self.$enclosingObjects$GraphicsForHTML5$Canvas[0]._$Point().$x$y$($e.$at$("offsetX"), $e.$at$("offsetY")));
				}));
				return self;
			});
			this.$mouseMovedAction$ = (function ($onMouseMoved) {
				var self = this;
				$1.$alien.call(self).$addEventListener$with$("mousemove", (function ($e) {
					return $onMouseMoved.$value$(self.$enclosingObjects$GraphicsForHTML5$Canvas[0]._$Point().$x$y$($e.$at$("offsetX"), $e.$at$("offsetY")));
				}));
				return self;
			});
			this.$alien = (function () {
				return this.$alien$slot;
			});
			this.$alien$ = (function (v) {
				this.$alien$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for GraphicsForHTML5`Canvas";
					this._$superInit$GraphicsForHTML5$Canvas = $.$superInit$GraphicsForHTML5$Canvas;
					this.$superInit$GraphicsForHTML5$Canvas = dnuCatcher("$superInit$GraphicsForHTML5$Canvas");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$appendToBody = $.$appendToBody;
					this.$appendToBody = dnuCatcher("$appendToBody");
					this._$context = $.$context;
					this.$context = dnuCatcher("$context");
					this._$keyDownAction$ = $.$keyDownAction$;
					this.$keyDownAction$ = dnuCatcher("$keyDownAction$");
					this._$mouseDownAction$ = $.$mouseDownAction$;
					this.$mouseDownAction$ = dnuCatcher("$mouseDownAction$");
					this._$mouseMovedAction$ = $.$mouseMovedAction$;
					this.$mouseMovedAction$ = dnuCatcher("$mouseMovedAction$");
					this.$enclosingObjects$GraphicsForHTML5$Canvas = enclosingObjects;
					this.$super$GraphicsForHTML5$Canvas$slot = runtimeSuperclass;
					this["GraphicsForHTML5`Canvas"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$alien$slot = nil;
					});
					this.basicNew = this["GraphicsForHTML5`Canvas"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for GraphicsForHTML5`Canvas";
				this.slots = [];
				this.methods = [new MM("width:height:", true, null)];
				this.nestedClasses = [];
				this.$width$height$ = (function ($w, $h) {
					return (new this.nonMeta.basicNew()).$instance$initializer($w, $h);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for GraphicsForHTML5`Canvas";
						this.$width$height$ = this._$width$height$ = $.$width$height$;
						this.$enclosingObjects$GraphicsForHTML5$Canvas = enclosingObjects;
						this.$super$GraphicsForHTML5$Canvas = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$GraphicsForHTML5$Color = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for GraphicsForHTML5`Color";
			this.name = "GraphicsForHTML5`Color";
			this.header = "Color scaledR: r g: g b: b a: a = (|\rpublic red <Integer> = r.\rpublic green <Integer> = g.\rpublic blue <Integer> = b.\rpublic alpha <Integer> = a.\r|)";
			this.slots = [
				new SM("red", false, false),
				new SM("green", false, false),
				new SM("blue", false, false),
				new SM("alpha", false, false)
			];
			this.methods = [
				new MM("superInit`GraphicsForHTML5`Color", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("applyToStyle:", false, "public applyToStyle: style = (\r	style setProperty: 'background-color' to: self asCSSString\r)"),
				new MM("asCSSString", false, "public asCSSString = (\r	^'rgba(', red printString, ',', green printString, ',', blue printString, ',', alpha printString, ')'\r)"),
				new MM("red", true, null),
				new MM("setOnce`red:", true, null),
				new MM("green", true, null),
				new MM("setOnce`green:", true, null),
				new MM("blue", true, null),
				new MM("setOnce`blue:", true, null),
				new MM("alpha", true, null),
				new MM("setOnce`alpha:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$GraphicsForHTML5$Color = (function ($r, $g, $b, $a) {
				var self = this;
				self.$super$GraphicsForHTML5$Color$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($r, $g, $b, $a) {
				var self = this;
				self._$superInit$GraphicsForHTML5$Color($r, $g, $b, $a);
				self._$setOnce$red$($r);
				self._$setOnce$green$($g);
				self._$setOnce$blue$($b);
				self._$setOnce$alpha$($a);
				return self;
			});
			this.$applyToStyle$ = (function ($style) {
				var self = this;
				$style.$setProperty$to$("background-color", self._$asCSSString());
				return self;
			});
			this.$asCSSString = (function () {
				var self = this;
				return ("rgba(").$$comma(self._$red().$printString()).$$comma(",").$$comma(self._$green().$printString()).$$comma(",").$$comma(self._$blue().$printString()).$$comma(",").$$comma(self._$alpha().$printString()).$$comma(")");
			});
			this.$red = (function () {
				return this.$red$slot;
			});
			this.$setOnce$red$ = (function (v) {
				this.$red$slot = v;
				return this;
			});
			this.$green = (function () {
				return this.$green$slot;
			});
			this.$setOnce$green$ = (function (v) {
				this.$green$slot = v;
				return this;
			});
			this.$blue = (function () {
				return this.$blue$slot;
			});
			this.$setOnce$blue$ = (function (v) {
				this.$blue$slot = v;
				return this;
			});
			this.$alpha = (function () {
				return this.$alpha$slot;
			});
			this.$setOnce$alpha$ = (function (v) {
				this.$alpha$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for GraphicsForHTML5`Color";
					this._$superInit$GraphicsForHTML5$Color = $.$superInit$GraphicsForHTML5$Color;
					this.$superInit$GraphicsForHTML5$Color = dnuCatcher("$superInit$GraphicsForHTML5$Color");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$applyToStyle$ = this._$applyToStyle$ = $.$applyToStyle$;
					this.$asCSSString = this._$asCSSString = $.$asCSSString;
					this.$red = this._$red = $.$red;
					this.$setOnce$red$ = this._$setOnce$red$ = $.$setOnce$red$;
					this.$green = this._$green = $.$green;
					this.$setOnce$green$ = this._$setOnce$green$ = $.$setOnce$green$;
					this.$blue = this._$blue = $.$blue;
					this.$setOnce$blue$ = this._$setOnce$blue$ = $.$setOnce$blue$;
					this.$alpha = this._$alpha = $.$alpha;
					this.$setOnce$alpha$ = this._$setOnce$alpha$ = $.$setOnce$alpha$;
					this.$enclosingObjects$GraphicsForHTML5$Color = enclosingObjects;
					this.$super$GraphicsForHTML5$Color$slot = runtimeSuperclass;
					this["GraphicsForHTML5`Color"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$red$slot = nil;
						this.$green$slot = nil;
						this.$blue$slot = nil;
						this.$alpha$slot = nil;
					});
					this.basicNew = this["GraphicsForHTML5`Color"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for GraphicsForHTML5`Color";
				this.slots = [];
				this.methods = [
					new MM("scaledR:g:b:a:", true, null),
					new MM("black", false, "public black = (\r	^self scaledR: 0 g: 0 b: 0 a: 255\r)"),
					new MM("gray:", false, "public gray: brightness = (\r	^self r: brightness g: brightness b: brightness\r)"),
					new MM("h:s:v:", false, "public h: hue s: saturation v: brightness = (\r	| s v hf i f p q t | \r	s:: (saturation asFloat max: 0.0) min: 1.0.\r	v:: (brightness asFloat max: 0.0) min: 1.0.\r\r	(* zero saturation yields gray with the given brightness *)\r	s = 0.0 ifTrue: [ ^ self r: v g: v b: v ].\r\r	hf:: hue asFloat.\r	(hf < 0.0 or: [hf >= 360.0])\r		ifTrue: [hf:: hf \\\\ 360].\r	hf:: hf / 60.0.\r	i:: hf asInteger.  (* integer part of hue *)\r	f:: hf - i. (* hf fractionPart. *)  (* fractional part of hue *)\r	p:: (1.0 - s) * v.\r	q:: (1.0 - (s * f)) * v.\r	t:: (1.0 - (s * (1.0 - f))) * v.\r\r	0 = i ifTrue: [ ^ self r: v g: t b: p ].\r	1 = i ifTrue: [ ^ self r: q g: v b: p ].\r	2 = i ifTrue: [ ^ self r: p g: v b: t ].\r	3 = i ifTrue: [ ^ self r: p g: q b: v ].\r	4 = i ifTrue: [ ^ self r: t g: p b: v ].\r	5 = i ifTrue: [ ^ self r: v g: p b: q ].\r\r	Error signal: 'implementation error'.\r)"),
					new MM("r:g:b:", false, "public r: r g: g b: b = (\r	^self scaledR: (r * 255) floor g: (g * 255) floor b: (b * 255) floor a: 255\r)"),
					new MM("r:g:b:a:", false, "public r: r g: g b: b a: a = (\r	^self scaledR: (r * 255) floor g: (g * 255) floor b: (b * 255) floor a: a\r)"),
					new MM("white", false, "public white = (\r	^self scaledR: 255 g: 255 b: 255 a: 255\r)")
				];
				this.nestedClasses = [];
				this.$scaledR$g$b$a$ = (function ($r, $g, $b, $a) {
					return (new this.nonMeta.basicNew()).$instance$initializer($r, $g, $b, $a);
				});
				this.$black = (function () {
					var self = this;
					return self._$scaledR$g$b$a$(0, 0, 0, 255);
				});
				this.$gray$ = (function ($brightness) {
					var self = this;
					return self._$r$g$b$($brightness, $brightness, $brightness);
				});
				this.$h$s$v$ = (function ($hue, $saturation, $brightness) {
					var self = this;
					var $s = nil;
					var $v = nil;
					var $hf = nil;
					var $i = nil;
					var $f = nil;
					var $p = nil;
					var $q = nil;
					var $t = nil;
					$s = $saturation.$asFloat().$max$(0).$min$(1);
					$v = $brightness.$asFloat().$max$(0).$min$(1);
					if ($s.$$equal(0)) {
						return self._$r$g$b$($v, $v, $v);
					} else {
						nil;
					};
					$hf = $hue.$asFloat();
					if (($hf < 0) || ($hf >= 360)) {
						$hf = $hf.$$back$back(360);
					} else {
						nil;
					};
					$hf = $hf / 60;
					$i = $hf.$asInteger();
					$f = $hf - $i;
					$p = (1 - $s) * $v;
					$q = (1 - ($s * $f)) * $v;
					$t = (1 - ($s * (1 - $f))) * $v;
					if ((0).$$equal($i)) {
						return self._$r$g$b$($v, $t, $p);
					} else {
						nil;
					};
					if ((1).$$equal($i)) {
						return self._$r$g$b$($q, $v, $p);
					} else {
						nil;
					};
					if ((2).$$equal($i)) {
						return self._$r$g$b$($p, $v, $t);
					} else {
						nil;
					};
					if ((3).$$equal($i)) {
						return self._$r$g$b$($p, $q, $v);
					} else {
						nil;
					};
					if ((4).$$equal($i)) {
						return self._$r$g$b$($t, $p, $v);
					} else {
						nil;
					};
					if ((5).$$equal($i)) {
						return self._$r$g$b$($v, $p, $q);
					} else {
						nil;
					};
					self._$Error().$signal$("implementation error");
					return self;
				});
				this.$r$g$b$ = (function ($r, $g, $b) {
					var self = this;
					return self._$scaledR$g$b$a$(($r * 255).$floor(), ($g * 255).$floor(), ($b * 255).$floor(), 255);
				});
				this.$r$g$b$a$ = (function ($r, $g, $b, $a) {
					var self = this;
					return self._$scaledR$g$b$a$(($r * 255).$floor(), ($g * 255).$floor(), ($b * 255).$floor(), $a);
				});
				this.$white = (function () {
					var self = this;
					return self._$scaledR$g$b$a$(255, 255, 255, 255);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for GraphicsForHTML5`Color";
						this.$scaledR$g$b$a$ = this._$scaledR$g$b$a$ = $.$scaledR$g$b$a$;
						this.$black = this._$black = $.$black;
						this.$gray$ = this._$gray$ = $.$gray$;
						this.$h$s$v$ = this._$h$s$v$ = $.$h$s$v$;
						this.$r$g$b$ = this._$r$g$b$ = $.$r$g$b$;
						this.$r$g$b$a$ = this._$r$g$b$a$ = $.$r$g$b$a$;
						this.$white = this._$white = $.$white;
						this.$enclosingObjects$GraphicsForHTML5$Color = enclosingObjects;
						this.$super$GraphicsForHTML5$Color = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$GraphicsForHTML5$Context = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for GraphicsForHTML5`Context";
			this.name = "GraphicsForHTML5`Context";
			this.header = "Context on: a = (|\ralien = a.\r|)";
			this.slots = [new SM("alien", false, false)];
			this.methods = [
				new MM("superInit`GraphicsForHTML5`Context", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("arcAt:radius:from:to:", false, "public arcAt: center radius: radius from: startAngle to: stopAngle = (\r	alien arc: center x with: center y with: radius with: startAngle with: stopAngle\r)"),
				new MM("beginPath", false, "public beginPath = (\r	alien beginPath.\r)"),
				new MM("fill", false, "public fill = (\r	alien fill.\r)"),
				new MM("fillStyle:", false, "public fillStyle: c <Color> = (\r	alien at: 'fillStyle' put: c asCSSString.\r)"),
				new MM("fillText:at:", false, "public fillText: string at: p  = (\r	alien fillText: string with: p x with: p y\r)"),
				new MM("lineTo:", false, "public lineTo: p = (\r	alien lineTo: p x with: p y\r)"),
				new MM("moveTo:", false, "public moveTo: p = (\r	alien moveTo: p x with: p y\r)"),
				new MM("rectangle:", false, "public rectangle: r = (\r	alien rect: r origin x with: r origin y with: r extent x with: r extent y\r)"),
				new MM("stroke", false, "public stroke = (\r	alien stroke.\r)"),
				new MM("strokeStyle:", false, "public strokeStyle: c <Color> = (\r	alien at: 'strokeStyle' put: c asCSSString\r)"),
				new MM("alien", true, null),
				new MM("setOnce`alien:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$GraphicsForHTML5$Context = (function ($a) {
				var self = this;
				self.$super$GraphicsForHTML5$Context$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($a) {
				var self = this;
				self._$superInit$GraphicsForHTML5$Context($a);
				self._$setOnce$alien$($a);
				return self;
			});
			this.$arcAt$radius$from$to$ = (function ($center, $radius, $startAngle, $stopAngle) {
				var self = this;
				self._$alien().$arc$with$with$with$with$($center.$x(), $center.$y(), $radius, $startAngle, $stopAngle);
				return self;
			});
			this.$beginPath = (function () {
				var self = this;
				self._$alien().$beginPath();
				return self;
			});
			this.$fill = (function () {
				var self = this;
				self._$alien().$fill();
				return self;
			});
			this.$fillStyle$ = (function ($c) {
				var self = this;
				self._$alien().$at$put$("fillStyle", $c.$asCSSString());
				return self;
			});
			this.$fillText$at$ = (function ($string, $p) {
				var self = this;
				self._$alien().$fillText$with$with$($string, $p.$x(), $p.$y());
				return self;
			});
			this.$lineTo$ = (function ($p) {
				var self = this;
				self._$alien().$lineTo$with$($p.$x(), $p.$y());
				return self;
			});
			this.$moveTo$ = (function ($p) {
				var self = this;
				self._$alien().$moveTo$with$($p.$x(), $p.$y());
				return self;
			});
			this.$rectangle$ = (function ($r) {
				var self = this;
				self._$alien().$rect$with$with$with$($r.$origin().$x(), $r.$origin().$y(), $r.$extent().$x(), $r.$extent().$y());
				return self;
			});
			this.$stroke = (function () {
				var self = this;
				self._$alien().$stroke();
				return self;
			});
			this.$strokeStyle$ = (function ($c) {
				var self = this;
				self._$alien().$at$put$("strokeStyle", $c.$asCSSString());
				return self;
			});
			this.$alien = (function () {
				return this.$alien$slot;
			});
			this.$setOnce$alien$ = (function (v) {
				this.$alien$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for GraphicsForHTML5`Context";
					this._$superInit$GraphicsForHTML5$Context = $.$superInit$GraphicsForHTML5$Context;
					this.$superInit$GraphicsForHTML5$Context = dnuCatcher("$superInit$GraphicsForHTML5$Context");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$arcAt$radius$from$to$ = this._$arcAt$radius$from$to$ = $.$arcAt$radius$from$to$;
					this.$beginPath = this._$beginPath = $.$beginPath;
					this.$fill = this._$fill = $.$fill;
					this.$fillStyle$ = this._$fillStyle$ = $.$fillStyle$;
					this.$fillText$at$ = this._$fillText$at$ = $.$fillText$at$;
					this.$lineTo$ = this._$lineTo$ = $.$lineTo$;
					this.$moveTo$ = this._$moveTo$ = $.$moveTo$;
					this.$rectangle$ = this._$rectangle$ = $.$rectangle$;
					this.$stroke = this._$stroke = $.$stroke;
					this.$strokeStyle$ = this._$strokeStyle$ = $.$strokeStyle$;
					this._$alien = $.$alien;
					this.$alien = dnuCatcher("$alien");
					this._$setOnce$alien$ = $.$setOnce$alien$;
					this.$setOnce$alien$ = dnuCatcher("$setOnce$alien$");
					this.$enclosingObjects$GraphicsForHTML5$Context = enclosingObjects;
					this.$super$GraphicsForHTML5$Context$slot = runtimeSuperclass;
					this["GraphicsForHTML5`Context"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$alien$slot = nil;
					});
					this.basicNew = this["GraphicsForHTML5`Context"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for GraphicsForHTML5`Context";
				this.slots = [];
				this.methods = [new MM("on:", true, null)];
				this.nestedClasses = [];
				this.$on$ = (function ($a) {
					return (new this.nonMeta.basicNew()).$instance$initializer($a);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for GraphicsForHTML5`Context";
						this.$on$ = this._$on$ = $.$on$;
						this.$enclosingObjects$GraphicsForHTML5$Context = enclosingObjects;
						this.$super$GraphicsForHTML5$Context = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$GraphicsForHTML5$Point = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for GraphicsForHTML5`Point";
			this.name = "GraphicsForHTML5`Point";
			this.header = "Point x: xCoord y: yCoord = (|\rpublic x <Number> = xCoord.\rpublic y <Number> = yCoord.\r|)";
			this.slots = [
				new SM("x", false, false),
				new SM("y", false, false)
			];
			this.methods = [
				new MM("superInit`GraphicsForHTML5`Point", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("=", false, "public = other <Object> ^<Boolean> = (\r	^other isPoint and: [x = other x and: [y = other y]]\r)"),
				new MM("corner:", false, "public corner: corner <Point> ^<Rectangle> = (\r	^Rectangle origin: self corner: corner\r)"),
				new MM("extent:", false, "public extent: extent <Point> ^<Rectangle> = (\r	^Rectangle origin: self extent: extent\r)"),
				new MM("hash", false, "public hash ^<Integer> = (\r	^x hash bitXor: y hash\r)"),
				new MM("isPoint", false, "public isPoint ^<Boolean> = (\r	^true\r)"),
				new MM("printString", false, "public printString ^<String> = (\r	^x printString, ' @ ', y printString\r)"),
				new MM("r", false, "public r ^<Number> = (\r	^((x*x) + (y*y)) sqrt\r)"),
				new MM("theta", false, "public theta ^<Number> = (\r	Error signal: 'Unimplemented'\r)"),
				new MM("x", true, null),
				new MM("setOnce`x:", true, null),
				new MM("y", true, null),
				new MM("setOnce`y:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$GraphicsForHTML5$Point = (function ($xCoord, $yCoord) {
				var self = this;
				self.$super$GraphicsForHTML5$Point$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($xCoord, $yCoord) {
				var self = this;
				self._$superInit$GraphicsForHTML5$Point($xCoord, $yCoord);
				self._$setOnce$x$($xCoord);
				self._$setOnce$y$($yCoord);
				return self;
			});
			this.$$equal = (function ($other) {
				var self = this;
				return $other.$isPoint() && (self._$x().$$equal($other.$x()) && self._$y().$$equal($other.$y()));
			});
			this.$corner$ = (function ($corner) {
				var self = this;
				return self.$enclosingObjects$GraphicsForHTML5$Point[0]._$Rectangle().$origin$corner$(self, $corner);
			});
			this.$extent$ = (function ($extent) {
				var self = this;
				return self.$enclosingObjects$GraphicsForHTML5$Point[0]._$Rectangle().$origin$extent$(self, $extent);
			});
			this.$hash = (function () {
				var self = this;
				return self._$x().$hash().$bitXor$(self._$y().$hash());
			});
			this.$isPoint = (function () {
				var self = this;
				return true;
			});
			this.$printString = (function () {
				var self = this;
				return self._$x().$printString().$$comma(" @ ").$$comma(self._$y().$printString());
			});
			this.$r = (function () {
				var self = this;
				return ((self._$x() * self._$x()) + (self._$y() * self._$y())).$sqrt();
			});
			this.$theta = (function () {
				var self = this;
				self._$Error().$signal$("Unimplemented");
				return self;
			});
			this.$x = (function () {
				return this.$x$slot;
			});
			this.$setOnce$x$ = (function (v) {
				this.$x$slot = v;
				return this;
			});
			this.$y = (function () {
				return this.$y$slot;
			});
			this.$setOnce$y$ = (function (v) {
				this.$y$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for GraphicsForHTML5`Point";
					this._$superInit$GraphicsForHTML5$Point = $.$superInit$GraphicsForHTML5$Point;
					this.$superInit$GraphicsForHTML5$Point = dnuCatcher("$superInit$GraphicsForHTML5$Point");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$$equal = this._$$equal = $.$$equal;
					this.$corner$ = this._$corner$ = $.$corner$;
					this.$extent$ = this._$extent$ = $.$extent$;
					this.$hash = this._$hash = $.$hash;
					this.$isPoint = this._$isPoint = $.$isPoint;
					this.$printString = this._$printString = $.$printString;
					this.$r = this._$r = $.$r;
					this.$theta = this._$theta = $.$theta;
					this.$x = this._$x = $.$x;
					this.$setOnce$x$ = this._$setOnce$x$ = $.$setOnce$x$;
					this.$y = this._$y = $.$y;
					this.$setOnce$y$ = this._$setOnce$y$ = $.$setOnce$y$;
					this.$enclosingObjects$GraphicsForHTML5$Point = enclosingObjects;
					this.$super$GraphicsForHTML5$Point$slot = runtimeSuperclass;
					this["GraphicsForHTML5`Point"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$x$slot = nil;
						this.$y$slot = nil;
					});
					this.basicNew = this["GraphicsForHTML5`Point"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for GraphicsForHTML5`Point";
				this.slots = [];
				this.methods = [
					new MM("x:y:", true, null),
					new MM("r:theta:", false, "public r: r <Number> theta: theta <Number> ^<Point> = (\r	^self x: r * theta cos y: r * theta sin\r)"),
					new MM("zero", false, "public zero ^<Point> = (\r	^self x: 0 y: 0\r)")
				];
				this.nestedClasses = [];
				this.$x$y$ = (function ($xCoord, $yCoord) {
					return (new this.nonMeta.basicNew()).$instance$initializer($xCoord, $yCoord);
				});
				this.$r$theta$ = (function ($r, $theta) {
					var self = this;
					return self._$x$y$($r * $theta.$cos(), $r * $theta.$sin());
				});
				this.$zero = (function () {
					var self = this;
					return self._$x$y$(0, 0);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for GraphicsForHTML5`Point";
						this.$x$y$ = this._$x$y$ = $.$x$y$;
						this.$r$theta$ = this._$r$theta$ = $.$r$theta$;
						this.$zero = this._$zero = $.$zero;
						this.$enclosingObjects$GraphicsForHTML5$Point = enclosingObjects;
						this.$super$GraphicsForHTML5$Point = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$GraphicsForHTML5$Rectangle = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for GraphicsForHTML5`Rectangle";
			this.name = "GraphicsForHTML5`Rectangle";
			this.header = "Rectangle origin: o corner: c = (|\rpublic origin <Point> = o.\rpublic corner <Point> = c.\r|)";
			this.slots = [
				new SM("origin", false, false),
				new SM("corner", false, false)
			];
			this.methods = [
				new MM("superInit`GraphicsForHTML5`Rectangle", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("=", false, "public = other ^<Boolean> = (\r	^other isRectangle and: [origin = other origin and: [corner = other corner]]\r)"),
				new MM("center", false, "public center = (\r	^Point x: origin x + ((corner x - origin x) / 2) y: origin y + ((corner y - origin y) / 2)\r)"),
				new MM("containsPoint:", false, "public containsPoint: p = (\r	^((origin x <= p x\r		and: [origin y <= p y])\r		and: [corner x >= p x])\r		and: [corner y >= p y]\r)"),
				new MM("extent", false, "public extent = (\r	^Point x: corner x - origin x y: corner y - origin y \r)"),
				new MM("hash", false, "public hash ^<Integer> = (\r	^origin hash bitXor: corner hash\r)"),
				new MM("insetBy:", false, "public insetBy: delta = (\r	^Rectangle\r		origin: (Point x: origin x + delta x y: origin y + delta y)\r		corner: (Point x: corner x - delta x y: corner y - delta y)\r)"),
				new MM("isRectangle", false, "public isRectangle ^<Boolean> = (\r	^true\r)"),
				new MM("printString", false, "public printString ^<String> = (\r	^'Rectangle origin: ', origin printString, ' corner: ', corner printString\r)"),
				new MM("origin", true, null),
				new MM("setOnce`origin:", true, null),
				new MM("corner", true, null),
				new MM("setOnce`corner:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$GraphicsForHTML5$Rectangle = (function ($o, $c) {
				var self = this;
				self.$super$GraphicsForHTML5$Rectangle$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($o, $c) {
				var self = this;
				self._$superInit$GraphicsForHTML5$Rectangle($o, $c);
				self._$setOnce$origin$($o);
				self._$setOnce$corner$($c);
				return self;
			});
			this.$$equal = (function ($other) {
				var self = this;
				return $other.$isRectangle() && (self._$origin().$$equal($other.$origin()) && self._$corner().$$equal($other.$corner()));
			});
			this.$center = (function () {
				var self = this;
				return self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Point().$x$y$(self._$origin().$x() + ((self._$corner().$x() - self._$origin().$x()) / 2), self._$origin().$y() + ((self._$corner().$y() - self._$origin().$y()) / 2));
			});
			this.$containsPoint$ = (function ($p) {
				var self = this;
				return ((self._$origin().$x().$$less$equal($p.$x()) && self._$origin().$y().$$less$equal($p.$y())) && self._$corner().$x().$$greater$equal($p.$x())) && self._$corner().$y().$$greater$equal($p.$y());
			});
			this.$extent = (function () {
				var self = this;
				return self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Point().$x$y$(self._$corner().$x() - self._$origin().$x(), self._$corner().$y() - self._$origin().$y());
			});
			this.$hash = (function () {
				var self = this;
				return self._$origin().$hash().$bitXor$(self._$corner().$hash());
			});
			this.$insetBy$ = (function ($delta) {
				var self = this;
				return self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Rectangle().$origin$corner$(self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Point().$x$y$(self._$origin().$x() + $delta.$x(), self._$origin().$y() + $delta.$y()), self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Point().$x$y$(self._$corner().$x() - $delta.$x(), self._$corner().$y() - $delta.$y()));
			});
			this.$isRectangle = (function () {
				var self = this;
				return true;
			});
			this.$printString = (function () {
				var self = this;
				return ("Rectangle origin: ").$$comma(self._$origin().$printString()).$$comma(" corner: ").$$comma(self._$corner().$printString());
			});
			this.$origin = (function () {
				return this.$origin$slot;
			});
			this.$setOnce$origin$ = (function (v) {
				this.$origin$slot = v;
				return this;
			});
			this.$corner = (function () {
				return this.$corner$slot;
			});
			this.$setOnce$corner$ = (function (v) {
				this.$corner$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for GraphicsForHTML5`Rectangle";
					this._$superInit$GraphicsForHTML5$Rectangle = $.$superInit$GraphicsForHTML5$Rectangle;
					this.$superInit$GraphicsForHTML5$Rectangle = dnuCatcher("$superInit$GraphicsForHTML5$Rectangle");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$$equal = this._$$equal = $.$$equal;
					this.$center = this._$center = $.$center;
					this.$containsPoint$ = this._$containsPoint$ = $.$containsPoint$;
					this.$extent = this._$extent = $.$extent;
					this.$hash = this._$hash = $.$hash;
					this.$insetBy$ = this._$insetBy$ = $.$insetBy$;
					this.$isRectangle = this._$isRectangle = $.$isRectangle;
					this.$printString = this._$printString = $.$printString;
					this.$origin = this._$origin = $.$origin;
					this.$setOnce$origin$ = this._$setOnce$origin$ = $.$setOnce$origin$;
					this.$corner = this._$corner = $.$corner;
					this.$setOnce$corner$ = this._$setOnce$corner$ = $.$setOnce$corner$;
					this.$enclosingObjects$GraphicsForHTML5$Rectangle = enclosingObjects;
					this.$super$GraphicsForHTML5$Rectangle$slot = runtimeSuperclass;
					this["GraphicsForHTML5`Rectangle"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$origin$slot = nil;
						this.$corner$slot = nil;
					});
					this.basicNew = this["GraphicsForHTML5`Rectangle"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for GraphicsForHTML5`Rectangle";
				this.slots = [];
				this.methods = [
					new MM("origin:corner:", true, null),
					new MM("origin:extent:", false, "public origin: o <Point> extent: e <Point> ^<Rectangle> = (\r	^self origin: o corner: (Point x: o x + e x y: o y + e y)\r)")
				];
				this.nestedClasses = [];
				this.$origin$corner$ = (function ($o, $c) {
					return (new this.nonMeta.basicNew()).$instance$initializer($o, $c);
				});
				this.$origin$extent$ = (function ($o, $e) {
					var self = this;
					return self._$origin$corner$($o, self.$enclosingObjects$GraphicsForHTML5$Rectangle[0]._$Point().$x$y$($o.$x() + $e.$x(), $o.$y() + $e.$y()));
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for GraphicsForHTML5`Rectangle";
						this.$origin$corner$ = this._$origin$corner$ = $.$origin$corner$;
						this.$origin$extent$ = this._$origin$extent$ = $.$origin$extent$;
						this.$enclosingObjects$GraphicsForHTML5$Rectangle = enclosingObjects;
						this.$super$GraphicsForHTML5$Rectangle = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$GraphicsForHTML5$Canvas.enclosingMixin = this;
		this.$GraphicsForHTML5$Color.enclosingMixin = this;
		this.$GraphicsForHTML5$Context.enclosingMixin = this;
		this.$GraphicsForHTML5$Point.enclosingMixin = this;
		this.$GraphicsForHTML5$Rectangle.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for GraphicsForHTML5";
				this._$superInit$GraphicsForHTML5 = $.$superInit$GraphicsForHTML5;
				this.$superInit$GraphicsForHTML5 = dnuCatcher("$superInit$GraphicsForHTML5");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this._$openTestCanvas$ = $.$openTestCanvas$;
				this.$openTestCanvas$ = dnuCatcher("$openTestCanvas$");
				this._$Canvas = $.$Canvas;
				this.$Canvas = dnuCatcher("$Canvas");
				this.$Color = this._$Color = $.$Color;
				this.$Context = this._$Context = $.$Context;
				this.$Point = this._$Point = $.$Point;
				this._$Rectangle = $.$Rectangle;
				this.$Rectangle = dnuCatcher("$Rectangle");
				this._$document = $.$document;
				this.$document = dnuCatcher("$document");
				this._$setOnce$document$ = $.$setOnce$document$;
				this.$setOnce$document$ = dnuCatcher("$setOnce$document$");
				this._$body = $.$body;
				this.$body = dnuCatcher("$body");
				this._$setOnce$body$ = $.$setOnce$body$;
				this.$setOnce$body$ = dnuCatcher("$setOnce$body$");
				this.$GraphicsForHTML5$Canvas = this._$GraphicsForHTML5$Canvas = $.$GraphicsForHTML5$Canvas;
				this.$GraphicsForHTML5$Canvas$ = this._$GraphicsForHTML5$Canvas$ = $.$GraphicsForHTML5$Canvas$;
				this.$GraphicsForHTML5$Color = this._$GraphicsForHTML5$Color = $.$GraphicsForHTML5$Color;
				this.$GraphicsForHTML5$Color$ = this._$GraphicsForHTML5$Color$ = $.$GraphicsForHTML5$Color$;
				this.$GraphicsForHTML5$Context = this._$GraphicsForHTML5$Context = $.$GraphicsForHTML5$Context;
				this.$GraphicsForHTML5$Context$ = this._$GraphicsForHTML5$Context$ = $.$GraphicsForHTML5$Context$;
				this.$GraphicsForHTML5$Point = this._$GraphicsForHTML5$Point = $.$GraphicsForHTML5$Point;
				this.$GraphicsForHTML5$Point$ = this._$GraphicsForHTML5$Point$ = $.$GraphicsForHTML5$Point$;
				this.$GraphicsForHTML5$Rectangle = this._$GraphicsForHTML5$Rectangle = $.$GraphicsForHTML5$Rectangle;
				this.$GraphicsForHTML5$Rectangle$ = this._$GraphicsForHTML5$Rectangle$ = $.$GraphicsForHTML5$Rectangle$;
				this.$enclosingObjects$GraphicsForHTML5 = enclosingObjects;
				this.$super$GraphicsForHTML5$slot = runtimeSuperclass;
				this.GraphicsForHTML5 = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$document$slot = nil;
					this.$body$slot = nil;
					this.$GraphicsForHTML5$Canvas$slot = nil;
					this.$GraphicsForHTML5$Color$slot = nil;
					this.$GraphicsForHTML5$Context$slot = nil;
					this.$GraphicsForHTML5$Point$slot = nil;
					this.$GraphicsForHTML5$Rectangle$slot = nil;
				});
				this.basicNew = this.GraphicsForHTML5;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for GraphicsForHTML5";
			this.slots = [];
			this.methods = [new MM("usingPlatform:", true, null)];
			this.nestedClasses = [];
			this.$usingPlatform$ = (function ($p) {
				return (new this.nonMeta.basicNew()).$instance$initializer($p);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for GraphicsForHTML5";
					this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
					this.$enclosingObjects$GraphicsForHTML5 = enclosingObjects;
					this.$super$GraphicsForHTML5 = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$HopscotchForHTML5 = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for HopscotchForHTML5";
		this.name = "HopscotchForHTML5";
		this.header = "HopscotchForHTML5 usingPlatform: p = (|\r	private Color = p graphics Color.\r	private Context = p graphics Context.\r	private Timer = p time Timer.\r	private List = p collections OrderedCollection.\r	private Map = p collections Dictionary.\r\r	private window = p aliens global.\r	private document = window at: 'document'.\r	private body = document at: 'body'.\r	private history = window at: 'history'.\r	\r	private accept16px = p namespace accept16px.\r	private cancel16px = p namespace cancel16px.\r	private disclosureClosedImage = p namespace disclosureClosedImage.\r	private disclosureTransitionImage = p namespace disclosureTransitionImage.\r	private disclosureOpenImage = p namespace disclosureOpenImage.\r	\r	private deferredContentQueue = List new.\r	\r	public core = self.\r	public fragments = self.\r|)";
		this.slots = [
			new SM("Color", false, false),
			new SM("Context", false, false),
			new SM("Timer", false, false),
			new SM("List", false, false),
			new SM("Map", false, false),
			new SM("window", false, false),
			new SM("document", false, false),
			new SM("body", false, false),
			new SM("history", false, false),
			new SM("accept16px", false, false),
			new SM("cancel16px", false, false),
			new SM("disclosureClosedImage", false, false),
			new SM("disclosureTransitionImage", false, false),
			new SM("disclosureOpenImage", false, false),
			new SM("deferredContentQueue", false, false),
			new SM("core", false, false),
			new SM("fragments", false, false),
			new SM("HopscotchForHTML5`BlankFragment", true, true),
			new SM("HopscotchForHTML5`ButtonFragment", true, true),
			new SM("HopscotchForHTML5`CanvasFragment", true, true),
			new SM("HopscotchForHTML5`ColumnComposer", true, true),
			new SM("HopscotchForHTML5`Composer", true, true),
			new SM("HopscotchForHTML5`DeferredContentComposer", true, true),
			new SM("HopscotchForHTML5`Fragment", true, true),
			new SM("HopscotchForHTML5`Gradient", true, true),
			new SM("HopscotchForHTML5`HolderComposer", true, true),
			new SM("HopscotchForHTML5`HopscotchShell", true, true),
			new SM("HopscotchForHTML5`HopscotchWindow", true, true),
			new SM("HopscotchForHTML5`HyperlinkFragment", true, true),
			new SM("HopscotchForHTML5`LeafFragment", true, true),
			new SM("HopscotchForHTML5`NavigationHistory", true, true),
			new SM("HopscotchForHTML5`PaddedFrameComposer", true, true),
			new SM("HopscotchForHTML5`Presenter", true, true),
			new SM("HopscotchForHTML5`RowComposer", true, true),
			new SM("HopscotchForHTML5`SequenceComposer", true, true),
			new SM("HopscotchForHTML5`StaticImageFragment", true, true),
			new SM("HopscotchForHTML5`StaticLabelFragment", true, true),
			new SM("HopscotchForHTML5`Subject", true, true),
			new SM("HopscotchForHTML5`TextDisplayFragment", true, true),
			new SM("HopscotchForHTML5`TextEditorFragment", true, true),
			new SM("HopscotchForHTML5`ToggleComposer", true, true)
		];
		this.methods = [
			new MM("superInit`HopscotchForHTML5", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("deferAction:", false, "deferAction: action = (\r	deferredContentQueue add: action.\r	deferredContentQueue size = 1 ifTrue:\r		[nextFrameDo: [nextDeferredAction]].\r)"),
			new MM("nextDeferredAction", false, "nextDeferredAction = (\r	| action = deferredContentQueue removeFirst. |\r	deferredContentQueue size > 0 ifTrue:\r		[nextFrameDo: [nextDeferredAction]].\r	action value.\r)"),
			new MM("nextFrameDo:", false, "nextFrameDo: action = (\r	(* Our goal is to run the argument after images have been loaded and rendered. window.requestAnimationFrame runs the callback *before* the next frame. We register another callback in the callback so the first deferred action runs *after* the next frame. We register *that* callback in another RAF callback to let new images added from a deferred block load and render before the next deferred block runs. RAF is also a relative new feature, so simply schedule a timer if it is not available. *)\r	(window at: 'requestAnimationFrame') isUndefined\r		ifTrue: [Timer after: 200 do: action]\r		ifFalse: [window requestAnimationFrame: [\r					window requestAnimationFrame: [\r						window requestAnimationFrame: action]]].\r)"),
			new MM("BlankFragment", true, null),
			new MM("ButtonFragment", true, null),
			new MM("CanvasFragment", true, null),
			new MM("ColumnComposer", true, null),
			new MM("Composer", true, null),
			new MM("DeferredContentComposer", true, null),
			new MM("Fragment", true, null),
			new MM("Gradient", true, null),
			new MM("HolderComposer", true, null),
			new MM("HopscotchShell", true, null),
			new MM("HopscotchWindow", true, null),
			new MM("HyperlinkFragment", true, null),
			new MM("LeafFragment", true, null),
			new MM("NavigationHistory", true, null),
			new MM("PaddedFrameComposer", true, null),
			new MM("Presenter", true, null),
			new MM("RowComposer", true, null),
			new MM("SequenceComposer", true, null),
			new MM("StaticImageFragment", true, null),
			new MM("StaticLabelFragment", true, null),
			new MM("Subject", true, null),
			new MM("TextDisplayFragment", true, null),
			new MM("TextEditorFragment", true, null),
			new MM("ToggleComposer", true, null),
			new MM("Color", true, null),
			new MM("setOnce`Color:", true, null),
			new MM("Context", true, null),
			new MM("setOnce`Context:", true, null),
			new MM("Timer", true, null),
			new MM("setOnce`Timer:", true, null),
			new MM("List", true, null),
			new MM("setOnce`List:", true, null),
			new MM("Map", true, null),
			new MM("setOnce`Map:", true, null),
			new MM("window", true, null),
			new MM("setOnce`window:", true, null),
			new MM("document", true, null),
			new MM("setOnce`document:", true, null),
			new MM("body", true, null),
			new MM("setOnce`body:", true, null),
			new MM("history", true, null),
			new MM("setOnce`history:", true, null),
			new MM("accept16px", true, null),
			new MM("setOnce`accept16px:", true, null),
			new MM("cancel16px", true, null),
			new MM("setOnce`cancel16px:", true, null),
			new MM("disclosureClosedImage", true, null),
			new MM("setOnce`disclosureClosedImage:", true, null),
			new MM("disclosureTransitionImage", true, null),
			new MM("setOnce`disclosureTransitionImage:", true, null),
			new MM("disclosureOpenImage", true, null),
			new MM("setOnce`disclosureOpenImage:", true, null),
			new MM("deferredContentQueue", true, null),
			new MM("setOnce`deferredContentQueue:", true, null),
			new MM("core", true, null),
			new MM("setOnce`core:", true, null),
			new MM("fragments", true, null),
			new MM("setOnce`fragments:", true, null),
			new MM("HopscotchForHTML5`BlankFragment", true, null),
			new MM("HopscotchForHTML5`BlankFragment:", true, null),
			new MM("HopscotchForHTML5`ButtonFragment", true, null),
			new MM("HopscotchForHTML5`ButtonFragment:", true, null),
			new MM("HopscotchForHTML5`CanvasFragment", true, null),
			new MM("HopscotchForHTML5`CanvasFragment:", true, null),
			new MM("HopscotchForHTML5`ColumnComposer", true, null),
			new MM("HopscotchForHTML5`ColumnComposer:", true, null),
			new MM("HopscotchForHTML5`Composer", true, null),
			new MM("HopscotchForHTML5`Composer:", true, null),
			new MM("HopscotchForHTML5`DeferredContentComposer", true, null),
			new MM("HopscotchForHTML5`DeferredContentComposer:", true, null),
			new MM("HopscotchForHTML5`Fragment", true, null),
			new MM("HopscotchForHTML5`Fragment:", true, null),
			new MM("HopscotchForHTML5`Gradient", true, null),
			new MM("HopscotchForHTML5`Gradient:", true, null),
			new MM("HopscotchForHTML5`HolderComposer", true, null),
			new MM("HopscotchForHTML5`HolderComposer:", true, null),
			new MM("HopscotchForHTML5`HopscotchShell", true, null),
			new MM("HopscotchForHTML5`HopscotchShell:", true, null),
			new MM("HopscotchForHTML5`HopscotchWindow", true, null),
			new MM("HopscotchForHTML5`HopscotchWindow:", true, null),
			new MM("HopscotchForHTML5`HyperlinkFragment", true, null),
			new MM("HopscotchForHTML5`HyperlinkFragment:", true, null),
			new MM("HopscotchForHTML5`LeafFragment", true, null),
			new MM("HopscotchForHTML5`LeafFragment:", true, null),
			new MM("HopscotchForHTML5`NavigationHistory", true, null),
			new MM("HopscotchForHTML5`NavigationHistory:", true, null),
			new MM("HopscotchForHTML5`PaddedFrameComposer", true, null),
			new MM("HopscotchForHTML5`PaddedFrameComposer:", true, null),
			new MM("HopscotchForHTML5`Presenter", true, null),
			new MM("HopscotchForHTML5`Presenter:", true, null),
			new MM("HopscotchForHTML5`RowComposer", true, null),
			new MM("HopscotchForHTML5`RowComposer:", true, null),
			new MM("HopscotchForHTML5`SequenceComposer", true, null),
			new MM("HopscotchForHTML5`SequenceComposer:", true, null),
			new MM("HopscotchForHTML5`StaticImageFragment", true, null),
			new MM("HopscotchForHTML5`StaticImageFragment:", true, null),
			new MM("HopscotchForHTML5`StaticLabelFragment", true, null),
			new MM("HopscotchForHTML5`StaticLabelFragment:", true, null),
			new MM("HopscotchForHTML5`Subject", true, null),
			new MM("HopscotchForHTML5`Subject:", true, null),
			new MM("HopscotchForHTML5`TextDisplayFragment", true, null),
			new MM("HopscotchForHTML5`TextDisplayFragment:", true, null),
			new MM("HopscotchForHTML5`TextEditorFragment", true, null),
			new MM("HopscotchForHTML5`TextEditorFragment:", true, null),
			new MM("HopscotchForHTML5`ToggleComposer", true, null),
			new MM("HopscotchForHTML5`ToggleComposer:", true, null)
		];
		this.nestedClasses = [
			"HopscotchForHTML5`BlankFragment",
			"HopscotchForHTML5`ButtonFragment",
			"HopscotchForHTML5`CanvasFragment",
			"HopscotchForHTML5`ColumnComposer",
			"HopscotchForHTML5`Composer",
			"HopscotchForHTML5`DeferredContentComposer",
			"HopscotchForHTML5`Fragment",
			"HopscotchForHTML5`Gradient",
			"HopscotchForHTML5`HolderComposer",
			"HopscotchForHTML5`HopscotchShell",
			"HopscotchForHTML5`HopscotchWindow",
			"HopscotchForHTML5`HyperlinkFragment",
			"HopscotchForHTML5`LeafFragment",
			"HopscotchForHTML5`NavigationHistory",
			"HopscotchForHTML5`PaddedFrameComposer",
			"HopscotchForHTML5`Presenter",
			"HopscotchForHTML5`RowComposer",
			"HopscotchForHTML5`SequenceComposer",
			"HopscotchForHTML5`StaticImageFragment",
			"HopscotchForHTML5`StaticLabelFragment",
			"HopscotchForHTML5`Subject",
			"HopscotchForHTML5`TextDisplayFragment",
			"HopscotchForHTML5`TextEditorFragment",
			"HopscotchForHTML5`ToggleComposer"
		];
		this.applications = [];
		this.$superInit$HopscotchForHTML5 = (function ($p) {
			var self = this;
			self.$super$HopscotchForHTML5$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($p) {
			var self = this;
			self._$superInit$HopscotchForHTML5($p);
			$0.$setOnce$Color$.call(self, $p.$graphics().$Color());
			$0.$setOnce$Context$.call(self, $p.$graphics().$Context());
			$0.$setOnce$Timer$.call(self, $p.$time().$Timer());
			$0.$setOnce$List$.call(self, $p.$collections().$OrderedCollection());
			$0.$setOnce$Map$.call(self, $p.$collections().$Dictionary());
			$0.$setOnce$window$.call(self, $p.$aliens().$global());
			$0.$setOnce$document$.call(self, $0.$window.call(self).$at$("document"));
			$0.$setOnce$body$.call(self, $0.$document.call(self).$at$("body"));
			$0.$setOnce$history$.call(self, $0.$window.call(self).$at$("history"));
			$0.$setOnce$accept16px$.call(self, $p.$namespace().$accept16px());
			$0.$setOnce$cancel16px$.call(self, $p.$namespace().$cancel16px());
			$0.$setOnce$disclosureClosedImage$.call(self, $p.$namespace().$disclosureClosedImage());
			$0.$setOnce$disclosureTransitionImage$.call(self, $p.$namespace().$disclosureTransitionImage());
			$0.$setOnce$disclosureOpenImage$.call(self, $p.$namespace().$disclosureOpenImage());
			$0.$setOnce$deferredContentQueue$.call(self, $0.$List.call(self).$new());
			self._$setOnce$core$(self);
			self._$setOnce$fragments$(self);
			return self;
		});
		this.$deferAction$ = (function ($action) {
			var self = this;
			$0.$deferredContentQueue.call(self).$add$($action);
			if ($0.$deferredContentQueue.call(self).$size().$$equal(1)) {
				self._$nextFrameDo$((function () {
					return self._$nextDeferredAction();
				}));
			} else {
				nil;
			};
			return self;
		});
		this.$nextDeferredAction = (function () {
			var self = this;
			var $action = nil;
			$action = $0.$deferredContentQueue.call(self).$removeFirst();
			if ($0.$deferredContentQueue.call(self).$size() > 0) {
				self._$nextFrameDo$((function () {
					return self._$nextDeferredAction();
				}));
			} else {
				nil;
			};
			$action.$value();
			return self;
		});
		this.$nextFrameDo$ = (function ($action) {
			var self = this;
			if ($0.$window.call(self).$at$("requestAnimationFrame").$isUndefined()) {
				$0.$Timer.call(self).$after$do$(200, $action);
			} else {
				$0.$window.call(self).$requestAnimationFrame$((function () {
					return $0.$window.call(self).$requestAnimationFrame$((function () {
						return $0.$window.call(self).$requestAnimationFrame$($action);
					}));
				}));
			};
			return self;
		});
		this.$BlankFragment = (function () {
			if (nil === this.$HopscotchForHTML5$BlankFragment$slot) {
				var self = this;
				var superclass = self._$LeafFragment();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$BlankFragment;
				this.$HopscotchForHTML5$BlankFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$BlankFragment$slot;
		});
		this.$ButtonFragment = (function () {
			if (nil === this.$HopscotchForHTML5$ButtonFragment$slot) {
				var self = this;
				var superclass = self._$LeafFragment();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$ButtonFragment;
				this.$HopscotchForHTML5$ButtonFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$ButtonFragment$slot;
		});
		this.$CanvasFragment = (function () {
			if (nil === this.$HopscotchForHTML5$CanvasFragment$slot) {
				var self = this;
				var superclass = self._$LeafFragment();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$CanvasFragment;
				this.$HopscotchForHTML5$CanvasFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$CanvasFragment$slot;
		});
		this.$ColumnComposer = (function () {
			if (nil === this.$HopscotchForHTML5$ColumnComposer$slot) {
				var self = this;
				var superclass = self._$SequenceComposer();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$ColumnComposer;
				this.$HopscotchForHTML5$ColumnComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$ColumnComposer$slot;
		});
		this.$Composer = (function () {
			if (nil === this.$HopscotchForHTML5$Composer$slot) {
				var self = this;
				var superclass = self._$Fragment();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$Composer;
				this.$HopscotchForHTML5$Composer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$Composer$slot;
		});
		this.$DeferredContentComposer = (function () {
			if (nil === this.$HopscotchForHTML5$DeferredContentComposer$slot) {
				var self = this;
				var superclass = self._$Composer();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$DeferredContentComposer;
				this.$HopscotchForHTML5$DeferredContentComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$DeferredContentComposer$slot;
		});
		this.$Fragment = (function () {
			if (nil === this.$HopscotchForHTML5$Fragment$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$Fragment;
				this.$HopscotchForHTML5$Fragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$Fragment$slot;
		});
		this.$Gradient = (function () {
			if (nil === this.$HopscotchForHTML5$Gradient$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$Gradient;
				this.$HopscotchForHTML5$Gradient$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$Gradient$slot;
		});
		this.$HolderComposer = (function () {
			if (nil === this.$HopscotchForHTML5$HolderComposer$slot) {
				var self = this;
				var superclass = self._$Composer();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$HolderComposer;
				this.$HopscotchForHTML5$HolderComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$HolderComposer$slot;
		});
		this.$HopscotchShell = (function () {
			if (nil === this.$HopscotchForHTML5$HopscotchShell$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$HopscotchShell;
				this.$HopscotchForHTML5$HopscotchShell$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$HopscotchShell$slot;
		});
		this.$HopscotchWindow = (function () {
			if (nil === this.$HopscotchForHTML5$HopscotchWindow$slot) {
				var self = this;
				var superclass = self._$HopscotchShell();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$HopscotchWindow;
				this.$HopscotchForHTML5$HopscotchWindow$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$HopscotchWindow$slot;
		});
		this.$HyperlinkFragment = (function () {
			if (nil === this.$HopscotchForHTML5$HyperlinkFragment$slot) {
				var self = this;
				var superclass = self._$LeafFragment();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$HyperlinkFragment;
				this.$HopscotchForHTML5$HyperlinkFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$HyperlinkFragment$slot;
		});
		this.$LeafFragment = (function () {
			if (nil === this.$HopscotchForHTML5$LeafFragment$slot) {
				var self = this;
				var superclass = self._$Fragment();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$LeafFragment;
				this.$HopscotchForHTML5$LeafFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$LeafFragment$slot;
		});
		this.$NavigationHistory = (function () {
			if (nil === this.$HopscotchForHTML5$NavigationHistory$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$NavigationHistory;
				this.$HopscotchForHTML5$NavigationHistory$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$NavigationHistory$slot;
		});
		this.$PaddedFrameComposer = (function () {
			if (nil === this.$HopscotchForHTML5$PaddedFrameComposer$slot) {
				var self = this;
				var superclass = self._$Composer();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$PaddedFrameComposer;
				this.$HopscotchForHTML5$PaddedFrameComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$PaddedFrameComposer$slot;
		});
		this.$Presenter = (function () {
			if (nil === this.$HopscotchForHTML5$Presenter$slot) {
				var self = this;
				var superclass = self._$Fragment();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$Presenter;
				this.$HopscotchForHTML5$Presenter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$Presenter$slot;
		});
		this.$RowComposer = (function () {
			if (nil === this.$HopscotchForHTML5$RowComposer$slot) {
				var self = this;
				var superclass = self._$SequenceComposer();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$RowComposer;
				this.$HopscotchForHTML5$RowComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$RowComposer$slot;
		});
		this.$SequenceComposer = (function () {
			if (nil === this.$HopscotchForHTML5$SequenceComposer$slot) {
				var self = this;
				var superclass = self._$Composer();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$SequenceComposer;
				this.$HopscotchForHTML5$SequenceComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$SequenceComposer$slot;
		});
		this.$StaticImageFragment = (function () {
			if (nil === this.$HopscotchForHTML5$StaticImageFragment$slot) {
				var self = this;
				var superclass = self._$LeafFragment();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$StaticImageFragment;
				this.$HopscotchForHTML5$StaticImageFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$StaticImageFragment$slot;
		});
		this.$StaticLabelFragment = (function () {
			if (nil === this.$HopscotchForHTML5$StaticLabelFragment$slot) {
				var self = this;
				var superclass = self._$LeafFragment();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$StaticLabelFragment;
				this.$HopscotchForHTML5$StaticLabelFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$StaticLabelFragment$slot;
		});
		this.$Subject = (function () {
			if (nil === this.$HopscotchForHTML5$Subject$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$Subject;
				this.$HopscotchForHTML5$Subject$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$Subject$slot;
		});
		this.$TextDisplayFragment = (function () {
			if (nil === this.$HopscotchForHTML5$TextDisplayFragment$slot) {
				var self = this;
				var superclass = self._$LeafFragment();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$TextDisplayFragment;
				this.$HopscotchForHTML5$TextDisplayFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$TextDisplayFragment$slot;
		});
		this.$TextEditorFragment = (function () {
			if (nil === this.$HopscotchForHTML5$TextEditorFragment$slot) {
				var self = this;
				var superclass = self._$LeafFragment();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$TextEditorFragment;
				this.$HopscotchForHTML5$TextEditorFragment$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$TextEditorFragment$slot;
		});
		this.$ToggleComposer = (function () {
			if (nil === this.$HopscotchForHTML5$ToggleComposer$slot) {
				var self = this;
				var superclass = self._$Composer();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$HopscotchForHTML5);
				var mixin = $.$HopscotchForHTML5$ToggleComposer;
				this.$HopscotchForHTML5$ToggleComposer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$HopscotchForHTML5$ToggleComposer$slot;
		});
		this.$Color = (function () {
			return this.$Color$slot;
		});
		this.$setOnce$Color$ = (function (v) {
			this.$Color$slot = v;
			return this;
		});
		this.$Context = (function () {
			return this.$Context$slot;
		});
		this.$setOnce$Context$ = (function (v) {
			this.$Context$slot = v;
			return this;
		});
		this.$Timer = (function () {
			return this.$Timer$slot;
		});
		this.$setOnce$Timer$ = (function (v) {
			this.$Timer$slot = v;
			return this;
		});
		this.$List = (function () {
			return this.$List$slot;
		});
		this.$setOnce$List$ = (function (v) {
			this.$List$slot = v;
			return this;
		});
		this.$Map = (function () {
			return this.$Map$slot;
		});
		this.$setOnce$Map$ = (function (v) {
			this.$Map$slot = v;
			return this;
		});
		this.$window = (function () {
			return this.$window$slot;
		});
		this.$setOnce$window$ = (function (v) {
			this.$window$slot = v;
			return this;
		});
		this.$document = (function () {
			return this.$document$slot;
		});
		this.$setOnce$document$ = (function (v) {
			this.$document$slot = v;
			return this;
		});
		this.$body = (function () {
			return this.$body$slot;
		});
		this.$setOnce$body$ = (function (v) {
			this.$body$slot = v;
			return this;
		});
		this.$history = (function () {
			return this.$history$slot;
		});
		this.$setOnce$history$ = (function (v) {
			this.$history$slot = v;
			return this;
		});
		this.$accept16px = (function () {
			return this.$accept16px$slot;
		});
		this.$setOnce$accept16px$ = (function (v) {
			this.$accept16px$slot = v;
			return this;
		});
		this.$cancel16px = (function () {
			return this.$cancel16px$slot;
		});
		this.$setOnce$cancel16px$ = (function (v) {
			this.$cancel16px$slot = v;
			return this;
		});
		this.$disclosureClosedImage = (function () {
			return this.$disclosureClosedImage$slot;
		});
		this.$setOnce$disclosureClosedImage$ = (function (v) {
			this.$disclosureClosedImage$slot = v;
			return this;
		});
		this.$disclosureTransitionImage = (function () {
			return this.$disclosureTransitionImage$slot;
		});
		this.$setOnce$disclosureTransitionImage$ = (function (v) {
			this.$disclosureTransitionImage$slot = v;
			return this;
		});
		this.$disclosureOpenImage = (function () {
			return this.$disclosureOpenImage$slot;
		});
		this.$setOnce$disclosureOpenImage$ = (function (v) {
			this.$disclosureOpenImage$slot = v;
			return this;
		});
		this.$deferredContentQueue = (function () {
			return this.$deferredContentQueue$slot;
		});
		this.$setOnce$deferredContentQueue$ = (function (v) {
			this.$deferredContentQueue$slot = v;
			return this;
		});
		this.$core = (function () {
			return this.$core$slot;
		});
		this.$setOnce$core$ = (function (v) {
			this.$core$slot = v;
			return this;
		});
		this.$fragments = (function () {
			return this.$fragments$slot;
		});
		this.$setOnce$fragments$ = (function (v) {
			this.$fragments$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$BlankFragment = (function () {
			return this.$HopscotchForHTML5$BlankFragment$slot;
		});
		this.$HopscotchForHTML5$BlankFragment$ = (function (v) {
			this.$HopscotchForHTML5$BlankFragment$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$ButtonFragment = (function () {
			return this.$HopscotchForHTML5$ButtonFragment$slot;
		});
		this.$HopscotchForHTML5$ButtonFragment$ = (function (v) {
			this.$HopscotchForHTML5$ButtonFragment$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$CanvasFragment = (function () {
			return this.$HopscotchForHTML5$CanvasFragment$slot;
		});
		this.$HopscotchForHTML5$CanvasFragment$ = (function (v) {
			this.$HopscotchForHTML5$CanvasFragment$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$ColumnComposer = (function () {
			return this.$HopscotchForHTML5$ColumnComposer$slot;
		});
		this.$HopscotchForHTML5$ColumnComposer$ = (function (v) {
			this.$HopscotchForHTML5$ColumnComposer$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$Composer = (function () {
			return this.$HopscotchForHTML5$Composer$slot;
		});
		this.$HopscotchForHTML5$Composer$ = (function (v) {
			this.$HopscotchForHTML5$Composer$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$DeferredContentComposer = (function () {
			return this.$HopscotchForHTML5$DeferredContentComposer$slot;
		});
		this.$HopscotchForHTML5$DeferredContentComposer$ = (function (v) {
			this.$HopscotchForHTML5$DeferredContentComposer$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$Fragment = (function () {
			return this.$HopscotchForHTML5$Fragment$slot;
		});
		this.$HopscotchForHTML5$Fragment$ = (function (v) {
			this.$HopscotchForHTML5$Fragment$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$Gradient = (function () {
			return this.$HopscotchForHTML5$Gradient$slot;
		});
		this.$HopscotchForHTML5$Gradient$ = (function (v) {
			this.$HopscotchForHTML5$Gradient$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$HolderComposer = (function () {
			return this.$HopscotchForHTML5$HolderComposer$slot;
		});
		this.$HopscotchForHTML5$HolderComposer$ = (function (v) {
			this.$HopscotchForHTML5$HolderComposer$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$HopscotchShell = (function () {
			return this.$HopscotchForHTML5$HopscotchShell$slot;
		});
		this.$HopscotchForHTML5$HopscotchShell$ = (function (v) {
			this.$HopscotchForHTML5$HopscotchShell$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$HopscotchWindow = (function () {
			return this.$HopscotchForHTML5$HopscotchWindow$slot;
		});
		this.$HopscotchForHTML5$HopscotchWindow$ = (function (v) {
			this.$HopscotchForHTML5$HopscotchWindow$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$HyperlinkFragment = (function () {
			return this.$HopscotchForHTML5$HyperlinkFragment$slot;
		});
		this.$HopscotchForHTML5$HyperlinkFragment$ = (function (v) {
			this.$HopscotchForHTML5$HyperlinkFragment$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$LeafFragment = (function () {
			return this.$HopscotchForHTML5$LeafFragment$slot;
		});
		this.$HopscotchForHTML5$LeafFragment$ = (function (v) {
			this.$HopscotchForHTML5$LeafFragment$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$NavigationHistory = (function () {
			return this.$HopscotchForHTML5$NavigationHistory$slot;
		});
		this.$HopscotchForHTML5$NavigationHistory$ = (function (v) {
			this.$HopscotchForHTML5$NavigationHistory$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$PaddedFrameComposer = (function () {
			return this.$HopscotchForHTML5$PaddedFrameComposer$slot;
		});
		this.$HopscotchForHTML5$PaddedFrameComposer$ = (function (v) {
			this.$HopscotchForHTML5$PaddedFrameComposer$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$Presenter = (function () {
			return this.$HopscotchForHTML5$Presenter$slot;
		});
		this.$HopscotchForHTML5$Presenter$ = (function (v) {
			this.$HopscotchForHTML5$Presenter$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$RowComposer = (function () {
			return this.$HopscotchForHTML5$RowComposer$slot;
		});
		this.$HopscotchForHTML5$RowComposer$ = (function (v) {
			this.$HopscotchForHTML5$RowComposer$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$SequenceComposer = (function () {
			return this.$HopscotchForHTML5$SequenceComposer$slot;
		});
		this.$HopscotchForHTML5$SequenceComposer$ = (function (v) {
			this.$HopscotchForHTML5$SequenceComposer$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$StaticImageFragment = (function () {
			return this.$HopscotchForHTML5$StaticImageFragment$slot;
		});
		this.$HopscotchForHTML5$StaticImageFragment$ = (function (v) {
			this.$HopscotchForHTML5$StaticImageFragment$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$StaticLabelFragment = (function () {
			return this.$HopscotchForHTML5$StaticLabelFragment$slot;
		});
		this.$HopscotchForHTML5$StaticLabelFragment$ = (function (v) {
			this.$HopscotchForHTML5$StaticLabelFragment$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$Subject = (function () {
			return this.$HopscotchForHTML5$Subject$slot;
		});
		this.$HopscotchForHTML5$Subject$ = (function (v) {
			this.$HopscotchForHTML5$Subject$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$TextDisplayFragment = (function () {
			return this.$HopscotchForHTML5$TextDisplayFragment$slot;
		});
		this.$HopscotchForHTML5$TextDisplayFragment$ = (function (v) {
			this.$HopscotchForHTML5$TextDisplayFragment$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$TextEditorFragment = (function () {
			return this.$HopscotchForHTML5$TextEditorFragment$slot;
		});
		this.$HopscotchForHTML5$TextEditorFragment$ = (function (v) {
			this.$HopscotchForHTML5$TextEditorFragment$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$ToggleComposer = (function () {
			return this.$HopscotchForHTML5$ToggleComposer$slot;
		});
		this.$HopscotchForHTML5$ToggleComposer$ = (function (v) {
			this.$HopscotchForHTML5$ToggleComposer$slot = v;
			return this;
		});
		this.$HopscotchForHTML5$BlankFragment = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`BlankFragment";
			this.name = "HopscotchForHTML5`BlankFragment";
			this.header = "BlankFragment = LeafFragment (|\r|)";
			this.slots = [];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`BlankFragment", true, "LeafFragment"),
				new MM("instance`initializer", true, "LeafFragment"),
				new MM("createVisual", false, "createVisual = (\r	^document createElement: 'div'\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$BlankFragment = (function () {
				var self = this;
				self.$super$HopscotchForHTML5$BlankFragment$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$HopscotchForHTML5$BlankFragment();
				return self;
			});
			this.$createVisual = (function () {
				var self = this;
				return $0.$document.call(self.$enclosingObjects$HopscotchForHTML5$BlankFragment[0]).$createElement$("div");
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`BlankFragment";
					this._$superInit$HopscotchForHTML5$BlankFragment = $.$superInit$HopscotchForHTML5$BlankFragment;
					this.$superInit$HopscotchForHTML5$BlankFragment = dnuCatcher("$superInit$HopscotchForHTML5$BlankFragment");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$createVisual = $.$createVisual;
					this.$createVisual = dnuCatcher("$createVisual");
					this.$enclosingObjects$HopscotchForHTML5$BlankFragment = enclosingObjects;
					this.$super$HopscotchForHTML5$BlankFragment$slot = runtimeSuperclass;
					this["HopscotchForHTML5`BlankFragment"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["HopscotchForHTML5`BlankFragment"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`BlankFragment";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`BlankFragment";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$HopscotchForHTML5$BlankFragment = enclosingObjects;
						this.$super$HopscotchForHTML5$BlankFragment = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$ButtonFragment = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`ButtonFragment";
			this.name = "HopscotchForHTML5`ButtonFragment";
			this.header = "ButtonFragment label: l action: a = LeafFragment (|\r	label = l.\r	action = a.\r|)";
			this.slots = [
				new SM("label", false, false),
				new SM("action", false, false)
			];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`ButtonFragment", true, "LeafFragment"),
				new MM("instance`initializer", true, "LeafFragment"),
				new MM("createVisual", false, "createVisual = (\r	^(document createElement: 'button')\r		appendChild: (document createTextNode: label);\r		at: 'onclick' put: [action value. false];\r		yourself\r)"),
				new MM("label", true, null),
				new MM("setOnce`label:", true, null),
				new MM("action", true, null),
				new MM("setOnce`action:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$ButtonFragment = (function ($l, $a) {
				var self = this;
				self.$super$HopscotchForHTML5$ButtonFragment$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($l, $a) {
				var self = this;
				self._$superInit$HopscotchForHTML5$ButtonFragment($l, $a);
				self._$setOnce$label$($l);
				self._$setOnce$action$($a);
				return self;
			});
			this.$createVisual = (function () {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$appendChild$($0.$document.call(self.$enclosingObjects$HopscotchForHTML5$ButtonFragment[0]).$createTextNode$(self._$label()));
					cascadeReceiver.$at$put$("onclick", (function () {
						self._$action().$value();
						return false;
					}));
					return cascadeReceiver.$yourself();
				})($0.$document.call(self.$enclosingObjects$HopscotchForHTML5$ButtonFragment[0]).$createElement$("button"));
			});
			this.$label = (function () {
				return this.$label$slot;
			});
			this.$setOnce$label$ = (function (v) {
				this.$label$slot = v;
				return this;
			});
			this.$action = (function () {
				return this.$action$slot;
			});
			this.$setOnce$action$ = (function (v) {
				this.$action$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`ButtonFragment";
					this._$superInit$HopscotchForHTML5$ButtonFragment = $.$superInit$HopscotchForHTML5$ButtonFragment;
					this.$superInit$HopscotchForHTML5$ButtonFragment = dnuCatcher("$superInit$HopscotchForHTML5$ButtonFragment");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$createVisual = $.$createVisual;
					this.$createVisual = dnuCatcher("$createVisual");
					this._$label = $.$label;
					this.$label = dnuCatcher("$label");
					this._$setOnce$label$ = $.$setOnce$label$;
					this.$setOnce$label$ = dnuCatcher("$setOnce$label$");
					this._$action = $.$action;
					this.$action = dnuCatcher("$action");
					this._$setOnce$action$ = $.$setOnce$action$;
					this.$setOnce$action$ = dnuCatcher("$setOnce$action$");
					this.$enclosingObjects$HopscotchForHTML5$ButtonFragment = enclosingObjects;
					this.$super$HopscotchForHTML5$ButtonFragment$slot = runtimeSuperclass;
					this["HopscotchForHTML5`ButtonFragment"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$label$slot = nil;
						this.$action$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`ButtonFragment"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`ButtonFragment";
				this.slots = [];
				this.methods = [new MM("label:action:", true, null)];
				this.nestedClasses = [];
				this.$label$action$ = (function ($l, $a) {
					return (new this.nonMeta.basicNew()).$instance$initializer($l, $a);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`ButtonFragment";
						this.$label$action$ = this._$label$action$ = $.$label$action$;
						this.$enclosingObjects$HopscotchForHTML5$ButtonFragment = enclosingObjects;
						this.$super$HopscotchForHTML5$ButtonFragment = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$CanvasFragment = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`CanvasFragment";
			this.name = "HopscotchForHTML5`CanvasFragment";
			this.header = "CanvasFragment withExtent: e = LeafFragment (|\rprivate alien = document createElement: 'canvas'.\r|alien at: 'width' put: e x.\ralien at: 'height' put: e y.\r(alien at: 'style') at: 'position' put: 'relative')";
			this.slots = [new SM("alien", false, false)];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`CanvasFragment", true, "LeafFragment"),
				new MM("instance`initializer", true, "LeafFragment"),
				new MM("context", false, "public context = (\r	^Context on: (alien getContext: '2d')\r)"),
				new MM("createVisual", false, "createVisual = (\r	^alien\r)"),
				new MM("keyDownAction:", false, "public keyDownAction: onKeyPressed <[:String]> = (\r	(* The canvas element itself doesn't seem to get key events. *)\r	body\r		addEventListener: 'keydown'\r		with: [:e | onKeyPressed value: (String fromCharCode: (e at: 'keyCode'))]\r)"),
				new MM("mouseDownAction:", false, "public mouseDownAction: onMouseDown <[:Point]> = (\r	alien\r		addEventListener: 'mousedown'\r		with: [:e | onMouseDown value: (e at: 'offsetX') @ (e at: 'offsetY')].\r)"),
				new MM("mouseMovedAction:", false, "public mouseMovedAction: onMouseMoved <[:Point]> = (\r	alien\r		addEventListener: 'mousemove'\r		with: [:e | onMouseMoved value: (e at: 'offsetX') @ (e at: 'offsetY')].\r)"),
				new MM("alien", true, null),
				new MM("setOnce`alien:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$CanvasFragment = (function ($e) {
				var self = this;
				self.$super$HopscotchForHTML5$CanvasFragment$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($e) {
				var self = this;
				self._$superInit$HopscotchForHTML5$CanvasFragment($e);
				$1.$setOnce$alien$.call(self, $0.$document.call(self.$enclosingObjects$HopscotchForHTML5$CanvasFragment[0]).$createElement$("canvas"));
				$1.$alien.call(self).$at$put$("width", $e.$x());
				$1.$alien.call(self).$at$put$("height", $e.$y());
				$1.$alien.call(self).$at$("style").$at$put$("position", "relative");
				return self;
			});
			this.$context = (function () {
				var self = this;
				return $0.$Context.call(self.$enclosingObjects$HopscotchForHTML5$CanvasFragment[0]).$on$($1.$alien.call(self).$getContext$("2d"));
			});
			this.$createVisual = (function () {
				var self = this;
				return $1.$alien.call(self);
			});
			this.$keyDownAction$ = (function ($onKeyPressed) {
				var self = this;
				$0.$body.call(self.$enclosingObjects$HopscotchForHTML5$CanvasFragment[0]).$addEventListener$with$("keydown", (function ($e) {
					return $onKeyPressed.$value$(self._$String().$fromCharCode$($e.$at$("keyCode")));
				}));
				return self;
			});
			this.$mouseDownAction$ = (function ($onMouseDown) {
				var self = this;
				$1.$alien.call(self).$addEventListener$with$("mousedown", (function ($e) {
					return $onMouseDown.$value$($e.$at$("offsetX").$$at($e.$at$("offsetY")));
				}));
				return self;
			});
			this.$mouseMovedAction$ = (function ($onMouseMoved) {
				var self = this;
				$1.$alien.call(self).$addEventListener$with$("mousemove", (function ($e) {
					return $onMouseMoved.$value$($e.$at$("offsetX").$$at($e.$at$("offsetY")));
				}));
				return self;
			});
			this.$alien = (function () {
				return this.$alien$slot;
			});
			this.$setOnce$alien$ = (function (v) {
				this.$alien$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`CanvasFragment";
					this._$superInit$HopscotchForHTML5$CanvasFragment = $.$superInit$HopscotchForHTML5$CanvasFragment;
					this.$superInit$HopscotchForHTML5$CanvasFragment = dnuCatcher("$superInit$HopscotchForHTML5$CanvasFragment");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$context = this._$context = $.$context;
					this._$createVisual = $.$createVisual;
					this.$createVisual = dnuCatcher("$createVisual");
					this.$keyDownAction$ = this._$keyDownAction$ = $.$keyDownAction$;
					this.$mouseDownAction$ = this._$mouseDownAction$ = $.$mouseDownAction$;
					this.$mouseMovedAction$ = this._$mouseMovedAction$ = $.$mouseMovedAction$;
					this.$enclosingObjects$HopscotchForHTML5$CanvasFragment = enclosingObjects;
					this.$super$HopscotchForHTML5$CanvasFragment$slot = runtimeSuperclass;
					this["HopscotchForHTML5`CanvasFragment"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$alien$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`CanvasFragment"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`CanvasFragment";
				this.slots = [];
				this.methods = [new MM("withExtent:", true, null)];
				this.nestedClasses = [];
				this.$withExtent$ = (function ($e) {
					return (new this.nonMeta.basicNew()).$instance$initializer($e);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`CanvasFragment";
						this.$withExtent$ = this._$withExtent$ = $.$withExtent$;
						this.$enclosingObjects$HopscotchForHTML5$CanvasFragment = enclosingObjects;
						this.$super$HopscotchForHTML5$CanvasFragment = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$ColumnComposer = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`ColumnComposer";
			this.name = "HopscotchForHTML5`ColumnComposer";
			this.header = "ColumnComposer definitions: fragments = SequenceComposer definitions: fragments (|\r|)";
			this.slots = [];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`ColumnComposer", true, "definitions: fragments"),
				new MM("instance`initializer", true, "definitions: fragments"),
				new MM("flexDirection", false, "flexDirection = (\r	^'column'\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$ColumnComposer = (function ($fragments) {
				var self = this;
				self.$super$HopscotchForHTML5$ColumnComposer$slot._$instance$initializer.call(self, $fragments);
				return self;
			});
			this.$instance$initializer = (function ($fragments) {
				var self = this;
				self._$superInit$HopscotchForHTML5$ColumnComposer($fragments);
				return self;
			});
			this.$flexDirection = (function () {
				var self = this;
				return "column";
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`ColumnComposer";
					this._$superInit$HopscotchForHTML5$ColumnComposer = $.$superInit$HopscotchForHTML5$ColumnComposer;
					this.$superInit$HopscotchForHTML5$ColumnComposer = dnuCatcher("$superInit$HopscotchForHTML5$ColumnComposer");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$flexDirection = $.$flexDirection;
					this.$flexDirection = dnuCatcher("$flexDirection");
					this.$enclosingObjects$HopscotchForHTML5$ColumnComposer = enclosingObjects;
					this.$super$HopscotchForHTML5$ColumnComposer$slot = runtimeSuperclass;
					this["HopscotchForHTML5`ColumnComposer"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["HopscotchForHTML5`ColumnComposer"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`ColumnComposer";
				this.slots = [];
				this.methods = [new MM("definitions:", true, null)];
				this.nestedClasses = [];
				this.$definitions$ = (function ($fragments) {
					return (new this.nonMeta.basicNew()).$instance$initializer($fragments);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`ColumnComposer";
						this.$definitions$ = this._$definitions$ = $.$definitions$;
						this.$enclosingObjects$HopscotchForHTML5$ColumnComposer = enclosingObjects;
						this.$super$HopscotchForHTML5$ColumnComposer = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$Composer = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`Composer";
			this.name = "HopscotchForHTML5`Composer";
			this.header = "Composer = Fragment ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`Composer", true, "Fragment"),
				new MM("instance`initializer", true, "Fragment")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$Composer = (function () {
				var self = this;
				self.$super$HopscotchForHTML5$Composer$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$HopscotchForHTML5$Composer();
				return self;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`Composer";
					this._$superInit$HopscotchForHTML5$Composer = $.$superInit$HopscotchForHTML5$Composer;
					this.$superInit$HopscotchForHTML5$Composer = dnuCatcher("$superInit$HopscotchForHTML5$Composer");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$enclosingObjects$HopscotchForHTML5$Composer = enclosingObjects;
					this.$super$HopscotchForHTML5$Composer$slot = runtimeSuperclass;
					this["HopscotchForHTML5`Composer"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["HopscotchForHTML5`Composer"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`Composer";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`Composer";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$HopscotchForHTML5$Composer = enclosingObjects;
						this.$super$HopscotchForHTML5$Composer = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$DeferredContentComposer = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`DeferredContentComposer";
			this.name = "HopscotchForHTML5`DeferredContentComposer";
			this.header = "DeferredContentComposer initialContent: ic contentSource: cs = Composer (|\r	initialContent <Fragment> = ic.\r	contentSource <[Fragment]> = cs.\r|)";
			this.slots = [
				new SM("initialContent", false, false),
				new SM("contentSource", false, false)
			];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`DeferredContentComposer", true, "Composer"),
				new MM("instance`initializer", true, "Composer"),
				new MM("createVisual", false, "createVisual = (\r	| div initialVisual |\r	div:: document createElement: 'div'.\r	initialVisual:: initialContent visual.\r	div appendChild: initialVisual.\r	deferAction: [\r		| deferredFragment = contentSource value. |\r		deferredFragment parent: self.\r		(* replace: new with: old due to stupid DOM argument ordering *)\r		div replaceChild: deferredFragment visual with: initialVisual].\r	^div\r)"),
				new MM("initialContent", true, null),
				new MM("setOnce`initialContent:", true, null),
				new MM("contentSource", true, null),
				new MM("setOnce`contentSource:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$DeferredContentComposer = (function ($ic, $cs) {
				var self = this;
				self.$super$HopscotchForHTML5$DeferredContentComposer$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($ic, $cs) {
				var self = this;
				self._$superInit$HopscotchForHTML5$DeferredContentComposer($ic, $cs);
				self._$setOnce$initialContent$($ic);
				self._$setOnce$contentSource$($cs);
				return self;
			});
			this.$createVisual = (function () {
				var self = this;
				var $div = nil;
				var $initialVisual = nil;
				$div = $0.$document.call(self.$enclosingObjects$HopscotchForHTML5$DeferredContentComposer[0]).$createElement$("div");
				$initialVisual = self._$initialContent().$visual();
				$div.$appendChild$($initialVisual);
				self.$enclosingObjects$HopscotchForHTML5$DeferredContentComposer[0]._$deferAction$((function () {
					var $deferredFragment = nil;
					$deferredFragment = self._$contentSource().$value();
					$deferredFragment.$parent$(self);
					return $div.$replaceChild$with$($deferredFragment.$visual(), $initialVisual);
				}));
				return $div;
			});
			this.$initialContent = (function () {
				return this.$initialContent$slot;
			});
			this.$setOnce$initialContent$ = (function (v) {
				this.$initialContent$slot = v;
				return this;
			});
			this.$contentSource = (function () {
				return this.$contentSource$slot;
			});
			this.$setOnce$contentSource$ = (function (v) {
				this.$contentSource$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`DeferredContentComposer";
					this._$superInit$HopscotchForHTML5$DeferredContentComposer = $.$superInit$HopscotchForHTML5$DeferredContentComposer;
					this.$superInit$HopscotchForHTML5$DeferredContentComposer = dnuCatcher("$superInit$HopscotchForHTML5$DeferredContentComposer");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$createVisual = $.$createVisual;
					this.$createVisual = dnuCatcher("$createVisual");
					this._$initialContent = $.$initialContent;
					this.$initialContent = dnuCatcher("$initialContent");
					this._$setOnce$initialContent$ = $.$setOnce$initialContent$;
					this.$setOnce$initialContent$ = dnuCatcher("$setOnce$initialContent$");
					this._$contentSource = $.$contentSource;
					this.$contentSource = dnuCatcher("$contentSource");
					this._$setOnce$contentSource$ = $.$setOnce$contentSource$;
					this.$setOnce$contentSource$ = dnuCatcher("$setOnce$contentSource$");
					this.$enclosingObjects$HopscotchForHTML5$DeferredContentComposer = enclosingObjects;
					this.$super$HopscotchForHTML5$DeferredContentComposer$slot = runtimeSuperclass;
					this["HopscotchForHTML5`DeferredContentComposer"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$initialContent$slot = nil;
						this.$contentSource$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`DeferredContentComposer"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`DeferredContentComposer";
				this.slots = [];
				this.methods = [new MM("initialContent:contentSource:", true, null)];
				this.nestedClasses = [];
				this.$initialContent$contentSource$ = (function ($ic, $cs) {
					return (new this.nonMeta.basicNew()).$instance$initializer($ic, $cs);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`DeferredContentComposer";
						this.$initialContent$contentSource$ = this._$initialContent$contentSource$ = $.$initialContent$contentSource$;
						this.$enclosingObjects$HopscotchForHTML5$DeferredContentComposer = enclosingObjects;
						this.$super$HopscotchForHTML5$DeferredContentComposer = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$Fragment = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`Fragment";
			this.name = "HopscotchForHTML5`Fragment";
			this.header = "Fragment = (|\r	visualX\r	public parent\r	public size ::= nil.\r	public expansibility ::= 0. \r	public compressibility ::= 0. \r	|)";
			this.slots = [
				new SM("visualX", true, false),
				new SM("parent", true, false),
				new SM("size", true, false),
				new SM("expansibility", true, false),
				new SM("compressibility", true, false)
			];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`Fragment", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("createVisual", false, "createVisual = (\r	subclassResponsibility\r)"),
				new MM("elasticity:", false, "public elasticity: x = (\r	expansibility: x.\r	compressibility: x.\r)"),
				new MM("hasVisual", false, "public hasVisual = (\r	^visualX isNil not\r)"),
				new MM("shell", false, "shell = (\r	^parent isNil\r		ifTrue: [Error signal: 'hierarchy not installed in a shell']\r		ifFalse: [parent shell]\r)"),
				new MM("visual", false, "public visual = (\r	visualX isNil ifTrue: [visualX:: createVisual].\r	^visualX\r)"),
				new MM("width:elasticity:", false, "public width: w elasticity: e= (\r	size: w.\r	expansibility: e.\r	compressibility: e.\r)"),
				new MM("visualX", true, null),
				new MM("visualX:", true, null),
				new MM("parent", true, null),
				new MM("parent:", true, null),
				new MM("size", true, null),
				new MM("size:", true, null),
				new MM("expansibility", true, null),
				new MM("expansibility:", true, null),
				new MM("compressibility", true, null),
				new MM("compressibility:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$Fragment = (function () {
				var self = this;
				self.$super$HopscotchForHTML5$Fragment$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$HopscotchForHTML5$Fragment();
				self._$size$(nil);
				self._$expansibility$(0);
				self._$compressibility$(0);
				return self;
			});
			this.$createVisual = (function () {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$elasticity$ = (function ($x) {
				var self = this;
				self._$expansibility$($x);
				self._$compressibility$($x);
				return self;
			});
			this.$hasVisual = (function () {
				var self = this;
				return self._$visualX().$isNil().$not();
			});
			this.$shell = (function () {
				var self = this;
				return self._$parent().$isNil().$ifTrue$ifFalse$((function () {
					return self._$Error().$signal$("hierarchy not installed in a shell");
				}), (function () {
					return self._$parent().$shell();
				}));
			});
			this.$visual = (function () {
				var self = this;
				if (self._$visualX().$isNil()) {
					self._$visualX$(self._$createVisual());
				} else {
					nil;
				};
				return self._$visualX();
			});
			this.$width$elasticity$ = (function ($w, $e) {
				var self = this;
				self._$size$($w);
				self._$expansibility$($e);
				self._$compressibility$($e);
				return self;
			});
			this.$visualX = (function () {
				return this.$visualX$slot;
			});
			this.$visualX$ = (function (v) {
				this.$visualX$slot = v;
				return this;
			});
			this.$parent = (function () {
				return this.$parent$slot;
			});
			this.$parent$ = (function (v) {
				this.$parent$slot = v;
				return this;
			});
			this.$size = (function () {
				return this.$size$slot;
			});
			this.$size$ = (function (v) {
				this.$size$slot = v;
				return this;
			});
			this.$expansibility = (function () {
				return this.$expansibility$slot;
			});
			this.$expansibility$ = (function (v) {
				this.$expansibility$slot = v;
				return this;
			});
			this.$compressibility = (function () {
				return this.$compressibility$slot;
			});
			this.$compressibility$ = (function (v) {
				this.$compressibility$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`Fragment";
					this._$superInit$HopscotchForHTML5$Fragment = $.$superInit$HopscotchForHTML5$Fragment;
					this.$superInit$HopscotchForHTML5$Fragment = dnuCatcher("$superInit$HopscotchForHTML5$Fragment");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$createVisual = $.$createVisual;
					this.$createVisual = dnuCatcher("$createVisual");
					this.$elasticity$ = this._$elasticity$ = $.$elasticity$;
					this.$hasVisual = this._$hasVisual = $.$hasVisual;
					this._$shell = $.$shell;
					this.$shell = dnuCatcher("$shell");
					this.$visual = this._$visual = $.$visual;
					this.$width$elasticity$ = this._$width$elasticity$ = $.$width$elasticity$;
					this._$visualX = $.$visualX;
					this.$visualX = dnuCatcher("$visualX");
					this._$visualX$ = $.$visualX$;
					this.$visualX$ = dnuCatcher("$visualX$");
					this.$parent = this._$parent = $.$parent;
					this.$parent$ = this._$parent$ = $.$parent$;
					this.$size = this._$size = $.$size;
					this.$size$ = this._$size$ = $.$size$;
					this.$expansibility = this._$expansibility = $.$expansibility;
					this.$expansibility$ = this._$expansibility$ = $.$expansibility$;
					this.$compressibility = this._$compressibility = $.$compressibility;
					this.$compressibility$ = this._$compressibility$ = $.$compressibility$;
					this.$enclosingObjects$HopscotchForHTML5$Fragment = enclosingObjects;
					this.$super$HopscotchForHTML5$Fragment$slot = runtimeSuperclass;
					this["HopscotchForHTML5`Fragment"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$visualX$slot = nil;
						this.$parent$slot = nil;
						this.$size$slot = nil;
						this.$expansibility$slot = nil;
						this.$compressibility$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`Fragment"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`Fragment";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`Fragment";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$HopscotchForHTML5$Fragment = enclosingObjects;
						this.$super$HopscotchForHTML5$Fragment = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$Gradient = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`Gradient";
			this.name = "HopscotchForHTML5`Gradient";
			this.header = "Gradient from: a to: b = (|\r	topColor = a.\r	bottomColor = b.\r|)";
			this.slots = [
				new SM("topColor", false, false),
				new SM("bottomColor", false, false)
			];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`Gradient", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("applyToStyle:", false, "public applyToStyle: style = (\r	| value |\r	value:: '(top,', topColor asCSSString, ',', bottomColor asCSSString, ')'.\r	style setProperty: 'background-image' to: '-webkit-linear-gradient', value.\r	style setProperty: 'background-image' to: '-moz-linear-gradient', value.\r)"),
				new MM("topColor", true, null),
				new MM("setOnce`topColor:", true, null),
				new MM("bottomColor", true, null),
				new MM("setOnce`bottomColor:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$Gradient = (function ($a, $b) {
				var self = this;
				self.$super$HopscotchForHTML5$Gradient$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($a, $b) {
				var self = this;
				self._$superInit$HopscotchForHTML5$Gradient($a, $b);
				self._$setOnce$topColor$($a);
				self._$setOnce$bottomColor$($b);
				return self;
			});
			this.$applyToStyle$ = (function ($style) {
				var self = this;
				var $value = nil;
				$value = ("(top,").$$comma(self._$topColor().$asCSSString()).$$comma(",").$$comma(self._$bottomColor().$asCSSString()).$$comma(")");
				$style.$setProperty$to$("background-image", ("-webkit-linear-gradient").$$comma($value));
				$style.$setProperty$to$("background-image", ("-moz-linear-gradient").$$comma($value));
				return self;
			});
			this.$topColor = (function () {
				return this.$topColor$slot;
			});
			this.$setOnce$topColor$ = (function (v) {
				this.$topColor$slot = v;
				return this;
			});
			this.$bottomColor = (function () {
				return this.$bottomColor$slot;
			});
			this.$setOnce$bottomColor$ = (function (v) {
				this.$bottomColor$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`Gradient";
					this._$superInit$HopscotchForHTML5$Gradient = $.$superInit$HopscotchForHTML5$Gradient;
					this.$superInit$HopscotchForHTML5$Gradient = dnuCatcher("$superInit$HopscotchForHTML5$Gradient");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$applyToStyle$ = this._$applyToStyle$ = $.$applyToStyle$;
					this._$topColor = $.$topColor;
					this.$topColor = dnuCatcher("$topColor");
					this._$setOnce$topColor$ = $.$setOnce$topColor$;
					this.$setOnce$topColor$ = dnuCatcher("$setOnce$topColor$");
					this._$bottomColor = $.$bottomColor;
					this.$bottomColor = dnuCatcher("$bottomColor");
					this._$setOnce$bottomColor$ = $.$setOnce$bottomColor$;
					this.$setOnce$bottomColor$ = dnuCatcher("$setOnce$bottomColor$");
					this.$enclosingObjects$HopscotchForHTML5$Gradient = enclosingObjects;
					this.$super$HopscotchForHTML5$Gradient$slot = runtimeSuperclass;
					this["HopscotchForHTML5`Gradient"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$topColor$slot = nil;
						this.$bottomColor$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`Gradient"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`Gradient";
				this.slots = [];
				this.methods = [new MM("from:to:", true, null)];
				this.nestedClasses = [];
				this.$from$to$ = (function ($a, $b) {
					return (new this.nonMeta.basicNew()).$instance$initializer($a, $b);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`Gradient";
						this.$from$to$ = this._$from$to$ = $.$from$to$;
						this.$enclosingObjects$HopscotchForHTML5$Gradient = enclosingObjects;
						this.$super$HopscotchForHTML5$Gradient = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$HolderComposer = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`HolderComposer";
			this.name = "HopscotchForHTML5`HolderComposer";
			this.header = "HolderComposer withContent: definition = Composer (|\r	contentSource ::= definition.\r	actualContent\r|)";
			this.slots = [
				new SM("contentSource", true, false),
				new SM("actualContent", true, false)
			];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`HolderComposer", true, "Composer"),
				new MM("instance`initializer", true, "Composer"),
				new MM("content", false, "public content ^<Fragment> = (\r	actualContent isNil ifTrue: \r		[actualContent:: contentSource value.\r		actualContent parent: self].\r	^actualContent\r)"),
				new MM("content:", false, "public content: fragment = (\r	fragment parent: self.\r	hasVisual ifTrue:\r		[ | oldContent newContent |\r		oldContent:: actualContent.\r		newContent:: actualContent:: fragment.\r		(* replace: new with: old due to stupid DOM argument ordering *)\r		visual replaceChild: newContent visual with: oldContent visual]\r	ifFalse: [actualContent:: fragment]\r)"),
				new MM("createVisual", false, "createVisual = (\r	| div |\r	div:: document createElement: 'div'.\r	div appendChild: content visual.\r	^div\r)"),
				new MM("refresh", false, "public refresh = (\r	(contentSource isBlock and: [hasVisual])\r		ifTrue:\r			[ | oldContent newContent |\r			oldContent:: actualContent.\r			actualContent:: nil.\r			newContent:: content.\r			(* replace: new with: old due to stupid DOM argument ordering *)\r			visual replaceChild: newContent visual with: oldContent visual]\r		ifFalse:\r			[actualContent refresh].\r)"),
				new MM("contentSource", true, null),
				new MM("contentSource:", true, null),
				new MM("actualContent", true, null),
				new MM("actualContent:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$HolderComposer = (function ($definition) {
				var self = this;
				self.$super$HopscotchForHTML5$HolderComposer$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($definition) {
				var self = this;
				self._$superInit$HopscotchForHTML5$HolderComposer($definition);
				self._$contentSource$($definition);
				return self;
			});
			this.$content = (function () {
				var self = this;
				if (self._$actualContent().$isNil()) {
					self._$actualContent$(self._$contentSource().$value());
					self._$actualContent().$parent$(self);
				} else {
					nil;
				};
				return self._$actualContent();
			});
			this.$content$ = (function ($fragment) {
				var self = this;
				$fragment.$parent$(self);
				if (self._$hasVisual()) {
					var $oldContent = nil;
					var $newContent = nil;
					$oldContent = self._$actualContent();
					$newContent = ((function ($setter_arg) {
						self._$actualContent$($setter_arg);
						return $setter_arg;
					})).$value$($fragment);
					self._$visual().$replaceChild$with$($newContent.$visual(), $oldContent.$visual());
				} else {
					self._$actualContent$($fragment);
				};
				return self;
			});
			this.$createVisual = (function () {
				var self = this;
				var $div = nil;
				$div = $0.$document.call(self.$enclosingObjects$HopscotchForHTML5$HolderComposer[0]).$createElement$("div");
				$div.$appendChild$(self._$content().$visual());
				return $div;
			});
			this.$refresh = (function () {
				var self = this;
				if (self._$contentSource().$isBlock() && self._$hasVisual()) {
					var $oldContent = nil;
					var $newContent = nil;
					$oldContent = self._$actualContent();
					self._$actualContent$(nil);
					$newContent = self._$content();
					self._$visual().$replaceChild$with$($newContent.$visual(), $oldContent.$visual());
				} else {
					self._$actualContent().$refresh();
				};
				return self;
			});
			this.$contentSource = (function () {
				return this.$contentSource$slot;
			});
			this.$contentSource$ = (function (v) {
				this.$contentSource$slot = v;
				return this;
			});
			this.$actualContent = (function () {
				return this.$actualContent$slot;
			});
			this.$actualContent$ = (function (v) {
				this.$actualContent$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`HolderComposer";
					this._$superInit$HopscotchForHTML5$HolderComposer = $.$superInit$HopscotchForHTML5$HolderComposer;
					this.$superInit$HopscotchForHTML5$HolderComposer = dnuCatcher("$superInit$HopscotchForHTML5$HolderComposer");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$content = this._$content = $.$content;
					this.$content$ = this._$content$ = $.$content$;
					this._$createVisual = $.$createVisual;
					this.$createVisual = dnuCatcher("$createVisual");
					this.$refresh = this._$refresh = $.$refresh;
					this._$contentSource = $.$contentSource;
					this.$contentSource = dnuCatcher("$contentSource");
					this._$contentSource$ = $.$contentSource$;
					this.$contentSource$ = dnuCatcher("$contentSource$");
					this._$actualContent = $.$actualContent;
					this.$actualContent = dnuCatcher("$actualContent");
					this._$actualContent$ = $.$actualContent$;
					this.$actualContent$ = dnuCatcher("$actualContent$");
					this.$enclosingObjects$HopscotchForHTML5$HolderComposer = enclosingObjects;
					this.$super$HopscotchForHTML5$HolderComposer$slot = runtimeSuperclass;
					this["HopscotchForHTML5`HolderComposer"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$contentSource$slot = nil;
						this.$actualContent$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`HolderComposer"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`HolderComposer";
				this.slots = [];
				this.methods = [new MM("withContent:", true, null)];
				this.nestedClasses = [];
				this.$withContent$ = (function ($definition) {
					return (new this.nonMeta.basicNew()).$instance$initializer($definition);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`HolderComposer";
						this.$withContent$ = this._$withContent$ = $.$withContent$;
						this.$enclosingObjects$HopscotchForHTML5$HolderComposer = enclosingObjects;
						this.$super$HopscotchForHTML5$HolderComposer = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$HopscotchShell = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`HopscotchShell";
			this.name = "HopscotchForHTML5`HopscotchShell";
			this.header = "HopscotchShell = (|\r	navigator = NavigationHistory new.\r	currentPresenterX\r	contentHolder = document createElement: 'div'.\r|window at: 'onpopstate' put: [:e | userBack: e])";
			this.slots = [
				new SM("navigator", false, false),
				new SM("currentPresenterX", true, false),
				new SM("contentHolder", false, false)
			];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`HopscotchShell", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("displayPresenter:", false, "public displayPresenter: p = (\r	(* TODO: noticeX events *)\r	p parent: self.\r	contentHolder hasChildNodes\r		ifTrue: [contentHolder replaceChild: p visual from: (contentHolder at: 'firstChild')]\r		ifFalse: [contentHolder appendChild: p visual]\r)"),
				new MM("enterPresenter:", false, "public enterPresenter: p = (\r	(* TODO: History stuff *)\r	\r	history pushState: (navigator idFor: p) title: p title.\r	displayPresenter: p\r)"),
				new MM("enterSubject:", false, "public enterSubject: s = (\r	self enterPresenter: s presenter\r)"),
				new MM("shell", false, "public shell = (\r	^self\r)"),
				new MM("userBack:", false, "userBack: e = (\r	| p = navigator presenterFor: (e at: 'state'). |\r	displayPresenter: p\r)"),
				new MM("navigator", true, null),
				new MM("setOnce`navigator:", true, null),
				new MM("currentPresenterX", true, null),
				new MM("currentPresenterX:", true, null),
				new MM("contentHolder", true, null),
				new MM("setOnce`contentHolder:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$HopscotchShell = (function () {
				var self = this;
				self.$super$HopscotchForHTML5$HopscotchShell$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$HopscotchForHTML5$HopscotchShell();
				self._$setOnce$navigator$(self.$enclosingObjects$HopscotchForHTML5$HopscotchShell[0]._$NavigationHistory().$new());
				self._$setOnce$contentHolder$($0.$document.call(self.$enclosingObjects$HopscotchForHTML5$HopscotchShell[0]).$createElement$("div"));
				$0.$window.call(self.$enclosingObjects$HopscotchForHTML5$HopscotchShell[0]).$at$put$("onpopstate", (function ($e) {
					return self._$userBack$($e);
				}));
				return self;
			});
			this.$displayPresenter$ = (function ($p) {
				var self = this;
				$p.$parent$(self);
				if (self._$contentHolder().$hasChildNodes()) {
					self._$contentHolder().$replaceChild$from$($p.$visual(), self._$contentHolder().$at$("firstChild"));
				} else {
					self._$contentHolder().$appendChild$($p.$visual());
				};
				return self;
			});
			this.$enterPresenter$ = (function ($p) {
				var self = this;
				$0.$history.call(self.$enclosingObjects$HopscotchForHTML5$HopscotchShell[0]).$pushState$title$(self._$navigator().$idFor$($p), $p.$title());
				self._$displayPresenter$($p);
				return self;
			});
			this.$enterSubject$ = (function ($s) {
				var self = this;
				self._$enterPresenter$($s.$presenter());
				return self;
			});
			this.$shell = (function () {
				var self = this;
				return self;
			});
			this.$userBack$ = (function ($e) {
				var self = this;
				var $p = nil;
				$p = self._$navigator().$presenterFor$($e.$at$("state"));
				self._$displayPresenter$($p);
				return self;
			});
			this.$navigator = (function () {
				return this.$navigator$slot;
			});
			this.$setOnce$navigator$ = (function (v) {
				this.$navigator$slot = v;
				return this;
			});
			this.$currentPresenterX = (function () {
				return this.$currentPresenterX$slot;
			});
			this.$currentPresenterX$ = (function (v) {
				this.$currentPresenterX$slot = v;
				return this;
			});
			this.$contentHolder = (function () {
				return this.$contentHolder$slot;
			});
			this.$setOnce$contentHolder$ = (function (v) {
				this.$contentHolder$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`HopscotchShell";
					this._$superInit$HopscotchForHTML5$HopscotchShell = $.$superInit$HopscotchForHTML5$HopscotchShell;
					this.$superInit$HopscotchForHTML5$HopscotchShell = dnuCatcher("$superInit$HopscotchForHTML5$HopscotchShell");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$displayPresenter$ = this._$displayPresenter$ = $.$displayPresenter$;
					this.$enterPresenter$ = this._$enterPresenter$ = $.$enterPresenter$;
					this.$enterSubject$ = this._$enterSubject$ = $.$enterSubject$;
					this.$shell = this._$shell = $.$shell;
					this._$userBack$ = $.$userBack$;
					this.$userBack$ = dnuCatcher("$userBack$");
					this._$navigator = $.$navigator;
					this.$navigator = dnuCatcher("$navigator");
					this._$setOnce$navigator$ = $.$setOnce$navigator$;
					this.$setOnce$navigator$ = dnuCatcher("$setOnce$navigator$");
					this._$currentPresenterX = $.$currentPresenterX;
					this.$currentPresenterX = dnuCatcher("$currentPresenterX");
					this._$currentPresenterX$ = $.$currentPresenterX$;
					this.$currentPresenterX$ = dnuCatcher("$currentPresenterX$");
					this._$contentHolder = $.$contentHolder;
					this.$contentHolder = dnuCatcher("$contentHolder");
					this._$setOnce$contentHolder$ = $.$setOnce$contentHolder$;
					this.$setOnce$contentHolder$ = dnuCatcher("$setOnce$contentHolder$");
					this.$enclosingObjects$HopscotchForHTML5$HopscotchShell = enclosingObjects;
					this.$super$HopscotchForHTML5$HopscotchShell$slot = runtimeSuperclass;
					this["HopscotchForHTML5`HopscotchShell"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$navigator$slot = nil;
						this.$currentPresenterX$slot = nil;
						this.$contentHolder$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`HopscotchShell"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`HopscotchShell";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`HopscotchShell";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$HopscotchForHTML5$HopscotchShell = enclosingObjects;
						this.$super$HopscotchForHTML5$HopscotchShell = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$HopscotchWindow = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`HopscotchWindow";
			this.name = "HopscotchForHTML5`HopscotchWindow";
			this.header = "HopscotchWindow into: container openSubject: s = HopscotchShell (container appendChild: contentHolder.\r	enterSubject: s)";
			this.slots = [];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`HopscotchWindow", true, "HopscotchShell"),
				new MM("instance`initializer", true, "HopscotchShell"),
				new MM("displayPresenter:", false, "public displayPresenter: p = (\r	super displayPresenter: p.\r	document at: 'title' put: p title.\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$HopscotchWindow = (function ($container, $s) {
				var self = this;
				self.$super$HopscotchForHTML5$HopscotchWindow$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($container, $s) {
				var self = this;
				self._$superInit$HopscotchForHTML5$HopscotchWindow($container, $s);
				$container.$appendChild$(self._$contentHolder());
				self._$enterSubject$($s);
				return self;
			});
			this.$displayPresenter$ = (function ($p) {
				var self = this;
				self.$super$HopscotchForHTML5$HopscotchWindow$slot._$displayPresenter$.call(self, $p);
				$0.$document.call(self.$enclosingObjects$HopscotchForHTML5$HopscotchWindow[0]).$at$put$("title", $p.$title());
				return self;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`HopscotchWindow";
					this._$superInit$HopscotchForHTML5$HopscotchWindow = $.$superInit$HopscotchForHTML5$HopscotchWindow;
					this.$superInit$HopscotchForHTML5$HopscotchWindow = dnuCatcher("$superInit$HopscotchForHTML5$HopscotchWindow");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$displayPresenter$ = this._$displayPresenter$ = $.$displayPresenter$;
					this.$enclosingObjects$HopscotchForHTML5$HopscotchWindow = enclosingObjects;
					this.$super$HopscotchForHTML5$HopscotchWindow$slot = runtimeSuperclass;
					this["HopscotchForHTML5`HopscotchWindow"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["HopscotchForHTML5`HopscotchWindow"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`HopscotchWindow";
				this.slots = [];
				this.methods = [
					new MM("into:openSubject:", true, null),
					new MM("openSubject:", false, "public openSubject: s = (\r	^into: body openSubject: s\r)")
				];
				this.nestedClasses = [];
				this.$into$openSubject$ = (function ($container, $s) {
					return (new this.nonMeta.basicNew()).$instance$initializer($container, $s);
				});
				this.$openSubject$ = (function ($s) {
					var self = this;
					return self._$into$openSubject$($0.$body.call(self.$enclosingObjects$HopscotchForHTML5$HopscotchWindow[0]), $s);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`HopscotchWindow";
						this.$into$openSubject$ = this._$into$openSubject$ = $.$into$openSubject$;
						this.$openSubject$ = this._$openSubject$ = $.$openSubject$;
						this.$enclosingObjects$HopscotchForHTML5$HopscotchWindow = enclosingObjects;
						this.$super$HopscotchForHTML5$HopscotchWindow = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$HyperlinkFragment = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`HyperlinkFragment";
			this.name = "HopscotchForHTML5`HyperlinkFragment";
			this.header = "HyperlinkFragment label: l action: a = LeafFragment (|\r	label = l.\r	action = a.\r	public color ::= Color r: 0 g: 0 b: 1.\r|)";
			this.slots = [
				new SM("label", false, false),
				new SM("action", false, false),
				new SM("color", true, false)
			];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`HyperlinkFragment", true, "LeafFragment"),
				new MM("instance`initializer", true, "LeafFragment"),
				new MM("createVisual", false, "createVisual = (\r	| anchor |\r	anchor:: document createElement: 'a'.\r	anchor at: 'href' put: '#'.\r	anchor appendChild: (document createTextNode: label).\r	anchor at: 'onclick' put: [action value. false].\r	(anchor at: 'style')\r		at: 'textDecoration' put: 'none'; (* No underline *)\r		at: 'overflow' put: 'hidden';\r		setProperty: 'white-space' to: 'nowrap'.\r	color isNil ifFalse:\r		[(anchor at: 'style') setProperty: 'color' to: color asCSSString].\r	^anchor\r)"),
				new MM("label", true, null),
				new MM("setOnce`label:", true, null),
				new MM("action", true, null),
				new MM("setOnce`action:", true, null),
				new MM("color", true, null),
				new MM("color:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$HyperlinkFragment = (function ($l, $a) {
				var self = this;
				self.$super$HopscotchForHTML5$HyperlinkFragment$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($l, $a) {
				var self = this;
				self._$superInit$HopscotchForHTML5$HyperlinkFragment($l, $a);
				self._$setOnce$label$($l);
				self._$setOnce$action$($a);
				self._$color$($0.$Color.call(self.$enclosingObjects$HopscotchForHTML5$HyperlinkFragment[0]).$r$g$b$(0, 0, 1));
				return self;
			});
			this.$createVisual = (function () {
				var self = this;
				var $anchor = nil;
				$anchor = $0.$document.call(self.$enclosingObjects$HopscotchForHTML5$HyperlinkFragment[0]).$createElement$("a");
				$anchor.$at$put$("href", "#");
				$anchor.$appendChild$($0.$document.call(self.$enclosingObjects$HopscotchForHTML5$HyperlinkFragment[0]).$createTextNode$(self._$label()));
				$anchor.$at$put$("onclick", (function () {
					self._$action().$value();
					return false;
				}));
				(function (cascadeReceiver) {
					cascadeReceiver.$at$put$("textDecoration", "none");
					cascadeReceiver.$at$put$("overflow", "hidden");
					return cascadeReceiver.$setProperty$to$("white-space", "nowrap");
				})($anchor.$at$("style"));
				if (!self._$color().$isNil()) {
					$anchor.$at$("style").$setProperty$to$("color", self._$color().$asCSSString());
				} else {
					nil;
				};
				return $anchor;
			});
			this.$label = (function () {
				return this.$label$slot;
			});
			this.$setOnce$label$ = (function (v) {
				this.$label$slot = v;
				return this;
			});
			this.$action = (function () {
				return this.$action$slot;
			});
			this.$setOnce$action$ = (function (v) {
				this.$action$slot = v;
				return this;
			});
			this.$color = (function () {
				return this.$color$slot;
			});
			this.$color$ = (function (v) {
				this.$color$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`HyperlinkFragment";
					this._$superInit$HopscotchForHTML5$HyperlinkFragment = $.$superInit$HopscotchForHTML5$HyperlinkFragment;
					this.$superInit$HopscotchForHTML5$HyperlinkFragment = dnuCatcher("$superInit$HopscotchForHTML5$HyperlinkFragment");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$createVisual = $.$createVisual;
					this.$createVisual = dnuCatcher("$createVisual");
					this._$label = $.$label;
					this.$label = dnuCatcher("$label");
					this._$setOnce$label$ = $.$setOnce$label$;
					this.$setOnce$label$ = dnuCatcher("$setOnce$label$");
					this._$action = $.$action;
					this.$action = dnuCatcher("$action");
					this._$setOnce$action$ = $.$setOnce$action$;
					this.$setOnce$action$ = dnuCatcher("$setOnce$action$");
					this.$color = this._$color = $.$color;
					this.$color$ = this._$color$ = $.$color$;
					this.$enclosingObjects$HopscotchForHTML5$HyperlinkFragment = enclosingObjects;
					this.$super$HopscotchForHTML5$HyperlinkFragment$slot = runtimeSuperclass;
					this["HopscotchForHTML5`HyperlinkFragment"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$label$slot = nil;
						this.$action$slot = nil;
						this.$color$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`HyperlinkFragment"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`HyperlinkFragment";
				this.slots = [];
				this.methods = [new MM("label:action:", true, null)];
				this.nestedClasses = [];
				this.$label$action$ = (function ($l, $a) {
					return (new this.nonMeta.basicNew()).$instance$initializer($l, $a);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`HyperlinkFragment";
						this.$label$action$ = this._$label$action$ = $.$label$action$;
						this.$enclosingObjects$HopscotchForHTML5$HyperlinkFragment = enclosingObjects;
						this.$super$HopscotchForHTML5$HyperlinkFragment = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$LeafFragment = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`LeafFragment";
			this.name = "HopscotchForHTML5`LeafFragment";
			this.header = "LeafFragment = Fragment ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`LeafFragment", true, "Fragment"),
				new MM("instance`initializer", true, "Fragment")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$LeafFragment = (function () {
				var self = this;
				self.$super$HopscotchForHTML5$LeafFragment$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$HopscotchForHTML5$LeafFragment();
				return self;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`LeafFragment";
					this._$superInit$HopscotchForHTML5$LeafFragment = $.$superInit$HopscotchForHTML5$LeafFragment;
					this.$superInit$HopscotchForHTML5$LeafFragment = dnuCatcher("$superInit$HopscotchForHTML5$LeafFragment");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$enclosingObjects$HopscotchForHTML5$LeafFragment = enclosingObjects;
					this.$super$HopscotchForHTML5$LeafFragment$slot = runtimeSuperclass;
					this["HopscotchForHTML5`LeafFragment"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["HopscotchForHTML5`LeafFragment"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`LeafFragment";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`LeafFragment";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$HopscotchForHTML5$LeafFragment = enclosingObjects;
						this.$super$HopscotchForHTML5$LeafFragment = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$NavigationHistory = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`NavigationHistory";
			this.name = "HopscotchForHTML5`NavigationHistory";
			this.header = "NavigationHistory = (| nextId ::= 1. ids = Map new. |)";
			this.slots = [
				new SM("nextId", true, false),
				new SM("ids", false, false)
			];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`NavigationHistory", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("idFor:", false, "public idFor: x = (\r	^ids at: x ifAbsentPut: [nextId:: nextId + 1]\r)"),
				new MM("presenterFor:", false, "public presenterFor: x = (\r	^ids keyAtValue: x\r)"),
				new MM("nextId", true, null),
				new MM("nextId:", true, null),
				new MM("ids", true, null),
				new MM("setOnce`ids:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$NavigationHistory = (function () {
				var self = this;
				self.$super$HopscotchForHTML5$NavigationHistory$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$HopscotchForHTML5$NavigationHistory();
				self._$nextId$(1);
				self._$setOnce$ids$($0.$Map.call(self.$enclosingObjects$HopscotchForHTML5$NavigationHistory[0]).$new());
				return self;
			});
			this.$idFor$ = (function ($x) {
				var self = this;
				return self._$ids().$at$ifAbsentPut$($x, (function () {
					return ((function ($setter_arg) {
						self._$nextId$($setter_arg);
						return $setter_arg;
					})).$value$(self._$nextId() + 1);
				}));
			});
			this.$presenterFor$ = (function ($x) {
				var self = this;
				return self._$ids().$keyAtValue$($x);
			});
			this.$nextId = (function () {
				return this.$nextId$slot;
			});
			this.$nextId$ = (function (v) {
				this.$nextId$slot = v;
				return this;
			});
			this.$ids = (function () {
				return this.$ids$slot;
			});
			this.$setOnce$ids$ = (function (v) {
				this.$ids$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`NavigationHistory";
					this._$superInit$HopscotchForHTML5$NavigationHistory = $.$superInit$HopscotchForHTML5$NavigationHistory;
					this.$superInit$HopscotchForHTML5$NavigationHistory = dnuCatcher("$superInit$HopscotchForHTML5$NavigationHistory");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$idFor$ = this._$idFor$ = $.$idFor$;
					this.$presenterFor$ = this._$presenterFor$ = $.$presenterFor$;
					this._$nextId = $.$nextId;
					this.$nextId = dnuCatcher("$nextId");
					this._$nextId$ = $.$nextId$;
					this.$nextId$ = dnuCatcher("$nextId$");
					this._$ids = $.$ids;
					this.$ids = dnuCatcher("$ids");
					this._$setOnce$ids$ = $.$setOnce$ids$;
					this.$setOnce$ids$ = dnuCatcher("$setOnce$ids$");
					this.$enclosingObjects$HopscotchForHTML5$NavigationHistory = enclosingObjects;
					this.$super$HopscotchForHTML5$NavigationHistory$slot = runtimeSuperclass;
					this["HopscotchForHTML5`NavigationHistory"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$nextId$slot = nil;
						this.$ids$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`NavigationHistory"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`NavigationHistory";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`NavigationHistory";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$HopscotchForHTML5$NavigationHistory = enclosingObjects;
						this.$super$HopscotchForHTML5$NavigationHistory = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$PaddedFrameComposer = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`PaddedFrameComposer";
			this.name = "HopscotchForHTML5`PaddedFrameComposer";
			this.header = "PaddedFrameComposer content: c offsets: o = Composer (|\r	content = c.\r	offsets = o.\r	public color\r|)";
			this.slots = [
				new SM("content", false, false),
				new SM("offsets", false, false),
				new SM("color", true, false)
			];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`PaddedFrameComposer", true, "Composer"),
				new MM("instance`initializer", true, "Composer"),
				new MM("createVisual", false, "createVisual = (\r	| div = document createElement: 'div'. |\r	(div at: 'style')\r		at: 'paddingLeft' put: (offsets at: 1) printString, 'px';\r		at: 'paddingTop' put: (offsets at: 2) printString, 'px';\r		at: 'paddingRight' put: (offsets at: 3) printString, 'px';\r		at: 'paddingBottom' put: (offsets at: 4) printString, 'px'.\r	color isNil ifFalse: [color applyToStyle: (div at: 'style')].\r	content parent: self.\r	div appendChild: content visual.\r	^div\r)"),
				new MM("content", true, null),
				new MM("setOnce`content:", true, null),
				new MM("offsets", true, null),
				new MM("setOnce`offsets:", true, null),
				new MM("color", true, null),
				new MM("color:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$PaddedFrameComposer = (function ($c, $o) {
				var self = this;
				self.$super$HopscotchForHTML5$PaddedFrameComposer$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($c, $o) {
				var self = this;
				self._$superInit$HopscotchForHTML5$PaddedFrameComposer($c, $o);
				self._$setOnce$content$($c);
				self._$setOnce$offsets$($o);
				return self;
			});
			this.$createVisual = (function () {
				var self = this;
				var $div = nil;
				$div = $0.$document.call(self.$enclosingObjects$HopscotchForHTML5$PaddedFrameComposer[0]).$createElement$("div");
				(function (cascadeReceiver) {
					cascadeReceiver.$at$put$("paddingLeft", self._$offsets().$at$(1).$printString().$$comma("px"));
					cascadeReceiver.$at$put$("paddingTop", self._$offsets().$at$(2).$printString().$$comma("px"));
					cascadeReceiver.$at$put$("paddingRight", self._$offsets().$at$(3).$printString().$$comma("px"));
					return cascadeReceiver.$at$put$("paddingBottom", self._$offsets().$at$(4).$printString().$$comma("px"));
				})($div.$at$("style"));
				if (!self._$color().$isNil()) {
					self._$color().$applyToStyle$($div.$at$("style"));
				} else {
					nil;
				};
				self._$content().$parent$(self);
				$div.$appendChild$(self._$content().$visual());
				return $div;
			});
			this.$content = (function () {
				return this.$content$slot;
			});
			this.$setOnce$content$ = (function (v) {
				this.$content$slot = v;
				return this;
			});
			this.$offsets = (function () {
				return this.$offsets$slot;
			});
			this.$setOnce$offsets$ = (function (v) {
				this.$offsets$slot = v;
				return this;
			});
			this.$color = (function () {
				return this.$color$slot;
			});
			this.$color$ = (function (v) {
				this.$color$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`PaddedFrameComposer";
					this._$superInit$HopscotchForHTML5$PaddedFrameComposer = $.$superInit$HopscotchForHTML5$PaddedFrameComposer;
					this.$superInit$HopscotchForHTML5$PaddedFrameComposer = dnuCatcher("$superInit$HopscotchForHTML5$PaddedFrameComposer");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$createVisual = $.$createVisual;
					this.$createVisual = dnuCatcher("$createVisual");
					this._$content = $.$content;
					this.$content = dnuCatcher("$content");
					this._$setOnce$content$ = $.$setOnce$content$;
					this.$setOnce$content$ = dnuCatcher("$setOnce$content$");
					this._$offsets = $.$offsets;
					this.$offsets = dnuCatcher("$offsets");
					this._$setOnce$offsets$ = $.$setOnce$offsets$;
					this.$setOnce$offsets$ = dnuCatcher("$setOnce$offsets$");
					this.$color = this._$color = $.$color;
					this.$color$ = this._$color$ = $.$color$;
					this.$enclosingObjects$HopscotchForHTML5$PaddedFrameComposer = enclosingObjects;
					this.$super$HopscotchForHTML5$PaddedFrameComposer$slot = runtimeSuperclass;
					this["HopscotchForHTML5`PaddedFrameComposer"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$content$slot = nil;
						this.$offsets$slot = nil;
						this.$color$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`PaddedFrameComposer"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`PaddedFrameComposer";
				this.slots = [];
				this.methods = [new MM("content:offsets:", true, null)];
				this.nestedClasses = [];
				this.$content$offsets$ = (function ($c, $o) {
					return (new this.nonMeta.basicNew()).$instance$initializer($c, $o);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`PaddedFrameComposer";
						this.$content$offsets$ = this._$content$offsets$ = $.$content$offsets$;
						this.$enclosingObjects$HopscotchForHTML5$PaddedFrameComposer = enclosingObjects;
						this.$super$HopscotchForHTML5$PaddedFrameComposer = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$Presenter = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`Presenter";
			this.name = "HopscotchForHTML5`Presenter";
			this.header = "Presenter onSubject: aSubject = Fragment (|\rsubject ::= aSubject.\r|)";
			this.slots = [new SM("subject", true, false)];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`Presenter", true, "Fragment"),
				new MM("instance`initializer", true, "Fragment"),
				new MM("alert:", false, "alert: text = (\r	window alert: text\r)"),
				new MM("blank:", false, "blank: size = (\r	^BlankFragment new size: size\r)"),
				new MM("button:action:", false, "button: label <String> action: block <[]>= (\r	^ButtonFragment label: label action: block\r)"),
				new MM("canvas:", false, "canvas: extent <Point> = (\r	^CanvasFragment withExtent: extent\r)"),
				new MM("collapsed:expanded:", false, "collapsed: collapsed <[Fragment]> expanded: expanded <[Fragment]> ^<Fragment> = (\r	^collapsed: collapsed expanded: expanded initiallyExpanded: false\r)"),
				new MM("collapsed:expanded:initiallyExpanded:", false, "collapsed: collapsed <[Fragment]> expanded: expanded <[Fragment]> initiallyExpanded: flag <Boolean>\r^<Fragment> = (\r	^ToggleComposer\r		collapsedDefinition: collapsed\r		expandedDefinition: expanded\r		initiallyExpanded: flag\r)"),
				new MM("column:", false, "column: definitions = (\r	^ColumnComposer definitions: definitions\r)"),
				new MM("createVisual", false, "createVisual = (\r	| substance = definition. |\r	substance parent: self.\r	^substance visual\r)"),
				new MM("deferred:", false, "deferred: contentSource <[Fragment]> ^<Fragment> = (\r	^DeferredContentComposer initialContent: nothing contentSource: contentSource\r)"),
				new MM("definition", false, "public definition ^<Fragment> = (\r	subclassResponsibility\r)"),
				new MM("enterSubject:", false, "enterSubject: s = (\r	(* TODO: use sendUp and open a new window if undelivered *)\r	^shell enterSubject: s\r)"),
				new MM("expanded:collapsed:", false, "expanded: expanded <[Fragment]> collapsed: collapsed <[Fragment]> ^<Fragment> = (\r	^collapsed: collapsed expanded: expanded initiallyExpanded: true\r)"),
				new MM("filler", false, "filler = (\r	^BlankFragment new expansibility: 1; compressibility: 1\r)"),
				new MM("holder:", false, "holder: definition <[Fragment]> = (\r	^HolderComposer withContent: definition\r)"),
				new MM("image:", false, "image: image = (\r	^StaticImageFragment image: image\r)"),
				new MM("initially:deferred:", false, "initially: initialContent <Fragment> deferred: contentSource <[Fragment]> ^<Fragment> = (\r	^DeferredContentComposer initialContent: initialContent contentSource: contentSource\r)"),
				new MM("label:", false, "label: label <String> = (\r	^StaticLabelFragment text: label\r)"),
				new MM("link:action:", false, "link: label <String> action: block <[]> = (\r	^HyperlinkFragment label: label action: block\r)"),
				new MM("mediumBlank", false, "mediumBlank = (\r	^blank: 10\r)"),
				new MM("nothing", false, "nothing = (\r	^BlankFragment new\r)"),
				new MM("padded:with:", false, "padded: definition with: offsets = (\r	^PaddedFrameComposer content: definition offsets: offsets\r)"),
				new MM("row:", false, "row: definitions = (\r	^RowComposer definitions: definitions\r)"),
				new MM("textDisplay:", false, "textDisplay: string = (\r	^TextDisplayFragment text: string\r)"),
				new MM("textField:onAccept:", false, "textField: initialText onAccept: blk = (\r(* experimental *)\r	 ^fragments TextEditorFragment new \r            text: initialText; \r            acceptResponse: blk (*[: editor | blk valueWithPossibleArgument: editor. editor defaultAcceptResponse] *)\r)"),
				new MM("title", false, "public title ^<String> = (\r	^subject title\r)"),
				new MM("subject", true, null),
				new MM("subject:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$Presenter = (function ($aSubject) {
				var self = this;
				self.$super$HopscotchForHTML5$Presenter$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($aSubject) {
				var self = this;
				self._$superInit$HopscotchForHTML5$Presenter($aSubject);
				self._$subject$($aSubject);
				return self;
			});
			this.$alert$ = (function ($text) {
				var self = this;
				$0.$window.call(self.$enclosingObjects$HopscotchForHTML5$Presenter[0]).$alert$($text);
				return self;
			});
			this.$blank$ = (function ($size) {
				var self = this;
				return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$BlankFragment().$new().$size$($size);
			});
			this.$button$action$ = (function ($label, $block) {
				var self = this;
				return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$ButtonFragment().$label$action$($label, $block);
			});
			this.$canvas$ = (function ($extent) {
				var self = this;
				return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$CanvasFragment().$withExtent$($extent);
			});
			this.$collapsed$expanded$ = (function ($collapsed, $expanded) {
				var self = this;
				return self._$collapsed$expanded$initiallyExpanded$($collapsed, $expanded, false);
			});
			this.$collapsed$expanded$initiallyExpanded$ = (function ($collapsed, $expanded, $flag) {
				var self = this;
				return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$ToggleComposer().$collapsedDefinition$expandedDefinition$initiallyExpanded$($collapsed, $expanded, $flag);
			});
			this.$column$ = (function ($definitions) {
				var self = this;
				return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$ColumnComposer().$definitions$($definitions);
			});
			this.$createVisual = (function () {
				var self = this;
				var $substance = nil;
				$substance = self._$definition();
				$substance.$parent$(self);
				return $substance.$visual();
			});
			this.$deferred$ = (function ($contentSource) {
				var self = this;
				return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$DeferredContentComposer().$initialContent$contentSource$(self._$nothing(), $contentSource);
			});
			this.$definition = (function () {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$enterSubject$ = (function ($s) {
				var self = this;
				return self._$shell().$enterSubject$($s);
			});
			this.$expanded$collapsed$ = (function ($expanded, $collapsed) {
				var self = this;
				return self._$collapsed$expanded$initiallyExpanded$($collapsed, $expanded, true);
			});
			this.$filler = (function () {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$expansibility$(1);
					return cascadeReceiver.$compressibility$(1);
				})(self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$BlankFragment().$new());
			});
			this.$holder$ = (function ($definition) {
				var self = this;
				return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$HolderComposer().$withContent$($definition);
			});
			this.$image$ = (function ($image) {
				var self = this;
				return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$StaticImageFragment().$image$($image);
			});
			this.$initially$deferred$ = (function ($initialContent, $contentSource) {
				var self = this;
				return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$DeferredContentComposer().$initialContent$contentSource$($initialContent, $contentSource);
			});
			this.$label$ = (function ($label) {
				var self = this;
				return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$StaticLabelFragment().$text$($label);
			});
			this.$link$action$ = (function ($label, $block) {
				var self = this;
				return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$HyperlinkFragment().$label$action$($label, $block);
			});
			this.$mediumBlank = (function () {
				var self = this;
				return self._$blank$(10);
			});
			this.$nothing = (function () {
				var self = this;
				return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$BlankFragment().$new();
			});
			this.$padded$with$ = (function ($definition, $offsets) {
				var self = this;
				return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$PaddedFrameComposer().$content$offsets$($definition, $offsets);
			});
			this.$row$ = (function ($definitions) {
				var self = this;
				return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$RowComposer().$definitions$($definitions);
			});
			this.$textDisplay$ = (function ($string) {
				var self = this;
				return self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$TextDisplayFragment().$text$($string);
			});
			this.$textField$onAccept$ = (function ($initialText, $blk) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$text$($initialText);
					return cascadeReceiver.$acceptResponse$($blk);
				})(self.$enclosingObjects$HopscotchForHTML5$Presenter[0]._$fragments().$TextEditorFragment().$new());
			});
			this.$title = (function () {
				var self = this;
				return self._$subject().$title();
			});
			this.$subject = (function () {
				return this.$subject$slot;
			});
			this.$subject$ = (function (v) {
				this.$subject$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`Presenter";
					this._$superInit$HopscotchForHTML5$Presenter = $.$superInit$HopscotchForHTML5$Presenter;
					this.$superInit$HopscotchForHTML5$Presenter = dnuCatcher("$superInit$HopscotchForHTML5$Presenter");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$alert$ = $.$alert$;
					this.$alert$ = dnuCatcher("$alert$");
					this._$blank$ = $.$blank$;
					this.$blank$ = dnuCatcher("$blank$");
					this._$button$action$ = $.$button$action$;
					this.$button$action$ = dnuCatcher("$button$action$");
					this._$canvas$ = $.$canvas$;
					this.$canvas$ = dnuCatcher("$canvas$");
					this._$collapsed$expanded$ = $.$collapsed$expanded$;
					this.$collapsed$expanded$ = dnuCatcher("$collapsed$expanded$");
					this._$collapsed$expanded$initiallyExpanded$ = $.$collapsed$expanded$initiallyExpanded$;
					this.$collapsed$expanded$initiallyExpanded$ = dnuCatcher("$collapsed$expanded$initiallyExpanded$");
					this._$column$ = $.$column$;
					this.$column$ = dnuCatcher("$column$");
					this._$createVisual = $.$createVisual;
					this.$createVisual = dnuCatcher("$createVisual");
					this._$deferred$ = $.$deferred$;
					this.$deferred$ = dnuCatcher("$deferred$");
					this.$definition = this._$definition = $.$definition;
					this._$enterSubject$ = $.$enterSubject$;
					this.$enterSubject$ = dnuCatcher("$enterSubject$");
					this._$expanded$collapsed$ = $.$expanded$collapsed$;
					this.$expanded$collapsed$ = dnuCatcher("$expanded$collapsed$");
					this._$filler = $.$filler;
					this.$filler = dnuCatcher("$filler");
					this._$holder$ = $.$holder$;
					this.$holder$ = dnuCatcher("$holder$");
					this._$image$ = $.$image$;
					this.$image$ = dnuCatcher("$image$");
					this._$initially$deferred$ = $.$initially$deferred$;
					this.$initially$deferred$ = dnuCatcher("$initially$deferred$");
					this._$label$ = $.$label$;
					this.$label$ = dnuCatcher("$label$");
					this._$link$action$ = $.$link$action$;
					this.$link$action$ = dnuCatcher("$link$action$");
					this._$mediumBlank = $.$mediumBlank;
					this.$mediumBlank = dnuCatcher("$mediumBlank");
					this._$nothing = $.$nothing;
					this.$nothing = dnuCatcher("$nothing");
					this._$padded$with$ = $.$padded$with$;
					this.$padded$with$ = dnuCatcher("$padded$with$");
					this._$row$ = $.$row$;
					this.$row$ = dnuCatcher("$row$");
					this._$textDisplay$ = $.$textDisplay$;
					this.$textDisplay$ = dnuCatcher("$textDisplay$");
					this._$textField$onAccept$ = $.$textField$onAccept$;
					this.$textField$onAccept$ = dnuCatcher("$textField$onAccept$");
					this.$title = this._$title = $.$title;
					this._$subject = $.$subject;
					this.$subject = dnuCatcher("$subject");
					this._$subject$ = $.$subject$;
					this.$subject$ = dnuCatcher("$subject$");
					this.$enclosingObjects$HopscotchForHTML5$Presenter = enclosingObjects;
					this.$super$HopscotchForHTML5$Presenter$slot = runtimeSuperclass;
					this["HopscotchForHTML5`Presenter"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$subject$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`Presenter"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`Presenter";
				this.slots = [];
				this.methods = [new MM("onSubject:", true, null)];
				this.nestedClasses = [];
				this.$onSubject$ = (function ($aSubject) {
					return (new this.nonMeta.basicNew()).$instance$initializer($aSubject);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`Presenter";
						this.$onSubject$ = this._$onSubject$ = $.$onSubject$;
						this.$enclosingObjects$HopscotchForHTML5$Presenter = enclosingObjects;
						this.$super$HopscotchForHTML5$Presenter = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$RowComposer = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`RowComposer";
			this.name = "HopscotchForHTML5`RowComposer";
			this.header = "RowComposer definitions: fragments = SequenceComposer definitions: fragments (|\r|)";
			this.slots = [];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`RowComposer", true, "definitions: fragments"),
				new MM("instance`initializer", true, "definitions: fragments"),
				new MM("flexDirection", false, "flexDirection = (\r	^'row'\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$RowComposer = (function ($fragments) {
				var self = this;
				self.$super$HopscotchForHTML5$RowComposer$slot._$instance$initializer.call(self, $fragments);
				return self;
			});
			this.$instance$initializer = (function ($fragments) {
				var self = this;
				self._$superInit$HopscotchForHTML5$RowComposer($fragments);
				return self;
			});
			this.$flexDirection = (function () {
				var self = this;
				return "row";
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`RowComposer";
					this._$superInit$HopscotchForHTML5$RowComposer = $.$superInit$HopscotchForHTML5$RowComposer;
					this.$superInit$HopscotchForHTML5$RowComposer = dnuCatcher("$superInit$HopscotchForHTML5$RowComposer");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$flexDirection = $.$flexDirection;
					this.$flexDirection = dnuCatcher("$flexDirection");
					this.$enclosingObjects$HopscotchForHTML5$RowComposer = enclosingObjects;
					this.$super$HopscotchForHTML5$RowComposer$slot = runtimeSuperclass;
					this["HopscotchForHTML5`RowComposer"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["HopscotchForHTML5`RowComposer"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`RowComposer";
				this.slots = [];
				this.methods = [new MM("definitions:", true, null)];
				this.nestedClasses = [];
				this.$definitions$ = (function ($fragments) {
					return (new this.nonMeta.basicNew()).$instance$initializer($fragments);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`RowComposer";
						this.$definitions$ = this._$definitions$ = $.$definitions$;
						this.$enclosingObjects$HopscotchForHTML5$RowComposer = enclosingObjects;
						this.$super$HopscotchForHTML5$RowComposer = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$SequenceComposer = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`SequenceComposer";
			this.name = "HopscotchForHTML5`SequenceComposer";
			this.header = "SequenceComposer definitions: fragments = Composer (|\r	definitions = fragments.\r	public color\r|)";
			this.slots = [
				new SM("definitions", false, false),
				new SM("color", true, false)
			];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`SequenceComposer", true, "Composer"),
				new MM("instance`initializer", true, "Composer"),
				new MM("createVisual", false, "createVisual = (\r	| container |\r	container:: document createElement: 'div'.\r	(container at: 'style')\r		at: 'overflow' put: 'hidden';\r		at: 'display' put: '-webkit-flex';\r		at: 'display' put: 'flex';\r		at: '-webkit-flex-direction' put: flexDirection;\r		setProperty: 'flex-direction' to: flexDirection.\r	color isNil ifFalse: \r		[color applyToStyle: (container at: 'style')].\r	definitions do: [:fragment |\r		| cell |\r		fragment parent: self.\r		cell:: document createElement: 'div'.\r		cell appendChild: fragment visual.\r		(cell at: 'style')\r			at: '-webkit-flex-grow' put: fragment expansibility;\r			setProperty: 'flex-grow' to: fragment expansibility;\r			at: '-webkit-flex-shrink' put: fragment compressibility;\r			setProperty: 'flex-shrink' to: fragment compressibility.\r		fragment size isNil ifFalse:\r			[(cell at: 'style') \r				at: 'flexBasis' put: fragment size printString, 'px';\r				at: '-webkit-flex-basis' put: fragment size printString, 'px'].\r		container appendChild: cell].\r	^container\r)"),
				new MM("definitions", true, null),
				new MM("setOnce`definitions:", true, null),
				new MM("color", true, null),
				new MM("color:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$SequenceComposer = (function ($fragments) {
				var self = this;
				self.$super$HopscotchForHTML5$SequenceComposer$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($fragments) {
				var self = this;
				self._$superInit$HopscotchForHTML5$SequenceComposer($fragments);
				self._$setOnce$definitions$($fragments);
				return self;
			});
			this.$createVisual = (function () {
				var self = this;
				var $container = nil;
				$container = $0.$document.call(self.$enclosingObjects$HopscotchForHTML5$SequenceComposer[0]).$createElement$("div");
				(function (cascadeReceiver) {
					cascadeReceiver.$at$put$("overflow", "hidden");
					cascadeReceiver.$at$put$("display", "-webkit-flex");
					cascadeReceiver.$at$put$("display", "flex");
					cascadeReceiver.$at$put$("-webkit-flex-direction", self._$flexDirection());
					return cascadeReceiver.$setProperty$to$("flex-direction", self._$flexDirection());
				})($container.$at$("style"));
				if (!self._$color().$isNil()) {
					self._$color().$applyToStyle$($container.$at$("style"));
				} else {
					nil;
				};
				self._$definitions().$do$((function ($fragment) {
					var $cell = nil;
					$fragment.$parent$(self);
					$cell = $0.$document.call(self.$enclosingObjects$HopscotchForHTML5$SequenceComposer[0]).$createElement$("div");
					$cell.$appendChild$($fragment.$visual());
					(function (cascadeReceiver) {
						cascadeReceiver.$at$put$("-webkit-flex-grow", $fragment.$expansibility());
						cascadeReceiver.$setProperty$to$("flex-grow", $fragment.$expansibility());
						cascadeReceiver.$at$put$("-webkit-flex-shrink", $fragment.$compressibility());
						return cascadeReceiver.$setProperty$to$("flex-shrink", $fragment.$compressibility());
					})($cell.$at$("style"));
					if (!$fragment.$size().$isNil()) {
						(function (cascadeReceiver) {
							cascadeReceiver.$at$put$("flexBasis", $fragment.$size().$printString().$$comma("px"));
							return cascadeReceiver.$at$put$("-webkit-flex-basis", $fragment.$size().$printString().$$comma("px"));
						})($cell.$at$("style"));
					} else {
						nil;
					};
					return $container.$appendChild$($cell);
				}));
				return $container;
			});
			this.$definitions = (function () {
				return this.$definitions$slot;
			});
			this.$setOnce$definitions$ = (function (v) {
				this.$definitions$slot = v;
				return this;
			});
			this.$color = (function () {
				return this.$color$slot;
			});
			this.$color$ = (function (v) {
				this.$color$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`SequenceComposer";
					this._$superInit$HopscotchForHTML5$SequenceComposer = $.$superInit$HopscotchForHTML5$SequenceComposer;
					this.$superInit$HopscotchForHTML5$SequenceComposer = dnuCatcher("$superInit$HopscotchForHTML5$SequenceComposer");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$createVisual = $.$createVisual;
					this.$createVisual = dnuCatcher("$createVisual");
					this._$definitions = $.$definitions;
					this.$definitions = dnuCatcher("$definitions");
					this._$setOnce$definitions$ = $.$setOnce$definitions$;
					this.$setOnce$definitions$ = dnuCatcher("$setOnce$definitions$");
					this.$color = this._$color = $.$color;
					this.$color$ = this._$color$ = $.$color$;
					this.$enclosingObjects$HopscotchForHTML5$SequenceComposer = enclosingObjects;
					this.$super$HopscotchForHTML5$SequenceComposer$slot = runtimeSuperclass;
					this["HopscotchForHTML5`SequenceComposer"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$definitions$slot = nil;
						this.$color$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`SequenceComposer"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`SequenceComposer";
				this.slots = [];
				this.methods = [new MM("definitions:", true, null)];
				this.nestedClasses = [];
				this.$definitions$ = (function ($fragments) {
					return (new this.nonMeta.basicNew()).$instance$initializer($fragments);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`SequenceComposer";
						this.$definitions$ = this._$definitions$ = $.$definitions$;
						this.$enclosingObjects$HopscotchForHTML5$SequenceComposer = enclosingObjects;
						this.$super$HopscotchForHTML5$SequenceComposer = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$StaticImageFragment = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`StaticImageFragment";
			this.name = "HopscotchForHTML5`StaticImageFragment";
			this.header = "StaticImageFragment image: i = LeafFragment (|\r	image = i.\r|)";
			this.slots = [new SM("image", false, false)];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`StaticImageFragment", true, "LeafFragment"),
				new MM("instance`initializer", true, "LeafFragment"),
				new MM("createVisual", false, "createVisual = (\r	^image cloneNode: false (* Not deep *)\r)"),
				new MM("image", true, null),
				new MM("setOnce`image:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$StaticImageFragment = (function ($i) {
				var self = this;
				self.$super$HopscotchForHTML5$StaticImageFragment$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($i) {
				var self = this;
				self._$superInit$HopscotchForHTML5$StaticImageFragment($i);
				self._$setOnce$image$($i);
				return self;
			});
			this.$createVisual = (function () {
				var self = this;
				return self._$image().$cloneNode$(false);
			});
			this.$image = (function () {
				return this.$image$slot;
			});
			this.$setOnce$image$ = (function (v) {
				this.$image$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`StaticImageFragment";
					this._$superInit$HopscotchForHTML5$StaticImageFragment = $.$superInit$HopscotchForHTML5$StaticImageFragment;
					this.$superInit$HopscotchForHTML5$StaticImageFragment = dnuCatcher("$superInit$HopscotchForHTML5$StaticImageFragment");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$createVisual = $.$createVisual;
					this.$createVisual = dnuCatcher("$createVisual");
					this._$image = $.$image;
					this.$image = dnuCatcher("$image");
					this._$setOnce$image$ = $.$setOnce$image$;
					this.$setOnce$image$ = dnuCatcher("$setOnce$image$");
					this.$enclosingObjects$HopscotchForHTML5$StaticImageFragment = enclosingObjects;
					this.$super$HopscotchForHTML5$StaticImageFragment$slot = runtimeSuperclass;
					this["HopscotchForHTML5`StaticImageFragment"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$image$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`StaticImageFragment"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`StaticImageFragment";
				this.slots = [];
				this.methods = [new MM("image:", true, null)];
				this.nestedClasses = [];
				this.$image$ = (function ($i) {
					return (new this.nonMeta.basicNew()).$instance$initializer($i);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`StaticImageFragment";
						this.$image$ = this._$image$ = $.$image$;
						this.$enclosingObjects$HopscotchForHTML5$StaticImageFragment = enclosingObjects;
						this.$super$HopscotchForHTML5$StaticImageFragment = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$StaticLabelFragment = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`StaticLabelFragment";
			this.name = "HopscotchForHTML5`StaticLabelFragment";
			this.header = "StaticLabelFragment text: t = LeafFragment (|\r	text = t.\r	public color\r|)";
			this.slots = [
				new SM("text", false, false),
				new SM("color", true, false)
			];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`StaticLabelFragment", true, "LeafFragment"),
				new MM("instance`initializer", true, "LeafFragment"),
				new MM("createVisual", false, "createVisual = (\r	| div = document createElement: 'div'. |\r	(div at: 'style') \r		at: 'overflow' put: 'hidden';\r		setProperty: 'white-space' to: 'pre'.\r	div at: 'textContent' put: text.\r	color isNil ifFalse:\r		[(div at: 'style') setProperty: 'color' to: color asCSSString].\r	^div\r)"),
				new MM("text", true, null),
				new MM("setOnce`text:", true, null),
				new MM("color", true, null),
				new MM("color:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$StaticLabelFragment = (function ($t) {
				var self = this;
				self.$super$HopscotchForHTML5$StaticLabelFragment$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($t) {
				var self = this;
				self._$superInit$HopscotchForHTML5$StaticLabelFragment($t);
				self._$setOnce$text$($t);
				return self;
			});
			this.$createVisual = (function () {
				var self = this;
				var $div = nil;
				$div = $0.$document.call(self.$enclosingObjects$HopscotchForHTML5$StaticLabelFragment[0]).$createElement$("div");
				(function (cascadeReceiver) {
					cascadeReceiver.$at$put$("overflow", "hidden");
					return cascadeReceiver.$setProperty$to$("white-space", "pre");
				})($div.$at$("style"));
				$div.$at$put$("textContent", self._$text());
				if (!self._$color().$isNil()) {
					$div.$at$("style").$setProperty$to$("color", self._$color().$asCSSString());
				} else {
					nil;
				};
				return $div;
			});
			this.$text = (function () {
				return this.$text$slot;
			});
			this.$setOnce$text$ = (function (v) {
				this.$text$slot = v;
				return this;
			});
			this.$color = (function () {
				return this.$color$slot;
			});
			this.$color$ = (function (v) {
				this.$color$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`StaticLabelFragment";
					this._$superInit$HopscotchForHTML5$StaticLabelFragment = $.$superInit$HopscotchForHTML5$StaticLabelFragment;
					this.$superInit$HopscotchForHTML5$StaticLabelFragment = dnuCatcher("$superInit$HopscotchForHTML5$StaticLabelFragment");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$createVisual = $.$createVisual;
					this.$createVisual = dnuCatcher("$createVisual");
					this._$text = $.$text;
					this.$text = dnuCatcher("$text");
					this._$setOnce$text$ = $.$setOnce$text$;
					this.$setOnce$text$ = dnuCatcher("$setOnce$text$");
					this.$color = this._$color = $.$color;
					this.$color$ = this._$color$ = $.$color$;
					this.$enclosingObjects$HopscotchForHTML5$StaticLabelFragment = enclosingObjects;
					this.$super$HopscotchForHTML5$StaticLabelFragment$slot = runtimeSuperclass;
					this["HopscotchForHTML5`StaticLabelFragment"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$text$slot = nil;
						this.$color$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`StaticLabelFragment"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`StaticLabelFragment";
				this.slots = [];
				this.methods = [new MM("text:", true, null)];
				this.nestedClasses = [];
				this.$text$ = (function ($t) {
					return (new this.nonMeta.basicNew()).$instance$initializer($t);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`StaticLabelFragment";
						this.$text$ = this._$text$ = $.$text$;
						this.$enclosingObjects$HopscotchForHTML5$StaticLabelFragment = enclosingObjects;
						this.$super$HopscotchForHTML5$StaticLabelFragment = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$Subject = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`Subject";
			this.name = "HopscotchForHTML5`Subject";
			this.header = "Subject onModel: aModel = (|\r	protected model ::= aModel.\r	protected presenterX <Presenter>\r|)";
			this.slots = [
				new SM("model", true, false),
				new SM("presenterX", true, false)
			];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`Subject", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("createPresenter", false, "protected createPresenter ^<Presenter> = (\r	subclassResponsibility\r)"),
				new MM("presenter", false, "public presenter ^<Presenter> = (\r	presenterX isNil ifTrue: [presenterX:: createPresenter].\r	^presenterX\r)"),
				new MM("title", false, "public title ^<String> = (\r	^self printString\r)"),
				new MM("model", true, null),
				new MM("model:", true, null),
				new MM("presenterX", true, null),
				new MM("presenterX:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$Subject = (function ($aModel) {
				var self = this;
				self.$super$HopscotchForHTML5$Subject$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($aModel) {
				var self = this;
				self._$superInit$HopscotchForHTML5$Subject($aModel);
				self._$model$($aModel);
				return self;
			});
			this.$createPresenter = (function () {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$presenter = (function () {
				var self = this;
				if (self._$presenterX().$isNil()) {
					self._$presenterX$(self._$createPresenter());
				} else {
					nil;
				};
				return self._$presenterX();
			});
			this.$title = (function () {
				var self = this;
				return self._$printString();
			});
			this.$model = (function () {
				return this.$model$slot;
			});
			this.$model$ = (function (v) {
				this.$model$slot = v;
				return this;
			});
			this.$presenterX = (function () {
				return this.$presenterX$slot;
			});
			this.$presenterX$ = (function (v) {
				this.$presenterX$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`Subject";
					this._$superInit$HopscotchForHTML5$Subject = $.$superInit$HopscotchForHTML5$Subject;
					this.$superInit$HopscotchForHTML5$Subject = dnuCatcher("$superInit$HopscotchForHTML5$Subject");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$createPresenter = $.$createPresenter;
					this.$createPresenter = dnuCatcher("$createPresenter");
					this.$presenter = this._$presenter = $.$presenter;
					this.$title = this._$title = $.$title;
					this._$model = $.$model;
					this.$model = dnuCatcher("$model");
					this._$model$ = $.$model$;
					this.$model$ = dnuCatcher("$model$");
					this._$presenterX = $.$presenterX;
					this.$presenterX = dnuCatcher("$presenterX");
					this._$presenterX$ = $.$presenterX$;
					this.$presenterX$ = dnuCatcher("$presenterX$");
					this.$enclosingObjects$HopscotchForHTML5$Subject = enclosingObjects;
					this.$super$HopscotchForHTML5$Subject$slot = runtimeSuperclass;
					this["HopscotchForHTML5`Subject"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$model$slot = nil;
						this.$presenterX$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`Subject"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`Subject";
				this.slots = [];
				this.methods = [new MM("onModel:", true, null)];
				this.nestedClasses = [];
				this.$onModel$ = (function ($aModel) {
					return (new this.nonMeta.basicNew()).$instance$initializer($aModel);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`Subject";
						this.$onModel$ = this._$onModel$ = $.$onModel$;
						this.$enclosingObjects$HopscotchForHTML5$Subject = enclosingObjects;
						this.$super$HopscotchForHTML5$Subject = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$TextDisplayFragment = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`TextDisplayFragment";
			this.name = "HopscotchForHTML5`TextDisplayFragment";
			this.header = "TextDisplayFragment text: t = LeafFragment (|\r	textX ::= t.\r|)";
			this.slots = [new SM("textX", true, false)];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`TextDisplayFragment", true, "LeafFragment"),
				new MM("instance`initializer", true, "LeafFragment"),
				new MM("createVisual", false, "createVisual = (\r	| div = document createElement: 'div'. |\r	(div at: 'style') setProperty: 'white-space' to: 'pre-wrap'.\r	div at: 'textContent' put: textX.\r	^div\r)"),
				new MM("text", false, "public text = (\r	^textX\r)"),
				new MM("text:", false, "public text: newText = (\r	textX: newText.\r	hasVisual ifTrue: [visual at: 'textContent' put: textX]\r)"),
				new MM("textX", true, null),
				new MM("textX:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$TextDisplayFragment = (function ($t) {
				var self = this;
				self.$super$HopscotchForHTML5$TextDisplayFragment$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($t) {
				var self = this;
				self._$superInit$HopscotchForHTML5$TextDisplayFragment($t);
				self._$textX$($t);
				return self;
			});
			this.$createVisual = (function () {
				var self = this;
				var $div = nil;
				$div = $0.$document.call(self.$enclosingObjects$HopscotchForHTML5$TextDisplayFragment[0]).$createElement$("div");
				$div.$at$("style").$setProperty$to$("white-space", "pre-wrap");
				$div.$at$put$("textContent", self._$textX());
				return $div;
			});
			this.$text = (function () {
				var self = this;
				return self._$textX();
			});
			this.$text$ = (function ($newText) {
				var self = this;
				self._$textX$($newText);
				if (self._$hasVisual()) {
					self._$visual().$at$put$("textContent", self._$textX());
				} else {
					nil;
				};
				return self;
			});
			this.$textX = (function () {
				return this.$textX$slot;
			});
			this.$textX$ = (function (v) {
				this.$textX$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`TextDisplayFragment";
					this._$superInit$HopscotchForHTML5$TextDisplayFragment = $.$superInit$HopscotchForHTML5$TextDisplayFragment;
					this.$superInit$HopscotchForHTML5$TextDisplayFragment = dnuCatcher("$superInit$HopscotchForHTML5$TextDisplayFragment");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$createVisual = $.$createVisual;
					this.$createVisual = dnuCatcher("$createVisual");
					this.$text = this._$text = $.$text;
					this.$text$ = this._$text$ = $.$text$;
					this._$textX = $.$textX;
					this.$textX = dnuCatcher("$textX");
					this._$textX$ = $.$textX$;
					this.$textX$ = dnuCatcher("$textX$");
					this.$enclosingObjects$HopscotchForHTML5$TextDisplayFragment = enclosingObjects;
					this.$super$HopscotchForHTML5$TextDisplayFragment$slot = runtimeSuperclass;
					this["HopscotchForHTML5`TextDisplayFragment"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$textX$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`TextDisplayFragment"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`TextDisplayFragment";
				this.slots = [];
				this.methods = [new MM("text:", true, null)];
				this.nestedClasses = [];
				this.$text$ = (function ($t) {
					return (new this.nonMeta.basicNew()).$instance$initializer($t);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`TextDisplayFragment";
						this.$text$ = this._$text$ = $.$text$;
						this.$enclosingObjects$HopscotchForHTML5$TextDisplayFragment = enclosingObjects;
						this.$super$HopscotchForHTML5$TextDisplayFragment = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$TextEditorFragment = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`TextEditorFragment";
			this.name = "HopscotchForHTML5`TextEditorFragment";
			this.header = "TextEditorFragment = LeafFragment (|\r	textX ::= ''.\r	counterfactualBarX\r	editorX\r	public textBeingAccepted\r	isInEditState ::= false.\r	public changeResponse\r	public acceptResponse\r	public cancelResponse\r|)";
			this.slots = [
				new SM("textX", true, false),
				new SM("counterfactualBarX", true, false),
				new SM("editorX", true, false),
				new SM("textBeingAccepted", true, false),
				new SM("isInEditState", true, false),
				new SM("changeResponse", true, false),
				new SM("acceptResponse", true, false),
				new SM("cancelResponse", true, false)
			];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`TextEditorFragment", true, "LeafFragment"),
				new MM("instance`initializer", true, "LeafFragment"),
				new MM("controlBarColor", false, "controlBarColor = (\r	^Color r: 0.95 g: 0.792 b: 0.475\r)"),
				new MM("createVisual", false, "createVisual = (\r	| frame editorWrapper accept cancel |\r	frame:: document createElement: 'div'.\r	(frame at: 'style')\r		at: 'display' put: '-webkit-flex';\r		at: 'display' put: 'flex'.\r	editorX:: document createElement: 'div'.\r	editorX at: 'contentEditable' put: 'true'.\r	(editorX at: 'style')\r		at: 'borderStyle' put: 'solid';\r		at: 'borderWidth' put: '1px';\r		at: 'borderColor' put: 'gray';\r		setProperty: 'background-color' to: 'white';\r		at: 'flex' put: 1;\r		at: '-webkit-flex' put: 1;\r		at: '-moz-flex' put: 1;\r		setProperty: 'white-space' to: 'pre-wrap';\r		at: 'display' put: 'block'.\r	editorX at: 'textContent' put: textX.\r	editorX addEventListener: 'input' with: [respondToChange].\r	counterfactualBarX:: document createElement: 'span'.\r	(counterfactualBarX at: 'style')\r		at: 'backgroundColor' put: controlBarColor asCSSString;\r		at: 'flex' put: 'none';\r		at: '-webkit-flex' put: 'none';\r		at: '-moz-flex' put: 'none'.\r	accept:: document createElement: 'img'.\r	accept at: 'src' put: (accept16px yourself at: 'src').\r	(accept at: 'style') at: 'margin' put: '3px'.\r	accept at: 'onclick' put: [respondToAccept].\r	cancel:: document createElement: 'img'.\r	cancel at: 'src' put: (cancel16px yourself at: 'src').\r	(cancel at: 'style') at: 'margin' put: '3px'.\r	cancel at: 'onclick' put: [respondToCancel].\r	counterfactualBarX appendChild: accept.\r	counterfactualBarX appendChild: cancel.\r	frame appendChild: editorX.\r	(* frame appendChild: counterfactualBarX. *)\r	^frame\r)"),
				new MM("defaultAcceptResponse", false, "public defaultAcceptResponse = (\r	textX:: textBeingAccepted.\r	leaveEditState\r)"),
				new MM("defaultCancelResponse", false, "defaultCancelResponse = (\r	setVisualText: textX.\r	leaveEditState\r)"),
				new MM("defaultChangeResponse", false, "defaultChangeResponse = (\r	enterEditState\r)"),
				new MM("enterEditState", false, "enterEditState = (\r	isInEditState ifFalse:\r		[visual appendChild: counterfactualBarX.\r		isInEditState:: true].\r	visual scrollIntoView: true (* alignWithTop *).\r)"),
				new MM("leaveEditState", false, "leaveEditState = (\r	isInEditState ifTrue:\r		[visualX removeChild: counterfactualBarX.\r		isInEditState:: false.\r		(*removeMessages*)]\r)"),
				new MM("respondToAccept", false, "respondToAccept = (\r	textBeingAccepted:: editorX at: 'textContent' (*withSqueakLineEndings*).\r	acceptResponse \r		ifNil: [defaultAcceptResponse]\r		ifNotNil: [acceptResponse cull: self]\r)"),
				new MM("respondToCancel", false, "respondToCancel = (\r	(*confirm: 'Confirm Cancel' ifConfirmed:\r		[*)cancelResponse \r			ifNil: [defaultCancelResponse]\r			ifNotNil: [cancelResponse cull: self](*]*)\r)"),
				new MM("respondToChange", false, "respondToChange = (\r	textBeingAccepted:: editorX at: 'textContent'.\r	changeResponse \r		ifNil: [defaultChangeResponse]\r		ifNotNil: [changeResponse cull: self]\r)"),
				new MM("setVisualText:", false, "setVisualText: aText = (\r	hasVisual ifTrue: [editorX at: 'textContent' put: aText]\r)"),
				new MM("text", false, "public text = (\r	^textX\r)"),
				new MM("text:", false, "public text: t = (\r	textX: t.\r	setVisualText: textX.\r)"),
				new MM("textX", true, null),
				new MM("textX:", true, null),
				new MM("counterfactualBarX", true, null),
				new MM("counterfactualBarX:", true, null),
				new MM("editorX", true, null),
				new MM("editorX:", true, null),
				new MM("textBeingAccepted", true, null),
				new MM("textBeingAccepted:", true, null),
				new MM("isInEditState", true, null),
				new MM("isInEditState:", true, null),
				new MM("changeResponse", true, null),
				new MM("changeResponse:", true, null),
				new MM("acceptResponse", true, null),
				new MM("acceptResponse:", true, null),
				new MM("cancelResponse", true, null),
				new MM("cancelResponse:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$TextEditorFragment = (function () {
				var self = this;
				self.$super$HopscotchForHTML5$TextEditorFragment$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$HopscotchForHTML5$TextEditorFragment();
				self._$textX$("");
				self._$isInEditState$(false);
				return self;
			});
			this.$controlBarColor = (function () {
				var self = this;
				return $0.$Color.call(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$r$g$b$((19/20), (99/125), (19/40));
			});
			this.$createVisual = (function () {
				var self = this;
				var $frame = nil;
				var $editorWrapper = nil;
				var $accept = nil;
				var $cancel = nil;
				$frame = $0.$document.call(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$createElement$("div");
				(function (cascadeReceiver) {
					cascadeReceiver.$at$put$("display", "-webkit-flex");
					return cascadeReceiver.$at$put$("display", "flex");
				})($frame.$at$("style"));
				self._$editorX$($0.$document.call(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$createElement$("div"));
				self._$editorX().$at$put$("contentEditable", "true");
				(function (cascadeReceiver) {
					cascadeReceiver.$at$put$("borderStyle", "solid");
					cascadeReceiver.$at$put$("borderWidth", "1px");
					cascadeReceiver.$at$put$("borderColor", "gray");
					cascadeReceiver.$setProperty$to$("background-color", "white");
					cascadeReceiver.$at$put$("flex", 1);
					cascadeReceiver.$at$put$("-webkit-flex", 1);
					cascadeReceiver.$at$put$("-moz-flex", 1);
					cascadeReceiver.$setProperty$to$("white-space", "pre-wrap");
					return cascadeReceiver.$at$put$("display", "block");
				})(self._$editorX().$at$("style"));
				self._$editorX().$at$put$("textContent", self._$textX());
				self._$editorX().$addEventListener$with$("input", (function () {
					return self._$respondToChange();
				}));
				self._$counterfactualBarX$($0.$document.call(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$createElement$("span"));
				(function (cascadeReceiver) {
					cascadeReceiver.$at$put$("backgroundColor", self._$controlBarColor().$asCSSString());
					cascadeReceiver.$at$put$("flex", "none");
					cascadeReceiver.$at$put$("-webkit-flex", "none");
					return cascadeReceiver.$at$put$("-moz-flex", "none");
				})(self._$counterfactualBarX().$at$("style"));
				$accept = $0.$document.call(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$createElement$("img");
				$accept.$at$put$("src", $0.$accept16px.call(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$yourself().$at$("src"));
				$accept.$at$("style").$at$put$("margin", "3px");
				$accept.$at$put$("onclick", (function () {
					return self._$respondToAccept();
				}));
				$cancel = $0.$document.call(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$createElement$("img");
				$cancel.$at$put$("src", $0.$cancel16px.call(self.$enclosingObjects$HopscotchForHTML5$TextEditorFragment[0]).$yourself().$at$("src"));
				$cancel.$at$("style").$at$put$("margin", "3px");
				$cancel.$at$put$("onclick", (function () {
					return self._$respondToCancel();
				}));
				self._$counterfactualBarX().$appendChild$($accept);
				self._$counterfactualBarX().$appendChild$($cancel);
				$frame.$appendChild$(self._$editorX());
				return $frame;
			});
			this.$defaultAcceptResponse = (function () {
				var self = this;
				self._$textX$(self._$textBeingAccepted());
				self._$leaveEditState();
				return self;
			});
			this.$defaultCancelResponse = (function () {
				var self = this;
				self._$setVisualText$(self._$textX());
				self._$leaveEditState();
				return self;
			});
			this.$defaultChangeResponse = (function () {
				var self = this;
				self._$enterEditState();
				return self;
			});
			this.$enterEditState = (function () {
				var self = this;
				if (!self._$isInEditState()) {
					self._$visual().$appendChild$(self._$counterfactualBarX());
					self._$isInEditState$(true);
				} else {
					nil;
				};
				self._$visual().$scrollIntoView$(true);
				return self;
			});
			this.$leaveEditState = (function () {
				var self = this;
				if (self._$isInEditState()) {
					self._$visualX().$removeChild$(self._$counterfactualBarX());
					self._$isInEditState$(false);
				} else {
					nil;
				};
				return self;
			});
			this.$respondToAccept = (function () {
				var self = this;
				self._$textBeingAccepted$(self._$editorX().$at$("textContent"));
				self._$acceptResponse().$ifNil$ifNotNil$((function () {
					return self._$defaultAcceptResponse();
				}), (function () {
					return self._$acceptResponse().$cull$(self);
				}));
				return self;
			});
			this.$respondToCancel = (function () {
				var self = this;
				self._$cancelResponse().$ifNil$ifNotNil$((function () {
					return self._$defaultCancelResponse();
				}), (function () {
					return self._$cancelResponse().$cull$(self);
				}));
				return self;
			});
			this.$respondToChange = (function () {
				var self = this;
				self._$textBeingAccepted$(self._$editorX().$at$("textContent"));
				self._$changeResponse().$ifNil$ifNotNil$((function () {
					return self._$defaultChangeResponse();
				}), (function () {
					return self._$changeResponse().$cull$(self);
				}));
				return self;
			});
			this.$setVisualText$ = (function ($aText) {
				var self = this;
				if (self._$hasVisual()) {
					self._$editorX().$at$put$("textContent", $aText);
				} else {
					nil;
				};
				return self;
			});
			this.$text = (function () {
				var self = this;
				return self._$textX();
			});
			this.$text$ = (function ($t) {
				var self = this;
				self._$textX$($t);
				self._$setVisualText$(self._$textX());
				return self;
			});
			this.$textX = (function () {
				return this.$textX$slot;
			});
			this.$textX$ = (function (v) {
				this.$textX$slot = v;
				return this;
			});
			this.$counterfactualBarX = (function () {
				return this.$counterfactualBarX$slot;
			});
			this.$counterfactualBarX$ = (function (v) {
				this.$counterfactualBarX$slot = v;
				return this;
			});
			this.$editorX = (function () {
				return this.$editorX$slot;
			});
			this.$editorX$ = (function (v) {
				this.$editorX$slot = v;
				return this;
			});
			this.$textBeingAccepted = (function () {
				return this.$textBeingAccepted$slot;
			});
			this.$textBeingAccepted$ = (function (v) {
				this.$textBeingAccepted$slot = v;
				return this;
			});
			this.$isInEditState = (function () {
				return this.$isInEditState$slot;
			});
			this.$isInEditState$ = (function (v) {
				this.$isInEditState$slot = v;
				return this;
			});
			this.$changeResponse = (function () {
				return this.$changeResponse$slot;
			});
			this.$changeResponse$ = (function (v) {
				this.$changeResponse$slot = v;
				return this;
			});
			this.$acceptResponse = (function () {
				return this.$acceptResponse$slot;
			});
			this.$acceptResponse$ = (function (v) {
				this.$acceptResponse$slot = v;
				return this;
			});
			this.$cancelResponse = (function () {
				return this.$cancelResponse$slot;
			});
			this.$cancelResponse$ = (function (v) {
				this.$cancelResponse$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`TextEditorFragment";
					this._$superInit$HopscotchForHTML5$TextEditorFragment = $.$superInit$HopscotchForHTML5$TextEditorFragment;
					this.$superInit$HopscotchForHTML5$TextEditorFragment = dnuCatcher("$superInit$HopscotchForHTML5$TextEditorFragment");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$controlBarColor = $.$controlBarColor;
					this.$controlBarColor = dnuCatcher("$controlBarColor");
					this._$createVisual = $.$createVisual;
					this.$createVisual = dnuCatcher("$createVisual");
					this.$defaultAcceptResponse = this._$defaultAcceptResponse = $.$defaultAcceptResponse;
					this._$defaultCancelResponse = $.$defaultCancelResponse;
					this.$defaultCancelResponse = dnuCatcher("$defaultCancelResponse");
					this._$defaultChangeResponse = $.$defaultChangeResponse;
					this.$defaultChangeResponse = dnuCatcher("$defaultChangeResponse");
					this._$enterEditState = $.$enterEditState;
					this.$enterEditState = dnuCatcher("$enterEditState");
					this._$leaveEditState = $.$leaveEditState;
					this.$leaveEditState = dnuCatcher("$leaveEditState");
					this._$respondToAccept = $.$respondToAccept;
					this.$respondToAccept = dnuCatcher("$respondToAccept");
					this._$respondToCancel = $.$respondToCancel;
					this.$respondToCancel = dnuCatcher("$respondToCancel");
					this._$respondToChange = $.$respondToChange;
					this.$respondToChange = dnuCatcher("$respondToChange");
					this._$setVisualText$ = $.$setVisualText$;
					this.$setVisualText$ = dnuCatcher("$setVisualText$");
					this.$text = this._$text = $.$text;
					this.$text$ = this._$text$ = $.$text$;
					this._$textX = $.$textX;
					this.$textX = dnuCatcher("$textX");
					this._$textX$ = $.$textX$;
					this.$textX$ = dnuCatcher("$textX$");
					this._$counterfactualBarX = $.$counterfactualBarX;
					this.$counterfactualBarX = dnuCatcher("$counterfactualBarX");
					this._$counterfactualBarX$ = $.$counterfactualBarX$;
					this.$counterfactualBarX$ = dnuCatcher("$counterfactualBarX$");
					this._$editorX = $.$editorX;
					this.$editorX = dnuCatcher("$editorX");
					this._$editorX$ = $.$editorX$;
					this.$editorX$ = dnuCatcher("$editorX$");
					this.$textBeingAccepted = this._$textBeingAccepted = $.$textBeingAccepted;
					this.$textBeingAccepted$ = this._$textBeingAccepted$ = $.$textBeingAccepted$;
					this._$isInEditState = $.$isInEditState;
					this.$isInEditState = dnuCatcher("$isInEditState");
					this._$isInEditState$ = $.$isInEditState$;
					this.$isInEditState$ = dnuCatcher("$isInEditState$");
					this.$changeResponse = this._$changeResponse = $.$changeResponse;
					this.$changeResponse$ = this._$changeResponse$ = $.$changeResponse$;
					this.$acceptResponse = this._$acceptResponse = $.$acceptResponse;
					this.$acceptResponse$ = this._$acceptResponse$ = $.$acceptResponse$;
					this.$cancelResponse = this._$cancelResponse = $.$cancelResponse;
					this.$cancelResponse$ = this._$cancelResponse$ = $.$cancelResponse$;
					this.$enclosingObjects$HopscotchForHTML5$TextEditorFragment = enclosingObjects;
					this.$super$HopscotchForHTML5$TextEditorFragment$slot = runtimeSuperclass;
					this["HopscotchForHTML5`TextEditorFragment"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$textX$slot = nil;
						this.$counterfactualBarX$slot = nil;
						this.$editorX$slot = nil;
						this.$textBeingAccepted$slot = nil;
						this.$isInEditState$slot = nil;
						this.$changeResponse$slot = nil;
						this.$acceptResponse$slot = nil;
						this.$cancelResponse$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`TextEditorFragment"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`TextEditorFragment";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`TextEditorFragment";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$HopscotchForHTML5$TextEditorFragment = enclosingObjects;
						this.$super$HopscotchForHTML5$TextEditorFragment = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$ToggleComposer = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for HopscotchForHTML5`ToggleComposer";
			this.name = "HopscotchForHTML5`ToggleComposer";
			this.header = "ToggleComposer collapsedDefinition: collapsed\r expandedDefinition: expanded\r initiallyExpanded: flag = Composer (|\rexpandedDefinition = expanded.\rcollapsedDefinition = collapsed.\risExpanded ::= flag.\rexpandedPresenter\rcollapsedPresenter\rcontentHolder\rtoggleWidget\r|)";
			this.slots = [
				new SM("expandedDefinition", false, false),
				new SM("collapsedDefinition", false, false),
				new SM("isExpanded", true, false),
				new SM("expandedPresenter", true, false),
				new SM("collapsedPresenter", true, false),
				new SM("contentHolder", true, false),
				new SM("toggleWidget", true, false)
			];
			this.methods = [
				new MM("superInit`HopscotchForHTML5`ToggleComposer", true, "Composer"),
				new MM("instance`initializer", true, "Composer"),
				new MM("collapse", false, "public collapse = (\r	installCollapsedPresenter\r)"),
				new MM("createVisual", false, "createVisual = (\r	| toggleDiv div |\r	contentHolder:: document createElement: 'div'.\r	\r	toggleDiv:: document createElement: 'div'.\r	toggleWidget:: document createElement: 'img'.\r	toggleWidget at: 'onclick' put: [userToggle].\r	toggleDiv appendChild: toggleWidget.\r	\r	(contentHolder at: 'style') \r		at: '-webkit-flex-grow' put: 1;\r		setProperty: 'flex-grow' to: 1;\r		at: '-webkit-flex-shrink' put: 1;\r		setProperty: 'flex-shrink' to: 1.\r	(toggleDiv at: 'style') \r		at: '-webkit-flex-grow' put: 0;\r		setProperty: 'flex-grow' to: 0;\r		at: '-webkit-flex-shrink' put: 0;\r		setProperty: 'flex-shrink' to: 0;\r		at: 'paddingTop' put: '2px';\r		at: 'paddingRight' put: '3px'.\r	toggleWidget at: 'align' put: 'top'.\r	\r	isExpanded\r		ifTrue: [installExpandedPresenter]\r		ifFalse: [installCollapsedPresenter].\r		\r	div:: document createElement: 'div'.\r	(div at: 'style')\r		at: 'display' put: '-webkit-flex';\r		at: 'display' put: 'flex';\r		at: '-webkit-flex-direction' put: 'row';\r		setProperty: 'flex-direction' to: 'row'.\r	div appendChild: toggleDiv.\r	div appendChild: contentHolder.\r	^div\r)"),
				new MM("expand", false, "public expand = (\r	installExpandedPresenter\r)"),
				new MM("installCollapsedPresenter", false, "installCollapsedPresenter = (\r	collapsedPresenter isNil ifTrue: \r		[collapsedPresenter:: collapsedDefinition value.\r		collapsedPresenter parent: self].\r	installContentVisual: collapsedPresenter visual.\r	toggleWidget at: 'src' put: (disclosureClosedImage at: 'src').\r)"),
				new MM("installContentVisual:", false, "installContentVisual: newVisual = (\r	contentHolder hasChildNodes\r		ifTrue:\r			[ | oldVisual = contentHolder at: 'firstChild'. |\r			contentHolder replaceChild: newVisual with: oldVisual]\r		ifFalse: [contentHolder appendChild: newVisual].\r)"),
				new MM("installExpandedPresenter", false, "installExpandedPresenter = (\r	expandedPresenter isNil ifTrue:\r		[expandedPresenter:: expandedDefinition value.\r		expandedPresenter parent: self].\r	installContentVisual: expandedPresenter visual.\r	toggleWidget at: 'src' put: (disclosureOpenImage at: 'src').\r)"),
				new MM("userToggle", false, "userToggle = (\r	isExpanded:: isExpanded not.\r	isExpanded\r		ifTrue: [installExpandedPresenter]\r		ifFalse: [installCollapsedPresenter].\r)"),
				new MM("expandedDefinition", true, null),
				new MM("setOnce`expandedDefinition:", true, null),
				new MM("collapsedDefinition", true, null),
				new MM("setOnce`collapsedDefinition:", true, null),
				new MM("isExpanded", true, null),
				new MM("isExpanded:", true, null),
				new MM("expandedPresenter", true, null),
				new MM("expandedPresenter:", true, null),
				new MM("collapsedPresenter", true, null),
				new MM("collapsedPresenter:", true, null),
				new MM("contentHolder", true, null),
				new MM("contentHolder:", true, null),
				new MM("toggleWidget", true, null),
				new MM("toggleWidget:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$HopscotchForHTML5$ToggleComposer = (function ($collapsed, $expanded, $flag) {
				var self = this;
				self.$super$HopscotchForHTML5$ToggleComposer$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($collapsed, $expanded, $flag) {
				var self = this;
				self._$superInit$HopscotchForHTML5$ToggleComposer($collapsed, $expanded, $flag);
				self._$setOnce$expandedDefinition$($expanded);
				self._$setOnce$collapsedDefinition$($collapsed);
				self._$isExpanded$($flag);
				return self;
			});
			this.$collapse = (function () {
				var self = this;
				self._$installCollapsedPresenter();
				return self;
			});
			this.$createVisual = (function () {
				var self = this;
				var $toggleDiv = nil;
				var $div = nil;
				self._$contentHolder$($0.$document.call(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$createElement$("div"));
				$toggleDiv = $0.$document.call(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$createElement$("div");
				self._$toggleWidget$($0.$document.call(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$createElement$("img"));
				self._$toggleWidget().$at$put$("onclick", (function () {
					return self._$userToggle();
				}));
				$toggleDiv.$appendChild$(self._$toggleWidget());
				(function (cascadeReceiver) {
					cascadeReceiver.$at$put$("-webkit-flex-grow", 1);
					cascadeReceiver.$setProperty$to$("flex-grow", 1);
					cascadeReceiver.$at$put$("-webkit-flex-shrink", 1);
					return cascadeReceiver.$setProperty$to$("flex-shrink", 1);
				})(self._$contentHolder().$at$("style"));
				(function (cascadeReceiver) {
					cascadeReceiver.$at$put$("-webkit-flex-grow", 0);
					cascadeReceiver.$setProperty$to$("flex-grow", 0);
					cascadeReceiver.$at$put$("-webkit-flex-shrink", 0);
					cascadeReceiver.$setProperty$to$("flex-shrink", 0);
					cascadeReceiver.$at$put$("paddingTop", "2px");
					return cascadeReceiver.$at$put$("paddingRight", "3px");
				})($toggleDiv.$at$("style"));
				self._$toggleWidget().$at$put$("align", "top");
				if (self._$isExpanded()) {
					self._$installExpandedPresenter();
				} else {
					self._$installCollapsedPresenter();
				};
				$div = $0.$document.call(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$createElement$("div");
				(function (cascadeReceiver) {
					cascadeReceiver.$at$put$("display", "-webkit-flex");
					cascadeReceiver.$at$put$("display", "flex");
					cascadeReceiver.$at$put$("-webkit-flex-direction", "row");
					return cascadeReceiver.$setProperty$to$("flex-direction", "row");
				})($div.$at$("style"));
				$div.$appendChild$($toggleDiv);
				$div.$appendChild$(self._$contentHolder());
				return $div;
			});
			this.$expand = (function () {
				var self = this;
				self._$installExpandedPresenter();
				return self;
			});
			this.$installCollapsedPresenter = (function () {
				var self = this;
				if (self._$collapsedPresenter().$isNil()) {
					self._$collapsedPresenter$(self._$collapsedDefinition().$value());
					self._$collapsedPresenter().$parent$(self);
				} else {
					nil;
				};
				self._$installContentVisual$(self._$collapsedPresenter().$visual());
				self._$toggleWidget().$at$put$("src", $0.$disclosureClosedImage.call(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$at$("src"));
				return self;
			});
			this.$installContentVisual$ = (function ($newVisual) {
				var self = this;
				if (self._$contentHolder().$hasChildNodes()) {
					var $oldVisual = nil;
					$oldVisual = self._$contentHolder().$at$("firstChild");
					self._$contentHolder().$replaceChild$with$($newVisual, $oldVisual);
				} else {
					self._$contentHolder().$appendChild$($newVisual);
				};
				return self;
			});
			this.$installExpandedPresenter = (function () {
				var self = this;
				if (self._$expandedPresenter().$isNil()) {
					self._$expandedPresenter$(self._$expandedDefinition().$value());
					self._$expandedPresenter().$parent$(self);
				} else {
					nil;
				};
				self._$installContentVisual$(self._$expandedPresenter().$visual());
				self._$toggleWidget().$at$put$("src", $0.$disclosureOpenImage.call(self.$enclosingObjects$HopscotchForHTML5$ToggleComposer[0]).$at$("src"));
				return self;
			});
			this.$userToggle = (function () {
				var self = this;
				self._$isExpanded$(self._$isExpanded().$not());
				if (self._$isExpanded()) {
					self._$installExpandedPresenter();
				} else {
					self._$installCollapsedPresenter();
				};
				return self;
			});
			this.$expandedDefinition = (function () {
				return this.$expandedDefinition$slot;
			});
			this.$setOnce$expandedDefinition$ = (function (v) {
				this.$expandedDefinition$slot = v;
				return this;
			});
			this.$collapsedDefinition = (function () {
				return this.$collapsedDefinition$slot;
			});
			this.$setOnce$collapsedDefinition$ = (function (v) {
				this.$collapsedDefinition$slot = v;
				return this;
			});
			this.$isExpanded = (function () {
				return this.$isExpanded$slot;
			});
			this.$isExpanded$ = (function (v) {
				this.$isExpanded$slot = v;
				return this;
			});
			this.$expandedPresenter = (function () {
				return this.$expandedPresenter$slot;
			});
			this.$expandedPresenter$ = (function (v) {
				this.$expandedPresenter$slot = v;
				return this;
			});
			this.$collapsedPresenter = (function () {
				return this.$collapsedPresenter$slot;
			});
			this.$collapsedPresenter$ = (function (v) {
				this.$collapsedPresenter$slot = v;
				return this;
			});
			this.$contentHolder = (function () {
				return this.$contentHolder$slot;
			});
			this.$contentHolder$ = (function (v) {
				this.$contentHolder$slot = v;
				return this;
			});
			this.$toggleWidget = (function () {
				return this.$toggleWidget$slot;
			});
			this.$toggleWidget$ = (function (v) {
				this.$toggleWidget$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for HopscotchForHTML5`ToggleComposer";
					this._$superInit$HopscotchForHTML5$ToggleComposer = $.$superInit$HopscotchForHTML5$ToggleComposer;
					this.$superInit$HopscotchForHTML5$ToggleComposer = dnuCatcher("$superInit$HopscotchForHTML5$ToggleComposer");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$collapse = this._$collapse = $.$collapse;
					this._$createVisual = $.$createVisual;
					this.$createVisual = dnuCatcher("$createVisual");
					this.$expand = this._$expand = $.$expand;
					this._$installCollapsedPresenter = $.$installCollapsedPresenter;
					this.$installCollapsedPresenter = dnuCatcher("$installCollapsedPresenter");
					this._$installContentVisual$ = $.$installContentVisual$;
					this.$installContentVisual$ = dnuCatcher("$installContentVisual$");
					this._$installExpandedPresenter = $.$installExpandedPresenter;
					this.$installExpandedPresenter = dnuCatcher("$installExpandedPresenter");
					this._$userToggle = $.$userToggle;
					this.$userToggle = dnuCatcher("$userToggle");
					this._$expandedDefinition = $.$expandedDefinition;
					this.$expandedDefinition = dnuCatcher("$expandedDefinition");
					this._$setOnce$expandedDefinition$ = $.$setOnce$expandedDefinition$;
					this.$setOnce$expandedDefinition$ = dnuCatcher("$setOnce$expandedDefinition$");
					this._$collapsedDefinition = $.$collapsedDefinition;
					this.$collapsedDefinition = dnuCatcher("$collapsedDefinition");
					this._$setOnce$collapsedDefinition$ = $.$setOnce$collapsedDefinition$;
					this.$setOnce$collapsedDefinition$ = dnuCatcher("$setOnce$collapsedDefinition$");
					this._$isExpanded = $.$isExpanded;
					this.$isExpanded = dnuCatcher("$isExpanded");
					this._$isExpanded$ = $.$isExpanded$;
					this.$isExpanded$ = dnuCatcher("$isExpanded$");
					this._$expandedPresenter = $.$expandedPresenter;
					this.$expandedPresenter = dnuCatcher("$expandedPresenter");
					this._$expandedPresenter$ = $.$expandedPresenter$;
					this.$expandedPresenter$ = dnuCatcher("$expandedPresenter$");
					this._$collapsedPresenter = $.$collapsedPresenter;
					this.$collapsedPresenter = dnuCatcher("$collapsedPresenter");
					this._$collapsedPresenter$ = $.$collapsedPresenter$;
					this.$collapsedPresenter$ = dnuCatcher("$collapsedPresenter$");
					this._$contentHolder = $.$contentHolder;
					this.$contentHolder = dnuCatcher("$contentHolder");
					this._$contentHolder$ = $.$contentHolder$;
					this.$contentHolder$ = dnuCatcher("$contentHolder$");
					this._$toggleWidget = $.$toggleWidget;
					this.$toggleWidget = dnuCatcher("$toggleWidget");
					this._$toggleWidget$ = $.$toggleWidget$;
					this.$toggleWidget$ = dnuCatcher("$toggleWidget$");
					this.$enclosingObjects$HopscotchForHTML5$ToggleComposer = enclosingObjects;
					this.$super$HopscotchForHTML5$ToggleComposer$slot = runtimeSuperclass;
					this["HopscotchForHTML5`ToggleComposer"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$expandedDefinition$slot = nil;
						this.$collapsedDefinition$slot = nil;
						this.$isExpanded$slot = nil;
						this.$expandedPresenter$slot = nil;
						this.$collapsedPresenter$slot = nil;
						this.$contentHolder$slot = nil;
						this.$toggleWidget$slot = nil;
					});
					this.basicNew = this["HopscotchForHTML5`ToggleComposer"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for HopscotchForHTML5`ToggleComposer";
				this.slots = [];
				this.methods = [new MM("collapsedDefinition:expandedDefinition:initiallyExpanded:", true, null)];
				this.nestedClasses = [];
				this.$collapsedDefinition$expandedDefinition$initiallyExpanded$ = (function ($collapsed, $expanded, $flag) {
					return (new this.nonMeta.basicNew()).$instance$initializer($collapsed, $expanded, $flag);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for HopscotchForHTML5`ToggleComposer";
						this.$collapsedDefinition$expandedDefinition$initiallyExpanded$ = this._$collapsedDefinition$expandedDefinition$initiallyExpanded$ = $.$collapsedDefinition$expandedDefinition$initiallyExpanded$;
						this.$enclosingObjects$HopscotchForHTML5$ToggleComposer = enclosingObjects;
						this.$super$HopscotchForHTML5$ToggleComposer = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$HopscotchForHTML5$BlankFragment.enclosingMixin = this;
		this.$HopscotchForHTML5$ButtonFragment.enclosingMixin = this;
		this.$HopscotchForHTML5$CanvasFragment.enclosingMixin = this;
		this.$HopscotchForHTML5$ColumnComposer.enclosingMixin = this;
		this.$HopscotchForHTML5$Composer.enclosingMixin = this;
		this.$HopscotchForHTML5$DeferredContentComposer.enclosingMixin = this;
		this.$HopscotchForHTML5$Fragment.enclosingMixin = this;
		this.$HopscotchForHTML5$Gradient.enclosingMixin = this;
		this.$HopscotchForHTML5$HolderComposer.enclosingMixin = this;
		this.$HopscotchForHTML5$HopscotchShell.enclosingMixin = this;
		this.$HopscotchForHTML5$HopscotchWindow.enclosingMixin = this;
		this.$HopscotchForHTML5$HyperlinkFragment.enclosingMixin = this;
		this.$HopscotchForHTML5$LeafFragment.enclosingMixin = this;
		this.$HopscotchForHTML5$NavigationHistory.enclosingMixin = this;
		this.$HopscotchForHTML5$PaddedFrameComposer.enclosingMixin = this;
		this.$HopscotchForHTML5$Presenter.enclosingMixin = this;
		this.$HopscotchForHTML5$RowComposer.enclosingMixin = this;
		this.$HopscotchForHTML5$SequenceComposer.enclosingMixin = this;
		this.$HopscotchForHTML5$StaticImageFragment.enclosingMixin = this;
		this.$HopscotchForHTML5$StaticLabelFragment.enclosingMixin = this;
		this.$HopscotchForHTML5$Subject.enclosingMixin = this;
		this.$HopscotchForHTML5$TextDisplayFragment.enclosingMixin = this;
		this.$HopscotchForHTML5$TextEditorFragment.enclosingMixin = this;
		this.$HopscotchForHTML5$ToggleComposer.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for HopscotchForHTML5";
				this._$superInit$HopscotchForHTML5 = $.$superInit$HopscotchForHTML5;
				this.$superInit$HopscotchForHTML5 = dnuCatcher("$superInit$HopscotchForHTML5");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this._$deferAction$ = $.$deferAction$;
				this.$deferAction$ = dnuCatcher("$deferAction$");
				this._$nextDeferredAction = $.$nextDeferredAction;
				this.$nextDeferredAction = dnuCatcher("$nextDeferredAction");
				this._$nextFrameDo$ = $.$nextFrameDo$;
				this.$nextFrameDo$ = dnuCatcher("$nextFrameDo$");
				this._$BlankFragment = $.$BlankFragment;
				this.$BlankFragment = dnuCatcher("$BlankFragment");
				this._$ButtonFragment = $.$ButtonFragment;
				this.$ButtonFragment = dnuCatcher("$ButtonFragment");
				this._$CanvasFragment = $.$CanvasFragment;
				this.$CanvasFragment = dnuCatcher("$CanvasFragment");
				this._$ColumnComposer = $.$ColumnComposer;
				this.$ColumnComposer = dnuCatcher("$ColumnComposer");
				this._$Composer = $.$Composer;
				this.$Composer = dnuCatcher("$Composer");
				this._$DeferredContentComposer = $.$DeferredContentComposer;
				this.$DeferredContentComposer = dnuCatcher("$DeferredContentComposer");
				this._$Fragment = $.$Fragment;
				this.$Fragment = dnuCatcher("$Fragment");
				this.$Gradient = this._$Gradient = $.$Gradient;
				this._$HolderComposer = $.$HolderComposer;
				this.$HolderComposer = dnuCatcher("$HolderComposer");
				this._$HopscotchShell = $.$HopscotchShell;
				this.$HopscotchShell = dnuCatcher("$HopscotchShell");
				this.$HopscotchWindow = this._$HopscotchWindow = $.$HopscotchWindow;
				this._$HyperlinkFragment = $.$HyperlinkFragment;
				this.$HyperlinkFragment = dnuCatcher("$HyperlinkFragment");
				this._$LeafFragment = $.$LeafFragment;
				this.$LeafFragment = dnuCatcher("$LeafFragment");
				this._$NavigationHistory = $.$NavigationHistory;
				this.$NavigationHistory = dnuCatcher("$NavigationHistory");
				this._$PaddedFrameComposer = $.$PaddedFrameComposer;
				this.$PaddedFrameComposer = dnuCatcher("$PaddedFrameComposer");
				this.$Presenter = this._$Presenter = $.$Presenter;
				this._$RowComposer = $.$RowComposer;
				this.$RowComposer = dnuCatcher("$RowComposer");
				this._$SequenceComposer = $.$SequenceComposer;
				this.$SequenceComposer = dnuCatcher("$SequenceComposer");
				this._$StaticImageFragment = $.$StaticImageFragment;
				this.$StaticImageFragment = dnuCatcher("$StaticImageFragment");
				this._$StaticLabelFragment = $.$StaticLabelFragment;
				this.$StaticLabelFragment = dnuCatcher("$StaticLabelFragment");
				this.$Subject = this._$Subject = $.$Subject;
				this._$TextDisplayFragment = $.$TextDisplayFragment;
				this.$TextDisplayFragment = dnuCatcher("$TextDisplayFragment");
				this.$TextEditorFragment = this._$TextEditorFragment = $.$TextEditorFragment;
				this._$ToggleComposer = $.$ToggleComposer;
				this.$ToggleComposer = dnuCatcher("$ToggleComposer");
				this.$core = this._$core = $.$core;
				this.$setOnce$core$ = this._$setOnce$core$ = $.$setOnce$core$;
				this.$fragments = this._$fragments = $.$fragments;
				this.$setOnce$fragments$ = this._$setOnce$fragments$ = $.$setOnce$fragments$;
				this.$HopscotchForHTML5$BlankFragment = this._$HopscotchForHTML5$BlankFragment = $.$HopscotchForHTML5$BlankFragment;
				this.$HopscotchForHTML5$BlankFragment$ = this._$HopscotchForHTML5$BlankFragment$ = $.$HopscotchForHTML5$BlankFragment$;
				this.$HopscotchForHTML5$ButtonFragment = this._$HopscotchForHTML5$ButtonFragment = $.$HopscotchForHTML5$ButtonFragment;
				this.$HopscotchForHTML5$ButtonFragment$ = this._$HopscotchForHTML5$ButtonFragment$ = $.$HopscotchForHTML5$ButtonFragment$;
				this.$HopscotchForHTML5$CanvasFragment = this._$HopscotchForHTML5$CanvasFragment = $.$HopscotchForHTML5$CanvasFragment;
				this.$HopscotchForHTML5$CanvasFragment$ = this._$HopscotchForHTML5$CanvasFragment$ = $.$HopscotchForHTML5$CanvasFragment$;
				this.$HopscotchForHTML5$ColumnComposer = this._$HopscotchForHTML5$ColumnComposer = $.$HopscotchForHTML5$ColumnComposer;
				this.$HopscotchForHTML5$ColumnComposer$ = this._$HopscotchForHTML5$ColumnComposer$ = $.$HopscotchForHTML5$ColumnComposer$;
				this.$HopscotchForHTML5$Composer = this._$HopscotchForHTML5$Composer = $.$HopscotchForHTML5$Composer;
				this.$HopscotchForHTML5$Composer$ = this._$HopscotchForHTML5$Composer$ = $.$HopscotchForHTML5$Composer$;
				this.$HopscotchForHTML5$DeferredContentComposer = this._$HopscotchForHTML5$DeferredContentComposer = $.$HopscotchForHTML5$DeferredContentComposer;
				this.$HopscotchForHTML5$DeferredContentComposer$ = this._$HopscotchForHTML5$DeferredContentComposer$ = $.$HopscotchForHTML5$DeferredContentComposer$;
				this.$HopscotchForHTML5$Fragment = this._$HopscotchForHTML5$Fragment = $.$HopscotchForHTML5$Fragment;
				this.$HopscotchForHTML5$Fragment$ = this._$HopscotchForHTML5$Fragment$ = $.$HopscotchForHTML5$Fragment$;
				this.$HopscotchForHTML5$Gradient = this._$HopscotchForHTML5$Gradient = $.$HopscotchForHTML5$Gradient;
				this.$HopscotchForHTML5$Gradient$ = this._$HopscotchForHTML5$Gradient$ = $.$HopscotchForHTML5$Gradient$;
				this.$HopscotchForHTML5$HolderComposer = this._$HopscotchForHTML5$HolderComposer = $.$HopscotchForHTML5$HolderComposer;
				this.$HopscotchForHTML5$HolderComposer$ = this._$HopscotchForHTML5$HolderComposer$ = $.$HopscotchForHTML5$HolderComposer$;
				this.$HopscotchForHTML5$HopscotchShell = this._$HopscotchForHTML5$HopscotchShell = $.$HopscotchForHTML5$HopscotchShell;
				this.$HopscotchForHTML5$HopscotchShell$ = this._$HopscotchForHTML5$HopscotchShell$ = $.$HopscotchForHTML5$HopscotchShell$;
				this.$HopscotchForHTML5$HopscotchWindow = this._$HopscotchForHTML5$HopscotchWindow = $.$HopscotchForHTML5$HopscotchWindow;
				this.$HopscotchForHTML5$HopscotchWindow$ = this._$HopscotchForHTML5$HopscotchWindow$ = $.$HopscotchForHTML5$HopscotchWindow$;
				this.$HopscotchForHTML5$HyperlinkFragment = this._$HopscotchForHTML5$HyperlinkFragment = $.$HopscotchForHTML5$HyperlinkFragment;
				this.$HopscotchForHTML5$HyperlinkFragment$ = this._$HopscotchForHTML5$HyperlinkFragment$ = $.$HopscotchForHTML5$HyperlinkFragment$;
				this.$HopscotchForHTML5$LeafFragment = this._$HopscotchForHTML5$LeafFragment = $.$HopscotchForHTML5$LeafFragment;
				this.$HopscotchForHTML5$LeafFragment$ = this._$HopscotchForHTML5$LeafFragment$ = $.$HopscotchForHTML5$LeafFragment$;
				this.$HopscotchForHTML5$NavigationHistory = this._$HopscotchForHTML5$NavigationHistory = $.$HopscotchForHTML5$NavigationHistory;
				this.$HopscotchForHTML5$NavigationHistory$ = this._$HopscotchForHTML5$NavigationHistory$ = $.$HopscotchForHTML5$NavigationHistory$;
				this.$HopscotchForHTML5$PaddedFrameComposer = this._$HopscotchForHTML5$PaddedFrameComposer = $.$HopscotchForHTML5$PaddedFrameComposer;
				this.$HopscotchForHTML5$PaddedFrameComposer$ = this._$HopscotchForHTML5$PaddedFrameComposer$ = $.$HopscotchForHTML5$PaddedFrameComposer$;
				this.$HopscotchForHTML5$Presenter = this._$HopscotchForHTML5$Presenter = $.$HopscotchForHTML5$Presenter;
				this.$HopscotchForHTML5$Presenter$ = this._$HopscotchForHTML5$Presenter$ = $.$HopscotchForHTML5$Presenter$;
				this.$HopscotchForHTML5$RowComposer = this._$HopscotchForHTML5$RowComposer = $.$HopscotchForHTML5$RowComposer;
				this.$HopscotchForHTML5$RowComposer$ = this._$HopscotchForHTML5$RowComposer$ = $.$HopscotchForHTML5$RowComposer$;
				this.$HopscotchForHTML5$SequenceComposer = this._$HopscotchForHTML5$SequenceComposer = $.$HopscotchForHTML5$SequenceComposer;
				this.$HopscotchForHTML5$SequenceComposer$ = this._$HopscotchForHTML5$SequenceComposer$ = $.$HopscotchForHTML5$SequenceComposer$;
				this.$HopscotchForHTML5$StaticImageFragment = this._$HopscotchForHTML5$StaticImageFragment = $.$HopscotchForHTML5$StaticImageFragment;
				this.$HopscotchForHTML5$StaticImageFragment$ = this._$HopscotchForHTML5$StaticImageFragment$ = $.$HopscotchForHTML5$StaticImageFragment$;
				this.$HopscotchForHTML5$StaticLabelFragment = this._$HopscotchForHTML5$StaticLabelFragment = $.$HopscotchForHTML5$StaticLabelFragment;
				this.$HopscotchForHTML5$StaticLabelFragment$ = this._$HopscotchForHTML5$StaticLabelFragment$ = $.$HopscotchForHTML5$StaticLabelFragment$;
				this.$HopscotchForHTML5$Subject = this._$HopscotchForHTML5$Subject = $.$HopscotchForHTML5$Subject;
				this.$HopscotchForHTML5$Subject$ = this._$HopscotchForHTML5$Subject$ = $.$HopscotchForHTML5$Subject$;
				this.$HopscotchForHTML5$TextDisplayFragment = this._$HopscotchForHTML5$TextDisplayFragment = $.$HopscotchForHTML5$TextDisplayFragment;
				this.$HopscotchForHTML5$TextDisplayFragment$ = this._$HopscotchForHTML5$TextDisplayFragment$ = $.$HopscotchForHTML5$TextDisplayFragment$;
				this.$HopscotchForHTML5$TextEditorFragment = this._$HopscotchForHTML5$TextEditorFragment = $.$HopscotchForHTML5$TextEditorFragment;
				this.$HopscotchForHTML5$TextEditorFragment$ = this._$HopscotchForHTML5$TextEditorFragment$ = $.$HopscotchForHTML5$TextEditorFragment$;
				this.$HopscotchForHTML5$ToggleComposer = this._$HopscotchForHTML5$ToggleComposer = $.$HopscotchForHTML5$ToggleComposer;
				this.$HopscotchForHTML5$ToggleComposer$ = this._$HopscotchForHTML5$ToggleComposer$ = $.$HopscotchForHTML5$ToggleComposer$;
				this.$enclosingObjects$HopscotchForHTML5 = enclosingObjects;
				this.$super$HopscotchForHTML5$slot = runtimeSuperclass;
				this.HopscotchForHTML5 = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$Color$slot = nil;
					this.$Context$slot = nil;
					this.$Timer$slot = nil;
					this.$List$slot = nil;
					this.$Map$slot = nil;
					this.$window$slot = nil;
					this.$document$slot = nil;
					this.$body$slot = nil;
					this.$history$slot = nil;
					this.$accept16px$slot = nil;
					this.$cancel16px$slot = nil;
					this.$disclosureClosedImage$slot = nil;
					this.$disclosureTransitionImage$slot = nil;
					this.$disclosureOpenImage$slot = nil;
					this.$deferredContentQueue$slot = nil;
					this.$core$slot = nil;
					this.$fragments$slot = nil;
					this.$HopscotchForHTML5$BlankFragment$slot = nil;
					this.$HopscotchForHTML5$ButtonFragment$slot = nil;
					this.$HopscotchForHTML5$CanvasFragment$slot = nil;
					this.$HopscotchForHTML5$ColumnComposer$slot = nil;
					this.$HopscotchForHTML5$Composer$slot = nil;
					this.$HopscotchForHTML5$DeferredContentComposer$slot = nil;
					this.$HopscotchForHTML5$Fragment$slot = nil;
					this.$HopscotchForHTML5$Gradient$slot = nil;
					this.$HopscotchForHTML5$HolderComposer$slot = nil;
					this.$HopscotchForHTML5$HopscotchShell$slot = nil;
					this.$HopscotchForHTML5$HopscotchWindow$slot = nil;
					this.$HopscotchForHTML5$HyperlinkFragment$slot = nil;
					this.$HopscotchForHTML5$LeafFragment$slot = nil;
					this.$HopscotchForHTML5$NavigationHistory$slot = nil;
					this.$HopscotchForHTML5$PaddedFrameComposer$slot = nil;
					this.$HopscotchForHTML5$Presenter$slot = nil;
					this.$HopscotchForHTML5$RowComposer$slot = nil;
					this.$HopscotchForHTML5$SequenceComposer$slot = nil;
					this.$HopscotchForHTML5$StaticImageFragment$slot = nil;
					this.$HopscotchForHTML5$StaticLabelFragment$slot = nil;
					this.$HopscotchForHTML5$Subject$slot = nil;
					this.$HopscotchForHTML5$TextDisplayFragment$slot = nil;
					this.$HopscotchForHTML5$TextEditorFragment$slot = nil;
					this.$HopscotchForHTML5$ToggleComposer$slot = nil;
				});
				this.basicNew = this.HopscotchForHTML5;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for HopscotchForHTML5";
			this.slots = [];
			this.methods = [new MM("usingPlatform:", true, null)];
			this.nestedClasses = [];
			this.$usingPlatform$ = (function ($p) {
				return (new this.nonMeta.basicNew()).$instance$initializer($p);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for HopscotchForHTML5";
					this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
					this.$enclosingObjects$HopscotchForHTML5 = enclosingObjects;
					this.$super$HopscotchForHTML5 = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$MirrorsForV8 = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for MirrorsForV8";
		this.name = "MirrorsForV8";
		this.header = "MirrorsForV8 usingPlatform: p vmMirror: vmm = (|\rprivate List = p collections OrderedCollection.\rprivate Mixin = p kernel Mixin.\rprivate CharacterReadStream = p streams CharacterReadStream.\rprivate CharacterWriteStream = p streams CharacterReadWriteStream.\rprivate ImmutableMirrorGroup = (p namespace MirrorGroups usingLib: p) ImmutableMirrorGroup.\rprivate vmmirror = vmm.\r\rprivate parserLib = Future computing: [p namespace CombinatorialParsing usingPlatform: p].\rprivate grammar = Future computing: [p namespace NewspeakGrammar usingPlatform: p parsers: parserLib].\rprivate asts = Future computing: [p namespace NewspeakASTs usingLib: p].\rprivate parsing = Future computing: [p namespace NewspeakParsing usingPlatform: p grammar: grammar asts: asts].\rprivate generation = Future computing: [p namespace JavascriptGeneration usingPlatform: p].\rprivate compilation = Future computing: [p namespace Compilation usingPlatform: p parsing: parsing generation: generation mirrors: nil].\rprivate compiler = Future computing: [compilation Compiler new].\r|)";
		this.slots = [
			new SM("List", false, false),
			new SM("Mixin", false, false),
			new SM("CharacterReadStream", false, false),
			new SM("CharacterWriteStream", false, false),
			new SM("ImmutableMirrorGroup", false, false),
			new SM("vmmirror", false, false),
			new SM("parserLib", false, false),
			new SM("grammar", false, false),
			new SM("asts", false, false),
			new SM("parsing", false, false),
			new SM("generation", false, false),
			new SM("compilation", false, false),
			new SM("compiler", false, false),
			new SM("MirrorsForV8`ClassDeclarationBuilder", true, true),
			new SM("MirrorsForV8`ClassDeclarationMirror", true, true),
			new SM("MirrorsForV8`ClassHeaderMirror", true, true),
			new SM("MirrorsForV8`ClassMirror", true, true),
			new SM("MirrorsForV8`MethodBuilder", true, true),
			new SM("MirrorsForV8`MethodMirror", true, true),
			new SM("MirrorsForV8`MixinBuilder", true, true),
			new SM("MirrorsForV8`MixinMirror", true, true),
			new SM("MirrorsForV8`MutableMethodGroup", true, true),
			new SM("MirrorsForV8`MutableMirrorGroup", true, true),
			new SM("MirrorsForV8`MutableNestedClassGroup", true, true),
			new SM("MirrorsForV8`ObjectMirror", true, true),
			new SM("MirrorsForV8`SlotMirror", true, true)
		];
		this.methods = [
			new MM("superInit`MirrorsForV8", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("classDeclIRFor:within:", false, "classDeclIRFor: mixin within: enclosing = (\r	| source = 'Newspeak3 ''Uncategorized'' ', (ClassDeclarationMirror reflecting: mixin) source. |\r	^compiler compileClassSource: (CharacterReadStream on: source) within: enclosing\r)"),
			new MM("updateMixin:from:by:", false, "updateMixin: oldMixin from: newRuntimeMixin by: classDeclIR = (\r	|\r	oldRuntimeMixin = js propertyOf: oldMixin at: (js literal: 'runtimeMixin').\r	oldRuntimeMetamixin = js propertyOf: oldRuntimeMixin at: (js literal: 'meta').\r	newRuntimeMetamixin = js propertyOf: newRuntimeMixin at: (js literal: 'meta').\r	applications = js propertyOf: oldRuntimeMixin at: (js literal: 'applications').\r	|\r	(* TODO: handle deletes *)\r	(* TODO: copy nested classes also? *)\r	(* TODO: copy new metadata *)\r	classDeclIR instanceSide methods do: [:ea |\r		| jsName = compilation names manglePublic: ea name. |\r		jsName out.\r		js assign: (js propertyOf: oldRuntimeMixin at: jsName) toBe: (js propertyOf: newRuntimeMixin at: jsName).\r	].\r	{#name. #header. #slots. #methods. #nestedClasses} do: [:jsName |\r		js assign: (js propertyOf: oldRuntimeMixin at: jsName) toBe: (js propertyOf: newRuntimeMixin at: jsName).\r	].\r	classDeclIR classSide methods do: [:ea |\r		| jsName = compilation names manglePublic: ea name. |\r		jsName out.\r		js assign: (js propertyOf: oldRuntimeMetamixin at: jsName) toBe: (js propertyOf: newRuntimeMetamixin at: jsName).\r	].\r	{#slots. #methods. #nestedClasses} do: [:jsName |\r		js assign: (js propertyOf: oldRuntimeMixin at: jsName) toBe: (js propertyOf: newRuntimeMixin at: jsName).\r	].\r	applications do: [:runtimeClass |\r		|\r		runtimeMetaclass = js propertyOf: runtimeClass at: (js literal: 'meta').\r		|\r		runtimeClass out.\r		classDeclIR instanceSide methods do: [:ea |\r			| jsName = compilation names mangleProtected: ea name. | (* WRONG *)\r			js assign: (js propertyOf: runtimeClass at: jsName) toBe: (js propertyOf: newRuntimeMixin at: jsName).\r		].\r		classDeclIR classSide methods do: [:ea |\r			| jsName = compilation names mangleProtected: ea name. | (* WRONG *)\r			js assign: (js propertyOf: runtimeMetaclass at: jsName) toBe: (js propertyOf: newRuntimeMetamixin at: jsName).\r		].\r	].\r)"),
			new MM("ClassDeclarationBuilder", true, null),
			new MM("ClassDeclarationMirror", true, null),
			new MM("ClassHeaderMirror", true, null),
			new MM("ClassMirror", true, null),
			new MM("MethodBuilder", true, null),
			new MM("MethodMirror", true, null),
			new MM("MixinBuilder", true, null),
			new MM("MixinMirror", true, null),
			new MM("MutableMethodGroup", true, null),
			new MM("MutableMirrorGroup", true, null),
			new MM("MutableNestedClassGroup", true, null),
			new MM("ObjectMirror", true, null),
			new MM("SlotMirror", true, null),
			new MM("List", true, null),
			new MM("setOnce`List:", true, null),
			new MM("Mixin", true, null),
			new MM("setOnce`Mixin:", true, null),
			new MM("CharacterReadStream", true, null),
			new MM("setOnce`CharacterReadStream:", true, null),
			new MM("CharacterWriteStream", true, null),
			new MM("setOnce`CharacterWriteStream:", true, null),
			new MM("ImmutableMirrorGroup", true, null),
			new MM("setOnce`ImmutableMirrorGroup:", true, null),
			new MM("vmmirror", true, null),
			new MM("setOnce`vmmirror:", true, null),
			new MM("parserLib", true, null),
			new MM("setOnce`parserLib:", true, null),
			new MM("grammar", true, null),
			new MM("setOnce`grammar:", true, null),
			new MM("asts", true, null),
			new MM("setOnce`asts:", true, null),
			new MM("parsing", true, null),
			new MM("setOnce`parsing:", true, null),
			new MM("generation", true, null),
			new MM("setOnce`generation:", true, null),
			new MM("compilation", true, null),
			new MM("setOnce`compilation:", true, null),
			new MM("compiler", true, null),
			new MM("setOnce`compiler:", true, null),
			new MM("MirrorsForV8`ClassDeclarationBuilder", true, null),
			new MM("MirrorsForV8`ClassDeclarationBuilder:", true, null),
			new MM("MirrorsForV8`ClassDeclarationMirror", true, null),
			new MM("MirrorsForV8`ClassDeclarationMirror:", true, null),
			new MM("MirrorsForV8`ClassHeaderMirror", true, null),
			new MM("MirrorsForV8`ClassHeaderMirror:", true, null),
			new MM("MirrorsForV8`ClassMirror", true, null),
			new MM("MirrorsForV8`ClassMirror:", true, null),
			new MM("MirrorsForV8`MethodBuilder", true, null),
			new MM("MirrorsForV8`MethodBuilder:", true, null),
			new MM("MirrorsForV8`MethodMirror", true, null),
			new MM("MirrorsForV8`MethodMirror:", true, null),
			new MM("MirrorsForV8`MixinBuilder", true, null),
			new MM("MirrorsForV8`MixinBuilder:", true, null),
			new MM("MirrorsForV8`MixinMirror", true, null),
			new MM("MirrorsForV8`MixinMirror:", true, null),
			new MM("MirrorsForV8`MutableMethodGroup", true, null),
			new MM("MirrorsForV8`MutableMethodGroup:", true, null),
			new MM("MirrorsForV8`MutableMirrorGroup", true, null),
			new MM("MirrorsForV8`MutableMirrorGroup:", true, null),
			new MM("MirrorsForV8`MutableNestedClassGroup", true, null),
			new MM("MirrorsForV8`MutableNestedClassGroup:", true, null),
			new MM("MirrorsForV8`ObjectMirror", true, null),
			new MM("MirrorsForV8`ObjectMirror:", true, null),
			new MM("MirrorsForV8`SlotMirror", true, null),
			new MM("MirrorsForV8`SlotMirror:", true, null)
		];
		this.nestedClasses = [
			"MirrorsForV8`ClassDeclarationBuilder",
			"MirrorsForV8`ClassDeclarationMirror",
			"MirrorsForV8`ClassHeaderMirror",
			"MirrorsForV8`ClassMirror",
			"MirrorsForV8`MethodBuilder",
			"MirrorsForV8`MethodMirror",
			"MirrorsForV8`MixinBuilder",
			"MirrorsForV8`MixinMirror",
			"MirrorsForV8`MutableMethodGroup",
			"MirrorsForV8`MutableMirrorGroup",
			"MirrorsForV8`MutableNestedClassGroup",
			"MirrorsForV8`ObjectMirror",
			"MirrorsForV8`SlotMirror"
		];
		this.applications = [];
		this.$superInit$MirrorsForV8 = (function ($p, $vmm) {
			var self = this;
			self.$super$MirrorsForV8$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($p, $vmm) {
			var self = this;
			self._$superInit$MirrorsForV8($p, $vmm);
			$0.$setOnce$List$.call(self, $p.$collections().$OrderedCollection());
			$0.$setOnce$Mixin$.call(self, $p.$kernel().$Mixin());
			$0.$setOnce$CharacterReadStream$.call(self, $p.$streams().$CharacterReadStream());
			$0.$setOnce$CharacterWriteStream$.call(self, $p.$streams().$CharacterReadWriteStream());
			$0.$setOnce$ImmutableMirrorGroup$.call(self, $p.$namespace().$MirrorGroups().$usingLib$($p).$ImmutableMirrorGroup());
			$0.$setOnce$vmmirror$.call(self, $vmm);
			$0.$setOnce$parserLib$.call(self, self._$Future().$computing$((function () {
				return $p.$namespace().$CombinatorialParsing().$usingPlatform$($p);
			})));
			$0.$setOnce$grammar$.call(self, self._$Future().$computing$((function () {
				return $p.$namespace().$NewspeakGrammar().$usingPlatform$parsers$($p, $0.$parserLib.call(self));
			})));
			$0.$setOnce$asts$.call(self, self._$Future().$computing$((function () {
				return $p.$namespace().$NewspeakASTs().$usingLib$($p);
			})));
			$0.$setOnce$parsing$.call(self, self._$Future().$computing$((function () {
				return $p.$namespace().$NewspeakParsing().$usingPlatform$grammar$asts$($p, $0.$grammar.call(self), $0.$asts.call(self));
			})));
			$0.$setOnce$generation$.call(self, self._$Future().$computing$((function () {
				return $p.$namespace().$JavascriptGeneration().$usingPlatform$($p);
			})));
			$0.$setOnce$compilation$.call(self, self._$Future().$computing$((function () {
				return $p.$namespace().$Compilation().$usingPlatform$parsing$generation$mirrors$($p, $0.$parsing.call(self), $0.$generation.call(self), nil);
			})));
			$0.$setOnce$compiler$.call(self, self._$Future().$computing$((function () {
				return $0.$compilation.call(self).$Compiler().$new();
			})));
			return self;
		});
		this.$classDeclIRFor$within$ = (function ($mixin, $enclosing) {
			var self = this;
			var $source = nil;
			$source = ("Newspeak3 'Uncategorized' ").$$comma(self._$ClassDeclarationMirror().$reflecting$($mixin).$source());
			return $0.$compiler.call(self).$compileClassSource$within$($0.$CharacterReadStream.call(self).$on$($source), $enclosing);
		});
		this.$updateMixin$from$by$ = (function ($oldMixin, $newRuntimeMixin, $classDeclIR) {
			var self = this;
			var $oldRuntimeMixin = nil;
			var $oldRuntimeMetamixin = nil;
			var $newRuntimeMetamixin = nil;
			var $applications = nil;
			$oldRuntimeMixin = $oldMixin.runtimeMixin;
			$oldRuntimeMetamixin = $oldRuntimeMixin.meta;
			$newRuntimeMetamixin = $newRuntimeMixin.meta;
			$applications = $oldRuntimeMixin.applications;
			$classDeclIR.$instanceSide().$methods().$do$((function ($ea) {
				var $jsName = nil;
				$jsName = $0.$compilation.call(self).$names().$manglePublic$($ea.$name());
				$jsName.$out();
				return $oldRuntimeMixin[$jsName] = $newRuntimeMixin[$jsName];
			}));
			([
				"name",
				"header",
				"slots",
				"methods",
				"nestedClasses"
			]).$do$((function ($jsName) {
				return $oldRuntimeMixin[$jsName] = $newRuntimeMixin[$jsName];
			}));
			$classDeclIR.$classSide().$methods().$do$((function ($ea) {
				var $jsName = nil;
				$jsName = $0.$compilation.call(self).$names().$manglePublic$($ea.$name());
				$jsName.$out();
				return $oldRuntimeMetamixin[$jsName] = $newRuntimeMetamixin[$jsName];
			}));
			([
				"slots",
				"methods",
				"nestedClasses"
			]).$do$((function ($jsName) {
				return $oldRuntimeMixin[$jsName] = $newRuntimeMixin[$jsName];
			}));
			$applications.$do$((function ($runtimeClass) {
				var $runtimeMetaclass = nil;
				$runtimeMetaclass = $runtimeClass.meta;
				$runtimeClass.$out();
				$classDeclIR.$instanceSide().$methods().$do$((function ($ea) {
					var $jsName = nil;
					$jsName = $0.$compilation.call(self).$names().$mangleProtected$($ea.$name());
					return $runtimeClass[$jsName] = $newRuntimeMixin[$jsName];
				}));
				return $classDeclIR.$classSide().$methods().$do$((function ($ea) {
					var $jsName = nil;
					$jsName = $0.$compilation.call(self).$names().$mangleProtected$($ea.$name());
					return $runtimeMetaclass[$jsName] = $newRuntimeMetamixin[$jsName];
				}));
			}));
			return self;
		});
		this.$ClassDeclarationBuilder = (function () {
			if (nil === this.$MirrorsForV8$ClassDeclarationBuilder$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$MirrorsForV8);
				var mixin = $.$MirrorsForV8$ClassDeclarationBuilder;
				this.$MirrorsForV8$ClassDeclarationBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$MirrorsForV8$ClassDeclarationBuilder$slot;
		});
		this.$ClassDeclarationMirror = (function () {
			if (nil === this.$MirrorsForV8$ClassDeclarationMirror$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$MirrorsForV8);
				var mixin = $.$MirrorsForV8$ClassDeclarationMirror;
				this.$MirrorsForV8$ClassDeclarationMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$MirrorsForV8$ClassDeclarationMirror$slot;
		});
		this.$ClassHeaderMirror = (function () {
			if (nil === this.$MirrorsForV8$ClassHeaderMirror$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$MirrorsForV8);
				var mixin = $.$MirrorsForV8$ClassHeaderMirror;
				this.$MirrorsForV8$ClassHeaderMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$MirrorsForV8$ClassHeaderMirror$slot;
		});
		this.$ClassMirror = (function () {
			if (nil === this.$MirrorsForV8$ClassMirror$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$MirrorsForV8);
				var mixin = $.$MirrorsForV8$ClassMirror;
				this.$MirrorsForV8$ClassMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$MirrorsForV8$ClassMirror$slot;
		});
		this.$MethodBuilder = (function () {
			if (nil === this.$MirrorsForV8$MethodBuilder$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$MirrorsForV8);
				var mixin = $.$MirrorsForV8$MethodBuilder;
				this.$MirrorsForV8$MethodBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$MirrorsForV8$MethodBuilder$slot;
		});
		this.$MethodMirror = (function () {
			if (nil === this.$MirrorsForV8$MethodMirror$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$MirrorsForV8);
				var mixin = $.$MirrorsForV8$MethodMirror;
				this.$MirrorsForV8$MethodMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$MirrorsForV8$MethodMirror$slot;
		});
		this.$MixinBuilder = (function () {
			if (nil === this.$MirrorsForV8$MixinBuilder$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$MirrorsForV8);
				var mixin = $.$MirrorsForV8$MixinBuilder;
				this.$MirrorsForV8$MixinBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$MirrorsForV8$MixinBuilder$slot;
		});
		this.$MixinMirror = (function () {
			if (nil === this.$MirrorsForV8$MixinMirror$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$MirrorsForV8);
				var mixin = $.$MirrorsForV8$MixinMirror;
				this.$MirrorsForV8$MixinMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$MirrorsForV8$MixinMirror$slot;
		});
		this.$MutableMethodGroup = (function () {
			if (nil === this.$MirrorsForV8$MutableMethodGroup$slot) {
				var self = this;
				var superclass = self._$MutableMirrorGroup();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$MirrorsForV8);
				var mixin = $.$MirrorsForV8$MutableMethodGroup;
				this.$MirrorsForV8$MutableMethodGroup$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$MirrorsForV8$MutableMethodGroup$slot;
		});
		this.$MutableMirrorGroup = (function () {
			if (nil === this.$MirrorsForV8$MutableMirrorGroup$slot) {
				var self = this;
				var superclass = $0.$ImmutableMirrorGroup.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$MirrorsForV8);
				var mixin = $.$MirrorsForV8$MutableMirrorGroup;
				this.$MirrorsForV8$MutableMirrorGroup$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$MirrorsForV8$MutableMirrorGroup$slot;
		});
		this.$MutableNestedClassGroup = (function () {
			if (nil === this.$MirrorsForV8$MutableNestedClassGroup$slot) {
				var self = this;
				var superclass = self._$MutableMirrorGroup();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$MirrorsForV8);
				var mixin = $.$MirrorsForV8$MutableNestedClassGroup;
				this.$MirrorsForV8$MutableNestedClassGroup$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$MirrorsForV8$MutableNestedClassGroup$slot;
		});
		this.$ObjectMirror = (function () {
			if (nil === this.$MirrorsForV8$ObjectMirror$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$MirrorsForV8);
				var mixin = $.$MirrorsForV8$ObjectMirror;
				this.$MirrorsForV8$ObjectMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$MirrorsForV8$ObjectMirror$slot;
		});
		this.$SlotMirror = (function () {
			if (nil === this.$MirrorsForV8$SlotMirror$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$MirrorsForV8);
				var mixin = $.$MirrorsForV8$SlotMirror;
				this.$MirrorsForV8$SlotMirror$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$MirrorsForV8$SlotMirror$slot;
		});
		this.$List = (function () {
			return this.$List$slot;
		});
		this.$setOnce$List$ = (function (v) {
			this.$List$slot = v;
			return this;
		});
		this.$Mixin = (function () {
			return this.$Mixin$slot;
		});
		this.$setOnce$Mixin$ = (function (v) {
			this.$Mixin$slot = v;
			return this;
		});
		this.$CharacterReadStream = (function () {
			return this.$CharacterReadStream$slot;
		});
		this.$setOnce$CharacterReadStream$ = (function (v) {
			this.$CharacterReadStream$slot = v;
			return this;
		});
		this.$CharacterWriteStream = (function () {
			return this.$CharacterWriteStream$slot;
		});
		this.$setOnce$CharacterWriteStream$ = (function (v) {
			this.$CharacterWriteStream$slot = v;
			return this;
		});
		this.$ImmutableMirrorGroup = (function () {
			return this.$ImmutableMirrorGroup$slot;
		});
		this.$setOnce$ImmutableMirrorGroup$ = (function (v) {
			this.$ImmutableMirrorGroup$slot = v;
			return this;
		});
		this.$vmmirror = (function () {
			return this.$vmmirror$slot;
		});
		this.$setOnce$vmmirror$ = (function (v) {
			this.$vmmirror$slot = v;
			return this;
		});
		this.$parserLib = (function () {
			return this.$parserLib$slot;
		});
		this.$setOnce$parserLib$ = (function (v) {
			this.$parserLib$slot = v;
			return this;
		});
		this.$grammar = (function () {
			return this.$grammar$slot;
		});
		this.$setOnce$grammar$ = (function (v) {
			this.$grammar$slot = v;
			return this;
		});
		this.$asts = (function () {
			return this.$asts$slot;
		});
		this.$setOnce$asts$ = (function (v) {
			this.$asts$slot = v;
			return this;
		});
		this.$parsing = (function () {
			return this.$parsing$slot;
		});
		this.$setOnce$parsing$ = (function (v) {
			this.$parsing$slot = v;
			return this;
		});
		this.$generation = (function () {
			return this.$generation$slot;
		});
		this.$setOnce$generation$ = (function (v) {
			this.$generation$slot = v;
			return this;
		});
		this.$compilation = (function () {
			return this.$compilation$slot;
		});
		this.$setOnce$compilation$ = (function (v) {
			this.$compilation$slot = v;
			return this;
		});
		this.$compiler = (function () {
			return this.$compiler$slot;
		});
		this.$setOnce$compiler$ = (function (v) {
			this.$compiler$slot = v;
			return this;
		});
		this.$MirrorsForV8$ClassDeclarationBuilder = (function () {
			return this.$MirrorsForV8$ClassDeclarationBuilder$slot;
		});
		this.$MirrorsForV8$ClassDeclarationBuilder$ = (function (v) {
			this.$MirrorsForV8$ClassDeclarationBuilder$slot = v;
			return this;
		});
		this.$MirrorsForV8$ClassDeclarationMirror = (function () {
			return this.$MirrorsForV8$ClassDeclarationMirror$slot;
		});
		this.$MirrorsForV8$ClassDeclarationMirror$ = (function (v) {
			this.$MirrorsForV8$ClassDeclarationMirror$slot = v;
			return this;
		});
		this.$MirrorsForV8$ClassHeaderMirror = (function () {
			return this.$MirrorsForV8$ClassHeaderMirror$slot;
		});
		this.$MirrorsForV8$ClassHeaderMirror$ = (function (v) {
			this.$MirrorsForV8$ClassHeaderMirror$slot = v;
			return this;
		});
		this.$MirrorsForV8$ClassMirror = (function () {
			return this.$MirrorsForV8$ClassMirror$slot;
		});
		this.$MirrorsForV8$ClassMirror$ = (function (v) {
			this.$MirrorsForV8$ClassMirror$slot = v;
			return this;
		});
		this.$MirrorsForV8$MethodBuilder = (function () {
			return this.$MirrorsForV8$MethodBuilder$slot;
		});
		this.$MirrorsForV8$MethodBuilder$ = (function (v) {
			this.$MirrorsForV8$MethodBuilder$slot = v;
			return this;
		});
		this.$MirrorsForV8$MethodMirror = (function () {
			return this.$MirrorsForV8$MethodMirror$slot;
		});
		this.$MirrorsForV8$MethodMirror$ = (function (v) {
			this.$MirrorsForV8$MethodMirror$slot = v;
			return this;
		});
		this.$MirrorsForV8$MixinBuilder = (function () {
			return this.$MirrorsForV8$MixinBuilder$slot;
		});
		this.$MirrorsForV8$MixinBuilder$ = (function (v) {
			this.$MirrorsForV8$MixinBuilder$slot = v;
			return this;
		});
		this.$MirrorsForV8$MixinMirror = (function () {
			return this.$MirrorsForV8$MixinMirror$slot;
		});
		this.$MirrorsForV8$MixinMirror$ = (function (v) {
			this.$MirrorsForV8$MixinMirror$slot = v;
			return this;
		});
		this.$MirrorsForV8$MutableMethodGroup = (function () {
			return this.$MirrorsForV8$MutableMethodGroup$slot;
		});
		this.$MirrorsForV8$MutableMethodGroup$ = (function (v) {
			this.$MirrorsForV8$MutableMethodGroup$slot = v;
			return this;
		});
		this.$MirrorsForV8$MutableMirrorGroup = (function () {
			return this.$MirrorsForV8$MutableMirrorGroup$slot;
		});
		this.$MirrorsForV8$MutableMirrorGroup$ = (function (v) {
			this.$MirrorsForV8$MutableMirrorGroup$slot = v;
			return this;
		});
		this.$MirrorsForV8$MutableNestedClassGroup = (function () {
			return this.$MirrorsForV8$MutableNestedClassGroup$slot;
		});
		this.$MirrorsForV8$MutableNestedClassGroup$ = (function (v) {
			this.$MirrorsForV8$MutableNestedClassGroup$slot = v;
			return this;
		});
		this.$MirrorsForV8$ObjectMirror = (function () {
			return this.$MirrorsForV8$ObjectMirror$slot;
		});
		this.$MirrorsForV8$ObjectMirror$ = (function (v) {
			this.$MirrorsForV8$ObjectMirror$slot = v;
			return this;
		});
		this.$MirrorsForV8$SlotMirror = (function () {
			return this.$MirrorsForV8$SlotMirror$slot;
		});
		this.$MirrorsForV8$SlotMirror$ = (function (v) {
			this.$MirrorsForV8$SlotMirror$slot = v;
			return this;
		});
		this.$MirrorsForV8$ClassDeclarationBuilder = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for MirrorsForV8`ClassDeclarationBuilder";
			this.name = "MirrorsForV8`ClassDeclarationBuilder";
			this.header = "ClassDeclarationBuilder fromIR: ir forExistingMixin: m within: enclosing = (|\rprivate prvtExistingMixin <Mixin> ::= m.\rprivate prvtClassDeclIR <ClassDeclarationIR> ::= ir.\r\rpublic enclosingClass = enclosing.\rpublic instanceSide = MixinBuilder forClassDeclaration: self ir: ir instanceSide em: m.\rpublic classSide = MixinBuilder forClassDeclaration: self ir: ir classSide em: m.\r|)";
			this.slots = [
				new SM("prvtExistingMixin", true, false),
				new SM("prvtClassDeclIR", true, false),
				new SM("enclosingClass", false, false),
				new SM("instanceSide", false, false),
				new SM("classSide", false, false)
			];
			this.methods = [
				new MM("superInit`MirrorsForV8`ClassDeclarationBuilder", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("accessModifier", false, "public accessModifier = (\r	^prvtClassDeclIR accessModifier\r)"),
				new MM("install", false, "public install ^<ClassDeclarationMirror> = (\r	| writer stream src runtimeMixin application |\r	(* assert: [prvtExistingMixin isNil] message: 'Modifying existing code as-yet-unimplemented'. *)\r	writer:: generation Writer new.\r	stream:: CharacterWriteStream on: (Array new: 100).\r	writer generateSourceFor: prvtClassDeclIR runtimeMixin on: stream.\r	src:: String withAll: stream contents.\r	src out.\r	runtimeMixin:: js call: (js ident: 'eval') with: {src}.\r	prvtExistingMixin isNil\r		ifTrue: [prvtExistingMixin:: Mixin fromRuntimeMixin: runtimeMixin]\r		ifFalse: [updateMixin: prvtExistingMixin from: runtimeMixin by: prvtClassDeclIR].\r	^ClassDeclarationMirror reflecting: prvtExistingMixin.\r)"),
				new MM("name", false, "public name ^<Symbol> = (\r	^ prvtClassDeclIR name\r)"),
				new MM("simpleName", false, "public simpleName ^<Symbol> = (\r	^compilation names fullyQualifiedNameToSimple: prvtClassDeclIR name\r)"),
				new MM("prvtExistingMixin", true, null),
				new MM("prvtExistingMixin:", true, null),
				new MM("prvtClassDeclIR", true, null),
				new MM("prvtClassDeclIR:", true, null),
				new MM("enclosingClass", true, null),
				new MM("setOnce`enclosingClass:", true, null),
				new MM("instanceSide", true, null),
				new MM("setOnce`instanceSide:", true, null),
				new MM("classSide", true, null),
				new MM("setOnce`classSide:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$MirrorsForV8$ClassDeclarationBuilder = (function ($ir, $m, $enclosing) {
				var self = this;
				self.$super$MirrorsForV8$ClassDeclarationBuilder$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($ir, $m, $enclosing) {
				var self = this;
				self._$superInit$MirrorsForV8$ClassDeclarationBuilder($ir, $m, $enclosing);
				$1.$prvtExistingMixin$.call(self, $m);
				$1.$prvtClassDeclIR$.call(self, $ir);
				self._$setOnce$enclosingClass$($enclosing);
				self._$setOnce$instanceSide$(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$MixinBuilder().$forClassDeclaration$ir$em$(self, $ir.$instanceSide(), $m));
				self._$setOnce$classSide$(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$MixinBuilder().$forClassDeclaration$ir$em$(self, $ir.$classSide(), $m));
				return self;
			});
			this.$accessModifier = (function () {
				var self = this;
				return $1.$prvtClassDeclIR.call(self).$accessModifier();
			});
			this.$install = (function () {
				var self = this;
				var $writer = nil;
				var $stream = nil;
				var $src = nil;
				var $runtimeMixin = nil;
				var $application = nil;
				$writer = $0.$generation.call(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$Writer().$new();
				$stream = $0.$CharacterWriteStream.call(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$on$(self._$Array().$new$(100));
				$writer.$generateSourceFor$on$($1.$prvtClassDeclIR.call(self).$runtimeMixin(), $stream);
				$src = self._$String().$withAll$($stream.$contents());
				$src.$out();
				$runtimeMixin = eval($src);
				if ($1.$prvtExistingMixin.call(self).$isNil()) {
					$1.$prvtExistingMixin$.call(self, $0.$Mixin.call(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$fromRuntimeMixin$($runtimeMixin));
				} else {
					self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$updateMixin$from$by$($1.$prvtExistingMixin.call(self), $runtimeMixin, $1.$prvtClassDeclIR.call(self));
				};
				return self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$ClassDeclarationMirror().$reflecting$($1.$prvtExistingMixin.call(self));
			});
			this.$name = (function () {
				var self = this;
				return $1.$prvtClassDeclIR.call(self).$name();
			});
			this.$simpleName = (function () {
				var self = this;
				return $0.$compilation.call(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$names().$fullyQualifiedNameToSimple$($1.$prvtClassDeclIR.call(self).$name());
			});
			this.$prvtExistingMixin = (function () {
				return this.$prvtExistingMixin$slot;
			});
			this.$prvtExistingMixin$ = (function (v) {
				this.$prvtExistingMixin$slot = v;
				return this;
			});
			this.$prvtClassDeclIR = (function () {
				return this.$prvtClassDeclIR$slot;
			});
			this.$prvtClassDeclIR$ = (function (v) {
				this.$prvtClassDeclIR$slot = v;
				return this;
			});
			this.$enclosingClass = (function () {
				return this.$enclosingClass$slot;
			});
			this.$setOnce$enclosingClass$ = (function (v) {
				this.$enclosingClass$slot = v;
				return this;
			});
			this.$instanceSide = (function () {
				return this.$instanceSide$slot;
			});
			this.$setOnce$instanceSide$ = (function (v) {
				this.$instanceSide$slot = v;
				return this;
			});
			this.$classSide = (function () {
				return this.$classSide$slot;
			});
			this.$setOnce$classSide$ = (function (v) {
				this.$classSide$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for MirrorsForV8`ClassDeclarationBuilder";
					this._$superInit$MirrorsForV8$ClassDeclarationBuilder = $.$superInit$MirrorsForV8$ClassDeclarationBuilder;
					this.$superInit$MirrorsForV8$ClassDeclarationBuilder = dnuCatcher("$superInit$MirrorsForV8$ClassDeclarationBuilder");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$accessModifier = this._$accessModifier = $.$accessModifier;
					this.$install = this._$install = $.$install;
					this.$name = this._$name = $.$name;
					this.$simpleName = this._$simpleName = $.$simpleName;
					this.$enclosingClass = this._$enclosingClass = $.$enclosingClass;
					this.$setOnce$enclosingClass$ = this._$setOnce$enclosingClass$ = $.$setOnce$enclosingClass$;
					this.$instanceSide = this._$instanceSide = $.$instanceSide;
					this.$setOnce$instanceSide$ = this._$setOnce$instanceSide$ = $.$setOnce$instanceSide$;
					this.$classSide = this._$classSide = $.$classSide;
					this.$setOnce$classSide$ = this._$setOnce$classSide$ = $.$setOnce$classSide$;
					this.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder = enclosingObjects;
					this.$super$MirrorsForV8$ClassDeclarationBuilder$slot = runtimeSuperclass;
					this["MirrorsForV8`ClassDeclarationBuilder"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$prvtExistingMixin$slot = nil;
						this.$prvtClassDeclIR$slot = nil;
						this.$enclosingClass$slot = nil;
						this.$instanceSide$slot = nil;
						this.$classSide$slot = nil;
					});
					this.basicNew = this["MirrorsForV8`ClassDeclarationBuilder"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for MirrorsForV8`ClassDeclarationBuilder";
				this.slots = [];
				this.methods = [
					new MM("fromIR:forExistingMixin:within:", true, null),
					new MM("fromSource:", false, "public fromSource: src <String> ^<ClassDeclarationBuilder> = (\r	^self fromUnitSource: 'Newspeak3 ''Uncategorized'' ', src\r)"),
					new MM("fromUnitSource:", false, "fromUnitSource: src <String> ^<ClassDeclarationBuilder> = (\r	^self fromIR: (compiler compileClassSource: (CharacterReadStream on: src) within: nil)\r)"),
					new MM("reflecting:", false, "public reflecting: mixin <InstanceMixin> ^<ClassDeclarationBuilder> = (\r	(* assert: [mixin isMixin & mixin isMeta not] message: 'Provide an instance-side mixin'. *)\r	| m = ClassDeclarationMirror reflecting: mixin. |\r	m enclosingClass isNil ifFalse: [\r		^(ClassDeclarationBuilder reflecting: m enclosingClass reflectee)\r			instanceSide nestedClasses findMirrorNamed: m simpleName\r	].\r	\r	^self\r		fromIR: (classDeclIRFor: mixin within: nil)\r		forExistingMixin: mixin\r		within: nil\r)")
				];
				this.nestedClasses = [];
				this.$fromIR$forExistingMixin$within$ = (function ($ir, $m, $enclosing) {
					return (new this.nonMeta.basicNew()).$instance$initializer($ir, $m, $enclosing);
				});
				this.$fromSource$ = (function ($src) {
					var self = this;
					return self._$fromUnitSource$(("Newspeak3 'Uncategorized' ").$$comma($src));
				});
				this.$fromUnitSource$ = (function ($src) {
					var self = this;
					return self._$fromIR$($0.$compiler.call(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$compileClassSource$within$($0.$CharacterReadStream.call(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]).$on$($src), nil));
				});
				this.$reflecting$ = (function ($mixin) {
					var self = this;
					var $m = nil;
					$m = self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$ClassDeclarationMirror().$reflecting$($mixin);
					if (!$m.$enclosingClass().$isNil()) {
						return self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$ClassDeclarationBuilder().$reflecting$($m.$enclosingClass().$reflectee()).$instanceSide().$nestedClasses().$findMirrorNamed$($m.$simpleName());
					} else {
						nil;
					};
					return self._$fromIR$forExistingMixin$within$(self.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder[0]._$classDeclIRFor$within$($mixin, nil), $mixin, nil);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for MirrorsForV8`ClassDeclarationBuilder";
						this.$fromIR$forExistingMixin$within$ = this._$fromIR$forExistingMixin$within$ = $.$fromIR$forExistingMixin$within$;
						this.$fromSource$ = this._$fromSource$ = $.$fromSource$;
						this._$fromUnitSource$ = $.$fromUnitSource$;
						this.$fromUnitSource$ = dnuCatcher("$fromUnitSource$");
						this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
						this.$enclosingObjects$MirrorsForV8$ClassDeclarationBuilder = enclosingObjects;
						this.$super$MirrorsForV8$ClassDeclarationBuilder = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$MirrorsForV8$ClassDeclarationMirror = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for MirrorsForV8`ClassDeclarationMirror";
			this.name = "MirrorsForV8`ClassDeclarationMirror";
			this.header = "ClassDeclarationMirror reflecting: mixin = (|\r	public reflectee = mixin.\r	public instanceSide = MixinMirror reflecting: mixin.\r	public classSide = MixinMirror reflecting: (Mixin fromRuntimeMixin: (js propertyOf: (js propertyOf: mixin at: (js literal: 'runtimeMixin')) at: (js literal: 'meta'))).\r	public accessModifier = #public. (*BOGUS*)\r|)";
			this.slots = [
				new SM("reflectee", false, false),
				new SM("instanceSide", false, false),
				new SM("classSide", false, false),
				new SM("accessModifier", false, false)
			];
			this.methods = [
				new MM("superInit`MirrorsForV8`ClassDeclarationMirror", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("enclosingClass", false, "public enclosingClass ^ <ClassDeclarationMirror> = (\r	| enclosing <Class> |\r	enclosing:: (js propertyOf: (js propertyOf: reflectee at: (js literal: 'runtimeMixin')) at: (js literal: 'enclosingMixin')). \r	(js operator: '===' with: enclosing and: (js ident: 'undefined')) ifTrue: [^nil].\r	^ClassDeclarationMirror reflecting: (Mixin fromRuntimeMixin: enclosing)\r)"),
				new MM("header", false, "public header ^<ClassHeaderMirror> = (\r	^ClassHeaderMirror reflecting: reflectee\r)"),
				new MM("name", false, "public name = (\r	^reflectee name\r)"),
				new MM("simpleName", false, "public simpleName = (\r	^(name splitBy: '`') last\r)"),
				new MM("source", false, "public source ^<String> = (\r	| stream |\r	stream:: CharacterWriteStream on: (Array new: 100).\r	stream nextPutAll: 'class '.\r	stream nextPutAll: header source.\r	stream nextPutAll: ' ( '; cr.\r	instanceSide nestedClasses do: [:ea | stream nextPutAll: ea source; cr].\r	stream nextPutAll: ' ''Unclassified'' '.\r	instanceSide methods do: [:ea | stream nextPutAll: ea source; cr].\r	stream nextPutAll: ' ) : ( '; cr.\r	classSide methods do: [:ea | stream nextPutAll: ea source; cr].\r	stream nextPutAll: ' )'.\r	^String withAll: stream contents\r)"),
				new MM("reflectee", true, null),
				new MM("setOnce`reflectee:", true, null),
				new MM("instanceSide", true, null),
				new MM("setOnce`instanceSide:", true, null),
				new MM("classSide", true, null),
				new MM("setOnce`classSide:", true, null),
				new MM("accessModifier", true, null),
				new MM("setOnce`accessModifier:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$MirrorsForV8$ClassDeclarationMirror = (function ($mixin) {
				var self = this;
				self.$super$MirrorsForV8$ClassDeclarationMirror$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($mixin) {
				var self = this;
				self._$superInit$MirrorsForV8$ClassDeclarationMirror($mixin);
				self._$setOnce$reflectee$($mixin);
				self._$setOnce$instanceSide$(self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]._$MixinMirror().$reflecting$($mixin));
				self._$setOnce$classSide$(self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]._$MixinMirror().$reflecting$($0.$Mixin.call(self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]).$fromRuntimeMixin$($mixin.runtimeMixin.meta)));
				self._$setOnce$accessModifier$("public");
				return self;
			});
			this.$enclosingClass = (function () {
				var self = this;
				var $enclosing = nil;
				$enclosing = self._$reflectee().runtimeMixin.enclosingMixin;
				if ($enclosing === undefined) {
					return nil;
				} else {
					nil;
				};
				return self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]._$ClassDeclarationMirror().$reflecting$($0.$Mixin.call(self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]).$fromRuntimeMixin$($enclosing));
			});
			this.$header = (function () {
				var self = this;
				return self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]._$ClassHeaderMirror().$reflecting$(self._$reflectee());
			});
			this.$name = (function () {
				var self = this;
				return self._$reflectee().$name();
			});
			this.$simpleName = (function () {
				var self = this;
				return self._$name().$splitBy$("`").$last();
			});
			this.$source = (function () {
				var self = this;
				var $stream = nil;
				$stream = $0.$CharacterWriteStream.call(self.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror[0]).$on$(self._$Array().$new$(100));
				$stream.$nextPutAll$("class ");
				$stream.$nextPutAll$(self._$header().$source());
				(function (cascadeReceiver) {
					cascadeReceiver.$nextPutAll$(" ( ");
					return cascadeReceiver.$cr();
				})($stream);
				self._$instanceSide().$nestedClasses().$do$((function ($ea) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$nextPutAll$($ea.$source());
						return cascadeReceiver.$cr();
					})($stream);
				}));
				$stream.$nextPutAll$(" 'Unclassified' ");
				self._$instanceSide().$methods().$do$((function ($ea) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$nextPutAll$($ea.$source());
						return cascadeReceiver.$cr();
					})($stream);
				}));
				(function (cascadeReceiver) {
					cascadeReceiver.$nextPutAll$(" ) : ( ");
					return cascadeReceiver.$cr();
				})($stream);
				self._$classSide().$methods().$do$((function ($ea) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$nextPutAll$($ea.$source());
						return cascadeReceiver.$cr();
					})($stream);
				}));
				$stream.$nextPutAll$(" )");
				return self._$String().$withAll$($stream.$contents());
			});
			this.$reflectee = (function () {
				return this.$reflectee$slot;
			});
			this.$setOnce$reflectee$ = (function (v) {
				this.$reflectee$slot = v;
				return this;
			});
			this.$instanceSide = (function () {
				return this.$instanceSide$slot;
			});
			this.$setOnce$instanceSide$ = (function (v) {
				this.$instanceSide$slot = v;
				return this;
			});
			this.$classSide = (function () {
				return this.$classSide$slot;
			});
			this.$setOnce$classSide$ = (function (v) {
				this.$classSide$slot = v;
				return this;
			});
			this.$accessModifier = (function () {
				return this.$accessModifier$slot;
			});
			this.$setOnce$accessModifier$ = (function (v) {
				this.$accessModifier$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for MirrorsForV8`ClassDeclarationMirror";
					this._$superInit$MirrorsForV8$ClassDeclarationMirror = $.$superInit$MirrorsForV8$ClassDeclarationMirror;
					this.$superInit$MirrorsForV8$ClassDeclarationMirror = dnuCatcher("$superInit$MirrorsForV8$ClassDeclarationMirror");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$enclosingClass = this._$enclosingClass = $.$enclosingClass;
					this.$header = this._$header = $.$header;
					this.$name = this._$name = $.$name;
					this.$simpleName = this._$simpleName = $.$simpleName;
					this.$source = this._$source = $.$source;
					this.$reflectee = this._$reflectee = $.$reflectee;
					this.$setOnce$reflectee$ = this._$setOnce$reflectee$ = $.$setOnce$reflectee$;
					this.$instanceSide = this._$instanceSide = $.$instanceSide;
					this.$setOnce$instanceSide$ = this._$setOnce$instanceSide$ = $.$setOnce$instanceSide$;
					this.$classSide = this._$classSide = $.$classSide;
					this.$setOnce$classSide$ = this._$setOnce$classSide$ = $.$setOnce$classSide$;
					this.$accessModifier = this._$accessModifier = $.$accessModifier;
					this.$setOnce$accessModifier$ = this._$setOnce$accessModifier$ = $.$setOnce$accessModifier$;
					this.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror = enclosingObjects;
					this.$super$MirrorsForV8$ClassDeclarationMirror$slot = runtimeSuperclass;
					this["MirrorsForV8`ClassDeclarationMirror"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$reflectee$slot = nil;
						this.$instanceSide$slot = nil;
						this.$classSide$slot = nil;
						this.$accessModifier$slot = nil;
					});
					this.basicNew = this["MirrorsForV8`ClassDeclarationMirror"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for MirrorsForV8`ClassDeclarationMirror";
				this.slots = [];
				this.methods = [new MM("reflecting:", true, null)];
				this.nestedClasses = [];
				this.$reflecting$ = (function ($mixin) {
					return (new this.nonMeta.basicNew()).$instance$initializer($mixin);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for MirrorsForV8`ClassDeclarationMirror";
						this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
						this.$enclosingObjects$MirrorsForV8$ClassDeclarationMirror = enclosingObjects;
						this.$super$MirrorsForV8$ClassDeclarationMirror = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$MirrorsForV8$ClassHeaderMirror = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for MirrorsForV8`ClassHeaderMirror";
			this.name = "MirrorsForV8`ClassHeaderMirror";
			this.header = "ClassHeaderMirror reflecting: mixin = (|\r	public reflectee <Mixin> = mixin.\r|)";
			this.slots = [new SM("reflectee", false, false)];
			this.methods = [
				new MM("superInit`MirrorsForV8`ClassHeaderMirror", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("source", false, "public source ^<String> = (\r	^js propertyOf: (js propertyOf: reflectee at: (js literal: 'runtimeMixin')) at: (js literal: 'header')\r)"),
				new MM("reflectee", true, null),
				new MM("setOnce`reflectee:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$MirrorsForV8$ClassHeaderMirror = (function ($mixin) {
				var self = this;
				self.$super$MirrorsForV8$ClassHeaderMirror$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($mixin) {
				var self = this;
				self._$superInit$MirrorsForV8$ClassHeaderMirror($mixin);
				self._$setOnce$reflectee$($mixin);
				return self;
			});
			this.$source = (function () {
				var self = this;
				return self._$reflectee().runtimeMixin.header;
			});
			this.$reflectee = (function () {
				return this.$reflectee$slot;
			});
			this.$setOnce$reflectee$ = (function (v) {
				this.$reflectee$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for MirrorsForV8`ClassHeaderMirror";
					this._$superInit$MirrorsForV8$ClassHeaderMirror = $.$superInit$MirrorsForV8$ClassHeaderMirror;
					this.$superInit$MirrorsForV8$ClassHeaderMirror = dnuCatcher("$superInit$MirrorsForV8$ClassHeaderMirror");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$source = this._$source = $.$source;
					this.$reflectee = this._$reflectee = $.$reflectee;
					this.$setOnce$reflectee$ = this._$setOnce$reflectee$ = $.$setOnce$reflectee$;
					this.$enclosingObjects$MirrorsForV8$ClassHeaderMirror = enclosingObjects;
					this.$super$MirrorsForV8$ClassHeaderMirror$slot = runtimeSuperclass;
					this["MirrorsForV8`ClassHeaderMirror"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$reflectee$slot = nil;
					});
					this.basicNew = this["MirrorsForV8`ClassHeaderMirror"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for MirrorsForV8`ClassHeaderMirror";
				this.slots = [];
				this.methods = [new MM("reflecting:", true, null)];
				this.nestedClasses = [];
				this.$reflecting$ = (function ($mixin) {
					return (new this.nonMeta.basicNew()).$instance$initializer($mixin);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for MirrorsForV8`ClassHeaderMirror";
						this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
						this.$enclosingObjects$MirrorsForV8$ClassHeaderMirror = enclosingObjects;
						this.$super$MirrorsForV8$ClassHeaderMirror = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$MirrorsForV8$ClassMirror = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for MirrorsForV8`ClassMirror";
			this.name = "MirrorsForV8`ClassMirror";
			this.header = "ClassMirror reflecting: r = (|\rpublic reflectee = r.\r|)";
			this.slots = [new SM("reflectee", false, false)];
			this.methods = [
				new MM("superInit`MirrorsForV8`ClassMirror", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("allSuperclasses", false, "public allSuperclasses ^ <List[ClassMirror]> = (\r	| klass <Class> superclasses <List[Class]> |\r	superclasses:: List new.\r	klass:: superclass.\r	[klass isNil] whileFalse:[\r		superclasses add: klass.\r		klass:: klass superclass.\r	].\r	^superclasses\r)"),
				new MM("computeMirrorGroup:", false, "private computeMirrorGroup: mgAccessor <[:MixinMirror | MirrorGroup]> ^ <List[Mirror]> = (\r(* Return a mirror group based on the mixins group and those of all superclasses. The argument mgAccessor extracts a mirror group from any mirror provided to it. *)\r	| mg <MirrorGroup>  |\r	mg:: List new.\r	(allSuperclasses reverse add: self; yourself)\r		do:[:klass <ClassMirror> | mg addAll: (mgAccessor value: klass mixin)].\r	^ mg	\r)"),
				new MM("enclosingObject", false, "public enclosingObject ^<ObjectMirror> = (\r	^ObjectMirror reflecting: reflectee enclosingObject\r)"),
				new MM("methods", false, "public methods ^ <MirrorGroup[MethodMirror]> = (\r	^computeMirrorGroup: [:r | r methods]\r)"),
				new MM("mixin", false, "public mixin ^ <MixinMirror> = (\r	^MixinMirror reflecting: reflectee mixin\r)"),
				new MM("name", false, "public name = (\r	^reflectee name\r)"),
				new MM("nestedClasses", false, "public nestedClasses ^ <MirrorGroup[ClassDeclarationMirror]> = (\r	^computeMirrorGroup: [:r | r nestedClasses]\r)"),
				new MM("simpleName", false, "public simpleName = (\r	^(reflectee name splitBy: '`') last\r)"),
				new MM("slots", false, "public slots ^ <MirrorGroup[SlotMirror]> = (\r	^computeMirrorGroup: [:r | r slots].\r)"),
				new MM("superclass", false, "public superclass ^ <ClassMirror> = (\r	reflectee superclass isNil ifTrue:[^nil].\r	^ClassMirror reflecting: reflectee superclass\r)"),
				new MM("reflectee", true, null),
				new MM("setOnce`reflectee:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$MirrorsForV8$ClassMirror = (function ($r) {
				var self = this;
				self.$super$MirrorsForV8$ClassMirror$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($r) {
				var self = this;
				self._$superInit$MirrorsForV8$ClassMirror($r);
				self._$setOnce$reflectee$($r);
				return self;
			});
			this.$allSuperclasses = (function () {
				var self = this;
				var $klass = nil;
				var $superclasses = nil;
				$superclasses = $0.$List.call(self.$enclosingObjects$MirrorsForV8$ClassMirror[0]).$new();
				$klass = self._$superclass();
				{
					nil;
					for (; !$klass.$isNil(); ) {
						$superclasses.$add$($klass);
						$klass = $klass.$superclass();
					};
				};
				return $superclasses;
			});
			this.$computeMirrorGroup$ = (function ($mgAccessor) {
				var self = this;
				var $mg = nil;
				$mg = $0.$List.call(self.$enclosingObjects$MirrorsForV8$ClassMirror[0]).$new();
				(function (cascadeReceiver) {
					cascadeReceiver.$add$(self);
					return cascadeReceiver.$yourself();
				})(self._$allSuperclasses().$reverse()).$do$((function ($klass) {
					return $mg.$addAll$($mgAccessor.$value$($klass.$mixin()));
				}));
				return $mg;
			});
			this.$enclosingObject = (function () {
				var self = this;
				return self.$enclosingObjects$MirrorsForV8$ClassMirror[0]._$ObjectMirror().$reflecting$(self._$reflectee().$enclosingObject());
			});
			this.$methods = (function () {
				var self = this;
				return $1.$computeMirrorGroup$.call(self, (function ($r) {
					return $r.$methods();
				}));
			});
			this.$mixin = (function () {
				var self = this;
				return self.$enclosingObjects$MirrorsForV8$ClassMirror[0]._$MixinMirror().$reflecting$(self._$reflectee().$mixin());
			});
			this.$name = (function () {
				var self = this;
				return self._$reflectee().$name();
			});
			this.$nestedClasses = (function () {
				var self = this;
				return $1.$computeMirrorGroup$.call(self, (function ($r) {
					return $r.$nestedClasses();
				}));
			});
			this.$simpleName = (function () {
				var self = this;
				return self._$reflectee().$name().$splitBy$("`").$last();
			});
			this.$slots = (function () {
				var self = this;
				return $1.$computeMirrorGroup$.call(self, (function ($r) {
					return $r.$slots();
				}));
			});
			this.$superclass = (function () {
				var self = this;
				if (self._$reflectee().$superclass().$isNil()) {
					return nil;
				} else {
					nil;
				};
				return self.$enclosingObjects$MirrorsForV8$ClassMirror[0]._$ClassMirror().$reflecting$(self._$reflectee().$superclass());
			});
			this.$reflectee = (function () {
				return this.$reflectee$slot;
			});
			this.$setOnce$reflectee$ = (function (v) {
				this.$reflectee$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for MirrorsForV8`ClassMirror";
					this._$superInit$MirrorsForV8$ClassMirror = $.$superInit$MirrorsForV8$ClassMirror;
					this.$superInit$MirrorsForV8$ClassMirror = dnuCatcher("$superInit$MirrorsForV8$ClassMirror");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$allSuperclasses = this._$allSuperclasses = $.$allSuperclasses;
					this.$enclosingObject = this._$enclosingObject = $.$enclosingObject;
					this.$methods = this._$methods = $.$methods;
					this.$mixin = this._$mixin = $.$mixin;
					this.$name = this._$name = $.$name;
					this.$nestedClasses = this._$nestedClasses = $.$nestedClasses;
					this.$simpleName = this._$simpleName = $.$simpleName;
					this.$slots = this._$slots = $.$slots;
					this.$superclass = this._$superclass = $.$superclass;
					this.$reflectee = this._$reflectee = $.$reflectee;
					this.$setOnce$reflectee$ = this._$setOnce$reflectee$ = $.$setOnce$reflectee$;
					this.$enclosingObjects$MirrorsForV8$ClassMirror = enclosingObjects;
					this.$super$MirrorsForV8$ClassMirror$slot = runtimeSuperclass;
					this["MirrorsForV8`ClassMirror"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$reflectee$slot = nil;
					});
					this.basicNew = this["MirrorsForV8`ClassMirror"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for MirrorsForV8`ClassMirror";
				this.slots = [];
				this.methods = [new MM("reflecting:", true, null)];
				this.nestedClasses = [];
				this.$reflecting$ = (function ($r) {
					return (new this.nonMeta.basicNew()).$instance$initializer($r);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for MirrorsForV8`ClassMirror";
						this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
						this.$enclosingObjects$MirrorsForV8$ClassMirror = enclosingObjects;
						this.$super$MirrorsForV8$ClassMirror = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$MirrorsForV8$MethodBuilder = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for MirrorsForV8`MethodBuilder";
			this.name = "MirrorsForV8`MethodBuilder";
			this.header = "MethodBuilder reflecting: mir in: mb = (| reflecteeX <MethodIR> = mir. definingMixinX <MixinBuilder> = mb. |)";
			this.slots = [
				new SM("reflecteeX", false, false),
				new SM("definingMixinX", false, false)
			];
			this.methods = [
				new MM("superInit`MirrorsForV8`MethodBuilder", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("accessModifier", false, "public accessModifier = (\r	^reflecteeX accessModifier\r)"),
				new MM("name", false, "public name ^<Symbol> = (\r	^reflecteeX name\r)"),
				new MM("simpleName", false, "public simpleName ^<Symbol> = (\r	^reflecteeX name\r)"),
				new MM("reflecteeX", true, null),
				new MM("setOnce`reflecteeX:", true, null),
				new MM("definingMixinX", true, null),
				new MM("setOnce`definingMixinX:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$MirrorsForV8$MethodBuilder = (function ($mir, $mb) {
				var self = this;
				self.$super$MirrorsForV8$MethodBuilder$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($mir, $mb) {
				var self = this;
				self._$superInit$MirrorsForV8$MethodBuilder($mir, $mb);
				self._$setOnce$reflecteeX$($mir);
				self._$setOnce$definingMixinX$($mb);
				return self;
			});
			this.$accessModifier = (function () {
				var self = this;
				return self._$reflecteeX().$accessModifier();
			});
			this.$name = (function () {
				var self = this;
				return self._$reflecteeX().$name();
			});
			this.$simpleName = (function () {
				var self = this;
				return self._$reflecteeX().$name();
			});
			this.$reflecteeX = (function () {
				return this.$reflecteeX$slot;
			});
			this.$setOnce$reflecteeX$ = (function (v) {
				this.$reflecteeX$slot = v;
				return this;
			});
			this.$definingMixinX = (function () {
				return this.$definingMixinX$slot;
			});
			this.$setOnce$definingMixinX$ = (function (v) {
				this.$definingMixinX$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for MirrorsForV8`MethodBuilder";
					this._$superInit$MirrorsForV8$MethodBuilder = $.$superInit$MirrorsForV8$MethodBuilder;
					this.$superInit$MirrorsForV8$MethodBuilder = dnuCatcher("$superInit$MirrorsForV8$MethodBuilder");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$accessModifier = this._$accessModifier = $.$accessModifier;
					this.$name = this._$name = $.$name;
					this.$simpleName = this._$simpleName = $.$simpleName;
					this._$reflecteeX = $.$reflecteeX;
					this.$reflecteeX = dnuCatcher("$reflecteeX");
					this._$setOnce$reflecteeX$ = $.$setOnce$reflecteeX$;
					this.$setOnce$reflecteeX$ = dnuCatcher("$setOnce$reflecteeX$");
					this._$definingMixinX = $.$definingMixinX;
					this.$definingMixinX = dnuCatcher("$definingMixinX");
					this._$setOnce$definingMixinX$ = $.$setOnce$definingMixinX$;
					this.$setOnce$definingMixinX$ = dnuCatcher("$setOnce$definingMixinX$");
					this.$enclosingObjects$MirrorsForV8$MethodBuilder = enclosingObjects;
					this.$super$MirrorsForV8$MethodBuilder$slot = runtimeSuperclass;
					this["MirrorsForV8`MethodBuilder"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$reflecteeX$slot = nil;
						this.$definingMixinX$slot = nil;
					});
					this.basicNew = this["MirrorsForV8`MethodBuilder"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for MirrorsForV8`MethodBuilder";
				this.slots = [];
				this.methods = [new MM("reflecting:in:", true, null)];
				this.nestedClasses = [];
				this.$reflecting$in$ = (function ($mir, $mb) {
					return (new this.nonMeta.basicNew()).$instance$initializer($mir, $mb);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for MirrorsForV8`MethodBuilder";
						this.$reflecting$in$ = this._$reflecting$in$ = $.$reflecting$in$;
						this.$enclosingObjects$MirrorsForV8$MethodBuilder = enclosingObjects;
						this.$super$MirrorsForV8$MethodBuilder = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$MirrorsForV8$MethodMirror = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for MirrorsForV8`MethodMirror";
			this.name = "MirrorsForV8`MethodMirror";
			this.header = "MethodMirror named: n in: dm source: s = (|\r	public name <Symbol> = n.\r	public definingMixin <MixinMirror> = dm.\r	public source <String> = s.\r	public accessModifier = #public. (*BOGUS*)\r|)";
			this.slots = [
				new SM("name", false, false),
				new SM("definingMixin", false, false),
				new SM("source", false, false),
				new SM("accessModifier", false, false)
			];
			this.methods = [
				new MM("superInit`MirrorsForV8`MethodMirror", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("simpleName", false, "public simpleName ^<Symbol> = (\r	^name\r)"),
				new MM("name", true, null),
				new MM("setOnce`name:", true, null),
				new MM("definingMixin", true, null),
				new MM("setOnce`definingMixin:", true, null),
				new MM("source", true, null),
				new MM("setOnce`source:", true, null),
				new MM("accessModifier", true, null),
				new MM("setOnce`accessModifier:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$MirrorsForV8$MethodMirror = (function ($n, $dm, $s) {
				var self = this;
				self.$super$MirrorsForV8$MethodMirror$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($n, $dm, $s) {
				var self = this;
				self._$superInit$MirrorsForV8$MethodMirror($n, $dm, $s);
				self._$setOnce$name$($n);
				self._$setOnce$definingMixin$($dm);
				self._$setOnce$source$($s);
				self._$setOnce$accessModifier$("public");
				return self;
			});
			this.$simpleName = (function () {
				var self = this;
				return self._$name();
			});
			this.$name = (function () {
				return this.$name$slot;
			});
			this.$setOnce$name$ = (function (v) {
				this.$name$slot = v;
				return this;
			});
			this.$definingMixin = (function () {
				return this.$definingMixin$slot;
			});
			this.$setOnce$definingMixin$ = (function (v) {
				this.$definingMixin$slot = v;
				return this;
			});
			this.$source = (function () {
				return this.$source$slot;
			});
			this.$setOnce$source$ = (function (v) {
				this.$source$slot = v;
				return this;
			});
			this.$accessModifier = (function () {
				return this.$accessModifier$slot;
			});
			this.$setOnce$accessModifier$ = (function (v) {
				this.$accessModifier$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for MirrorsForV8`MethodMirror";
					this._$superInit$MirrorsForV8$MethodMirror = $.$superInit$MirrorsForV8$MethodMirror;
					this.$superInit$MirrorsForV8$MethodMirror = dnuCatcher("$superInit$MirrorsForV8$MethodMirror");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$simpleName = this._$simpleName = $.$simpleName;
					this.$name = this._$name = $.$name;
					this.$setOnce$name$ = this._$setOnce$name$ = $.$setOnce$name$;
					this.$definingMixin = this._$definingMixin = $.$definingMixin;
					this.$setOnce$definingMixin$ = this._$setOnce$definingMixin$ = $.$setOnce$definingMixin$;
					this.$source = this._$source = $.$source;
					this.$setOnce$source$ = this._$setOnce$source$ = $.$setOnce$source$;
					this.$accessModifier = this._$accessModifier = $.$accessModifier;
					this.$setOnce$accessModifier$ = this._$setOnce$accessModifier$ = $.$setOnce$accessModifier$;
					this.$enclosingObjects$MirrorsForV8$MethodMirror = enclosingObjects;
					this.$super$MirrorsForV8$MethodMirror$slot = runtimeSuperclass;
					this["MirrorsForV8`MethodMirror"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$name$slot = nil;
						this.$definingMixin$slot = nil;
						this.$source$slot = nil;
						this.$accessModifier$slot = nil;
					});
					this.basicNew = this["MirrorsForV8`MethodMirror"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for MirrorsForV8`MethodMirror";
				this.slots = [];
				this.methods = [new MM("named:in:source:", true, null)];
				this.nestedClasses = [];
				this.$named$in$source$ = (function ($n, $dm, $s) {
					return (new this.nonMeta.basicNew()).$instance$initializer($n, $dm, $s);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for MirrorsForV8`MethodMirror";
						this.$named$in$source$ = this._$named$in$source$ = $.$named$in$source$;
						this.$enclosingObjects$MirrorsForV8$MethodMirror = enclosingObjects;
						this.$super$MirrorsForV8$MethodMirror = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$MirrorsForV8$MixinBuilder = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for MirrorsForV8`MixinBuilder";
			this.name = "MirrorsForV8`MixinBuilder";
			this.header = "MixinBuilder forClassDeclaration: cdb ir: ir em: em = (|\rmixinIR <MixinIR> = ir.\rpublic declaration <ClassDeclarationBuilder> = cdb.\rpublic isMeta <Boolean> = ir isMeta.\rpublic slots = ir slots collect: [:ea | SlotMirror named: ea name].\rpublic methods <MutableMethodGroup> = MutableMethodGroup group: ((ir methods reject: [:ea | ea isSynthetic]) collect: [:ea | MethodBuilder reflecting: ea in: self]) within: self ir: ir.\rpublic nestedClasses <MutableNestedClassGroup> = MutableNestedClassGroup group: (ir nestedClasses collect: [:ea | ClassDeclarationBuilder fromIR: ea forExistingMixin: (find: ea name in: em) within: cdb]) within: self ir: ir.\r|)";
			this.slots = [
				new SM("mixinIR", false, false),
				new SM("declaration", false, false),
				new SM("isMeta", false, false),
				new SM("slots", false, false),
				new SM("methods", false, false),
				new SM("nestedClasses", false, false)
			];
			this.methods = [
				new MM("superInit`MirrorsForV8`MixinBuilder", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("find:in:", false, "find: name in: existingMixin = (\r	^Mixin fromRuntimeMixin: \r		(js propertyOf: \r			(js propertyOf: existingMixin at: (js literal: 'runtimeMixin')) at: (compilation names manglePublic: name))\r)"),
				new MM("isMixinMirror", false, "public isMixinMirror ^<Boolean> = (\r	^true\r)"),
				new MM("mixinIR", true, null),
				new MM("setOnce`mixinIR:", true, null),
				new MM("declaration", true, null),
				new MM("setOnce`declaration:", true, null),
				new MM("isMeta", true, null),
				new MM("setOnce`isMeta:", true, null),
				new MM("slots", true, null),
				new MM("setOnce`slots:", true, null),
				new MM("methods", true, null),
				new MM("setOnce`methods:", true, null),
				new MM("nestedClasses", true, null),
				new MM("setOnce`nestedClasses:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$MirrorsForV8$MixinBuilder = (function ($cdb, $ir, $em) {
				var self = this;
				self.$super$MirrorsForV8$MixinBuilder$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($cdb, $ir, $em) {
				var self = this;
				self._$superInit$MirrorsForV8$MixinBuilder($cdb, $ir, $em);
				self._$setOnce$mixinIR$($ir);
				self._$setOnce$declaration$($cdb);
				self._$setOnce$isMeta$($ir.$isMeta());
				self._$setOnce$slots$($ir.$slots().$collect$((function ($ea) {
					return self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$SlotMirror().$named$($ea.$name());
				})));
				self._$setOnce$methods$(self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$MutableMethodGroup().$group$within$ir$($ir.$methods().$reject$((function ($ea) {
					return $ea.$isSynthetic();
				})).$collect$((function ($ea) {
					return self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$MethodBuilder().$reflecting$in$($ea, self);
				})), self, $ir));
				self._$setOnce$nestedClasses$(self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$MutableNestedClassGroup().$group$within$ir$($ir.$nestedClasses().$collect$((function ($ea) {
					return self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$ClassDeclarationBuilder().$fromIR$forExistingMixin$within$($ea, self._$find$in$($ea.$name(), $em), $cdb);
				})), self, $ir));
				return self;
			});
			this.$find$in$ = (function ($name, $existingMixin) {
				var self = this;
				return $0.$Mixin.call(self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]).$fromRuntimeMixin$($existingMixin.runtimeMixin[$0.$compilation.call(self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]).$names().$manglePublic$($name)]);
			});
			this.$isMixinMirror = (function () {
				var self = this;
				return true;
			});
			this.$mixinIR = (function () {
				return this.$mixinIR$slot;
			});
			this.$setOnce$mixinIR$ = (function (v) {
				this.$mixinIR$slot = v;
				return this;
			});
			this.$declaration = (function () {
				return this.$declaration$slot;
			});
			this.$setOnce$declaration$ = (function (v) {
				this.$declaration$slot = v;
				return this;
			});
			this.$isMeta = (function () {
				return this.$isMeta$slot;
			});
			this.$setOnce$isMeta$ = (function (v) {
				this.$isMeta$slot = v;
				return this;
			});
			this.$slots = (function () {
				return this.$slots$slot;
			});
			this.$setOnce$slots$ = (function (v) {
				this.$slots$slot = v;
				return this;
			});
			this.$methods = (function () {
				return this.$methods$slot;
			});
			this.$setOnce$methods$ = (function (v) {
				this.$methods$slot = v;
				return this;
			});
			this.$nestedClasses = (function () {
				return this.$nestedClasses$slot;
			});
			this.$setOnce$nestedClasses$ = (function (v) {
				this.$nestedClasses$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for MirrorsForV8`MixinBuilder";
					this._$superInit$MirrorsForV8$MixinBuilder = $.$superInit$MirrorsForV8$MixinBuilder;
					this.$superInit$MirrorsForV8$MixinBuilder = dnuCatcher("$superInit$MirrorsForV8$MixinBuilder");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$find$in$ = $.$find$in$;
					this.$find$in$ = dnuCatcher("$find$in$");
					this.$isMixinMirror = this._$isMixinMirror = $.$isMixinMirror;
					this._$mixinIR = $.$mixinIR;
					this.$mixinIR = dnuCatcher("$mixinIR");
					this._$setOnce$mixinIR$ = $.$setOnce$mixinIR$;
					this.$setOnce$mixinIR$ = dnuCatcher("$setOnce$mixinIR$");
					this.$declaration = this._$declaration = $.$declaration;
					this.$setOnce$declaration$ = this._$setOnce$declaration$ = $.$setOnce$declaration$;
					this.$isMeta = this._$isMeta = $.$isMeta;
					this.$setOnce$isMeta$ = this._$setOnce$isMeta$ = $.$setOnce$isMeta$;
					this.$slots = this._$slots = $.$slots;
					this.$setOnce$slots$ = this._$setOnce$slots$ = $.$setOnce$slots$;
					this.$methods = this._$methods = $.$methods;
					this.$setOnce$methods$ = this._$setOnce$methods$ = $.$setOnce$methods$;
					this.$nestedClasses = this._$nestedClasses = $.$nestedClasses;
					this.$setOnce$nestedClasses$ = this._$setOnce$nestedClasses$ = $.$setOnce$nestedClasses$;
					this.$enclosingObjects$MirrorsForV8$MixinBuilder = enclosingObjects;
					this.$super$MirrorsForV8$MixinBuilder$slot = runtimeSuperclass;
					this["MirrorsForV8`MixinBuilder"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$mixinIR$slot = nil;
						this.$declaration$slot = nil;
						this.$isMeta$slot = nil;
						this.$slots$slot = nil;
						this.$methods$slot = nil;
						this.$nestedClasses$slot = nil;
					});
					this.basicNew = this["MirrorsForV8`MixinBuilder"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for MirrorsForV8`MixinBuilder";
				this.slots = [];
				this.methods = [
					new MM("forClassDeclaration:ir:em:", true, null),
					new MM("reflecting:", false, "public reflecting: mxn <Mixin | ClassMixin> ^<MixinBuilder> = (\r	^mxn isMeta\r		ifTrue: [(ClassDeclarationBuilder reflecting: (MixinMirror reflecting: mxn) declaration instanceSide reflectee) classSide]\r		ifFalse: [(ClassDeclarationBuilder reflecting: mxn) instanceSide]\r)")
				];
				this.nestedClasses = [];
				this.$forClassDeclaration$ir$em$ = (function ($cdb, $ir, $em) {
					return (new this.nonMeta.basicNew()).$instance$initializer($cdb, $ir, $em);
				});
				this.$reflecting$ = (function ($mxn) {
					var self = this;
					return $mxn.$isMeta().$ifTrue$ifFalse$((function () {
						return self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$ClassDeclarationBuilder().$reflecting$(self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$MixinMirror().$reflecting$($mxn).$declaration().$instanceSide().$reflectee()).$classSide();
					}), (function () {
						return self.$enclosingObjects$MirrorsForV8$MixinBuilder[0]._$ClassDeclarationBuilder().$reflecting$($mxn).$instanceSide();
					}));
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for MirrorsForV8`MixinBuilder";
						this.$forClassDeclaration$ir$em$ = this._$forClassDeclaration$ir$em$ = $.$forClassDeclaration$ir$em$;
						this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
						this.$enclosingObjects$MirrorsForV8$MixinBuilder = enclosingObjects;
						this.$super$MirrorsForV8$MixinBuilder = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$MirrorsForV8$MixinMirror = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for MirrorsForV8`MixinMirror";
			this.name = "MirrorsForV8`MixinMirror";
			this.header = "MixinMirror reflecting: mixin = (|\r	public reflectee = mixin.\r|)";
			this.slots = [new SM("reflectee", false, false)];
			this.methods = [
				new MM("superInit`MirrorsForV8`MixinMirror", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("declaration", false, "public declaration ^<ClassDeclarationMirror> = (\r	^ClassDeclarationMirror \r		reflecting: (reflectee isMeta \r			ifFalse: [reflectee]\r			ifTrue: [(Mixin fromRuntimeMixin: (js propertyOf: (js propertyOf: reflectee at: (js literal: 'runtimeMixin')) at: (js literal: 'nonMeta')))])\r)"),
				new MM("isMixinMirror", false, "public isMixinMirror ^<Boolean> = (\r	^true\r)"),
				new MM("methods", false, "public methods ^<MirrorGroup[MethodMirror]> = (\r	| raw <Array[MethodMirror]> |\r	raw:: ((js propertyOf: (js propertyOf: reflectee at: (js literal: 'runtimeMixin')) at: (js literal: 'methods'))\r		select: [:each | (js propertyOf: each at: (js literal: 'isSynthetic')) not])\r		collect: [:each | MethodMirror named: (js propertyOf: each at: (js literal: 'name')) in: self source: (js propertyOf: each at: (js literal: 'source'))].\r	^ImmutableMirrorGroup group: raw\r)"),
				new MM("nestedClasses", false, "public nestedClasses ^<MirrorGroup[ClassDeclarationMirror]> = (\r	| raw <Array[ClassDeclarationMirror]> |\r	raw:: (js propertyOf: (js propertyOf: reflectee at: (js literal: 'runtimeMixin')) at: (js literal: 'nestedClasses'))\r		collect: [:each | ClassDeclarationMirror reflecting: \r			(Mixin fromRuntimeMixin:\r				(js propertyOf: (js propertyOf: reflectee at: (js literal: 'runtimeMixin')) at: (vmmirror mangleSelector: each)))].\r	^ImmutableMirrorGroup group: raw\r)"),
				new MM("slots", false, "public slots ^<MirrorGroup[SlotDeclarationMirror]> = (\r	| raw <Array[SlotDeclarationMirror]> |\r	raw:: ((js propertyOf: (js propertyOf: reflectee at: (js literal: 'runtimeMixin')) at: (js literal: 'slots'))\r		select: [:each | (js propertyOf: each at: (js literal: 'isSynthetic')) not])\r		collect: [:each | SlotMirror named: (js propertyOf: each at: (js literal: 'name'))].\r	^ImmutableMirrorGroup group: raw\r)"),
				new MM("reflectee", true, null),
				new MM("setOnce`reflectee:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$MirrorsForV8$MixinMirror = (function ($mixin) {
				var self = this;
				self.$super$MirrorsForV8$MixinMirror$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($mixin) {
				var self = this;
				self._$superInit$MirrorsForV8$MixinMirror($mixin);
				self._$setOnce$reflectee$($mixin);
				return self;
			});
			this.$declaration = (function () {
				var self = this;
				return self.$enclosingObjects$MirrorsForV8$MixinMirror[0]._$ClassDeclarationMirror().$reflecting$(self._$reflectee().$isMeta().$ifFalse$ifTrue$((function () {
					return self._$reflectee();
				}), (function () {
					return $0.$Mixin.call(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$fromRuntimeMixin$(self._$reflectee().runtimeMixin.nonMeta);
				})));
			});
			this.$isMixinMirror = (function () {
				var self = this;
				return true;
			});
			this.$methods = (function () {
				var self = this;
				var $raw = nil;
				$raw = self._$reflectee().runtimeMixin.methods.$select$((function ($each) {
					return $each.isSynthetic.$not();
				})).$collect$((function ($each) {
					return self.$enclosingObjects$MirrorsForV8$MixinMirror[0]._$MethodMirror().$named$in$source$($each.name, self, $each.source);
				}));
				return $0.$ImmutableMirrorGroup.call(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$group$($raw);
			});
			this.$nestedClasses = (function () {
				var self = this;
				var $raw = nil;
				$raw = self._$reflectee().runtimeMixin.nestedClasses.$collect$((function ($each) {
					return self.$enclosingObjects$MirrorsForV8$MixinMirror[0]._$ClassDeclarationMirror().$reflecting$($0.$Mixin.call(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$fromRuntimeMixin$(self._$reflectee().runtimeMixin[$0.$vmmirror.call(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$mangleSelector$($each)]));
				}));
				return $0.$ImmutableMirrorGroup.call(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$group$($raw);
			});
			this.$slots = (function () {
				var self = this;
				var $raw = nil;
				$raw = self._$reflectee().runtimeMixin.slots.$select$((function ($each) {
					return $each.isSynthetic.$not();
				})).$collect$((function ($each) {
					return self.$enclosingObjects$MirrorsForV8$MixinMirror[0]._$SlotMirror().$named$($each.name);
				}));
				return $0.$ImmutableMirrorGroup.call(self.$enclosingObjects$MirrorsForV8$MixinMirror[0]).$group$($raw);
			});
			this.$reflectee = (function () {
				return this.$reflectee$slot;
			});
			this.$setOnce$reflectee$ = (function (v) {
				this.$reflectee$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for MirrorsForV8`MixinMirror";
					this._$superInit$MirrorsForV8$MixinMirror = $.$superInit$MirrorsForV8$MixinMirror;
					this.$superInit$MirrorsForV8$MixinMirror = dnuCatcher("$superInit$MirrorsForV8$MixinMirror");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$declaration = this._$declaration = $.$declaration;
					this.$isMixinMirror = this._$isMixinMirror = $.$isMixinMirror;
					this.$methods = this._$methods = $.$methods;
					this.$nestedClasses = this._$nestedClasses = $.$nestedClasses;
					this.$slots = this._$slots = $.$slots;
					this.$reflectee = this._$reflectee = $.$reflectee;
					this.$setOnce$reflectee$ = this._$setOnce$reflectee$ = $.$setOnce$reflectee$;
					this.$enclosingObjects$MirrorsForV8$MixinMirror = enclosingObjects;
					this.$super$MirrorsForV8$MixinMirror$slot = runtimeSuperclass;
					this["MirrorsForV8`MixinMirror"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$reflectee$slot = nil;
					});
					this.basicNew = this["MirrorsForV8`MixinMirror"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for MirrorsForV8`MixinMirror";
				this.slots = [];
				this.methods = [new MM("reflecting:", true, null)];
				this.nestedClasses = [];
				this.$reflecting$ = (function ($mixin) {
					return (new this.nonMeta.basicNew()).$instance$initializer($mixin);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for MirrorsForV8`MixinMirror";
						this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
						this.$enclosingObjects$MirrorsForV8$MixinMirror = enclosingObjects;
						this.$super$MirrorsForV8$MixinMirror = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$MirrorsForV8$MutableMethodGroup = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for MirrorsForV8`MutableMethodGroup";
			this.name = "MirrorsForV8`MutableMethodGroup";
			this.header = "MutableMethodGroup group: ms within: mb ir: ir = MutableMirrorGroup group: ms within: mb ir: ir ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`MirrorsForV8`MutableMethodGroup", true, "group: ms within: mb ir: ir"),
				new MM("instance`initializer", true, "group: ms within: mb ir: ir"),
				new MM("addFromSource:", false, "public addFromSource: s <String> = (\r	| \r	result <LowLevelMethodMirror>\r	cat\r	newM\r	|\r	result:: compiler\r		compileMethodSource: (CharacterReadStream on: s) \r		within: enclosingMixin.\r	\r	(* TODO: copy old category if any *)\r	(* TODO: check for name conflicts *)\r	\r	newM:: MethodBuilder reflecting: result in: enclosingMixin.\r	mixinIR methods removeAllSuchThat: [:ea | ea name = result name].\r	mixinIR methods add: result.\r	(* TODO: remove existing method with same name if any from the mirror group as well as the mixin ir *)\r	super addMirror: newM.\r	^newM\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$MirrorsForV8$MutableMethodGroup = (function ($ms, $mb, $ir) {
				var self = this;
				self.$super$MirrorsForV8$MutableMethodGroup$slot._$instance$initializer.call(self, $ms, $mb, $ir);
				return self;
			});
			this.$instance$initializer = (function ($ms, $mb, $ir) {
				var self = this;
				self._$superInit$MirrorsForV8$MutableMethodGroup($ms, $mb, $ir);
				return self;
			});
			this.$addFromSource$ = (function ($s) {
				var self = this;
				var $result = nil;
				var $cat = nil;
				var $newM = nil;
				$result = $0.$compiler.call(self.$enclosingObjects$MirrorsForV8$MutableMethodGroup[0]).$compileMethodSource$within$($0.$CharacterReadStream.call(self.$enclosingObjects$MirrorsForV8$MutableMethodGroup[0]).$on$($s), self._$enclosingMixin());
				$newM = self.$enclosingObjects$MirrorsForV8$MutableMethodGroup[0]._$MethodBuilder().$reflecting$in$($result, self._$enclosingMixin());
				self._$mixinIR().$methods().$removeAllSuchThat$((function ($ea) {
					return $ea.$name().$$equal($result.$name());
				}));
				self._$mixinIR().$methods().$add$($result);
				self.$super$MirrorsForV8$MutableMethodGroup$slot._$addMirror$.call(self, $newM);
				return $newM;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for MirrorsForV8`MutableMethodGroup";
					this._$superInit$MirrorsForV8$MutableMethodGroup = $.$superInit$MirrorsForV8$MutableMethodGroup;
					this.$superInit$MirrorsForV8$MutableMethodGroup = dnuCatcher("$superInit$MirrorsForV8$MutableMethodGroup");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$addFromSource$ = this._$addFromSource$ = $.$addFromSource$;
					this.$enclosingObjects$MirrorsForV8$MutableMethodGroup = enclosingObjects;
					this.$super$MirrorsForV8$MutableMethodGroup$slot = runtimeSuperclass;
					this["MirrorsForV8`MutableMethodGroup"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["MirrorsForV8`MutableMethodGroup"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for MirrorsForV8`MutableMethodGroup";
				this.slots = [];
				this.methods = [new MM("group:within:ir:", true, null)];
				this.nestedClasses = [];
				this.$group$within$ir$ = (function ($ms, $mb, $ir) {
					return (new this.nonMeta.basicNew()).$instance$initializer($ms, $mb, $ir);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for MirrorsForV8`MutableMethodGroup";
						this.$group$within$ir$ = this._$group$within$ir$ = $.$group$within$ir$;
						this.$enclosingObjects$MirrorsForV8$MutableMethodGroup = enclosingObjects;
						this.$super$MirrorsForV8$MutableMethodGroup = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$MirrorsForV8$MutableMirrorGroup = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for MirrorsForV8`MutableMirrorGroup";
			this.name = "MirrorsForV8`MutableMirrorGroup";
			this.header = "MutableMirrorGroup group: ms within: mb ir: ir = ImmutableMirrorGroup group: ms (|\rpublic enclosingMixin = mb.\rprotected mixinIR = ir.\r|)";
			this.slots = [
				new SM("enclosingMixin", false, false),
				new SM("mixinIR", false, false)
			];
			this.methods = [
				new MM("superInit`MirrorsForV8`MutableMirrorGroup", true, "group: ms"),
				new MM("instance`initializer", true, "group: ms"),
				new MM("addMirror:", false, "addMirror: m <Mirror>  = (\r	mirrors keysAndValuesDo: [:index :mirror | \r		mirror simpleName = m simpleName ifTrue: [^mirrors at: index put: m]].\r	^mirrors addLast: m\r)"),
				new MM("enclosingMixin", true, null),
				new MM("setOnce`enclosingMixin:", true, null),
				new MM("mixinIR", true, null),
				new MM("setOnce`mixinIR:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$MirrorsForV8$MutableMirrorGroup = (function ($ms, $mb, $ir) {
				var self = this;
				self.$super$MirrorsForV8$MutableMirrorGroup$slot._$instance$initializer.call(self, $ms);
				return self;
			});
			this.$instance$initializer = (function ($ms, $mb, $ir) {
				var self = this;
				self._$superInit$MirrorsForV8$MutableMirrorGroup($ms, $mb, $ir);
				self._$setOnce$enclosingMixin$($mb);
				self._$setOnce$mixinIR$($ir);
				return self;
			});
			this.$addMirror$ = (function ($m) {
				var self = this;
				var NLR = new Object();
				try {
					self._$mirrors().$keysAndValuesDo$((function ($index, $mirror) {
						return $mirror.$simpleName().$$equal($m.$simpleName()).$ifTrue$((function () {
							{
								NLR.value = self._$mirrors().$at$put$($index, $m);
								throw NLR;
							};
						}));
					}));
					return self._$mirrors().$addLast$($m);
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$enclosingMixin = (function () {
				return this.$enclosingMixin$slot;
			});
			this.$setOnce$enclosingMixin$ = (function (v) {
				this.$enclosingMixin$slot = v;
				return this;
			});
			this.$mixinIR = (function () {
				return this.$mixinIR$slot;
			});
			this.$setOnce$mixinIR$ = (function (v) {
				this.$mixinIR$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for MirrorsForV8`MutableMirrorGroup";
					this._$superInit$MirrorsForV8$MutableMirrorGroup = $.$superInit$MirrorsForV8$MutableMirrorGroup;
					this.$superInit$MirrorsForV8$MutableMirrorGroup = dnuCatcher("$superInit$MirrorsForV8$MutableMirrorGroup");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$addMirror$ = $.$addMirror$;
					this.$addMirror$ = dnuCatcher("$addMirror$");
					this.$enclosingMixin = this._$enclosingMixin = $.$enclosingMixin;
					this.$setOnce$enclosingMixin$ = this._$setOnce$enclosingMixin$ = $.$setOnce$enclosingMixin$;
					this._$mixinIR = $.$mixinIR;
					this.$mixinIR = dnuCatcher("$mixinIR");
					this._$setOnce$mixinIR$ = $.$setOnce$mixinIR$;
					this.$setOnce$mixinIR$ = dnuCatcher("$setOnce$mixinIR$");
					this.$enclosingObjects$MirrorsForV8$MutableMirrorGroup = enclosingObjects;
					this.$super$MirrorsForV8$MutableMirrorGroup$slot = runtimeSuperclass;
					this["MirrorsForV8`MutableMirrorGroup"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$enclosingMixin$slot = nil;
						this.$mixinIR$slot = nil;
					});
					this.basicNew = this["MirrorsForV8`MutableMirrorGroup"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for MirrorsForV8`MutableMirrorGroup";
				this.slots = [];
				this.methods = [new MM("group:within:ir:", true, null)];
				this.nestedClasses = [];
				this.$group$within$ir$ = (function ($ms, $mb, $ir) {
					return (new this.nonMeta.basicNew()).$instance$initializer($ms, $mb, $ir);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for MirrorsForV8`MutableMirrorGroup";
						this.$group$within$ir$ = this._$group$within$ir$ = $.$group$within$ir$;
						this.$enclosingObjects$MirrorsForV8$MutableMirrorGroup = enclosingObjects;
						this.$super$MirrorsForV8$MutableMirrorGroup = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$MirrorsForV8$MutableNestedClassGroup = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for MirrorsForV8`MutableNestedClassGroup";
			this.name = "MirrorsForV8`MutableNestedClassGroup";
			this.header = "MutableNestedClassGroup group: ms within: mb ir: ir = MutableMirrorGroup group: ms within: mb ir: ir ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`MirrorsForV8`MutableNestedClassGroup", true, "group: ms within: mb ir: ir"),
				new MM("instance`initializer", true, "group: ms within: mb ir: ir")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$MirrorsForV8$MutableNestedClassGroup = (function ($ms, $mb, $ir) {
				var self = this;
				self.$super$MirrorsForV8$MutableNestedClassGroup$slot._$instance$initializer.call(self, $ms, $mb, $ir);
				return self;
			});
			this.$instance$initializer = (function ($ms, $mb, $ir) {
				var self = this;
				self._$superInit$MirrorsForV8$MutableNestedClassGroup($ms, $mb, $ir);
				return self;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for MirrorsForV8`MutableNestedClassGroup";
					this._$superInit$MirrorsForV8$MutableNestedClassGroup = $.$superInit$MirrorsForV8$MutableNestedClassGroup;
					this.$superInit$MirrorsForV8$MutableNestedClassGroup = dnuCatcher("$superInit$MirrorsForV8$MutableNestedClassGroup");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$enclosingObjects$MirrorsForV8$MutableNestedClassGroup = enclosingObjects;
					this.$super$MirrorsForV8$MutableNestedClassGroup$slot = runtimeSuperclass;
					this["MirrorsForV8`MutableNestedClassGroup"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["MirrorsForV8`MutableNestedClassGroup"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for MirrorsForV8`MutableNestedClassGroup";
				this.slots = [];
				this.methods = [new MM("group:within:ir:", true, null)];
				this.nestedClasses = [];
				this.$group$within$ir$ = (function ($ms, $mb, $ir) {
					return (new this.nonMeta.basicNew()).$instance$initializer($ms, $mb, $ir);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for MirrorsForV8`MutableNestedClassGroup";
						this.$group$within$ir$ = this._$group$within$ir$ = $.$group$within$ir$;
						this.$enclosingObjects$MirrorsForV8$MutableNestedClassGroup = enclosingObjects;
						this.$super$MirrorsForV8$MutableNestedClassGroup = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$MirrorsForV8$ObjectMirror = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for MirrorsForV8`ObjectMirror";
			this.name = "MirrorsForV8`ObjectMirror";
			this.header = "ObjectMirror reflecting: r = (|\r	public reflectee = r.\r|)";
			this.slots = [new SM("reflectee", false, false)];
			this.methods = [
				new MM("superInit`MirrorsForV8`ObjectMirror", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("evaluate:ifCompilerError:ifError:", false, "public evaluate: expression <String>\rifCompilerError: compilationErrorHandler <[:Error]> \rifError: evalErrorHandler <[:Error]> ^<ObjectMirror> = (\r	|\r	compiler\r	ir\r	dnuHandlers\r	writer\r	stream\r	src\r	func\r	result\r	|\r	[compiler:: compilation Compiler new.\r	ir:: compiler\r			compileExpressionSource: (CharacterReadStream on: expression)\r			inMixin: (getClassIfFail: []) mixin.\r	dnuHandlers:: compiler dnuHandlers.\r	\r	writer:: generation Writer new.\r	stream:: CharacterWriteStream on: (Array new: 100).\r	writer generateSourceFor: dnuHandlers on: stream.\r	src:: String withAll: stream contents.\r	func:: js call: (js ident: 'eval') with: {'(',src, ')'}.\r	js call: func with: {js verbatim: 'Object.prototype'}.\r	\r	writer:: generation Writer new.\r	stream:: CharacterWriteStream on: (Array new: 100).\r	writer generateSourceFor: ir function on: stream.\r	src:: String withAll: stream contents.\r	src out.\r	func:: js call: (js ident: 'eval') with: {src}.\r	] on: Error do: [:e | ^compilationErrorHandler value: e].\r	[result:: js call: (js propertyOf: func at: (js literal: 'call')) with: {reflectee}.]\r		on: Error do: [:e | ^evalErrorHandler value: e].\r	^ObjectMirror reflecting: result\r)"),
				new MM("getClassIfFail:", false, "public getClassIfFail: onFail = (\r	^ClassMirror reflecting:\r		(js propertyOf: reflectee at: (js literal: 'newspeakClass')).\r)"),
				new MM("getSlot:ifFail:", false, "public getSlot: selector ifFail: failBlock = (\r	|\r	mangledName = vmmirror mangleSelector: selector, '`slot'.\r	raw = js propertyOf: reflectee at: mangledName.\r	|\r	(js operator: '===' with: (js ident: 'undefined') and: raw) ifTrue: [^failBlock value].\r	^ObjectMirror reflecting: raw\r)"),
				new MM("reflecteeIfFail:", false, "public reflecteeIfFail: onFail = (\r	^reflectee\r)"),
				new MM("setSlot:to:ifFail:", false, "public setSlot: selector to: value ifFail: failBlock = (\r	|\r	mangledName = vmmirror mangleSelector: selector, '`slot'.\r	raw = js propertyOf: reflectee at: mangledName.\r	|\r	(js operator: '===' with: (js ident: 'undefined') and: raw) ifTrue: [^failBlock value].\r	js assign: (js propertyOf: reflectee at: mangledName) toBe: value.\r)"),
				new MM("reflectee", true, null),
				new MM("setOnce`reflectee:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$MirrorsForV8$ObjectMirror = (function ($r) {
				var self = this;
				self.$super$MirrorsForV8$ObjectMirror$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($r) {
				var self = this;
				self._$superInit$MirrorsForV8$ObjectMirror($r);
				self._$setOnce$reflectee$($r);
				return self;
			});
			this.$evaluate$ifCompilerError$ifError$ = (function ($expression, $compilationErrorHandler, $evalErrorHandler) {
				var self = this;
				var NLR = new Object();
				try {
					var $compiler = nil;
					var $ir = nil;
					var $dnuHandlers = nil;
					var $writer = nil;
					var $stream = nil;
					var $src = nil;
					var $func = nil;
					var $result = nil;
					((function () {
						$compiler = $0.$compilation.call(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$Compiler().$new();
						$ir = $compiler.$compileExpressionSource$inMixin$($0.$CharacterReadStream.call(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$on$($expression), self._$getClassIfFail$((function () {
							return nil;
						})).$mixin());
						$dnuHandlers = $compiler.$dnuHandlers();
						$writer = $0.$generation.call(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$Writer().$new();
						$stream = $0.$CharacterWriteStream.call(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$on$(self._$Array().$new$(100));
						$writer.$generateSourceFor$on$($dnuHandlers, $stream);
						$src = self._$String().$withAll$($stream.$contents());
						$func = eval(("(").$$comma($src).$$comma(")"));
						$func(Object.prototype);
						$writer = $0.$generation.call(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$Writer().$new();
						$stream = $0.$CharacterWriteStream.call(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$on$(self._$Array().$new$(100));
						$writer.$generateSourceFor$on$($ir.$function(), $stream);
						$src = self._$String().$withAll$($stream.$contents());
						$src.$out();
						return $func = eval($src);
					})).$on$do$(self._$Error(), (function ($e) {
						{
							NLR.value = $compilationErrorHandler.$value$($e);
							throw NLR;
						};
					}));
					((function () {
						return $result = $func.call(self._$reflectee());
					})).$on$do$(self._$Error(), (function ($e) {
						{
							NLR.value = $evalErrorHandler.$value$($e);
							throw NLR;
						};
					}));
					return self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]._$ObjectMirror().$reflecting$($result);
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$getClassIfFail$ = (function ($onFail) {
				var self = this;
				return self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]._$ClassMirror().$reflecting$(self._$reflectee().newspeakClass);
			});
			this.$getSlot$ifFail$ = (function ($selector, $failBlock) {
				var self = this;
				var $mangledName = nil;
				var $raw = nil;
				$mangledName = $0.$vmmirror.call(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$mangleSelector$($selector.$$comma("`slot"));
				$raw = self._$reflectee()[$mangledName];
				if (undefined === $raw) {
					return $failBlock.$value();
				} else {
					nil;
				};
				return self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]._$ObjectMirror().$reflecting$($raw);
			});
			this.$reflecteeIfFail$ = (function ($onFail) {
				var self = this;
				return self._$reflectee();
			});
			this.$setSlot$to$ifFail$ = (function ($selector, $value, $failBlock) {
				var self = this;
				var $mangledName = nil;
				var $raw = nil;
				$mangledName = $0.$vmmirror.call(self.$enclosingObjects$MirrorsForV8$ObjectMirror[0]).$mangleSelector$($selector.$$comma("`slot"));
				$raw = self._$reflectee()[$mangledName];
				if (undefined === $raw) {
					return $failBlock.$value();
				} else {
					nil;
				};
				self._$reflectee()[$mangledName] = $value;
				return self;
			});
			this.$reflectee = (function () {
				return this.$reflectee$slot;
			});
			this.$setOnce$reflectee$ = (function (v) {
				this.$reflectee$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for MirrorsForV8`ObjectMirror";
					this._$superInit$MirrorsForV8$ObjectMirror = $.$superInit$MirrorsForV8$ObjectMirror;
					this.$superInit$MirrorsForV8$ObjectMirror = dnuCatcher("$superInit$MirrorsForV8$ObjectMirror");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$evaluate$ifCompilerError$ifError$ = this._$evaluate$ifCompilerError$ifError$ = $.$evaluate$ifCompilerError$ifError$;
					this.$getClassIfFail$ = this._$getClassIfFail$ = $.$getClassIfFail$;
					this.$getSlot$ifFail$ = this._$getSlot$ifFail$ = $.$getSlot$ifFail$;
					this.$reflecteeIfFail$ = this._$reflecteeIfFail$ = $.$reflecteeIfFail$;
					this.$setSlot$to$ifFail$ = this._$setSlot$to$ifFail$ = $.$setSlot$to$ifFail$;
					this.$reflectee = this._$reflectee = $.$reflectee;
					this.$setOnce$reflectee$ = this._$setOnce$reflectee$ = $.$setOnce$reflectee$;
					this.$enclosingObjects$MirrorsForV8$ObjectMirror = enclosingObjects;
					this.$super$MirrorsForV8$ObjectMirror$slot = runtimeSuperclass;
					this["MirrorsForV8`ObjectMirror"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$reflectee$slot = nil;
					});
					this.basicNew = this["MirrorsForV8`ObjectMirror"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for MirrorsForV8`ObjectMirror";
				this.slots = [];
				this.methods = [new MM("reflecting:", true, null)];
				this.nestedClasses = [];
				this.$reflecting$ = (function ($r) {
					return (new this.nonMeta.basicNew()).$instance$initializer($r);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for MirrorsForV8`ObjectMirror";
						this.$reflecting$ = this._$reflecting$ = $.$reflecting$;
						this.$enclosingObjects$MirrorsForV8$ObjectMirror = enclosingObjects;
						this.$super$MirrorsForV8$ObjectMirror = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$MirrorsForV8$SlotMirror = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for MirrorsForV8`SlotMirror";
			this.name = "MirrorsForV8`SlotMirror";
			this.header = "SlotMirror named: n = (|\rpublic name = n.\rpublic accessModifier = #public. (*BOGUS*)\r|)";
			this.slots = [
				new SM("name", false, false),
				new SM("accessModifier", false, false)
			];
			this.methods = [
				new MM("superInit`MirrorsForV8`SlotMirror", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("name", true, null),
				new MM("setOnce`name:", true, null),
				new MM("accessModifier", true, null),
				new MM("setOnce`accessModifier:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$MirrorsForV8$SlotMirror = (function ($n) {
				var self = this;
				self.$super$MirrorsForV8$SlotMirror$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($n) {
				var self = this;
				self._$superInit$MirrorsForV8$SlotMirror($n);
				self._$setOnce$name$($n);
				self._$setOnce$accessModifier$("public");
				return self;
			});
			this.$name = (function () {
				return this.$name$slot;
			});
			this.$setOnce$name$ = (function (v) {
				this.$name$slot = v;
				return this;
			});
			this.$accessModifier = (function () {
				return this.$accessModifier$slot;
			});
			this.$setOnce$accessModifier$ = (function (v) {
				this.$accessModifier$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for MirrorsForV8`SlotMirror";
					this._$superInit$MirrorsForV8$SlotMirror = $.$superInit$MirrorsForV8$SlotMirror;
					this.$superInit$MirrorsForV8$SlotMirror = dnuCatcher("$superInit$MirrorsForV8$SlotMirror");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$name = this._$name = $.$name;
					this.$setOnce$name$ = this._$setOnce$name$ = $.$setOnce$name$;
					this.$accessModifier = this._$accessModifier = $.$accessModifier;
					this.$setOnce$accessModifier$ = this._$setOnce$accessModifier$ = $.$setOnce$accessModifier$;
					this.$enclosingObjects$MirrorsForV8$SlotMirror = enclosingObjects;
					this.$super$MirrorsForV8$SlotMirror$slot = runtimeSuperclass;
					this["MirrorsForV8`SlotMirror"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$name$slot = nil;
						this.$accessModifier$slot = nil;
					});
					this.basicNew = this["MirrorsForV8`SlotMirror"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for MirrorsForV8`SlotMirror";
				this.slots = [];
				this.methods = [new MM("named:", true, null)];
				this.nestedClasses = [];
				this.$named$ = (function ($n) {
					return (new this.nonMeta.basicNew()).$instance$initializer($n);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for MirrorsForV8`SlotMirror";
						this.$named$ = this._$named$ = $.$named$;
						this.$enclosingObjects$MirrorsForV8$SlotMirror = enclosingObjects;
						this.$super$MirrorsForV8$SlotMirror = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$MirrorsForV8$ClassDeclarationBuilder.enclosingMixin = this;
		this.$MirrorsForV8$ClassDeclarationMirror.enclosingMixin = this;
		this.$MirrorsForV8$ClassHeaderMirror.enclosingMixin = this;
		this.$MirrorsForV8$ClassMirror.enclosingMixin = this;
		this.$MirrorsForV8$MethodBuilder.enclosingMixin = this;
		this.$MirrorsForV8$MethodMirror.enclosingMixin = this;
		this.$MirrorsForV8$MixinBuilder.enclosingMixin = this;
		this.$MirrorsForV8$MixinMirror.enclosingMixin = this;
		this.$MirrorsForV8$MutableMethodGroup.enclosingMixin = this;
		this.$MirrorsForV8$MutableMirrorGroup.enclosingMixin = this;
		this.$MirrorsForV8$MutableNestedClassGroup.enclosingMixin = this;
		this.$MirrorsForV8$ObjectMirror.enclosingMixin = this;
		this.$MirrorsForV8$SlotMirror.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for MirrorsForV8";
				this._$superInit$MirrorsForV8 = $.$superInit$MirrorsForV8;
				this.$superInit$MirrorsForV8 = dnuCatcher("$superInit$MirrorsForV8");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this._$classDeclIRFor$within$ = $.$classDeclIRFor$within$;
				this.$classDeclIRFor$within$ = dnuCatcher("$classDeclIRFor$within$");
				this._$updateMixin$from$by$ = $.$updateMixin$from$by$;
				this.$updateMixin$from$by$ = dnuCatcher("$updateMixin$from$by$");
				this.$ClassDeclarationBuilder = this._$ClassDeclarationBuilder = $.$ClassDeclarationBuilder;
				this.$ClassDeclarationMirror = this._$ClassDeclarationMirror = $.$ClassDeclarationMirror;
				this.$ClassHeaderMirror = this._$ClassHeaderMirror = $.$ClassHeaderMirror;
				this.$ClassMirror = this._$ClassMirror = $.$ClassMirror;
				this.$MethodBuilder = this._$MethodBuilder = $.$MethodBuilder;
				this.$MethodMirror = this._$MethodMirror = $.$MethodMirror;
				this.$MixinBuilder = this._$MixinBuilder = $.$MixinBuilder;
				this.$MixinMirror = this._$MixinMirror = $.$MixinMirror;
				this.$MutableMethodGroup = this._$MutableMethodGroup = $.$MutableMethodGroup;
				this.$MutableMirrorGroup = this._$MutableMirrorGroup = $.$MutableMirrorGroup;
				this.$MutableNestedClassGroup = this._$MutableNestedClassGroup = $.$MutableNestedClassGroup;
				this.$ObjectMirror = this._$ObjectMirror = $.$ObjectMirror;
				this.$SlotMirror = this._$SlotMirror = $.$SlotMirror;
				this.$MirrorsForV8$ClassDeclarationBuilder = this._$MirrorsForV8$ClassDeclarationBuilder = $.$MirrorsForV8$ClassDeclarationBuilder;
				this.$MirrorsForV8$ClassDeclarationBuilder$ = this._$MirrorsForV8$ClassDeclarationBuilder$ = $.$MirrorsForV8$ClassDeclarationBuilder$;
				this.$MirrorsForV8$ClassDeclarationMirror = this._$MirrorsForV8$ClassDeclarationMirror = $.$MirrorsForV8$ClassDeclarationMirror;
				this.$MirrorsForV8$ClassDeclarationMirror$ = this._$MirrorsForV8$ClassDeclarationMirror$ = $.$MirrorsForV8$ClassDeclarationMirror$;
				this.$MirrorsForV8$ClassHeaderMirror = this._$MirrorsForV8$ClassHeaderMirror = $.$MirrorsForV8$ClassHeaderMirror;
				this.$MirrorsForV8$ClassHeaderMirror$ = this._$MirrorsForV8$ClassHeaderMirror$ = $.$MirrorsForV8$ClassHeaderMirror$;
				this.$MirrorsForV8$ClassMirror = this._$MirrorsForV8$ClassMirror = $.$MirrorsForV8$ClassMirror;
				this.$MirrorsForV8$ClassMirror$ = this._$MirrorsForV8$ClassMirror$ = $.$MirrorsForV8$ClassMirror$;
				this.$MirrorsForV8$MethodBuilder = this._$MirrorsForV8$MethodBuilder = $.$MirrorsForV8$MethodBuilder;
				this.$MirrorsForV8$MethodBuilder$ = this._$MirrorsForV8$MethodBuilder$ = $.$MirrorsForV8$MethodBuilder$;
				this.$MirrorsForV8$MethodMirror = this._$MirrorsForV8$MethodMirror = $.$MirrorsForV8$MethodMirror;
				this.$MirrorsForV8$MethodMirror$ = this._$MirrorsForV8$MethodMirror$ = $.$MirrorsForV8$MethodMirror$;
				this.$MirrorsForV8$MixinBuilder = this._$MirrorsForV8$MixinBuilder = $.$MirrorsForV8$MixinBuilder;
				this.$MirrorsForV8$MixinBuilder$ = this._$MirrorsForV8$MixinBuilder$ = $.$MirrorsForV8$MixinBuilder$;
				this.$MirrorsForV8$MixinMirror = this._$MirrorsForV8$MixinMirror = $.$MirrorsForV8$MixinMirror;
				this.$MirrorsForV8$MixinMirror$ = this._$MirrorsForV8$MixinMirror$ = $.$MirrorsForV8$MixinMirror$;
				this.$MirrorsForV8$MutableMethodGroup = this._$MirrorsForV8$MutableMethodGroup = $.$MirrorsForV8$MutableMethodGroup;
				this.$MirrorsForV8$MutableMethodGroup$ = this._$MirrorsForV8$MutableMethodGroup$ = $.$MirrorsForV8$MutableMethodGroup$;
				this.$MirrorsForV8$MutableMirrorGroup = this._$MirrorsForV8$MutableMirrorGroup = $.$MirrorsForV8$MutableMirrorGroup;
				this.$MirrorsForV8$MutableMirrorGroup$ = this._$MirrorsForV8$MutableMirrorGroup$ = $.$MirrorsForV8$MutableMirrorGroup$;
				this.$MirrorsForV8$MutableNestedClassGroup = this._$MirrorsForV8$MutableNestedClassGroup = $.$MirrorsForV8$MutableNestedClassGroup;
				this.$MirrorsForV8$MutableNestedClassGroup$ = this._$MirrorsForV8$MutableNestedClassGroup$ = $.$MirrorsForV8$MutableNestedClassGroup$;
				this.$MirrorsForV8$ObjectMirror = this._$MirrorsForV8$ObjectMirror = $.$MirrorsForV8$ObjectMirror;
				this.$MirrorsForV8$ObjectMirror$ = this._$MirrorsForV8$ObjectMirror$ = $.$MirrorsForV8$ObjectMirror$;
				this.$MirrorsForV8$SlotMirror = this._$MirrorsForV8$SlotMirror = $.$MirrorsForV8$SlotMirror;
				this.$MirrorsForV8$SlotMirror$ = this._$MirrorsForV8$SlotMirror$ = $.$MirrorsForV8$SlotMirror$;
				this.$enclosingObjects$MirrorsForV8 = enclosingObjects;
				this.$super$MirrorsForV8$slot = runtimeSuperclass;
				this.MirrorsForV8 = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$List$slot = nil;
					this.$Mixin$slot = nil;
					this.$CharacterReadStream$slot = nil;
					this.$CharacterWriteStream$slot = nil;
					this.$ImmutableMirrorGroup$slot = nil;
					this.$vmmirror$slot = nil;
					this.$parserLib$slot = nil;
					this.$grammar$slot = nil;
					this.$asts$slot = nil;
					this.$parsing$slot = nil;
					this.$generation$slot = nil;
					this.$compilation$slot = nil;
					this.$compiler$slot = nil;
					this.$MirrorsForV8$ClassDeclarationBuilder$slot = nil;
					this.$MirrorsForV8$ClassDeclarationMirror$slot = nil;
					this.$MirrorsForV8$ClassHeaderMirror$slot = nil;
					this.$MirrorsForV8$ClassMirror$slot = nil;
					this.$MirrorsForV8$MethodBuilder$slot = nil;
					this.$MirrorsForV8$MethodMirror$slot = nil;
					this.$MirrorsForV8$MixinBuilder$slot = nil;
					this.$MirrorsForV8$MixinMirror$slot = nil;
					this.$MirrorsForV8$MutableMethodGroup$slot = nil;
					this.$MirrorsForV8$MutableMirrorGroup$slot = nil;
					this.$MirrorsForV8$MutableNestedClassGroup$slot = nil;
					this.$MirrorsForV8$ObjectMirror$slot = nil;
					this.$MirrorsForV8$SlotMirror$slot = nil;
				});
				this.basicNew = this.MirrorsForV8;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for MirrorsForV8";
			this.slots = [];
			this.methods = [new MM("usingPlatform:vmMirror:", true, null)];
			this.nestedClasses = [];
			this.$usingPlatform$vmMirror$ = (function ($p, $vmm) {
				return (new this.nonMeta.basicNew()).$instance$initializer($p, $vmm);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for MirrorsForV8";
					this.$usingPlatform$vmMirror$ = this._$usingPlatform$vmMirror$ = $.$usingPlatform$vmMirror$;
					this.$enclosingObjects$MirrorsForV8 = enclosingObjects;
					this.$super$MirrorsForV8 = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$MirrorGroups = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for MirrorGroups";
		this.name = "MirrorGroups";
		this.header = "MirrorGroups usingLib: platform = (\r(* Mirror groups are designed to aggregate mirrors of any kind.\rThey make the mirror API compositional and not too\rheavyweight.  Consider the API of an immutable mixin mirror:\r\r\rname\rmethods\rslots\rclasses\r\rthe latter three all return mirror groups, which all share a common protocol:\r\rfindMirrorNamed: #foo\rincludesMirrorNamed: #foo\rdo: blk\r\rIn a more traditional API, we would need to support methods like:\r\rfindMethodNamed: #foo\rfindSlotNamed: #foo\rfindClassNamed: #foo\r\rincludesMethodNamed: #foo\rincludesSlotNamed: #foo\rincludesClassNamed: #foo\r\rmethodsDo: blk\rslotsDo: blk\rclassesDo: blk\r\rThis means 3 times as many methods, which need to be kept consistent.\rWhen the mirror is mutable, the actual mixin API does not change much. The \rimplementation returns mutable mirror groups, which support:\r\raddMirror: aMirror\raddFromSource: aSourceString\r\rinstead of having the mutable mixin support:\r\raddMethodMirror:\raddMethodFromSource:\raddSlotMirror:\raddSlotFromSource:\raddClassStencilMirror:\raddClassFromSource:\r\r   Copyright 2008 Cadence Design Systems, Inc.\r   Copyright 2011 Ryan Macnak\r   \r   Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)| \rprivate Collection = platform collections Collection.\rprivate OrderedCollection = platform collections OrderedCollection.\r|)";
		this.slots = [
			new SM("Collection", false, false),
			new SM("OrderedCollection", false, false),
			new SM("MirrorGroups`ImmutableMirrorGroup", true, true),
			new SM("MirrorGroups`MirrorGroup", true, true)
		];
		this.methods = [
			new MM("superInit`MirrorGroups", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("ImmutableMirrorGroup", true, null),
			new MM("MirrorGroup", true, null),
			new MM("Collection", true, null),
			new MM("setOnce`Collection:", true, null),
			new MM("OrderedCollection", true, null),
			new MM("setOnce`OrderedCollection:", true, null),
			new MM("MirrorGroups`ImmutableMirrorGroup", true, null),
			new MM("MirrorGroups`ImmutableMirrorGroup:", true, null),
			new MM("MirrorGroups`MirrorGroup", true, null),
			new MM("MirrorGroups`MirrorGroup:", true, null)
		];
		this.nestedClasses = [
			"MirrorGroups`ImmutableMirrorGroup",
			"MirrorGroups`MirrorGroup"
		];
		this.applications = [];
		this.$superInit$MirrorGroups = (function ($platform) {
			var self = this;
			self.$super$MirrorGroups$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($platform) {
			var self = this;
			self._$superInit$MirrorGroups($platform);
			$0.$setOnce$Collection$.call(self, $platform.$collections().$Collection());
			$0.$setOnce$OrderedCollection$.call(self, $platform.$collections().$OrderedCollection());
			return self;
		});
		this.$ImmutableMirrorGroup = (function () {
			if (nil === this.$MirrorGroups$ImmutableMirrorGroup$slot) {
				var self = this;
				var superclass = $0.$Collection.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$MirrorGroups);
				var mixin = $.$MirrorGroups$ImmutableMirrorGroup;
				this.$MirrorGroups$ImmutableMirrorGroup$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$MirrorGroups$ImmutableMirrorGroup$slot;
		});
		this.$MirrorGroup = (function () {
			if (nil === this.$MirrorGroups$MirrorGroup$slot) {
				var self = this;
				var superclass = self._$ImmutableMirrorGroup();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$MirrorGroups);
				var mixin = $.$MirrorGroups$MirrorGroup;
				this.$MirrorGroups$MirrorGroup$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$MirrorGroups$MirrorGroup$slot;
		});
		this.$Collection = (function () {
			return this.$Collection$slot;
		});
		this.$setOnce$Collection$ = (function (v) {
			this.$Collection$slot = v;
			return this;
		});
		this.$OrderedCollection = (function () {
			return this.$OrderedCollection$slot;
		});
		this.$setOnce$OrderedCollection$ = (function (v) {
			this.$OrderedCollection$slot = v;
			return this;
		});
		this.$MirrorGroups$ImmutableMirrorGroup = (function () {
			return this.$MirrorGroups$ImmutableMirrorGroup$slot;
		});
		this.$MirrorGroups$ImmutableMirrorGroup$ = (function (v) {
			this.$MirrorGroups$ImmutableMirrorGroup$slot = v;
			return this;
		});
		this.$MirrorGroups$MirrorGroup = (function () {
			return this.$MirrorGroups$MirrorGroup$slot;
		});
		this.$MirrorGroups$MirrorGroup$ = (function (v) {
			this.$MirrorGroups$MirrorGroup$slot = v;
			return this;
		});
		this.$MirrorGroups$ImmutableMirrorGroup = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for MirrorGroups`ImmutableMirrorGroup";
			this.name = "MirrorGroups`ImmutableMirrorGroup";
			this.header = "ImmutableMirrorGroup group: ms <Collection[Mirror]> = Collection (\r(* Immutable mirror groups do not support adding or removing mirrors. They are created from an initial set of mirrors passed to the factory method.\r\rHowever, the API does include mutators, which all fail if called.  This allows them to provide good error messages when used in a context that might attempt to mutate them. An example would be a mutable mixin mirror that does not allow changes to its representation; it includes immutable mirror groups for its slots and classes, and a mutable mirror group for its methods. *)|\r	protected mirrors <Collection[Mirror]> = OrderedCollection withAll: ms. (* Preserve order.  Keep source code order if applicable.  Shape is important for many classes known to the VM. *)\r|)";
			this.slots = [new SM("mirrors", false, false)];
			this.methods = [
				new MM("superInit`MirrorGroups`ImmutableMirrorGroup", true, "Collection"),
				new MM("instance`initializer", true, "Collection"),
				new MM("addFromSource:", false, "public addFromSource: s <String> = (\r	^Error signal: 'Adding mirrors not allowed on an immutable mirror group!'\r)"),
				new MM("addMirror:", false, "public addMirror: m <Mirror> = (\r	^Error signal: 'Adding mirrors not allowed on an immutable mirror group!'\r)"),
				new MM("do:", false, "public do: blk <[:Mirror]> = (\r	mirrors do: blk\r)"),
				new MM("findMirrorNamed:", false, "public findMirrorNamed: n <Symbol> ^ <Mirror> = (\r	mirrors do: [:mirror | mirror simpleName = n ifTrue: [^mirror]].\r	^nil\r)"),
				new MM("includesMirrorNamed:", false, "public includesMirrorNamed: n <Symbol>  = (\r	mirrors do: [:mirror | mirror simpleName = n ifTrue: [^true]].\r	^false\r)"),
				new MM("removeMirror:", false, "public removeMirror: m <Mirror> = (\r	^Error signal: 'Removng mirrors not allowed on an immutable mirror group!'\r)"),
				new MM("removeMirrorNamed:", false, "public removeMirrorNamed: m <Symbol | String> = (\r	^Error signal: 'Removng mirrors not allowed on an immutable mirror group!'\r)"),
				new MM("size", false, "public size ^ <Integer> = (\r	^mirrors size\r)"),
				new MM("mirrors", true, null),
				new MM("setOnce`mirrors:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$MirrorGroups$ImmutableMirrorGroup = (function ($ms) {
				var self = this;
				self.$super$MirrorGroups$ImmutableMirrorGroup$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($ms) {
				var self = this;
				self._$superInit$MirrorGroups$ImmutableMirrorGroup($ms);
				self._$setOnce$mirrors$($0.$OrderedCollection.call(self.$enclosingObjects$MirrorGroups$ImmutableMirrorGroup[0]).$withAll$($ms));
				return self;
			});
			this.$addFromSource$ = (function ($s) {
				var self = this;
				return self._$Error().$signal$("Adding mirrors not allowed on an immutable mirror group!");
			});
			this.$addMirror$ = (function ($m) {
				var self = this;
				return self._$Error().$signal$("Adding mirrors not allowed on an immutable mirror group!");
			});
			this.$do$ = (function ($blk) {
				var self = this;
				self._$mirrors().$do$($blk);
				return self;
			});
			this.$findMirrorNamed$ = (function ($n) {
				var self = this;
				var NLR = new Object();
				try {
					self._$mirrors().$do$((function ($mirror) {
						return $mirror.$simpleName().$$equal($n).$ifTrue$((function () {
							{
								NLR.value = $mirror;
								throw NLR;
							};
						}));
					}));
					return nil;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$includesMirrorNamed$ = (function ($n) {
				var self = this;
				var NLR = new Object();
				try {
					self._$mirrors().$do$((function ($mirror) {
						return $mirror.$simpleName().$$equal($n).$ifTrue$((function () {
							{
								NLR.value = true;
								throw NLR;
							};
						}));
					}));
					return false;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$removeMirror$ = (function ($m) {
				var self = this;
				return self._$Error().$signal$("Removng mirrors not allowed on an immutable mirror group!");
			});
			this.$removeMirrorNamed$ = (function ($m) {
				var self = this;
				return self._$Error().$signal$("Removng mirrors not allowed on an immutable mirror group!");
			});
			this.$size = (function () {
				var self = this;
				return self._$mirrors().$size();
			});
			this.$mirrors = (function () {
				return this.$mirrors$slot;
			});
			this.$setOnce$mirrors$ = (function (v) {
				this.$mirrors$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for MirrorGroups`ImmutableMirrorGroup";
					this._$superInit$MirrorGroups$ImmutableMirrorGroup = $.$superInit$MirrorGroups$ImmutableMirrorGroup;
					this.$superInit$MirrorGroups$ImmutableMirrorGroup = dnuCatcher("$superInit$MirrorGroups$ImmutableMirrorGroup");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$addFromSource$ = this._$addFromSource$ = $.$addFromSource$;
					this.$addMirror$ = this._$addMirror$ = $.$addMirror$;
					this.$do$ = this._$do$ = $.$do$;
					this.$findMirrorNamed$ = this._$findMirrorNamed$ = $.$findMirrorNamed$;
					this.$includesMirrorNamed$ = this._$includesMirrorNamed$ = $.$includesMirrorNamed$;
					this.$removeMirror$ = this._$removeMirror$ = $.$removeMirror$;
					this.$removeMirrorNamed$ = this._$removeMirrorNamed$ = $.$removeMirrorNamed$;
					this.$size = this._$size = $.$size;
					this._$mirrors = $.$mirrors;
					this.$mirrors = dnuCatcher("$mirrors");
					this._$setOnce$mirrors$ = $.$setOnce$mirrors$;
					this.$setOnce$mirrors$ = dnuCatcher("$setOnce$mirrors$");
					this.$enclosingObjects$MirrorGroups$ImmutableMirrorGroup = enclosingObjects;
					this.$super$MirrorGroups$ImmutableMirrorGroup$slot = runtimeSuperclass;
					this["MirrorGroups`ImmutableMirrorGroup"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$mirrors$slot = nil;
					});
					this.basicNew = this["MirrorGroups`ImmutableMirrorGroup"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for MirrorGroups`ImmutableMirrorGroup";
				this.slots = [];
				this.methods = [new MM("group:", true, null)];
				this.nestedClasses = [];
				this.$group$ = (function ($ms) {
					return (new this.nonMeta.basicNew()).$instance$initializer($ms);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for MirrorGroups`ImmutableMirrorGroup";
						this.$group$ = this._$group$ = $.$group$;
						this.$enclosingObjects$MirrorGroups$ImmutableMirrorGroup = enclosingObjects;
						this.$super$MirrorGroups$ImmutableMirrorGroup = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$MirrorGroups$MirrorGroup = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for MirrorGroups`MirrorGroup";
			this.name = "MirrorGroups`MirrorGroup";
			this.header = "MirrorGroup group: ms <Collection[Mirror]> = ImmutableMirrorGroup group: ms (\r(* A mutable mirror group; mirrors can be added or removed after its creation. *)|\r|)";
			this.slots = [];
			this.methods = [
				new MM("superInit`MirrorGroups`MirrorGroup", true, "group: ms"),
				new MM("instance`initializer", true, "group: ms"),
				new MM("addFromSource:", false, "addFromSource: s <String> = (\r	self subclassResponsibility\r)"),
				new MM("addMirror:", false, "addMirror: m <Mirror>  = (\r	mirrors keysAndValuesDo: [:index :mirror | \r		mirror simpleName = m simpleName ifTrue: [^mirrors at: index put: m]].\r	^mirrors addLast: m\r)"),
				new MM("removeAll", false, "removeAll = (\r	mirrors: OrderedCollection new.\r)"),
				new MM("removeAllSuchThat:", false, "removeAllSuchThat: blk = (\r	mirrors select: blk thenDo: [ :m <Mirror> | removeMirrorNamed: m name].\r)"),
				new MM("removeMirror:", false, "removeMirror: m <Mirror> = (\r	^mirrors remove: m\r)"),
				new MM("removeMirrorNamed:", false, "removeMirrorNamed: n <Symbol | String> = (\r	| m |\r	m:: findMirrorNamed: n.\r	^m ifNotNil: [removeMirror: m].\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$MirrorGroups$MirrorGroup = (function ($ms) {
				var self = this;
				self.$super$MirrorGroups$MirrorGroup$slot._$instance$initializer.call(self, $ms);
				return self;
			});
			this.$instance$initializer = (function ($ms) {
				var self = this;
				self._$superInit$MirrorGroups$MirrorGroup($ms);
				return self;
			});
			this.$addFromSource$ = (function ($s) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$addMirror$ = (function ($m) {
				var self = this;
				var NLR = new Object();
				try {
					self._$mirrors().$keysAndValuesDo$((function ($index, $mirror) {
						return $mirror.$simpleName().$$equal($m.$simpleName()).$ifTrue$((function () {
							{
								NLR.value = self._$mirrors().$at$put$($index, $m);
								throw NLR;
							};
						}));
					}));
					return self._$mirrors().$addLast$($m);
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$removeAll = (function () {
				var self = this;
				self._$mirrors$($0.$OrderedCollection.call(self.$enclosingObjects$MirrorGroups$MirrorGroup[0]).$new());
				return self;
			});
			this.$removeAllSuchThat$ = (function ($blk) {
				var self = this;
				self._$mirrors().$select$thenDo$($blk, (function ($m) {
					return self._$removeMirrorNamed$($m.$name());
				}));
				return self;
			});
			this.$removeMirror$ = (function ($m) {
				var self = this;
				return self._$mirrors().$remove$($m);
			});
			this.$removeMirrorNamed$ = (function ($n) {
				var self = this;
				var $m = nil;
				$m = self._$findMirrorNamed$($n);
				return $m.$ifNotNil$((function () {
					return self._$removeMirror$($m);
				}));
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for MirrorGroups`MirrorGroup";
					this._$superInit$MirrorGroups$MirrorGroup = $.$superInit$MirrorGroups$MirrorGroup;
					this.$superInit$MirrorGroups$MirrorGroup = dnuCatcher("$superInit$MirrorGroups$MirrorGroup");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$addFromSource$ = $.$addFromSource$;
					this.$addFromSource$ = dnuCatcher("$addFromSource$");
					this._$addMirror$ = $.$addMirror$;
					this.$addMirror$ = dnuCatcher("$addMirror$");
					this._$removeAll = $.$removeAll;
					this.$removeAll = dnuCatcher("$removeAll");
					this._$removeAllSuchThat$ = $.$removeAllSuchThat$;
					this.$removeAllSuchThat$ = dnuCatcher("$removeAllSuchThat$");
					this._$removeMirror$ = $.$removeMirror$;
					this.$removeMirror$ = dnuCatcher("$removeMirror$");
					this._$removeMirrorNamed$ = $.$removeMirrorNamed$;
					this.$removeMirrorNamed$ = dnuCatcher("$removeMirrorNamed$");
					this.$enclosingObjects$MirrorGroups$MirrorGroup = enclosingObjects;
					this.$super$MirrorGroups$MirrorGroup$slot = runtimeSuperclass;
					this["MirrorGroups`MirrorGroup"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["MirrorGroups`MirrorGroup"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for MirrorGroups`MirrorGroup";
				this.slots = [];
				this.methods = [new MM("group:", true, null)];
				this.nestedClasses = [];
				this.$group$ = (function ($ms) {
					return (new this.nonMeta.basicNew()).$instance$initializer($ms);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for MirrorGroups`MirrorGroup";
						this.$group$ = this._$group$ = $.$group$;
						this.$enclosingObjects$MirrorGroups$MirrorGroup = enclosingObjects;
						this.$super$MirrorGroups$MirrorGroup = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$MirrorGroups$ImmutableMirrorGroup.enclosingMixin = this;
		this.$MirrorGroups$MirrorGroup.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for MirrorGroups";
				this._$superInit$MirrorGroups = $.$superInit$MirrorGroups;
				this.$superInit$MirrorGroups = dnuCatcher("$superInit$MirrorGroups");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this.$ImmutableMirrorGroup = this._$ImmutableMirrorGroup = $.$ImmutableMirrorGroup;
				this._$MirrorGroup = $.$MirrorGroup;
				this.$MirrorGroup = dnuCatcher("$MirrorGroup");
				this.$MirrorGroups$ImmutableMirrorGroup = this._$MirrorGroups$ImmutableMirrorGroup = $.$MirrorGroups$ImmutableMirrorGroup;
				this.$MirrorGroups$ImmutableMirrorGroup$ = this._$MirrorGroups$ImmutableMirrorGroup$ = $.$MirrorGroups$ImmutableMirrorGroup$;
				this.$MirrorGroups$MirrorGroup = this._$MirrorGroups$MirrorGroup = $.$MirrorGroups$MirrorGroup;
				this.$MirrorGroups$MirrorGroup$ = this._$MirrorGroups$MirrorGroup$ = $.$MirrorGroups$MirrorGroup$;
				this.$enclosingObjects$MirrorGroups = enclosingObjects;
				this.$super$MirrorGroups$slot = runtimeSuperclass;
				this.MirrorGroups = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$Collection$slot = nil;
					this.$OrderedCollection$slot = nil;
					this.$MirrorGroups$ImmutableMirrorGroup$slot = nil;
					this.$MirrorGroups$MirrorGroup$slot = nil;
				});
				this.basicNew = this.MirrorGroups;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for MirrorGroups";
			this.slots = [];
			this.methods = [new MM("usingLib:", true, null)];
			this.nestedClasses = [];
			this.$usingLib$ = (function ($platform) {
				return (new this.nonMeta.basicNew()).$instance$initializer($platform);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for MirrorGroups";
					this.$usingLib$ = this._$usingLib$ = $.$usingLib$;
					this.$enclosingObjects$MirrorGroups = enclosingObjects;
					this.$super$MirrorGroups = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$Streams = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for Streams";
		this.name = "Streams";
		this.header = "Streams usingPlatform: platform = (\r(*\rThis code was derived by converting the Strongtalk Stream classes to Newspeak, which is why the Sun Microsystems copyright and BSD license below applies.\r\rConverting Strongtalk code gives Newspeak a quick route to its own library, that is small, quite clean and  has a typed interface, with desirable license, and also quite close to the Smalltalk libraries we've been using. However, it may not be the final or ideal design.\r\rIt is not yet clear to me what the dividing lines between this module and the modules for files or even strings are. For example, the various character streams might really belong with strings, and the external streams may belong with files.\r\rThe naming conventions are probably too verbose as well. Finally, the fine grain breakdown into many mixins may not be ideal.\r\rCopyright (c) 1995-2006 Sun Microsystems, Inc. ALL RIGHTS RESERVED.\rCopyright 2008-2009 Gilad Bracha and other contributors.\r \rRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\r* Redistributions of source code must retain the above copyright notice, \r this  list of conditions and the following disclaimer.\r\r* Redistribution in binary form must reproduce the above copyright notice, \rthis list of conditions and the following disclaimer in the documentation and/o other materials provided with the distribution.\r\rNeither the name of Sun Microsystems or the names of contributors may \rbe used to endorse or promote products derived from this software without \rspecific prior written permission.\r\r>>\rTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, \rTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS \rBE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE \rGOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT \rLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH \rDAMAGE.>> *)|\rprivate String = platform kernel MutableString.\r\rprivate BasicOutputReadStream = BasicOutputStream mixinApply: BasicReadStream.\r\rprivate CharacterSequenceReadStream = CharacterInput mixinApply: SeqCltnReadStream.\rprivate CharacterIStream = CharacterInput mixinApply: BasicInputStream.\rprivate CharacterOStream =  CharacterOutput mixinApply: BasicOutputStream.\r\rprivate CharacterSequenceReadWriteStream = CharacterInput mixinApply: SeqCltnReadWriteStream.\rprivate CharacterConverterWithOutput = BasicOutputStream mixinApply: CharacterInputConverter.\rprivate OutputInputConverter = CharacterOutput mixinApply: CharacterConverterWithOutput.\rprivate BasicIExStream = BasicInputStream mixinApply: ExternalStream.\rprivate EIStream = BasicReadStream mixinApply: ExternalInputStream.\rprivate ReadExternalOutputStream = BasicOutputStream mixinApply: ExternalReadStream.\rprivate EOStream = BasicOutputStream mixinApply: ExternalStream.\rprivate EIOStream = ExternalOutputStream mixinApply: ReadExternalOutputStream.\r|)";
		this.slots = [
			new SM("String", false, false),
			new SM("BasicOutputReadStream", false, false),
			new SM("CharacterSequenceReadStream", false, false),
			new SM("CharacterIStream", false, false),
			new SM("CharacterOStream", false, false),
			new SM("CharacterSequenceReadWriteStream", false, false),
			new SM("CharacterConverterWithOutput", false, false),
			new SM("OutputInputConverter", false, false),
			new SM("BasicIExStream", false, false),
			new SM("EIStream", false, false),
			new SM("ReadExternalOutputStream", false, false),
			new SM("EOStream", false, false),
			new SM("EIOStream", false, false),
			new SM("Streams`BasicInputStream", true, true),
			new SM("Streams`BasicOutputStream", true, true),
			new SM("Streams`BasicReadStream", true, true),
			new SM("Streams`BasicReadWriteStream", true, true),
			new SM("Streams`CharacterInput", true, true),
			new SM("Streams`CharacterInputConverter", true, true),
			new SM("Streams`CharacterInputOutputConverter", true, true),
			new SM("Streams`CharacterOutput", true, true),
			new SM("Streams`CharacterOutputConverter", true, true),
			new SM("Streams`CharacterReadConverter", true, true),
			new SM("Streams`CharacterReadStream", true, true),
			new SM("Streams`CharacterReadWriteStream", true, true),
			new SM("Streams`ExternalInputStream", true, true),
			new SM("Streams`ExternalOutputStream", true, true),
			new SM("Streams`ExternalReadStream", true, true),
			new SM("Streams`ExternalReadWriteStream", true, true),
			new SM("Streams`ExternalStream", true, true),
			new SM("Streams`SeqCltnReadStream", true, true),
			new SM("Streams`SeqCltnReadWriteStream", true, true),
			new SM("Streams`TempTranscript", true, true)
		];
		this.methods = [
			new MM("superInit`Streams", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("usingCrLfConvention", false, "usingCrLfConvention = (\r\r	(* The current code only distinguishes systems that use CR and systems use CRLF for line endings. In order to generate files that are printed correctly on systems that use LF (Linux, OS X), we default to CRLF for now. *)\r	^ true\r)"),
			new MM("BasicInputStream", true, null),
			new MM("BasicOutputStream", true, null),
			new MM("BasicReadStream", true, null),
			new MM("BasicReadWriteStream", true, null),
			new MM("CharacterInput", true, null),
			new MM("CharacterInputConverter", true, null),
			new MM("CharacterInputOutputConverter", true, null),
			new MM("CharacterOutput", true, null),
			new MM("CharacterOutputConverter", true, null),
			new MM("CharacterReadConverter", true, null),
			new MM("CharacterReadStream", true, null),
			new MM("CharacterReadWriteStream", true, null),
			new MM("ExternalInputStream", true, null),
			new MM("ExternalOutputStream", true, null),
			new MM("ExternalReadStream", true, null),
			new MM("ExternalReadWriteStream", true, null),
			new MM("ExternalStream", true, null),
			new MM("SeqCltnReadStream", true, null),
			new MM("SeqCltnReadWriteStream", true, null),
			new MM("TempTranscript", true, null),
			new MM("String", true, null),
			new MM("setOnce`String:", true, null),
			new MM("BasicOutputReadStream", true, null),
			new MM("setOnce`BasicOutputReadStream:", true, null),
			new MM("CharacterSequenceReadStream", true, null),
			new MM("setOnce`CharacterSequenceReadStream:", true, null),
			new MM("CharacterIStream", true, null),
			new MM("setOnce`CharacterIStream:", true, null),
			new MM("CharacterOStream", true, null),
			new MM("setOnce`CharacterOStream:", true, null),
			new MM("CharacterSequenceReadWriteStream", true, null),
			new MM("setOnce`CharacterSequenceReadWriteStream:", true, null),
			new MM("CharacterConverterWithOutput", true, null),
			new MM("setOnce`CharacterConverterWithOutput:", true, null),
			new MM("OutputInputConverter", true, null),
			new MM("setOnce`OutputInputConverter:", true, null),
			new MM("BasicIExStream", true, null),
			new MM("setOnce`BasicIExStream:", true, null),
			new MM("EIStream", true, null),
			new MM("setOnce`EIStream:", true, null),
			new MM("ReadExternalOutputStream", true, null),
			new MM("setOnce`ReadExternalOutputStream:", true, null),
			new MM("EOStream", true, null),
			new MM("setOnce`EOStream:", true, null),
			new MM("EIOStream", true, null),
			new MM("setOnce`EIOStream:", true, null),
			new MM("Streams`BasicInputStream", true, null),
			new MM("Streams`BasicInputStream:", true, null),
			new MM("Streams`BasicOutputStream", true, null),
			new MM("Streams`BasicOutputStream:", true, null),
			new MM("Streams`BasicReadStream", true, null),
			new MM("Streams`BasicReadStream:", true, null),
			new MM("Streams`BasicReadWriteStream", true, null),
			new MM("Streams`BasicReadWriteStream:", true, null),
			new MM("Streams`CharacterInput", true, null),
			new MM("Streams`CharacterInput:", true, null),
			new MM("Streams`CharacterInputConverter", true, null),
			new MM("Streams`CharacterInputConverter:", true, null),
			new MM("Streams`CharacterInputOutputConverter", true, null),
			new MM("Streams`CharacterInputOutputConverter:", true, null),
			new MM("Streams`CharacterOutput", true, null),
			new MM("Streams`CharacterOutput:", true, null),
			new MM("Streams`CharacterOutputConverter", true, null),
			new MM("Streams`CharacterOutputConverter:", true, null),
			new MM("Streams`CharacterReadConverter", true, null),
			new MM("Streams`CharacterReadConverter:", true, null),
			new MM("Streams`CharacterReadStream", true, null),
			new MM("Streams`CharacterReadStream:", true, null),
			new MM("Streams`CharacterReadWriteStream", true, null),
			new MM("Streams`CharacterReadWriteStream:", true, null),
			new MM("Streams`ExternalInputStream", true, null),
			new MM("Streams`ExternalInputStream:", true, null),
			new MM("Streams`ExternalOutputStream", true, null),
			new MM("Streams`ExternalOutputStream:", true, null),
			new MM("Streams`ExternalReadStream", true, null),
			new MM("Streams`ExternalReadStream:", true, null),
			new MM("Streams`ExternalReadWriteStream", true, null),
			new MM("Streams`ExternalReadWriteStream:", true, null),
			new MM("Streams`ExternalStream", true, null),
			new MM("Streams`ExternalStream:", true, null),
			new MM("Streams`SeqCltnReadStream", true, null),
			new MM("Streams`SeqCltnReadStream:", true, null),
			new MM("Streams`SeqCltnReadWriteStream", true, null),
			new MM("Streams`SeqCltnReadWriteStream:", true, null),
			new MM("Streams`TempTranscript", true, null),
			new MM("Streams`TempTranscript:", true, null)
		];
		this.nestedClasses = [
			"Streams`BasicInputStream",
			"Streams`BasicOutputStream",
			"Streams`BasicReadStream",
			"Streams`BasicReadWriteStream",
			"Streams`CharacterInput",
			"Streams`CharacterInputConverter",
			"Streams`CharacterInputOutputConverter",
			"Streams`CharacterOutput",
			"Streams`CharacterOutputConverter",
			"Streams`CharacterReadConverter",
			"Streams`CharacterReadStream",
			"Streams`CharacterReadWriteStream",
			"Streams`ExternalInputStream",
			"Streams`ExternalOutputStream",
			"Streams`ExternalReadStream",
			"Streams`ExternalReadWriteStream",
			"Streams`ExternalStream",
			"Streams`SeqCltnReadStream",
			"Streams`SeqCltnReadWriteStream",
			"Streams`TempTranscript"
		];
		this.applications = [];
		this.$superInit$Streams = (function ($platform) {
			var self = this;
			self.$super$Streams$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($platform) {
			var self = this;
			self._$superInit$Streams($platform);
			$0.$setOnce$String$.call(self, $platform.$kernel().$MutableString());
			$0.$setOnce$BasicOutputReadStream$.call(self, self._$BasicOutputStream().$mixinApply$(self._$BasicReadStream()));
			$0.$setOnce$CharacterSequenceReadStream$.call(self, self._$CharacterInput().$mixinApply$(self._$SeqCltnReadStream()));
			$0.$setOnce$CharacterIStream$.call(self, self._$CharacterInput().$mixinApply$(self._$BasicInputStream()));
			$0.$setOnce$CharacterOStream$.call(self, self._$CharacterOutput().$mixinApply$(self._$BasicOutputStream()));
			$0.$setOnce$CharacterSequenceReadWriteStream$.call(self, self._$CharacterInput().$mixinApply$(self._$SeqCltnReadWriteStream()));
			$0.$setOnce$CharacterConverterWithOutput$.call(self, self._$BasicOutputStream().$mixinApply$(self._$CharacterInputConverter()));
			$0.$setOnce$OutputInputConverter$.call(self, self._$CharacterOutput().$mixinApply$($0.$CharacterConverterWithOutput.call(self)));
			$0.$setOnce$BasicIExStream$.call(self, self._$BasicInputStream().$mixinApply$(self._$ExternalStream()));
			$0.$setOnce$EIStream$.call(self, self._$BasicReadStream().$mixinApply$(self._$ExternalInputStream()));
			$0.$setOnce$ReadExternalOutputStream$.call(self, self._$BasicOutputStream().$mixinApply$(self._$ExternalReadStream()));
			$0.$setOnce$EOStream$.call(self, self._$BasicOutputStream().$mixinApply$(self._$ExternalStream()));
			$0.$setOnce$EIOStream$.call(self, self._$ExternalOutputStream().$mixinApply$($0.$ReadExternalOutputStream.call(self)));
			return self;
		});
		this.$usingCrLfConvention = (function () {
			var self = this;
			return true;
		});
		this.$BasicInputStream = (function () {
			if (nil === this.$Streams$BasicInputStream$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$BasicInputStream;
				this.$Streams$BasicInputStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$BasicInputStream$slot;
		});
		this.$BasicOutputStream = (function () {
			if (nil === this.$Streams$BasicOutputStream$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$BasicOutputStream;
				this.$Streams$BasicOutputStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$BasicOutputStream$slot;
		});
		this.$BasicReadStream = (function () {
			if (nil === this.$Streams$BasicReadStream$slot) {
				var self = this;
				var superclass = self._$BasicInputStream();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$BasicReadStream;
				this.$Streams$BasicReadStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$BasicReadStream$slot;
		});
		this.$BasicReadWriteStream = (function () {
			if (nil === this.$Streams$BasicReadWriteStream$slot) {
				var self = this;
				var superclass = $0.$BasicOutputReadStream.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$BasicReadWriteStream;
				this.$Streams$BasicReadWriteStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$BasicReadWriteStream$slot;
		});
		this.$CharacterInput = (function () {
			if (nil === this.$Streams$CharacterInput$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$CharacterInput;
				this.$Streams$CharacterInput$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$CharacterInput$slot;
		});
		this.$CharacterInputConverter = (function () {
			if (nil === this.$Streams$CharacterInputConverter$slot) {
				var self = this;
				var superclass = $0.$CharacterIStream.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$CharacterInputConverter;
				this.$Streams$CharacterInputConverter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$CharacterInputConverter$slot;
		});
		this.$CharacterInputOutputConverter = (function () {
			if (nil === this.$Streams$CharacterInputOutputConverter$slot) {
				var self = this;
				var superclass = $0.$OutputInputConverter.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$CharacterInputOutputConverter;
				this.$Streams$CharacterInputOutputConverter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$CharacterInputOutputConverter$slot;
		});
		this.$CharacterOutput = (function () {
			if (nil === this.$Streams$CharacterOutput$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$CharacterOutput;
				this.$Streams$CharacterOutput$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$CharacterOutput$slot;
		});
		this.$CharacterOutputConverter = (function () {
			if (nil === this.$Streams$CharacterOutputConverter$slot) {
				var self = this;
				var superclass = $0.$CharacterOStream.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$CharacterOutputConverter;
				this.$Streams$CharacterOutputConverter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$CharacterOutputConverter$slot;
		});
		this.$CharacterReadConverter = (function () {
			if (nil === this.$Streams$CharacterReadConverter$slot) {
				var self = this;
				var superclass = self._$CharacterInputConverter();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$CharacterReadConverter;
				this.$Streams$CharacterReadConverter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$CharacterReadConverter$slot;
		});
		this.$CharacterReadStream = (function () {
			if (nil === this.$Streams$CharacterReadStream$slot) {
				var self = this;
				var superclass = $0.$CharacterSequenceReadStream.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$CharacterReadStream;
				this.$Streams$CharacterReadStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$CharacterReadStream$slot;
		});
		this.$CharacterReadWriteStream = (function () {
			if (nil === this.$Streams$CharacterReadWriteStream$slot) {
				var self = this;
				var superclass = $0.$CharacterSequenceReadWriteStream.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$CharacterReadWriteStream;
				this.$Streams$CharacterReadWriteStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$CharacterReadWriteStream$slot;
		});
		this.$ExternalInputStream = (function () {
			if (nil === this.$Streams$ExternalInputStream$slot) {
				var self = this;
				var superclass = $0.$BasicIExStream.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$ExternalInputStream;
				this.$Streams$ExternalInputStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$ExternalInputStream$slot;
		});
		this.$ExternalOutputStream = (function () {
			if (nil === this.$Streams$ExternalOutputStream$slot) {
				var self = this;
				var superclass = $0.$EOStream.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$ExternalOutputStream;
				this.$Streams$ExternalOutputStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$ExternalOutputStream$slot;
		});
		this.$ExternalReadStream = (function () {
			if (nil === this.$Streams$ExternalReadStream$slot) {
				var self = this;
				var superclass = $0.$EIStream.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$ExternalReadStream;
				this.$Streams$ExternalReadStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$ExternalReadStream$slot;
		});
		this.$ExternalReadWriteStream = (function () {
			if (nil === this.$Streams$ExternalReadWriteStream$slot) {
				var self = this;
				var superclass = $0.$EIOStream.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$ExternalReadWriteStream;
				this.$Streams$ExternalReadWriteStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$ExternalReadWriteStream$slot;
		});
		this.$ExternalStream = (function () {
			if (nil === this.$Streams$ExternalStream$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$ExternalStream;
				this.$Streams$ExternalStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$ExternalStream$slot;
		});
		this.$SeqCltnReadStream = (function () {
			if (nil === this.$Streams$SeqCltnReadStream$slot) {
				var self = this;
				var superclass = self._$BasicReadStream();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$SeqCltnReadStream;
				this.$Streams$SeqCltnReadStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$SeqCltnReadStream$slot;
		});
		this.$SeqCltnReadWriteStream = (function () {
			if (nil === this.$Streams$SeqCltnReadWriteStream$slot) {
				var self = this;
				var superclass = self._$BasicReadWriteStream();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$SeqCltnReadWriteStream;
				this.$Streams$SeqCltnReadWriteStream$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$SeqCltnReadWriteStream$slot;
		});
		this.$TempTranscript = (function () {
			if (nil === this.$Streams$TempTranscript$slot) {
				var self = this;
				var superclass = $0.$CharacterOStream.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Streams);
				var mixin = $.$Streams$TempTranscript;
				this.$Streams$TempTranscript$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Streams$TempTranscript$slot;
		});
		this.$String = (function () {
			return this.$String$slot;
		});
		this.$setOnce$String$ = (function (v) {
			this.$String$slot = v;
			return this;
		});
		this.$BasicOutputReadStream = (function () {
			return this.$BasicOutputReadStream$slot;
		});
		this.$setOnce$BasicOutputReadStream$ = (function (v) {
			this.$BasicOutputReadStream$slot = v;
			return this;
		});
		this.$CharacterSequenceReadStream = (function () {
			return this.$CharacterSequenceReadStream$slot;
		});
		this.$setOnce$CharacterSequenceReadStream$ = (function (v) {
			this.$CharacterSequenceReadStream$slot = v;
			return this;
		});
		this.$CharacterIStream = (function () {
			return this.$CharacterIStream$slot;
		});
		this.$setOnce$CharacterIStream$ = (function (v) {
			this.$CharacterIStream$slot = v;
			return this;
		});
		this.$CharacterOStream = (function () {
			return this.$CharacterOStream$slot;
		});
		this.$setOnce$CharacterOStream$ = (function (v) {
			this.$CharacterOStream$slot = v;
			return this;
		});
		this.$CharacterSequenceReadWriteStream = (function () {
			return this.$CharacterSequenceReadWriteStream$slot;
		});
		this.$setOnce$CharacterSequenceReadWriteStream$ = (function (v) {
			this.$CharacterSequenceReadWriteStream$slot = v;
			return this;
		});
		this.$CharacterConverterWithOutput = (function () {
			return this.$CharacterConverterWithOutput$slot;
		});
		this.$setOnce$CharacterConverterWithOutput$ = (function (v) {
			this.$CharacterConverterWithOutput$slot = v;
			return this;
		});
		this.$OutputInputConverter = (function () {
			return this.$OutputInputConverter$slot;
		});
		this.$setOnce$OutputInputConverter$ = (function (v) {
			this.$OutputInputConverter$slot = v;
			return this;
		});
		this.$BasicIExStream = (function () {
			return this.$BasicIExStream$slot;
		});
		this.$setOnce$BasicIExStream$ = (function (v) {
			this.$BasicIExStream$slot = v;
			return this;
		});
		this.$EIStream = (function () {
			return this.$EIStream$slot;
		});
		this.$setOnce$EIStream$ = (function (v) {
			this.$EIStream$slot = v;
			return this;
		});
		this.$ReadExternalOutputStream = (function () {
			return this.$ReadExternalOutputStream$slot;
		});
		this.$setOnce$ReadExternalOutputStream$ = (function (v) {
			this.$ReadExternalOutputStream$slot = v;
			return this;
		});
		this.$EOStream = (function () {
			return this.$EOStream$slot;
		});
		this.$setOnce$EOStream$ = (function (v) {
			this.$EOStream$slot = v;
			return this;
		});
		this.$EIOStream = (function () {
			return this.$EIOStream$slot;
		});
		this.$setOnce$EIOStream$ = (function (v) {
			this.$EIOStream$slot = v;
			return this;
		});
		this.$Streams$BasicInputStream = (function () {
			return this.$Streams$BasicInputStream$slot;
		});
		this.$Streams$BasicInputStream$ = (function (v) {
			this.$Streams$BasicInputStream$slot = v;
			return this;
		});
		this.$Streams$BasicOutputStream = (function () {
			return this.$Streams$BasicOutputStream$slot;
		});
		this.$Streams$BasicOutputStream$ = (function (v) {
			this.$Streams$BasicOutputStream$slot = v;
			return this;
		});
		this.$Streams$BasicReadStream = (function () {
			return this.$Streams$BasicReadStream$slot;
		});
		this.$Streams$BasicReadStream$ = (function (v) {
			this.$Streams$BasicReadStream$slot = v;
			return this;
		});
		this.$Streams$BasicReadWriteStream = (function () {
			return this.$Streams$BasicReadWriteStream$slot;
		});
		this.$Streams$BasicReadWriteStream$ = (function (v) {
			this.$Streams$BasicReadWriteStream$slot = v;
			return this;
		});
		this.$Streams$CharacterInput = (function () {
			return this.$Streams$CharacterInput$slot;
		});
		this.$Streams$CharacterInput$ = (function (v) {
			this.$Streams$CharacterInput$slot = v;
			return this;
		});
		this.$Streams$CharacterInputConverter = (function () {
			return this.$Streams$CharacterInputConverter$slot;
		});
		this.$Streams$CharacterInputConverter$ = (function (v) {
			this.$Streams$CharacterInputConverter$slot = v;
			return this;
		});
		this.$Streams$CharacterInputOutputConverter = (function () {
			return this.$Streams$CharacterInputOutputConverter$slot;
		});
		this.$Streams$CharacterInputOutputConverter$ = (function (v) {
			this.$Streams$CharacterInputOutputConverter$slot = v;
			return this;
		});
		this.$Streams$CharacterOutput = (function () {
			return this.$Streams$CharacterOutput$slot;
		});
		this.$Streams$CharacterOutput$ = (function (v) {
			this.$Streams$CharacterOutput$slot = v;
			return this;
		});
		this.$Streams$CharacterOutputConverter = (function () {
			return this.$Streams$CharacterOutputConverter$slot;
		});
		this.$Streams$CharacterOutputConverter$ = (function (v) {
			this.$Streams$CharacterOutputConverter$slot = v;
			return this;
		});
		this.$Streams$CharacterReadConverter = (function () {
			return this.$Streams$CharacterReadConverter$slot;
		});
		this.$Streams$CharacterReadConverter$ = (function (v) {
			this.$Streams$CharacterReadConverter$slot = v;
			return this;
		});
		this.$Streams$CharacterReadStream = (function () {
			return this.$Streams$CharacterReadStream$slot;
		});
		this.$Streams$CharacterReadStream$ = (function (v) {
			this.$Streams$CharacterReadStream$slot = v;
			return this;
		});
		this.$Streams$CharacterReadWriteStream = (function () {
			return this.$Streams$CharacterReadWriteStream$slot;
		});
		this.$Streams$CharacterReadWriteStream$ = (function (v) {
			this.$Streams$CharacterReadWriteStream$slot = v;
			return this;
		});
		this.$Streams$ExternalInputStream = (function () {
			return this.$Streams$ExternalInputStream$slot;
		});
		this.$Streams$ExternalInputStream$ = (function (v) {
			this.$Streams$ExternalInputStream$slot = v;
			return this;
		});
		this.$Streams$ExternalOutputStream = (function () {
			return this.$Streams$ExternalOutputStream$slot;
		});
		this.$Streams$ExternalOutputStream$ = (function (v) {
			this.$Streams$ExternalOutputStream$slot = v;
			return this;
		});
		this.$Streams$ExternalReadStream = (function () {
			return this.$Streams$ExternalReadStream$slot;
		});
		this.$Streams$ExternalReadStream$ = (function (v) {
			this.$Streams$ExternalReadStream$slot = v;
			return this;
		});
		this.$Streams$ExternalReadWriteStream = (function () {
			return this.$Streams$ExternalReadWriteStream$slot;
		});
		this.$Streams$ExternalReadWriteStream$ = (function (v) {
			this.$Streams$ExternalReadWriteStream$slot = v;
			return this;
		});
		this.$Streams$ExternalStream = (function () {
			return this.$Streams$ExternalStream$slot;
		});
		this.$Streams$ExternalStream$ = (function (v) {
			this.$Streams$ExternalStream$slot = v;
			return this;
		});
		this.$Streams$SeqCltnReadStream = (function () {
			return this.$Streams$SeqCltnReadStream$slot;
		});
		this.$Streams$SeqCltnReadStream$ = (function (v) {
			this.$Streams$SeqCltnReadStream$slot = v;
			return this;
		});
		this.$Streams$SeqCltnReadWriteStream = (function () {
			return this.$Streams$SeqCltnReadWriteStream$slot;
		});
		this.$Streams$SeqCltnReadWriteStream$ = (function (v) {
			this.$Streams$SeqCltnReadWriteStream$slot = v;
			return this;
		});
		this.$Streams$TempTranscript = (function () {
			return this.$Streams$TempTranscript$slot;
		});
		this.$Streams$TempTranscript$ = (function (v) {
			this.$Streams$TempTranscript$slot = v;
			return this;
		});
		this.$Streams$BasicInputStream = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`BasicInputStream";
			this.name = "Streams`BasicInputStream";
			this.header = "BasicInputStream = (\r(* This class provides the standard implementation of the InputStream[E] protocol, where E is the type of the elements of the stream.  It implements all functionality\rin terms of the two messages #actualNext and #actualAtEnd, which subclasses must provide.\r\rNote that streams support all collection operations.  However, when using collection messages with\rstreams, the caller must be aware that iteration on a stream changes the state of the stream, so that\riterations are not repeatable.  Also, care must be taken with infinite streams, since most collection\rmessages will not terminate on their own for infinite streams.\r\r%responsibility #newCollectionOfSize:\r    Optionally override\r%responsibility #close\r    Close must be reimplemented if any work must be done when the stream is closed. *)| \rhavePeeked_0 <Boolean> ::= false.	\r(* If true, then peekVal is the next element *)\rpeekVal <E>\r|)";
			this.slots = [
				new SM("havePeeked_0", true, false),
				new SM("peekVal", true, false)
			];
			this.methods = [
				new MM("superInit`Streams`BasicInputStream", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("atEnd", false, "atEnd ^ <Boolean> = (\r\r\r	^self havePeeked\r		ifTrue: [ false ]\r		ifFalse: [ self actualAtEnd ]\r)"),
				new MM("contentsRemaining", false, "contentsRemaining ^ <List[E]> = (\r\r\r	^self accumulateUntil: [ self atEnd ]\r)"),
				new MM("do:", false, "do: f <[:E]>  = (\r\r\r	[ self atEnd ]\r		whileFalse: [ f value: self next ]\r)"),
				new MM("next", false, "next ^ <E> = (\r\r\r	^self havePeeked\r		ifTrue: [ self nextFromPeek ]\r		ifFalse: [ self actualNext ]\r)"),
				new MM("next:", false, "next: nElements <Integer>  ^ <List[E]> = (\r\r\r	| cltn <VarSeqCltn[E]> |\r\r	cltn:: self newCollectionOfSize: nElements.\r	1 to: nElements do: [ :i <Integer> |\r		self atEnd\r			ifTrue: [ self error: 'Not enough elements' ].\r		cltn at: i put: self next.	].\r	^cltn\r)"),
				new MM("nextIfAbsent:", false, "public nextIfAbsent: f <[X def]> ^ <E | X> = (\r	^self havePeeked\r		ifTrue: [ self nextFromPeek ]\r		ifFalse: [ self actualAtEnd\r							ifFalse: [ self actualNext ]\r							ifTrue: [ f value ]	 ]\r)"),
				new MM("nextMatchFor:", false, "nextMatchFor: o <Object> ^ <Boolean> = (\r\r\r	^self next = o\r)"),
				new MM("peek", false, "peek ^ <E> = (\r\r\r	self havePeeked\r		ifFalse: [	self peekVal: self actualNext.\r				self havePeeked: true.	 ].\r	^self peekVal\r)"),
				new MM("peekFor:", false, "peekFor: o <Object> ^ <Boolean> = (\r\r\r	^self peek = o\r		ifTrue: [	self next.\r				true	]\r		ifFalse: [	false ]\r)"),
				new MM("peekIfAbsent:", false, "peekIfAbsent: f <[X def]>  ^ <E | X> = (\r\r\r	self havePeeked\r		ifFalse: [	self actualAtEnd\r							ifTrue: [ ^f value ].\r						self peekVal: self actualNext.\r						self havePeeked: true.	 ].\r	^self peekVal\r)"),
				new MM("skip:", false, "skip: nElements <Integer>\r = (\r\r	nElements timesRepeat: [ self next ]\r)"),
				new MM("skipTo:", false, "skipTo: o <Object> ^ <Boolean> = (\r\r\r	[ self atEnd ] whileFalse: [ \r			self next = o\r				ifTrue: [ ^true ]	].\r	^false\r)"),
				new MM("upTo:", false, "upTo: delimiter <Object> ^ <List[E]> = (\r\r\r	| s <SeqCltn[E]> |\r	s:: self accumulateUntil: [ self atEndOrPeekIs: delimiter ].\r	self nextIfAbsent: [ ].\r	^s\r)"),
				new MM("close", false, "close\r = (\r	(* by default, do nothing *)\r)"),
				new MM("printOn:", false, "printOn: strm <CharOutputStream>\r = (\r\r	strm	nextPutAll: self class name\r)"),
				new MM("accumulateUntil:", false, "accumulateUntil: predicate <[Boolean]>  ^ <List[E]> = (\r\r\r	| build <ReadWriteStream[E]> |\r\r	build:: self newBuildStream.\r	[ predicate value ]\r		whileFalse: [	build nextPut: self next   ].\r	^build contentsWritten\r)"),
				new MM("actualAtEnd", false, "actualAtEnd ^ <Boolean> = (\r\r	(* Test whether there are elements remaining in the stream, disregarding peekVal *)\r\r	self subclassResponsibility\r)"),
				new MM("actualNext", false, "actualNext ^ <E> = (\r\r	(* Return the next element of the stream, disregarding peekVal *)\r\r	self subclassResponsibility\r)"),
				new MM("atEndOrPeekIs:", false, "atEndOrPeekIs: delimiter <Object> ^ <Boolean> = (\r\r\r	^(self peekIfAbsent: [ ^true ]) = delimiter\r)"),
				new MM("havePeeked", false, "havePeeked ^ <Boolean> = (\r\r	^havePeeked_0\r)"),
				new MM("havePeeked:", false, "havePeeked: f <Boolean>\r = (\r\r	f ifFalse: [ peekVal:: nil ].\r	havePeeked_0:: f.\r)"),
				new MM("newBuildStream", false, "newBuildStream ^ <ReadWriteStream[E]> = (\r\r	(* Returns a readwrite stream to be used for accumulating elements\r	 for the various contents messages, etc. *)\r\r	^BasicReadWriteStream(* [E] *) on: (self newCollectionOfSize: self defaultExpected)\r)"),
				new MM("newCollectionOfSize:", false, "newCollectionOfSize: n <Integer> ^ <MutableList[E]> = (\r\r	(* Create and return a new collection of a class appropriate for\r	 holding elements of this stream.  By overriding this, subclasses\r	can customize the kind of collection returned by the various\r	contents messages, as well as #upTo:, etc. *)\r\r	^Array(* [E] *) new: n\r)"),
				new MM("nextFromPeek", false, "nextFromPeek ^ <E> = (\r\r\r	| v <E> |\r	v:: self peekVal.\r	self	noPeekVal.\r	^v\r)"),
				new MM("noPeekVal", false, "noPeekVal\r = (\r\r	havePeeked:: false.\r	peekVal:: nil\r)"),
				new MM("defaultExpected", false, "defaultExpected ^ <Integer> = (\r\r	^10\r)"),
				new MM("havePeeked_0", true, null),
				new MM("havePeeked_0:", true, null),
				new MM("peekVal", true, null),
				new MM("peekVal:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$BasicInputStream = (function () {
				var self = this;
				self.$super$Streams$BasicInputStream$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$BasicInputStream();
				self._$havePeeked_0$(false);
				return self;
			});
			this.$atEnd = (function () {
				var self = this;
				return self._$havePeeked().$ifTrue$ifFalse$((function () {
					return false;
				}), (function () {
					return self._$actualAtEnd();
				}));
			});
			this.$contentsRemaining = (function () {
				var self = this;
				return self._$accumulateUntil$((function () {
					return self._$atEnd();
				}));
			});
			this.$do$ = (function ($f) {
				var self = this;
				{
					nil;
					for (; !self._$atEnd(); ) {
						$f.$value$(self._$next());
					};
				};
				return self;
			});
			this.$next = (function () {
				var self = this;
				return self._$havePeeked().$ifTrue$ifFalse$((function () {
					return self._$nextFromPeek();
				}), (function () {
					return self._$actualNext();
				}));
			});
			this.$next$ = (function ($nElements) {
				var self = this;
				var $cltn = nil;
				$cltn = self._$newCollectionOfSize$($nElements);
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = $nElements;
					for (; $$limit.$$greater$equal($i); ) {
						if (self._$atEnd()) {
							self._$error$("Not enough elements");
						} else {
							nil;
						};
						$cltn.$at$put$($i, self._$next());
						$i = (1).$$plus($i);
					};
				};
				return $cltn;
			});
			this.$nextIfAbsent$ = (function ($f) {
				var self = this;
				return self._$havePeeked().$ifTrue$ifFalse$((function () {
					return self._$nextFromPeek();
				}), (function () {
					return self._$actualAtEnd().$ifFalse$ifTrue$((function () {
						return self._$actualNext();
					}), (function () {
						return $f.$value();
					}));
				}));
			});
			this.$nextMatchFor$ = (function ($o) {
				var self = this;
				return self._$next().$$equal($o);
			});
			this.$peek = (function () {
				var self = this;
				if (!self._$havePeeked()) {
					self._$peekVal$(self._$actualNext());
					self._$havePeeked$(true);
				} else {
					nil;
				};
				return self._$peekVal();
			});
			this.$peekFor$ = (function ($o) {
				var self = this;
				return self._$peek().$$equal($o).$ifTrue$ifFalse$((function () {
					self._$next();
					return true;
				}), (function () {
					return false;
				}));
			});
			this.$peekIfAbsent$ = (function ($f) {
				var self = this;
				if (!self._$havePeeked()) {
					if (self._$actualAtEnd()) {
						return $f.$value();
					} else {
						nil;
					};
					self._$peekVal$(self._$actualNext());
					self._$havePeeked$(true);
				} else {
					nil;
				};
				return self._$peekVal();
			});
			this.$skip$ = (function ($nElements) {
				var self = this;
				{
					var $$limit = nil;
					var $$i = nil;
					nil;
					$$i = 1;
					$$limit = $nElements;
					for (; $$limit.$$greater$equal($$i); ) {
						self._$next();
						$$i = (1).$$plus($$i);
					};
				};
				return self;
			});
			this.$skipTo$ = (function ($o) {
				var self = this;
				{
					nil;
					for (; !self._$atEnd(); ) {
						if (self._$next().$$equal($o)) {
							return true;
						} else {
							nil;
						};
					};
				};
				return false;
			});
			this.$upTo$ = (function ($delimiter) {
				var self = this;
				var $s = nil;
				$s = self._$accumulateUntil$((function () {
					return self._$atEndOrPeekIs$($delimiter);
				}));
				self._$nextIfAbsent$((function () {
					return nil;
				}));
				return $s;
			});
			this.$close = (function () {
				var self = this;
				return self;
			});
			this.$printOn$ = (function ($strm) {
				var self = this;
				$strm.$nextPutAll$(self._$class().$name());
				return self;
			});
			this.$accumulateUntil$ = (function ($predicate) {
				var self = this;
				var $build = nil;
				$build = self._$newBuildStream();
				{
					nil;
					for (; !$predicate.$value(); ) {
						$build.$nextPut$(self._$next());
					};
				};
				return $build.$contentsWritten();
			});
			this.$actualAtEnd = (function () {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$actualNext = (function () {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$atEndOrPeekIs$ = (function ($delimiter) {
				var self = this;
				var NLR = new Object();
				try {
					return self._$peekIfAbsent$((function () {
						{
							NLR.value = true;
							throw NLR;
						};
					})).$$equal($delimiter);
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$havePeeked = (function () {
				var self = this;
				return self._$havePeeked_0();
			});
			this.$havePeeked$ = (function ($f) {
				var self = this;
				if (!$f) {
					self._$peekVal$(nil);
				} else {
					nil;
				};
				self._$havePeeked_0$($f);
				return self;
			});
			this.$newBuildStream = (function () {
				var self = this;
				return self.$enclosingObjects$Streams$BasicInputStream[0]._$BasicReadWriteStream().$on$(self._$newCollectionOfSize$(self._$defaultExpected()));
			});
			this.$newCollectionOfSize$ = (function ($n) {
				var self = this;
				return self._$Array().$new$($n);
			});
			this.$nextFromPeek = (function () {
				var self = this;
				var $v = nil;
				$v = self._$peekVal();
				self._$noPeekVal();
				return $v;
			});
			this.$noPeekVal = (function () {
				var self = this;
				self._$havePeeked$(false);
				self._$peekVal$(nil);
				return self;
			});
			this.$defaultExpected = (function () {
				var self = this;
				return 10;
			});
			this.$havePeeked_0 = (function () {
				return this.$havePeeked_0$slot;
			});
			this.$havePeeked_0$ = (function (v) {
				this.$havePeeked_0$slot = v;
				return this;
			});
			this.$peekVal = (function () {
				return this.$peekVal$slot;
			});
			this.$peekVal$ = (function (v) {
				this.$peekVal$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`BasicInputStream";
					this._$superInit$Streams$BasicInputStream = $.$superInit$Streams$BasicInputStream;
					this.$superInit$Streams$BasicInputStream = dnuCatcher("$superInit$Streams$BasicInputStream");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$atEnd = $.$atEnd;
					this.$atEnd = dnuCatcher("$atEnd");
					this._$contentsRemaining = $.$contentsRemaining;
					this.$contentsRemaining = dnuCatcher("$contentsRemaining");
					this._$do$ = $.$do$;
					this.$do$ = dnuCatcher("$do$");
					this._$next = $.$next;
					this.$next = dnuCatcher("$next");
					this._$next$ = $.$next$;
					this.$next$ = dnuCatcher("$next$");
					this.$nextIfAbsent$ = this._$nextIfAbsent$ = $.$nextIfAbsent$;
					this._$nextMatchFor$ = $.$nextMatchFor$;
					this.$nextMatchFor$ = dnuCatcher("$nextMatchFor$");
					this._$peek = $.$peek;
					this.$peek = dnuCatcher("$peek");
					this._$peekFor$ = $.$peekFor$;
					this.$peekFor$ = dnuCatcher("$peekFor$");
					this._$peekIfAbsent$ = $.$peekIfAbsent$;
					this.$peekIfAbsent$ = dnuCatcher("$peekIfAbsent$");
					this._$skip$ = $.$skip$;
					this.$skip$ = dnuCatcher("$skip$");
					this._$skipTo$ = $.$skipTo$;
					this.$skipTo$ = dnuCatcher("$skipTo$");
					this._$upTo$ = $.$upTo$;
					this.$upTo$ = dnuCatcher("$upTo$");
					this._$close = $.$close;
					this.$close = dnuCatcher("$close");
					this._$printOn$ = $.$printOn$;
					this.$printOn$ = dnuCatcher("$printOn$");
					this._$accumulateUntil$ = $.$accumulateUntil$;
					this.$accumulateUntil$ = dnuCatcher("$accumulateUntil$");
					this._$actualAtEnd = $.$actualAtEnd;
					this.$actualAtEnd = dnuCatcher("$actualAtEnd");
					this._$actualNext = $.$actualNext;
					this.$actualNext = dnuCatcher("$actualNext");
					this._$atEndOrPeekIs$ = $.$atEndOrPeekIs$;
					this.$atEndOrPeekIs$ = dnuCatcher("$atEndOrPeekIs$");
					this._$havePeeked = $.$havePeeked;
					this.$havePeeked = dnuCatcher("$havePeeked");
					this._$havePeeked$ = $.$havePeeked$;
					this.$havePeeked$ = dnuCatcher("$havePeeked$");
					this._$newBuildStream = $.$newBuildStream;
					this.$newBuildStream = dnuCatcher("$newBuildStream");
					this._$newCollectionOfSize$ = $.$newCollectionOfSize$;
					this.$newCollectionOfSize$ = dnuCatcher("$newCollectionOfSize$");
					this._$nextFromPeek = $.$nextFromPeek;
					this.$nextFromPeek = dnuCatcher("$nextFromPeek");
					this._$noPeekVal = $.$noPeekVal;
					this.$noPeekVal = dnuCatcher("$noPeekVal");
					this._$defaultExpected = $.$defaultExpected;
					this.$defaultExpected = dnuCatcher("$defaultExpected");
					this._$havePeeked_0 = $.$havePeeked_0;
					this.$havePeeked_0 = dnuCatcher("$havePeeked_0");
					this._$havePeeked_0$ = $.$havePeeked_0$;
					this.$havePeeked_0$ = dnuCatcher("$havePeeked_0$");
					this._$peekVal = $.$peekVal;
					this.$peekVal = dnuCatcher("$peekVal");
					this._$peekVal$ = $.$peekVal$;
					this.$peekVal$ = dnuCatcher("$peekVal$");
					this.$enclosingObjects$Streams$BasicInputStream = enclosingObjects;
					this.$super$Streams$BasicInputStream$slot = runtimeSuperclass;
					this["Streams`BasicInputStream"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$havePeeked_0$slot = nil;
						this.$peekVal$slot = nil;
					});
					this.basicNew = this["Streams`BasicInputStream"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`BasicInputStream";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`BasicInputStream";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Streams$BasicInputStream = enclosingObjects;
						this.$super$Streams$BasicInputStream = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$BasicOutputStream = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`BasicOutputStream";
			this.name = "Streams`BasicOutputStream";
			this.header = "BasicOutputStream = (\r(* This class provides the standard implementation of the OutputStream protocol.  It implements all functionality in terms of the message #nextPut:, which subclasses must provide.\r\r%responsibility #flush\r    Subclasses may have to reimplement this to flush any internal buffers.\r\r%todo: if this class doesn't end up with more methods than next:put: and nextPutAll:, then we\rshould remove it and copy those two methods into its subclasses and invocations.\r*))";
			this.slots = [];
			this.methods = [
				new MM("superInit`Streams`BasicOutputStream", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("externalFlush", false, "externalFlush\r = (\r	(* Flush both internal Smalltalk buffers and any buffers external to Smalltalk *)\r\r	(* By default do regular flush.  Subclasses should extend to deal with any external buffers *)\r	self flush\r)"),
				new MM("flush", false, "public flush = (\r	(* Flush any information buffered in Smalltalk.  This does NOT\r	 flush the external medium; use #externalFlush for that. *)\r\r	(* By default do nothing *)\r)"),
				new MM("next:put:", false, "next: nElements <Integer> put: el <E> ^ <E> = (\r\r\r	nElements timesRepeat: [\r		self nextPut: el		].\r	^el\r)"),
				new MM("nextPut:", false, "public nextPut: el <E> ^ <E> = (\r\r\r	self subclassResponsibility\r)"),
				new MM("nextPutAll:", false, "public nextPutAll: els <Collection[E]> ^ <Collection[Object]> = (\r \r\r	els do: [ :el <E> |\r		self nextPut: el		].\r	^els\r)"),
				new MM("put:", false, "put: el <E> ^ <E> = (\r\r	(* A better name for nextPut: *)\r\r	^self nextPut: el\r)"),
				new MM("putAll:", false, "putAll: els <Collection[E]> ^ <Collection[Object]> = (\r\r	(* Better name for nextPutAll: *)\r\r	^self nextPutAll: els\r)"),
				new MM("show:", false, "show: els <Collection[E]> ^ <Collection[Object]> = (\r\r	(* basically like for #nextPutAll, except that it should flush immediately. *)\r\r	self nextPutAll: els; flush.\r	^els\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$BasicOutputStream = (function () {
				var self = this;
				self.$super$Streams$BasicOutputStream$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$BasicOutputStream();
				return self;
			});
			this.$externalFlush = (function () {
				var self = this;
				self._$flush();
				return self;
			});
			this.$flush = (function () {
				var self = this;
				return self;
			});
			this.$next$put$ = (function ($nElements, $el) {
				var self = this;
				{
					var $$limit = nil;
					var $$i = nil;
					nil;
					$$i = 1;
					$$limit = $nElements;
					for (; $$limit.$$greater$equal($$i); ) {
						self._$nextPut$($el);
						$$i = (1).$$plus($$i);
					};
				};
				return $el;
			});
			this.$nextPut$ = (function ($el) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$nextPutAll$ = (function ($els) {
				var self = this;
				$els.$do$((function ($el) {
					return self._$nextPut$($el);
				}));
				return $els;
			});
			this.$put$ = (function ($el) {
				var self = this;
				return self._$nextPut$($el);
			});
			this.$putAll$ = (function ($els) {
				var self = this;
				return self._$nextPutAll$($els);
			});
			this.$show$ = (function ($els) {
				var self = this;
				(function (cascadeReceiver) {
					cascadeReceiver.$nextPutAll$($els);
					return cascadeReceiver.$flush();
				})(self);
				return $els;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`BasicOutputStream";
					this._$superInit$Streams$BasicOutputStream = $.$superInit$Streams$BasicOutputStream;
					this.$superInit$Streams$BasicOutputStream = dnuCatcher("$superInit$Streams$BasicOutputStream");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$externalFlush = $.$externalFlush;
					this.$externalFlush = dnuCatcher("$externalFlush");
					this.$flush = this._$flush = $.$flush;
					this._$next$put$ = $.$next$put$;
					this.$next$put$ = dnuCatcher("$next$put$");
					this.$nextPut$ = this._$nextPut$ = $.$nextPut$;
					this.$nextPutAll$ = this._$nextPutAll$ = $.$nextPutAll$;
					this._$put$ = $.$put$;
					this.$put$ = dnuCatcher("$put$");
					this._$putAll$ = $.$putAll$;
					this.$putAll$ = dnuCatcher("$putAll$");
					this._$show$ = $.$show$;
					this.$show$ = dnuCatcher("$show$");
					this.$enclosingObjects$Streams$BasicOutputStream = enclosingObjects;
					this.$super$Streams$BasicOutputStream$slot = runtimeSuperclass;
					this["Streams`BasicOutputStream"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Streams`BasicOutputStream"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`BasicOutputStream";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`BasicOutputStream";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Streams$BasicOutputStream = enclosingObjects;
						this.$super$Streams$BasicOutputStream = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$BasicReadStream = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`BasicReadStream";
			this.name = "Streams`BasicReadStream";
			this.header = "BasicReadStream = BasicInputStream (\r(* This class provides the standard implementation of the ReadStream protocol. \r\rSubclass responsibilities:\r    %responsibility actualPosition:\r        Should be extended in subclasses to change any external position cursor, if necessary.\r    %responsibility actualNext\r        Subclasses must ensure that their implementation of next and nextFromPeek increments the position. *)| actualPosition_slot <Integer> ::= 0.  |)";
			this.slots = [new SM("actualPosition_slot", true, false)];
			this.methods = [
				new MM("superInit`Streams`BasicReadStream", true, "BasicInputStream"),
				new MM("instance`initializer", true, "BasicInputStream"),
				new MM("at:", false, "at: index <Integer> ^ <E> = (\r\r\r	| pos <Integer> result <E> |\r	pos:: self position.\r	self position: index - 1.\r	result:: self next.\r	self position: pos.\r	^result\r)"),
				new MM("collection", false, "collection  ^ <List[E]> = (\r\r\r	| cltn <MutableList[E]> origPos <Integer> |\r\r	cltn:: self newCollectionOfSize: self size.\r	origPos:: self position.\r	self position: 0.\r	1 to: self size do: [ :i <Integer> |\r		cltn at: i put: self next.	].\r	self position: origPos.\r	^cltn\r)"),
				new MM("contents", false, "public contents  ^ <List[E]> = (\r\r	(* Obsolete: this method is included purely for BlueBook compatibility.  If possible, use \r	 #contentsRemaining and #contentsWritten, which will work when a ReadWriteStream\r	 is substituted for a ReadStream or a WriteStream, unlike this method *)\r\r	(* This originally referred to contentsRemaining. The result of 'contents' should not depend on how much of a stream has already been read, see Blue Book - Protocol for Streams *)\r\r	^self collection\r)"),
				new MM("contentsRemaining", false, "contentsRemaining  ^ <List[E]> = (\r\r\r	| cltn <MutableList[E]> n <Integer> |\r\r	n::  self size - self position.\r	cltn:: self newCollectionOfSize: n.\r	1 to: n do: [ :i <Integer> |\r		cltn at: i put: self next.	].\r	^cltn\r)"),
				new MM("copyFrom:to:", false, "copyFrom: start <Integer> to: stop <Integer> ^ <MutableList[EX]>\r	(* {where EX is returnType of #anElement message of receiverType} *)\r= (\r	| pos <Integer> n <Integer> result <Array[EX]> offset <Integer> |\r	pos:: self position.\r	n:: (stop - start) + 1.\r	result:: Array(* [EX] *) new: n.\r	offset:: start - 1.\r	1 to: n do:\r		[ :i <Integer> |\r			(* guarantee is safe because of inference clause *)\r			result at: i put: ((* guaranteed <EX> *) (self repositioningAt: offset + i)). ].\r	self position: pos.\r	^result\r)"),
				new MM("isEmpty", false, "isEmpty ^ <Boolean> = (\r\r\r	^self size = 0\r)"),
				new MM("position", false, "public position ^ <Integer> = (\r\r\r	^self havePeeked\r		ifFalse: [ self actualPosition ]\r		ifTrue: [ self actualPosition - 1 ]\r)"),
				new MM("position:", false, "public position: p <Integer> = (\r\r	self actualPosition: p.\r	self noPeekVal.\r)"),
				new MM("repositioningAt:", false, "repositioningAt: index <Integer> ^ <E> = (\r\r	(* Like at:, but may leave the position changed *)\r\r	^self at: index\r)"),
				new MM("reset", false, "reset\r = (\r\r	self position: 0.\r)"),
				new MM("setToEnd", false, "setToEnd\r = (\r\r	self position: self size.\r)"),
				new MM("size", false, "size ^ <Integer> = (\r\r\r	self subclassResponsibility\r)"),
				new MM("skip:", false, "skip: nElements <Integer>\r = (\r\r	self position: (self position + nElements max: self size)\r)"),
				new MM("skipTo:", false, "skipTo: o <Object> ^ <Boolean> = (\r\r\r	| pos <Integer> n <Integer> sz <Integer> |\r	sz:: self size.\r	pos:: self position.\r	pos + 1 to: sz do:\r		[ :i <Integer> |\r			(self repositioningAt: i) = o\r				ifTrue: [	self position: i.\r								^true ]\r		].\r	self position: sz.\r	^false\r)"),
				new MM("upTo:", false, "upTo: delimiter <Object> ^ <SeqCltn[E]> = (\r\r\r	| pos <Integer> n <Integer> result <List[E]> |\r	pos:: self position.\r	^(self skipTo: delimiter)\r		ifTrue: [ self copyFrom: pos + 1 to: self position - 1 ]\r		ifFalse: [ self copyFrom: pos + 1 to: self position ]\r\r(*	| pos <Integer> n <Integer> result <Array[E]> |\r	pos:: self position.\r	self skipTo: delimiter.\r	n:: (self position - pos) - 1.\r	self position: pos.\r	result:: Array[E] new: n.\r	1 to: n do:\r		[ :i <Integer> |\r			result at: i put: self next ].\r	self nextIfAbsent: [].\r	^result *)\r)"),
				new MM("actualPosition", false, "actualPosition ^ <Integer> = (\r	^actualPosition_slot	\r)"),
				new MM("actualPosition:", false, "actualPosition: p <Integer> = (\r	actualPosition_slot: p\r)"),
				new MM("actualAtEnd", false, "actualAtEnd ^ <Boolean> = (\r\r\r	^self actualPosition >= self size\r)"),
				new MM("actualPosition_slot", true, null),
				new MM("actualPosition_slot:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$BasicReadStream = (function () {
				var self = this;
				self.$super$Streams$BasicReadStream$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$BasicReadStream();
				self._$actualPosition_slot$(0);
				return self;
			});
			this.$at$ = (function ($index) {
				var self = this;
				var $pos = nil;
				var $result = nil;
				$pos = self._$position();
				self._$position$($index - 1);
				$result = self._$next();
				self._$position$($pos);
				return $result;
			});
			this.$collection = (function () {
				var self = this;
				var $cltn = nil;
				var $origPos = nil;
				$cltn = self._$newCollectionOfSize$(self._$size());
				$origPos = self._$position();
				self._$position$(0);
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = self._$size();
					for (; $$limit.$$greater$equal($i); ) {
						$cltn.$at$put$($i, self._$next());
						$i = (1).$$plus($i);
					};
				};
				self._$position$($origPos);
				return $cltn;
			});
			this.$contents = (function () {
				var self = this;
				return self._$collection();
			});
			this.$contentsRemaining = (function () {
				var self = this;
				var $cltn = nil;
				var $n = nil;
				$n = self._$size() - self._$position();
				$cltn = self._$newCollectionOfSize$($n);
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = $n;
					for (; $$limit.$$greater$equal($i); ) {
						$cltn.$at$put$($i, self._$next());
						$i = (1).$$plus($i);
					};
				};
				return $cltn;
			});
			this.$copyFrom$to$ = (function ($start, $stop) {
				var self = this;
				var $pos = nil;
				var $n = nil;
				var $result = nil;
				var $offset = nil;
				$pos = self._$position();
				$n = ($stop - $start) + 1;
				$result = self._$Array().$new$($n);
				$offset = $start - 1;
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = $n;
					for (; $$limit.$$greater$equal($i); ) {
						$result.$at$put$($i, self._$repositioningAt$($offset + $i));
						$i = (1).$$plus($i);
					};
				};
				self._$position$($pos);
				return $result;
			});
			this.$isEmpty = (function () {
				var self = this;
				return self._$size().$$equal(0);
			});
			this.$position = (function () {
				var self = this;
				return self._$havePeeked().$ifFalse$ifTrue$((function () {
					return self._$actualPosition();
				}), (function () {
					return self._$actualPosition() - 1;
				}));
			});
			this.$position$ = (function ($p) {
				var self = this;
				self._$actualPosition$($p);
				self._$noPeekVal();
				return self;
			});
			this.$repositioningAt$ = (function ($index) {
				var self = this;
				return self._$at$($index);
			});
			this.$reset = (function () {
				var self = this;
				self._$position$(0);
				return self;
			});
			this.$setToEnd = (function () {
				var self = this;
				self._$position$(self._$size());
				return self;
			});
			this.$size = (function () {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$skip$ = (function ($nElements) {
				var self = this;
				self._$position$((self._$position() + $nElements).$max$(self._$size()));
				return self;
			});
			this.$skipTo$ = (function ($o) {
				var self = this;
				var $pos = nil;
				var $n = nil;
				var $sz = nil;
				$sz = self._$size();
				$pos = self._$position();
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = $pos + 1;
					$$limit = $sz;
					for (; $$limit.$$greater$equal($i); ) {
						if (self._$repositioningAt$($i).$$equal($o)) {
							self._$position$($i);
							return true;
						} else {
							nil;
						};
						$i = (1).$$plus($i);
					};
				};
				self._$position$($sz);
				return false;
			});
			this.$upTo$ = (function ($delimiter) {
				var self = this;
				var $pos = nil;
				var $n = nil;
				var $result = nil;
				$pos = self._$position();
				return self._$skipTo$($delimiter).$ifTrue$ifFalse$((function () {
					return self._$copyFrom$to$($pos + 1, self._$position() - 1);
				}), (function () {
					return self._$copyFrom$to$($pos + 1, self._$position());
				}));
			});
			this.$actualPosition = (function () {
				var self = this;
				return self._$actualPosition_slot();
			});
			this.$actualPosition$ = (function ($p) {
				var self = this;
				self._$actualPosition_slot$($p);
				return self;
			});
			this.$actualAtEnd = (function () {
				var self = this;
				return self._$actualPosition().$$greater$equal(self._$size());
			});
			this.$actualPosition_slot = (function () {
				return this.$actualPosition_slot$slot;
			});
			this.$actualPosition_slot$ = (function (v) {
				this.$actualPosition_slot$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`BasicReadStream";
					this._$superInit$Streams$BasicReadStream = $.$superInit$Streams$BasicReadStream;
					this.$superInit$Streams$BasicReadStream = dnuCatcher("$superInit$Streams$BasicReadStream");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$at$ = $.$at$;
					this.$at$ = dnuCatcher("$at$");
					this._$collection = $.$collection;
					this.$collection = dnuCatcher("$collection");
					this.$contents = this._$contents = $.$contents;
					this._$contentsRemaining = $.$contentsRemaining;
					this.$contentsRemaining = dnuCatcher("$contentsRemaining");
					this._$copyFrom$to$ = $.$copyFrom$to$;
					this.$copyFrom$to$ = dnuCatcher("$copyFrom$to$");
					this._$isEmpty = $.$isEmpty;
					this.$isEmpty = dnuCatcher("$isEmpty");
					this.$position = this._$position = $.$position;
					this.$position$ = this._$position$ = $.$position$;
					this._$repositioningAt$ = $.$repositioningAt$;
					this.$repositioningAt$ = dnuCatcher("$repositioningAt$");
					this._$reset = $.$reset;
					this.$reset = dnuCatcher("$reset");
					this._$setToEnd = $.$setToEnd;
					this.$setToEnd = dnuCatcher("$setToEnd");
					this._$size = $.$size;
					this.$size = dnuCatcher("$size");
					this._$skip$ = $.$skip$;
					this.$skip$ = dnuCatcher("$skip$");
					this._$skipTo$ = $.$skipTo$;
					this.$skipTo$ = dnuCatcher("$skipTo$");
					this._$upTo$ = $.$upTo$;
					this.$upTo$ = dnuCatcher("$upTo$");
					this._$actualPosition = $.$actualPosition;
					this.$actualPosition = dnuCatcher("$actualPosition");
					this._$actualPosition$ = $.$actualPosition$;
					this.$actualPosition$ = dnuCatcher("$actualPosition$");
					this._$actualAtEnd = $.$actualAtEnd;
					this.$actualAtEnd = dnuCatcher("$actualAtEnd");
					this._$actualPosition_slot = $.$actualPosition_slot;
					this.$actualPosition_slot = dnuCatcher("$actualPosition_slot");
					this._$actualPosition_slot$ = $.$actualPosition_slot$;
					this.$actualPosition_slot$ = dnuCatcher("$actualPosition_slot$");
					this.$enclosingObjects$Streams$BasicReadStream = enclosingObjects;
					this.$super$Streams$BasicReadStream$slot = runtimeSuperclass;
					this["Streams`BasicReadStream"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$actualPosition_slot$slot = nil;
					});
					this.basicNew = this["Streams`BasicReadStream"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`BasicReadStream";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("on:", false, "on: sc <List[E]> ^ <ReadStream[E]> = (\r\r	(* Create a new read stream on sc, assuming that all of its elements are readable.\r		This message is here for BlueBook compatibility.  For good style, use (sc readStream)\r		instead. *)\r\r	^SeqCltnReadStream(* [E] *) on: sc\r)"),
					new MM("on:from:to:", false, "on: sc <List[E]> from: firstIndex <Integer> to: lastIndex <Integer>  ^ <ReadStream[E]> = (\r\r	(* Create a new read stream on a copy of the elements in sc from firstIndex to lastIndex, inclusive *)\r\r	^self on: (sc copyFrom: firstIndex to: lastIndex)\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$on$ = (function ($sc) {
					var self = this;
					return self.$enclosingObjects$Streams$BasicReadStream[0]._$SeqCltnReadStream().$on$($sc);
				});
				this.$on$from$to$ = (function ($sc, $firstIndex, $lastIndex) {
					var self = this;
					return self._$on$($sc.$copyFrom$to$($firstIndex, $lastIndex));
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`BasicReadStream";
						this.$new = this._$new = $.$new;
						this._$on$ = $.$on$;
						this.$on$ = dnuCatcher("$on$");
						this._$on$from$to$ = $.$on$from$to$;
						this.$on$from$to$ = dnuCatcher("$on$from$to$");
						this.$enclosingObjects$Streams$BasicReadStream = enclosingObjects;
						this.$super$Streams$BasicReadStream = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$BasicReadWriteStream = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`BasicReadWriteStream";
			this.name = "Streams`BasicReadWriteStream";
			this.header = "BasicReadWriteStream = BasicOutputReadStream (\r(* This class provides the standard implementation of the WriteStream and ReadWriteStream protocols.\r\rThere is no BasicWriteStream class; this is because virtually all WriteStreams are on data structures with implicit readability (try thinking of a positionable collection that can be written and not read), so ReadStreams and ReadWriteStreams are used instead.\r\rBlue Book compatibility note: you can use ReadWriteStreams as you would in the Blue Book, with\rone exception: the #contents message acts like it would for a WriteStream (i.e. it returns the elements\rwritten) rather than returning the entire collection.  The messages #collection, #contentsRemaining, and #contentsWritten fulfill these kind of roles without ambiguity in our system, to make ReadWriteStreams\rfully substitutable for both ReadStreams and WriteStreams.\r\r%responsibility nextPut:\r    Subclasses must extend the nextPut: method to do the actual work of writing the element.\r%responsibility size:\r    Optional - Any subclass that wishes to start off with readable elements in the stream must send\r    the message size: to indicate how many there are.\r*)| size <Integer> ::= 0.  |)";
			this.slots = [new SM("size", true, false)];
			this.methods = [
				new MM("superInit`Streams`BasicReadWriteStream", true, "BasicOutputReadStream"),
				new MM("instance`initializer", true, "BasicOutputReadStream"),
				new MM("contents", false, "public contents  ^ <List[E]> = (\r\r	(* Obsolete: this method is included purely for BlueBook compatibility.  If possible, use \r	 #contentsRemaining and #contentsWritten, which will work when a ReadWriteStream\r	 is substituted for a ReadStream or a WriteStream, unlike this method *)\r\r	^self collection\r)"),
				new MM("contentsWritten", false, "public contentsWritten  ^ <List[E]> = (\r\r\r	| cltn <MutableList[E]>  origPos <Integer> |\r\r	cltn:: self newCollectionOfSize: self position.\r	origPos:: self position.\r	self position: 0.\r	1 to: origPos do: [ :i <Integer> |\r		cltn at: i put: self next.	].\r	self position: origPos.\r	^cltn\r)"),
				new MM("nextPut:", false, "public nextPut: el <E> ^ <E> = (\r\r	(* Subclasses must extend this to do the actual writing of the element.  This impl just keeps track of bookkeeping. *)\r\r	| pos <Integer> |\r	self position: (pos:: self position + 1).\r	pos > self size\r		ifTrue: [ self size: pos ].\r	^el\r)"),
				new MM("size", true, null),
				new MM("size:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$BasicReadWriteStream = (function () {
				var self = this;
				self.$super$Streams$BasicReadWriteStream$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$BasicReadWriteStream();
				self._$size$(0);
				return self;
			});
			this.$contents = (function () {
				var self = this;
				return self._$collection();
			});
			this.$contentsWritten = (function () {
				var self = this;
				var $cltn = nil;
				var $origPos = nil;
				$cltn = self._$newCollectionOfSize$(self._$position());
				$origPos = self._$position();
				self._$position$(0);
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = $origPos;
					for (; $$limit.$$greater$equal($i); ) {
						$cltn.$at$put$($i, self._$next());
						$i = (1).$$plus($i);
					};
				};
				self._$position$($origPos);
				return $cltn;
			});
			this.$nextPut$ = (function ($el) {
				var self = this;
				var $pos = nil;
				self._$position$($pos = self._$position() + 1);
				if ($pos.$$greater(self._$size())) {
					self._$size$($pos);
				} else {
					nil;
				};
				return $el;
			});
			this.$size = (function () {
				return this.$size$slot;
			});
			this.$size$ = (function (v) {
				this.$size$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`BasicReadWriteStream";
					this._$superInit$Streams$BasicReadWriteStream = $.$superInit$Streams$BasicReadWriteStream;
					this.$superInit$Streams$BasicReadWriteStream = dnuCatcher("$superInit$Streams$BasicReadWriteStream");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$contents = this._$contents = $.$contents;
					this.$contentsWritten = this._$contentsWritten = $.$contentsWritten;
					this.$nextPut$ = this._$nextPut$ = $.$nextPut$;
					this._$size = $.$size;
					this.$size = dnuCatcher("$size");
					this._$size$ = $.$size$;
					this.$size$ = dnuCatcher("$size$");
					this.$enclosingObjects$Streams$BasicReadWriteStream = enclosingObjects;
					this.$super$Streams$BasicReadWriteStream$slot = runtimeSuperclass;
					this["Streams`BasicReadWriteStream"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$size$slot = nil;
					});
					this.basicNew = this["Streams`BasicReadWriteStream"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`BasicReadWriteStream";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("on:", false, "on: sc <MutableList[E]>  ^ <ReadWriteStream[E]> = (\r\r	(* Create a new read write stream on a sequenceable collection, assuming that it contains no readable elements yet *)\r\r	^self on: sc numElements: 0\r)"),
					new MM("on:numElements:", false, "on: sc <MutableList[E]> numElements: n <Integer> ^ <ReadWriteStream[E]> = (\r\r	(* Create a new read write stream on a sequenceable collection, assuming that it contains n readable elements to start *)\r\r	^SeqCltnReadWriteStream on: sc numElements: n\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$on$ = (function ($sc) {
					var self = this;
					return self._$on$numElements$($sc, 0);
				});
				this.$on$numElements$ = (function ($sc, $n) {
					var self = this;
					return self.$enclosingObjects$Streams$BasicReadWriteStream[0]._$SeqCltnReadWriteStream().$on$numElements$($sc, $n);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`BasicReadWriteStream";
						this.$new = this._$new = $.$new;
						this._$on$ = $.$on$;
						this.$on$ = dnuCatcher("$on$");
						this._$on$numElements$ = $.$on$numElements$;
						this.$on$numElements$ = dnuCatcher("$on$numElements$");
						this.$enclosingObjects$Streams$BasicReadWriteStream = enclosingObjects;
						this.$super$Streams$BasicReadWriteStream = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$CharacterInput = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`CharacterInput";
			this.name = "Streams`CharacterInput";
			this.header = "CharacterInput = (\r(* This mixin adds character specific messages to an InputStream class. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`Streams`CharacterInput", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("contentsRemaining", false, "contentsRemaining ^ <String> = (\r\r\r	| con <List[Character]> |\r	con:: super contentsRemaining.\r\r	(* %todo use Str below when have first class protocols *)\r	^con isString\r		ifTrue: [ (* guaranteed <Str> *) con ]\r		ifFalse: [ String withAll: con ]\r)"),
				new MM("next:", false, "next: nElements <Integer> ^ <String> = (\r\r\r	| con <List[Character]> |\r	con:: super next: nElements.\r	^con isString\r		ifTrue: [ (* guaranteed <Str> *) con ]\r		ifFalse: [ String withAll: con ]\r)"),
				new MM("upTo:", false, "upTo: o <Object> ^ <String> = (\r\r\r	| con <List[Character]> |\r	con:: super upTo: o.\r	^con isString\r		ifTrue: [ (* guaranteed <String> *) con ]\r		ifFalse: [ String withAll: con ]\r)"),
				new MM("newCollectionOfSize:", false, "newCollectionOfSize: n <Integer> ^ <String> = (\r\r\r	^String(* [E] *) new: n\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$CharacterInput = (function () {
				var self = this;
				self.$super$Streams$CharacterInput$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$CharacterInput();
				return self;
			});
			this.$contentsRemaining = (function () {
				var self = this;
				var $con = nil;
				$con = self.$super$Streams$CharacterInput$slot._$contentsRemaining.call(self);
				return $con.$isString().$ifTrue$ifFalse$((function () {
					return $con;
				}), (function () {
					return $0.$String.call(self.$enclosingObjects$Streams$CharacterInput[0]).$withAll$($con);
				}));
			});
			this.$next$ = (function ($nElements) {
				var self = this;
				var $con = nil;
				$con = self.$super$Streams$CharacterInput$slot._$next$.call(self, $nElements);
				return $con.$isString().$ifTrue$ifFalse$((function () {
					return $con;
				}), (function () {
					return $0.$String.call(self.$enclosingObjects$Streams$CharacterInput[0]).$withAll$($con);
				}));
			});
			this.$upTo$ = (function ($o) {
				var self = this;
				var $con = nil;
				$con = self.$super$Streams$CharacterInput$slot._$upTo$.call(self, $o);
				return $con.$isString().$ifTrue$ifFalse$((function () {
					return $con;
				}), (function () {
					return $0.$String.call(self.$enclosingObjects$Streams$CharacterInput[0]).$withAll$($con);
				}));
			});
			this.$newCollectionOfSize$ = (function ($n) {
				var self = this;
				return $0.$String.call(self.$enclosingObjects$Streams$CharacterInput[0]).$new$($n);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`CharacterInput";
					this._$superInit$Streams$CharacterInput = $.$superInit$Streams$CharacterInput;
					this.$superInit$Streams$CharacterInput = dnuCatcher("$superInit$Streams$CharacterInput");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$contentsRemaining = $.$contentsRemaining;
					this.$contentsRemaining = dnuCatcher("$contentsRemaining");
					this._$next$ = $.$next$;
					this.$next$ = dnuCatcher("$next$");
					this._$upTo$ = $.$upTo$;
					this.$upTo$ = dnuCatcher("$upTo$");
					this._$newCollectionOfSize$ = $.$newCollectionOfSize$;
					this.$newCollectionOfSize$ = dnuCatcher("$newCollectionOfSize$");
					this.$enclosingObjects$Streams$CharacterInput = enclosingObjects;
					this.$super$Streams$CharacterInput$slot = runtimeSuperclass;
					this["Streams`CharacterInput"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Streams`CharacterInput"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`CharacterInput";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`CharacterInput";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Streams$CharacterInput = enclosingObjects;
						this.$super$Streams$CharacterInput = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$CharacterInputConverter = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`CharacterInputConverter";
			this.name = "Streams`CharacterInputConverter";
			this.header = "CharacterInputConverter = CharacterIStream (\r(* Instances are used to create a CharInputStream that wraps a byte input stream\r*)| binaryStream <STRM> (* = binaryStrm. *)  |)";
			this.slots = [new SM("binaryStream", true, false)];
			this.methods = [
				new MM("superInit`Streams`CharacterInputConverter", true, "CharacterIStream"),
				new MM("instance`initializer", true, "CharacterIStream"),
				new MM("upTo:", false, "upTo: del <Object> ^ <Str> = (\r\r\r	| bytes <List[Integer]> s <String> lfs <Integer> j <Integer> delimiter <Character> |\r\r	(self havePeeked and: [ self peek == del ])\r		ifTrue: [ ^super upTo: del ].\r\r	delimiter:: Character coerce: del.\r	bytes:: self binaryStream upTo: delimiter asciiValue.\r\r	usingCrLfConvention\r		ifTrue: [	delimiter == Character cr\r							ifTrue: [	(* If cr was the delim, got to check for reading the lf, since\r											it was at the lower level *)\r											(self binaryStream atEnd not and: [ self binaryStream peek == 10 ])\r												ifTrue: [ self binaryStream next ].\r										].\r					]\r		ifFalse: [	(* self havePeeked\r							ifFalse: [	s:: String new: bytes size.\r											1 to: bytes size do:\r												[ :ind <Integer> |\r													s at: ind putUnicode: (bytes at: ind)	].\r										 ]\r							ifTrue:	[	s:: String new: bytes size + 1.\r											1 to: bytes size do:\r												[ :ind <Integer> |\r													s at: ind + 1 putUnicode: (bytes at: ind)	].\r											s at: 1 put: self next.\r										 ]\r						^s *)\r					].\r\r	(* Count the line feeds *)\r	lfs:: 0.\r	1 to: bytes size do:\r		[ :ind <Integer> |\r			(bytes at: ind) == 10\r				ifTrue: [ lfs:: lfs + 1 ]\r		].\r	self havePeeked\r		ifFalse: [	s:: String new: bytes size - lfs.\r						j:: 1.	  ]\r		ifTrue: [	s:: String new: (bytes size - lfs) + 1.\r						j:: 2.	  ].\r	bytes do:\r		[ :b <Integer> |\r			b == 10\r				ifFalse: [	s at: j putUnicode: b.\r								j:: j + 1.	 ]\r		].\r	self havePeeked\r		ifTrue: [ s at: 1 put: self next ].\r	^s\r)"),
				new MM("close", false, "close\r = (\r\r	self binaryStream close.\r)"),
				new MM("initBinaryStream:", false, "initBinaryStream: binaryStrm <STRM>\r = (\r\r	self binaryStream: binaryStrm\r)"),
				new MM("actualAtEnd", false, "actualAtEnd ^ <Boolean> = (\r\r\r	^self binaryStream atEnd\r)"),
				new MM("actualNext", false, "actualNext ^ <Character> = (\r\r    | c <Character> |\r	c:: Character value: self binaryStream next.\r	(usingCrLfConvention and: [ c = Character cr ])\r        ifTrue: [ self binaryStream atEnd\r						ifFalse: [ self binaryStream peek = Character lf asciiValue\r											ifTrue: [  self binaryStream next ]	]].\r	^c\r\r)"),
				new MM("binaryStream", true, null),
				new MM("binaryStream:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$CharacterInputConverter = (function () {
				var self = this;
				self.$super$Streams$CharacterInputConverter$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$CharacterInputConverter();
				return self;
			});
			this.$upTo$ = (function ($del) {
				var self = this;
				var $bytes = nil;
				var $s = nil;
				var $lfs = nil;
				var $j = nil;
				var $delimiter = nil;
				if (self._$havePeeked() && (self._$peek() === $del)) {
					return self.$super$Streams$CharacterInputConverter$slot._$upTo$.call(self, $del);
				} else {
					nil;
				};
				$delimiter = self._$Character().$coerce$($del);
				$bytes = self._$binaryStream().$upTo$($delimiter.$asciiValue());
				if (self.$enclosingObjects$Streams$CharacterInputConverter[0]._$usingCrLfConvention()) {
					if ($delimiter === self._$Character().$cr()) {
						if (self._$binaryStream().$atEnd().$not() && (self._$binaryStream().$peek() === 10)) {
							self._$binaryStream().$next();
						} else {
							nil;
						};
					} else {
						nil;
					};
				} else {
					nil;
				};
				$lfs = 0;
				{
					var $$limit = nil;
					var $ind = nil;
					nil;
					$ind = 1;
					$$limit = $bytes.$size();
					for (; $$limit.$$greater$equal($ind); ) {
						if ($bytes.$at$($ind) === 10) {
							$lfs = $lfs + 1;
						} else {
							nil;
						};
						$ind = (1).$$plus($ind);
					};
				};
				if (!self._$havePeeked()) {
					$s = $0.$String.call(self.$enclosingObjects$Streams$CharacterInputConverter[0]).$new$($bytes.$size() - $lfs);
					$j = 1;
				} else {
					$s = $0.$String.call(self.$enclosingObjects$Streams$CharacterInputConverter[0]).$new$(($bytes.$size() - $lfs) + 1);
					$j = 2;
				};
				$bytes.$do$((function ($b) {
					return ($b === 10).$ifFalse$((function () {
						$s.$at$putUnicode$($j, $b);
						return $j = $j + 1;
					}));
				}));
				if (self._$havePeeked()) {
					$s.$at$put$(1, self._$next());
				} else {
					nil;
				};
				return $s;
			});
			this.$close = (function () {
				var self = this;
				self._$binaryStream().$close();
				return self;
			});
			this.$initBinaryStream$ = (function ($binaryStrm) {
				var self = this;
				self._$binaryStream$($binaryStrm);
				return self;
			});
			this.$actualAtEnd = (function () {
				var self = this;
				return self._$binaryStream().$atEnd();
			});
			this.$actualNext = (function () {
				var self = this;
				var $c = nil;
				$c = self._$Character().$value$(self._$binaryStream().$next());
				if (self.$enclosingObjects$Streams$CharacterInputConverter[0]._$usingCrLfConvention() && $c.$$equal(self._$Character().$cr())) {
					if (!self._$binaryStream().$atEnd()) {
						if (self._$binaryStream().$peek().$$equal(self._$Character().$lf().$asciiValue())) {
							self._$binaryStream().$next();
						} else {
							nil;
						};
					} else {
						nil;
					};
				} else {
					nil;
				};
				return $c;
			});
			this.$binaryStream = (function () {
				return this.$binaryStream$slot;
			});
			this.$binaryStream$ = (function (v) {
				this.$binaryStream$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`CharacterInputConverter";
					this._$superInit$Streams$CharacterInputConverter = $.$superInit$Streams$CharacterInputConverter;
					this.$superInit$Streams$CharacterInputConverter = dnuCatcher("$superInit$Streams$CharacterInputConverter");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$upTo$ = $.$upTo$;
					this.$upTo$ = dnuCatcher("$upTo$");
					this._$close = $.$close;
					this.$close = dnuCatcher("$close");
					this._$initBinaryStream$ = $.$initBinaryStream$;
					this.$initBinaryStream$ = dnuCatcher("$initBinaryStream$");
					this._$actualAtEnd = $.$actualAtEnd;
					this.$actualAtEnd = dnuCatcher("$actualAtEnd");
					this._$actualNext = $.$actualNext;
					this.$actualNext = dnuCatcher("$actualNext");
					this._$binaryStream = $.$binaryStream;
					this.$binaryStream = dnuCatcher("$binaryStream");
					this._$binaryStream$ = $.$binaryStream$;
					this.$binaryStream$ = dnuCatcher("$binaryStream$");
					this.$enclosingObjects$Streams$CharacterInputConverter = enclosingObjects;
					this.$super$Streams$CharacterInputConverter$slot = runtimeSuperclass;
					this["Streams`CharacterInputConverter"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$binaryStream$slot = nil;
					});
					this.basicNew = this["Streams`CharacterInputConverter"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`CharacterInputConverter";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("on:", false, "on: binaryStrm <STRM> ^ <Instance> = (\r\r\r	^self new initBinaryStream: binaryStrm\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$on$ = (function ($binaryStrm) {
					var self = this;
					return self._$new().$initBinaryStream$($binaryStrm);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`CharacterInputConverter";
						this.$new = this._$new = $.$new;
						this._$on$ = $.$on$;
						this.$on$ = dnuCatcher("$on$");
						this.$enclosingObjects$Streams$CharacterInputConverter = enclosingObjects;
						this.$super$Streams$CharacterInputConverter = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$CharacterInputOutputConverter = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`CharacterInputOutputConverter";
			this.name = "Streams`CharacterInputOutputConverter";
			this.header = "CharacterInputOutputConverter = OutputInputConverter (\r(*  *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`Streams`CharacterInputOutputConverter", true, "OutputInputConverter"),
				new MM("instance`initializer", true, "OutputInputConverter"),
				new MM("nextPut:", false, "nextPut: c <Character> ^ <Character> = (\r\r\r	self binaryStream nextPut: c asciiValue.\r	 (usingCrLfConvention and: [ c = Character cr ])\r		ifTrue: [ self binaryStream nextPut: Character lf asciiValue ].\r	^c\r)"),
				new MM("position", false, "position ^ <Integer> = (\r\r\r	^self binaryStream position\r)"),
				new MM("position:", false, "position: i <Integer>\r = (\r\r	self binaryStream position: i.\r	self noPeekVal.\r\r)"),
				new MM("setToEnd", false, "setToEnd\r = (\r\r	self binaryStream setToEnd\r)"),
				new MM("externalFlush", false, "externalFlush\r = (\r\r	self binaryStream externalFlush.\r)"),
				new MM("flush", false, "flush\r = (\r\r	self binaryStream flush.\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$CharacterInputOutputConverter = (function () {
				var self = this;
				self.$super$Streams$CharacterInputOutputConverter$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$CharacterInputOutputConverter();
				return self;
			});
			this.$nextPut$ = (function ($c) {
				var self = this;
				self._$binaryStream().$nextPut$($c.$asciiValue());
				if (self.$enclosingObjects$Streams$CharacterInputOutputConverter[0]._$usingCrLfConvention() && $c.$$equal(self._$Character().$cr())) {
					self._$binaryStream().$nextPut$(self._$Character().$lf().$asciiValue());
				} else {
					nil;
				};
				return $c;
			});
			this.$position = (function () {
				var self = this;
				return self._$binaryStream().$position();
			});
			this.$position$ = (function ($i) {
				var self = this;
				self._$binaryStream().$position$($i);
				self._$noPeekVal();
				return self;
			});
			this.$setToEnd = (function () {
				var self = this;
				self._$binaryStream().$setToEnd();
				return self;
			});
			this.$externalFlush = (function () {
				var self = this;
				self._$binaryStream().$externalFlush();
				return self;
			});
			this.$flush = (function () {
				var self = this;
				self._$binaryStream().$flush();
				return self;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`CharacterInputOutputConverter";
					this._$superInit$Streams$CharacterInputOutputConverter = $.$superInit$Streams$CharacterInputOutputConverter;
					this.$superInit$Streams$CharacterInputOutputConverter = dnuCatcher("$superInit$Streams$CharacterInputOutputConverter");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$nextPut$ = $.$nextPut$;
					this.$nextPut$ = dnuCatcher("$nextPut$");
					this._$position = $.$position;
					this.$position = dnuCatcher("$position");
					this._$position$ = $.$position$;
					this.$position$ = dnuCatcher("$position$");
					this._$setToEnd = $.$setToEnd;
					this.$setToEnd = dnuCatcher("$setToEnd");
					this._$externalFlush = $.$externalFlush;
					this.$externalFlush = dnuCatcher("$externalFlush");
					this._$flush = $.$flush;
					this.$flush = dnuCatcher("$flush");
					this.$enclosingObjects$Streams$CharacterInputOutputConverter = enclosingObjects;
					this.$super$Streams$CharacterInputOutputConverter$slot = runtimeSuperclass;
					this["Streams`CharacterInputOutputConverter"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Streams`CharacterInputOutputConverter"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`CharacterInputOutputConverter";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("on:", false, "on: binaryStrm <STRM> ^ <Instance> = (\r	^self new initBinaryStream: binaryStrm\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$on$ = (function ($binaryStrm) {
					var self = this;
					return self._$new().$initBinaryStream$($binaryStrm);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`CharacterInputOutputConverter";
						this.$new = this._$new = $.$new;
						this._$on$ = $.$on$;
						this.$on$ = dnuCatcher("$on$");
						this.$enclosingObjects$Streams$CharacterInputOutputConverter = enclosingObjects;
						this.$super$Streams$CharacterInputOutputConverter = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$CharacterOutput = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`CharacterOutput";
			this.name = "Streams`CharacterOutput";
			this.header = "CharacterOutput = (\r(* This mixin adds character specific messages to an OutputStream class. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`Streams`CharacterOutput", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("cr", false, "public cr  = (\r	self nextPut: Character cr\r)"),
				new MM("crTab", false, "public crTab  = (\r	self crTab: 1\r)"),
				new MM("crTab:", false, "public crTab: count <Integer> = (\r	count timesRepeat:\r		[ self nextPut: Character cr; nextPut: Character tab	]\r)"),
				new MM("print:", false, "public print: o <Object> = (\r	o printOn: self\r)"),
				new MM("space", false, "public space = (\r	self nextPut: Character space\r)"),
				new MM("tab", false, "public tab = (\r	self nextPut: Character tab\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$CharacterOutput = (function () {
				var self = this;
				self.$super$Streams$CharacterOutput$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$CharacterOutput();
				return self;
			});
			this.$cr = (function () {
				var self = this;
				self._$nextPut$(self._$Character().$cr());
				return self;
			});
			this.$crTab = (function () {
				var self = this;
				self._$crTab$(1);
				return self;
			});
			this.$crTab$ = (function ($count) {
				var self = this;
				{
					var $$limit = nil;
					var $$i = nil;
					nil;
					$$i = 1;
					$$limit = $count;
					for (; $$limit.$$greater$equal($$i); ) {
						(function (cascadeReceiver) {
							cascadeReceiver.$nextPut$(self._$Character().$cr());
							return cascadeReceiver.$nextPut$(self._$Character().$tab());
						})(self);
						$$i = (1).$$plus($$i);
					};
				};
				return self;
			});
			this.$print$ = (function ($o) {
				var self = this;
				$o.$printOn$(self);
				return self;
			});
			this.$space = (function () {
				var self = this;
				self._$nextPut$(self._$Character().$space());
				return self;
			});
			this.$tab = (function () {
				var self = this;
				self._$nextPut$(self._$Character().$tab());
				return self;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`CharacterOutput";
					this._$superInit$Streams$CharacterOutput = $.$superInit$Streams$CharacterOutput;
					this.$superInit$Streams$CharacterOutput = dnuCatcher("$superInit$Streams$CharacterOutput");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$cr = this._$cr = $.$cr;
					this.$crTab = this._$crTab = $.$crTab;
					this.$crTab$ = this._$crTab$ = $.$crTab$;
					this.$print$ = this._$print$ = $.$print$;
					this.$space = this._$space = $.$space;
					this.$tab = this._$tab = $.$tab;
					this.$enclosingObjects$Streams$CharacterOutput = enclosingObjects;
					this.$super$Streams$CharacterOutput$slot = runtimeSuperclass;
					this["Streams`CharacterOutput"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Streams`CharacterOutput"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`CharacterOutput";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`CharacterOutput";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Streams$CharacterOutput = enclosingObjects;
						this.$super$Streams$CharacterOutput = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$CharacterOutputConverter = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`CharacterOutputConverter";
			this.name = "Streams`CharacterOutputConverter";
			this.header = "CharacterOutputConverter = CharacterOStream (\r(*  *)| binaryStream <OutputStream[Integer]> (* = bstream. *) |)";
			this.slots = [new SM("binaryStream", true, false)];
			this.methods = [
				new MM("superInit`Streams`CharacterOutputConverter", true, "CharacterOStream"),
				new MM("instance`initializer", true, "CharacterOStream"),
				new MM("nextPut:", false, "public nextPut: c <Character> ^ <Character> = (\r\r\r	self binaryStream nextPut: c asciiValue.\r	 (usingCrLfConvention and: [ c = Character cr ])\r		ifTrue: [ self binaryStream nextPut: Character lf asciiValue ].\r	^c\r)"),
				new MM("close", false, "public close = (\r	self binaryStream close.\r)"),
				new MM("externalFlush", false, "externalFlush\r = (\r\r	self binaryStream externalFlush.\r)"),
				new MM("flush", false, "public flush = (\r	self binaryStream flush.\r)"),
				new MM("initBinaryStream:", false, "initBinaryStream: binaryStrm <InputStream[Integer]>\r = ((* delete *)\r\r	self binaryStream: binaryStrm\r)"),
				new MM("binaryStream", true, null),
				new MM("binaryStream:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$CharacterOutputConverter = (function () {
				var self = this;
				self.$super$Streams$CharacterOutputConverter$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$CharacterOutputConverter();
				return self;
			});
			this.$nextPut$ = (function ($c) {
				var self = this;
				self._$binaryStream().$nextPut$($c.$asciiValue());
				if (self.$enclosingObjects$Streams$CharacterOutputConverter[0]._$usingCrLfConvention() && $c.$$equal(self._$Character().$cr())) {
					self._$binaryStream().$nextPut$(self._$Character().$lf().$asciiValue());
				} else {
					nil;
				};
				return $c;
			});
			this.$close = (function () {
				var self = this;
				self._$binaryStream().$close();
				return self;
			});
			this.$externalFlush = (function () {
				var self = this;
				self._$binaryStream().$externalFlush();
				return self;
			});
			this.$flush = (function () {
				var self = this;
				self._$binaryStream().$flush();
				return self;
			});
			this.$initBinaryStream$ = (function ($binaryStrm) {
				var self = this;
				self._$binaryStream$($binaryStrm);
				return self;
			});
			this.$binaryStream = (function () {
				return this.$binaryStream$slot;
			});
			this.$binaryStream$ = (function (v) {
				this.$binaryStream$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`CharacterOutputConverter";
					this._$superInit$Streams$CharacterOutputConverter = $.$superInit$Streams$CharacterOutputConverter;
					this.$superInit$Streams$CharacterOutputConverter = dnuCatcher("$superInit$Streams$CharacterOutputConverter");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$nextPut$ = this._$nextPut$ = $.$nextPut$;
					this.$close = this._$close = $.$close;
					this._$externalFlush = $.$externalFlush;
					this.$externalFlush = dnuCatcher("$externalFlush");
					this.$flush = this._$flush = $.$flush;
					this._$initBinaryStream$ = $.$initBinaryStream$;
					this.$initBinaryStream$ = dnuCatcher("$initBinaryStream$");
					this._$binaryStream = $.$binaryStream;
					this.$binaryStream = dnuCatcher("$binaryStream");
					this._$binaryStream$ = $.$binaryStream$;
					this.$binaryStream$ = dnuCatcher("$binaryStream$");
					this.$enclosingObjects$Streams$CharacterOutputConverter = enclosingObjects;
					this.$super$Streams$CharacterOutputConverter$slot = runtimeSuperclass;
					this["Streams`CharacterOutputConverter"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$binaryStream$slot = nil;
					});
					this.basicNew = this["Streams`CharacterOutputConverter"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`CharacterOutputConverter";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("on:", false, "public on: binaryStrm <OutputStream[Integer]> ^ <Instance> = (\r\r\r	^self new initBinaryStream: binaryStrm\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$on$ = (function ($binaryStrm) {
					var self = this;
					return self._$new().$initBinaryStream$($binaryStrm);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`CharacterOutputConverter";
						this.$new = this._$new = $.$new;
						this.$on$ = this._$on$ = $.$on$;
						this.$enclosingObjects$Streams$CharacterOutputConverter = enclosingObjects;
						this.$super$Streams$CharacterOutputConverter = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$CharacterReadConverter = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`CharacterReadConverter";
			this.name = "Streams`CharacterReadConverter";
			this.header = "CharacterReadConverter = CharacterInputConverter (\r(* Like CharacterInputConverter, but takes a ReadStream[Integer] rather than an InputStream[Integer], so that it can do some operations like\rupTo: faster.\r*))";
			this.slots = [];
			this.methods = [
				new MM("superInit`Streams`CharacterReadConverter", true, "CharacterInputConverter"),
				new MM("instance`initializer", true, "CharacterInputConverter"),
				new MM("upTo:", false, "upTo: del <Object> ^ <String> = (\r\r\r	| sz <Integer> s <String> lfs <Integer> offset <Integer> delimiter <Integer> pos <Integer> bsize <Integer> i <Integer> |\r\r	(self havePeeked and: [ self peek == del ])\r		ifTrue: [ ^super upTo: del ].\r\r	delimiter:: (Character coerce: del) asciiValue.\r	pos:: self binaryStream position.\r\r	(* Scan for the delimiter in the binary stream *)\r	sz:: self numCharsUpToAscii: delimiter.\r\r	self havePeeked\r		ifFalse: [	s:: String new: sz.\r						offset:: 0. ]\r		ifTrue: [	s:: String new: sz + 1.\r						s at: 1 put: self next.\r						offset:: 1. ].\r\r	pos:: pos + 1.\r	i:: 1.\r	[ i <= sz ]\r		whileTrue: [	| code <Integer> |\r							code:: self binaryStream repositioningAt: pos.\r							s at: i + offset putUnicode: code.\r							i:: i + 1.\r							(code == 13 and: [usingCrLfConvention])\r								ifTrue: [	pos:: pos + 1. ].\r							pos:: pos + 1.	].\r	(* The following fiddly code is to set the binary stream position to pos without\r		going past the end of the stream *)\r	self binaryStream position: pos - 1.\r	self binaryStream atEnd\r		ifFalse: [ self binaryStream next ].\r	^s\r)"),
				new MM("numCharsUpToAscii:", false, "numCharsUpToAscii: del <Integer> ^ <Integer> = (\r\r	(* Num chars from current pos to del, not counting lfs if they shouldn't be.  May leave the position changed. *)\r\r	| n <Integer> sz <Integer> |\r	n:: 0.\r	sz:: self binaryStream size.\r	self binaryStream position + 1 to: sz do:\r		[ :i <Integer> |\r			| asc <Integer> |\r			asc:: self binaryStream repositioningAt: i.\r			(usingCrLfConvention and: [ asc == 10 ]) (* lf *)\r				ifFalse: [	asc == del\r									ifTrue: [ ^n ]\r									ifFalse: [	n:: n + 1 ]\r							 ]\r		].\r	^n\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$CharacterReadConverter = (function () {
				var self = this;
				self.$super$Streams$CharacterReadConverter$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$CharacterReadConverter();
				return self;
			});
			this.$upTo$ = (function ($del) {
				var self = this;
				var $sz = nil;
				var $s = nil;
				var $lfs = nil;
				var $offset = nil;
				var $delimiter = nil;
				var $pos = nil;
				var $bsize = nil;
				var $i = nil;
				if (self._$havePeeked() && (self._$peek() === $del)) {
					return self.$super$Streams$CharacterReadConverter$slot._$upTo$.call(self, $del);
				} else {
					nil;
				};
				$delimiter = self._$Character().$coerce$($del).$asciiValue();
				$pos = self._$binaryStream().$position();
				$sz = self._$numCharsUpToAscii$($delimiter);
				if (!self._$havePeeked()) {
					$s = $0.$String.call(self.$enclosingObjects$Streams$CharacterReadConverter[0]).$new$($sz);
					$offset = 0;
				} else {
					$s = $0.$String.call(self.$enclosingObjects$Streams$CharacterReadConverter[0]).$new$($sz + 1);
					$s.$at$put$(1, self._$next());
					$offset = 1;
				};
				$pos = $pos + 1;
				$i = 1;
				{
					nil;
					for (; $i.$$less$equal($sz); ) {
						var $code = nil;
						$code = self._$binaryStream().$repositioningAt$($pos);
						$s.$at$putUnicode$($i + $offset, $code);
						$i = $i + 1;
						if (($code === 13) && self.$enclosingObjects$Streams$CharacterReadConverter[0]._$usingCrLfConvention()) {
							$pos = $pos + 1;
						} else {
							nil;
						};
						$pos = $pos + 1;
					};
				};
				self._$binaryStream().$position$($pos - 1);
				if (!self._$binaryStream().$atEnd()) {
					self._$binaryStream().$next();
				} else {
					nil;
				};
				return $s;
			});
			this.$numCharsUpToAscii$ = (function ($del) {
				var self = this;
				var $n = nil;
				var $sz = nil;
				$n = 0;
				$sz = self._$binaryStream().$size();
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = self._$binaryStream().$position() + 1;
					$$limit = $sz;
					for (; $$limit.$$greater$equal($i); ) {
						var $asc = nil;
						$asc = self._$binaryStream().$repositioningAt$($i);
						if (!(self.$enclosingObjects$Streams$CharacterReadConverter[0]._$usingCrLfConvention() && ($asc === 10))) {
							if ($asc === $del) {
								return $n;
							} else {
								$n = $n + 1;
							};
						} else {
							nil;
						};
						$i = (1).$$plus($i);
					};
				};
				return $n;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`CharacterReadConverter";
					this._$superInit$Streams$CharacterReadConverter = $.$superInit$Streams$CharacterReadConverter;
					this.$superInit$Streams$CharacterReadConverter = dnuCatcher("$superInit$Streams$CharacterReadConverter");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$upTo$ = $.$upTo$;
					this.$upTo$ = dnuCatcher("$upTo$");
					this._$numCharsUpToAscii$ = $.$numCharsUpToAscii$;
					this.$numCharsUpToAscii$ = dnuCatcher("$numCharsUpToAscii$");
					this.$enclosingObjects$Streams$CharacterReadConverter = enclosingObjects;
					this.$super$Streams$CharacterReadConverter$slot = runtimeSuperclass;
					this["Streams`CharacterReadConverter"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Streams`CharacterReadConverter"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`CharacterReadConverter";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("on:", false, "on: binaryStrm <STRM> ^ <Instance> = (\r	^self new initBinaryStream: binaryStrm\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$on$ = (function ($binaryStrm) {
					var self = this;
					return self._$new().$initBinaryStream$($binaryStrm);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`CharacterReadConverter";
						this.$new = this._$new = $.$new;
						this._$on$ = $.$on$;
						this.$on$ = dnuCatcher("$on$");
						this.$enclosingObjects$Streams$CharacterReadConverter = enclosingObjects;
						this.$super$Streams$CharacterReadConverter = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$CharacterReadStream = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`CharacterReadStream";
			this.name = "Streams`CharacterReadStream";
			this.header = "CharacterReadStream = CharacterSequenceReadStream ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`Streams`CharacterReadStream", true, "CharacterSequenceReadStream"),
				new MM("instance`initializer", true, "CharacterSequenceReadStream"),
				new MM("copyFrom:to:", false, "public copyFrom: start <Integer> to: stop <Integer> ^ <MutableList[EX]>\r	(* {where EX is returnType of #anElement message of receiverType} *)\r= (\r\r	| pos <Integer> n <Integer> result <String> offset <Integer> |\r	pos:: self position.\r	n:: (stop - start) + 1.\r	result:: String new: n.\r	offset:: start - 1.\r	1 to: n do:\r		[ :i <Integer> |\r			(* guarantee is safe because of inference clause *)\r			result at: i put: (self repositioningAt: offset + i). ].\r	self position: pos.\r	^(* guaranteed <VarSeqCltn[EX]> *) result\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$CharacterReadStream = (function () {
				var self = this;
				self.$super$Streams$CharacterReadStream$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$CharacterReadStream();
				return self;
			});
			this.$copyFrom$to$ = (function ($start, $stop) {
				var self = this;
				var $pos = nil;
				var $n = nil;
				var $result = nil;
				var $offset = nil;
				$pos = self._$position();
				$n = ($stop - $start) + 1;
				$result = $0.$String.call(self.$enclosingObjects$Streams$CharacterReadStream[0]).$new$($n);
				$offset = $start - 1;
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = $n;
					for (; $$limit.$$greater$equal($i); ) {
						$result.$at$put$($i, self._$repositioningAt$($offset + $i));
						$i = (1).$$plus($i);
					};
				};
				self._$position$($pos);
				return $result;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`CharacterReadStream";
					this._$superInit$Streams$CharacterReadStream = $.$superInit$Streams$CharacterReadStream;
					this.$superInit$Streams$CharacterReadStream = dnuCatcher("$superInit$Streams$CharacterReadStream");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$copyFrom$to$ = this._$copyFrom$to$ = $.$copyFrom$to$;
					this.$enclosingObjects$Streams$CharacterReadStream = enclosingObjects;
					this.$super$Streams$CharacterReadStream$slot = runtimeSuperclass;
					this["Streams`CharacterReadStream"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Streams`CharacterReadStream"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`CharacterReadStream";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("on:", false, "public on: sc <List[E]> ^ <ReadStream[E]> = (\r	^self over: sc\r)"),
					new MM("over:", false, "public over: sc <List[E]> ^ <Instance> = (\r	(* This is like on: except it returns type Instance.   on: for streams may return a non-instance type. *)\r\r	^self new initCollection: sc\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$on$ = (function ($sc) {
					var self = this;
					return self._$over$($sc);
				});
				this.$over$ = (function ($sc) {
					var self = this;
					return self._$new().$initCollection$($sc);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`CharacterReadStream";
						this.$new = this._$new = $.$new;
						this.$on$ = this._$on$ = $.$on$;
						this.$over$ = this._$over$ = $.$over$;
						this.$enclosingObjects$Streams$CharacterReadStream = enclosingObjects;
						this.$super$Streams$CharacterReadStream = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$CharacterReadWriteStream = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`CharacterReadWriteStream";
			this.name = "Streams`CharacterReadWriteStream";
			this.header = "CharacterReadWriteStream = CharacterSequenceReadWriteStream ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`Streams`CharacterReadWriteStream", true, "CharacterSequenceReadWriteStream"),
				new MM("instance`initializer", true, "CharacterSequenceReadWriteStream"),
				new MM("copyFrom:to:", false, "public copyFrom: start <Integer> to: stop <Integer> ^ <MutableList[EX]>\r	(* {where EX is returnType of #anElement message of receiverType} *)\r= (\r\r	| pos <Integer> n <Integer> result <String> offset <Integer> |\r	pos:: self position.\r	n:: (stop - start) + 1.\r	result:: String new: n.\r	offset:: start - 1.\r	1 to: n do:\r		[ :i <Integer> |\r			(* guarantee is safe because of inference clause *)\r			result at: i put: (self repositioningAt: offset + i). ].\r	self position: pos.\r	^(* guaranteed <VarSeqCltn[EX]> *) result\r)"),
				new MM("cr", false, "public cr = (\r	self nextPut: Character cr\r)"),
				new MM("crTab", false, "public crTab  = (\r	self crTab: 1\r)"),
				new MM("crTab:", false, "public crTab: count <Integer> = (\r	count timesRepeat: \r		[self nextPut: Character cr; nextPut: Character tab	]\r)"),
				new MM("print:", false, "public print: o <Object> = (\r	o printOn: self\r)"),
				new MM("space", false, "public space = (\r	self nextPut: Character space\r)"),
				new MM("tab", false, "public tab = (\r\r	self nextPut: Character tab\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$CharacterReadWriteStream = (function () {
				var self = this;
				self.$super$Streams$CharacterReadWriteStream$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$CharacterReadWriteStream();
				return self;
			});
			this.$copyFrom$to$ = (function ($start, $stop) {
				var self = this;
				var $pos = nil;
				var $n = nil;
				var $result = nil;
				var $offset = nil;
				$pos = self._$position();
				$n = ($stop - $start) + 1;
				$result = $0.$String.call(self.$enclosingObjects$Streams$CharacterReadWriteStream[0]).$new$($n);
				$offset = $start - 1;
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = $n;
					for (; $$limit.$$greater$equal($i); ) {
						$result.$at$put$($i, self._$repositioningAt$($offset + $i));
						$i = (1).$$plus($i);
					};
				};
				self._$position$($pos);
				return $result;
			});
			this.$cr = (function () {
				var self = this;
				self._$nextPut$(self._$Character().$cr());
				return self;
			});
			this.$crTab = (function () {
				var self = this;
				self._$crTab$(1);
				return self;
			});
			this.$crTab$ = (function ($count) {
				var self = this;
				{
					var $$limit = nil;
					var $$i = nil;
					nil;
					$$i = 1;
					$$limit = $count;
					for (; $$limit.$$greater$equal($$i); ) {
						(function (cascadeReceiver) {
							cascadeReceiver.$nextPut$(self._$Character().$cr());
							return cascadeReceiver.$nextPut$(self._$Character().$tab());
						})(self);
						$$i = (1).$$plus($$i);
					};
				};
				return self;
			});
			this.$print$ = (function ($o) {
				var self = this;
				$o.$printOn$(self);
				return self;
			});
			this.$space = (function () {
				var self = this;
				self._$nextPut$(self._$Character().$space());
				return self;
			});
			this.$tab = (function () {
				var self = this;
				self._$nextPut$(self._$Character().$tab());
				return self;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`CharacterReadWriteStream";
					this._$superInit$Streams$CharacterReadWriteStream = $.$superInit$Streams$CharacterReadWriteStream;
					this.$superInit$Streams$CharacterReadWriteStream = dnuCatcher("$superInit$Streams$CharacterReadWriteStream");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$copyFrom$to$ = this._$copyFrom$to$ = $.$copyFrom$to$;
					this.$cr = this._$cr = $.$cr;
					this.$crTab = this._$crTab = $.$crTab;
					this.$crTab$ = this._$crTab$ = $.$crTab$;
					this.$print$ = this._$print$ = $.$print$;
					this.$space = this._$space = $.$space;
					this.$tab = this._$tab = $.$tab;
					this.$enclosingObjects$Streams$CharacterReadWriteStream = enclosingObjects;
					this.$super$Streams$CharacterReadWriteStream$slot = runtimeSuperclass;
					this["Streams`CharacterReadWriteStream"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Streams`CharacterReadWriteStream"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`CharacterReadWriteStream";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("on:", false, "public on: sc <MutableList[E]> ^ <ReadWriteStream[E]> = (\r	^self over: sc\r)"),
					new MM("on:numElements:", false, "public on: sc <MutableList[E]> numElements: n <Integer> ^ <ReadWriteStream[E]> = (\r	^(self over: sc) size: n\r)"),
					new MM("over:", false, "public over: sc <MutableList[E]> ^ <Instance> = (\r	(* This is like on: except it returns type Instance.   on: for streams may return a non-instance type. *)\r	^self new initBuffer: sc\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$on$ = (function ($sc) {
					var self = this;
					return self._$over$($sc);
				});
				this.$on$numElements$ = (function ($sc, $n) {
					var self = this;
					return self._$over$($sc).$size$($n);
				});
				this.$over$ = (function ($sc) {
					var self = this;
					return self._$new().$initBuffer$($sc);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`CharacterReadWriteStream";
						this.$new = this._$new = $.$new;
						this.$on$ = this._$on$ = $.$on$;
						this.$on$numElements$ = this._$on$numElements$ = $.$on$numElements$;
						this.$over$ = this._$over$ = $.$over$;
						this.$enclosingObjects$Streams$CharacterReadWriteStream = enclosingObjects;
						this.$super$Streams$CharacterReadWriteStream = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$ExternalInputStream = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`ExternalInputStream";
			this.name = "Streams`ExternalInputStream";
			this.header = "ExternalInputStream = BasicIExStream (\r(*  *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`Streams`ExternalInputStream", true, "BasicIExStream"),
				new MM("instance`initializer", true, "BasicIExStream"),
				new MM("atEnd", false, "atEnd ^ <Boolean> = (\r\r\r	(* Reimplemented for speed since we have ensured that atEnd and actualAtEnd mean\r	  the same thing *)\r\r	^self actualAtEnd\r)"),
				new MM("next", false, "next ^ <Integer> = (\r\r\r	(* Reimplemented for speed since we have ensured that next and actualNext mean\r	  the same thing *)\r\r	^self actualNext\r)"),
				new MM("peek", false, "peek ^ <Integer> = (\r\r\r	(* Reimplement so that we can ensure that next and actualNext are the same, for\r	 speed, since by design we always know we have another buffer byte to look at. *)\r\r	self assert: [ self atEnd not ] message: 'Can''t peak past the end of the stream'.\r	^self buffer unsignedByteAt: self nextBufferPosition + 1 (* byteAt: self nextBufferPosition *)\r)"),
				new MM("peekIfAbsent:", false, "peekIfAbsent: f <[X def]>  ^ <E | X> = (\r\r\r	(* Reimplement so that we can ensure that next and actualNext are the same, for\r	 speed, since by design we always know we have another buffer byte to look at. *)\r\r	^self atEnd\r		ifTrue: [ f value ]\r		ifFalse: [ self buffer byteAt: self nextBufferPosition ]\r)"),
				new MM("close", false, "close\r = (\r    (* We have to reimplement this because BasicInputStream mixin in an inappropriate version *)\r    self doClose.\r)"),
				new MM("initDescriptor:", false, "initDescriptor: d <DESCRIPTOR>  = (\r\r\r	super initDescriptor: d.\r	self fillBuffer.\r)"),
				new MM("actualAtEnd", false, "actualAtEnd ^ <Boolean> = (\r\r    ^self nextBufferPosition >= self bufferNumElements\r)"),
				new MM("actualNext", false, "actualNext ^ <Integer> = (\r\r\r    | pos <Integer> byte <Integer> |\r	self actualAtEnd\r		ifTrue: [ self error: 'attempt to read past the end of an external stream' ].\r    pos:: self nextBufferPosition.\r    byte:: self buffer (* byteAt: pos. *) unsignedByteAt: pos+1.\r    pos:: pos + 1.\r    pos >= self bufferSize\r        ifFalse: [ self nextBufferPosition: pos ]\r        ifTrue: [    self advanceBuffer ].\r    ^byte\r)"),
				new MM("arrangeForFinalization", false, "arrangeForFinalization\r = (\r    (* %todo: arrange for the finalize message to be sent to the stream before gc.\r    Is this right? *)\r    (* self descriptor register. *)\r)"),
				new MM("fillBuffer", false, "fillBuffer\r = (\r    self bufferNumElements:\r        (self descriptor readAt: self bufferOrigin\r            ifFail: [ :err <ExternalError> | self error: err ]).\r)"),
				new MM("newCollectionOfSize:", false, "newCollectionOfSize: n <Integer> ^ <ByteArray> = (\r\r\r	^ByteArray new: n\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$ExternalInputStream = (function () {
				var self = this;
				self.$super$Streams$ExternalInputStream$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$ExternalInputStream();
				return self;
			});
			this.$atEnd = (function () {
				var self = this;
				return self._$actualAtEnd();
			});
			this.$next = (function () {
				var self = this;
				return self._$actualNext();
			});
			this.$peek = (function () {
				var self = this;
				self._$assert$message$((function () {
					return self._$atEnd().$not();
				}), "Can't peak past the end of the stream");
				return self._$buffer().$unsignedByteAt$(self._$nextBufferPosition() + 1);
			});
			this.$peekIfAbsent$ = (function ($f) {
				var self = this;
				return self._$atEnd().$ifTrue$ifFalse$((function () {
					return $f.$value();
				}), (function () {
					return self._$buffer().$byteAt$(self._$nextBufferPosition());
				}));
			});
			this.$close = (function () {
				var self = this;
				self._$doClose();
				return self;
			});
			this.$initDescriptor$ = (function ($d) {
				var self = this;
				self.$super$Streams$ExternalInputStream$slot._$initDescriptor$.call(self, $d);
				self._$fillBuffer();
				return self;
			});
			this.$actualAtEnd = (function () {
				var self = this;
				return self._$nextBufferPosition().$$greater$equal(self._$bufferNumElements());
			});
			this.$actualNext = (function () {
				var self = this;
				var $pos = nil;
				var $byte = nil;
				if (self._$actualAtEnd()) {
					self._$error$("attempt to read past the end of an external stream");
				} else {
					nil;
				};
				$pos = self._$nextBufferPosition();
				$byte = self._$buffer().$unsignedByteAt$($pos + 1);
				$pos = $pos + 1;
				if (!$pos.$$greater$equal(self._$bufferSize())) {
					self._$nextBufferPosition$($pos);
				} else {
					self._$advanceBuffer();
				};
				return $byte;
			});
			this.$arrangeForFinalization = (function () {
				var self = this;
				return self;
			});
			this.$fillBuffer = (function () {
				var self = this;
				self._$bufferNumElements$(self._$descriptor().$readAt$ifFail$(self._$bufferOrigin(), (function ($err) {
					return self._$error$($err);
				})));
				return self;
			});
			this.$newCollectionOfSize$ = (function ($n) {
				var self = this;
				return self._$ByteArray().$new$($n);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`ExternalInputStream";
					this._$superInit$Streams$ExternalInputStream = $.$superInit$Streams$ExternalInputStream;
					this.$superInit$Streams$ExternalInputStream = dnuCatcher("$superInit$Streams$ExternalInputStream");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$atEnd = $.$atEnd;
					this.$atEnd = dnuCatcher("$atEnd");
					this._$next = $.$next;
					this.$next = dnuCatcher("$next");
					this._$peek = $.$peek;
					this.$peek = dnuCatcher("$peek");
					this._$peekIfAbsent$ = $.$peekIfAbsent$;
					this.$peekIfAbsent$ = dnuCatcher("$peekIfAbsent$");
					this._$close = $.$close;
					this.$close = dnuCatcher("$close");
					this._$initDescriptor$ = $.$initDescriptor$;
					this.$initDescriptor$ = dnuCatcher("$initDescriptor$");
					this._$actualAtEnd = $.$actualAtEnd;
					this.$actualAtEnd = dnuCatcher("$actualAtEnd");
					this._$actualNext = $.$actualNext;
					this.$actualNext = dnuCatcher("$actualNext");
					this._$arrangeForFinalization = $.$arrangeForFinalization;
					this.$arrangeForFinalization = dnuCatcher("$arrangeForFinalization");
					this._$fillBuffer = $.$fillBuffer;
					this.$fillBuffer = dnuCatcher("$fillBuffer");
					this._$newCollectionOfSize$ = $.$newCollectionOfSize$;
					this.$newCollectionOfSize$ = dnuCatcher("$newCollectionOfSize$");
					this.$enclosingObjects$Streams$ExternalInputStream = enclosingObjects;
					this.$super$Streams$ExternalInputStream$slot = runtimeSuperclass;
					this["Streams`ExternalInputStream"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Streams`ExternalInputStream"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`ExternalInputStream";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`ExternalInputStream";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Streams$ExternalInputStream = enclosingObjects;
						this.$super$Streams$ExternalInputStream = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$ExternalOutputStream = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`ExternalOutputStream";
			this.name = "Streams`ExternalOutputStream";
			this.header = "ExternalOutputStream = EOStream (\r(* %responsibility #updateBufferLocationAfterFlush\r    This method may have to be reimplemented (for example in read/write streams) depending\r    on whether the buffer contains only written elements, or a mix of read/written elements.\r\r%todo: we must make sure when %finalization is implemented that instances of this class are finalized before their descriptors, so that the buffer can be flushed.  See #finalize. *)| \rdirty <Boolean> ::= false. (* indicates whether the buffer contains unflushed modified data *)\r|)";
			this.slots = [new SM("dirty", true, false)];
			this.methods = [
				new MM("superInit`Streams`ExternalOutputStream", true, "EOStream"),
				new MM("instance`initializer", true, "EOStream"),
				new MM("close", false, "close\r = (\r    self flush.\r    super close.\r)"),
				new MM("externalFlush", false, "externalFlush\r = (\r	\r	self flush.\r	self descriptor flushIfFail: [ :err <ExternalError> | self error: err ]\r)"),
				new MM("flush", false, "flush\r = (\r	\r	self dirty\r		ifTrue: [	self bufferNumElements > 0\r					ifTrue: [	self writeBuffer; updateBufferLocationAfterFlush. 	].\r				self dirty: false.	].\r)"),
				new MM("logicalFlush", false, "logicalFlush\r = (\r    \r    self dirty\r        ifTrue: [    self bufferNumElements > 0\r                    ifTrue: [    self writeBuffer; updateBufferLocationAfterFlush.     ].\r                self dirty: false.    ].\r)"),
				new MM("advanceBufferLocation", false, "advanceBufferLocation\r = (\r\r	self bufferOrigin: self bufferOrigin + self bufferNumElements;\r		nextBufferPosition: 0;\r		bufferNumElements: 0.\r)"),
				new MM("arrangeForFinalization", false, "arrangeForFinalization\r = (\r\r	(* %todo: arrange for the finalize message to be sent to the stream before gc. *)\r)"),
				new MM("finalize", false, "finalize\r = (\r\r	self close\r)"),
				new MM("nextPut:", false, "nextPut: byte <Integer> ^ <Integer> = (\r\r    | pos <Integer> |\r    pos:: self nextBufferPosition.\r    (* self buffer byteAt: pos put: byte. *)\r	self buffer unsignedByteAt: pos+1 put: byte.	\r\r    pos:: pos + 1.\r    self nextBufferPosition: pos;\r        bufferNumElements: (pos max: self bufferNumElements).\r    pos >= self bufferSize\r        ifTrue: [    self writeBuffer; advanceBuffer; dirty: false. ]\r        ifFalse: [ self dirty: true ].\r    ^byte\r)"),
				new MM("updateBufferLocationAfterFlush", false, "updateBufferLocationAfterFlush\r = (\r\r	self advanceBufferLocation\r)"),
				new MM("writeBuffer", false, "writeBuffer\r = (\r    (* Caller is responsible for updating dirty *)\r    self descriptor\r        write: self bufferNumElements \r        at: self bufferOrigin\r        ifFail: [ :err |  self error: err ]\r)"),
				new MM("dirty", true, null),
				new MM("dirty:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$ExternalOutputStream = (function () {
				var self = this;
				self.$super$Streams$ExternalOutputStream$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$ExternalOutputStream();
				self._$dirty$(false);
				return self;
			});
			this.$close = (function () {
				var self = this;
				self._$flush();
				self.$super$Streams$ExternalOutputStream$slot._$close.call(self);
				return self;
			});
			this.$externalFlush = (function () {
				var self = this;
				self._$flush();
				self._$descriptor().$flushIfFail$((function ($err) {
					return self._$error$($err);
				}));
				return self;
			});
			this.$flush = (function () {
				var self = this;
				if (self._$dirty()) {
					if (self._$bufferNumElements() > 0) {
						(function (cascadeReceiver) {
							cascadeReceiver.$writeBuffer();
							return cascadeReceiver.$updateBufferLocationAfterFlush();
						})(self);
					} else {
						nil;
					};
					self._$dirty$(false);
				} else {
					nil;
				};
				return self;
			});
			this.$logicalFlush = (function () {
				var self = this;
				if (self._$dirty()) {
					if (self._$bufferNumElements() > 0) {
						(function (cascadeReceiver) {
							cascadeReceiver.$writeBuffer();
							return cascadeReceiver.$updateBufferLocationAfterFlush();
						})(self);
					} else {
						nil;
					};
					self._$dirty$(false);
				} else {
					nil;
				};
				return self;
			});
			this.$advanceBufferLocation = (function () {
				var self = this;
				(function (cascadeReceiver) {
					cascadeReceiver.$bufferOrigin$(self._$bufferOrigin() + self._$bufferNumElements());
					cascadeReceiver.$nextBufferPosition$(0);
					return cascadeReceiver.$bufferNumElements$(0);
				})(self);
				return self;
			});
			this.$arrangeForFinalization = (function () {
				var self = this;
				return self;
			});
			this.$finalize = (function () {
				var self = this;
				self._$close();
				return self;
			});
			this.$nextPut$ = (function ($byte) {
				var self = this;
				var $pos = nil;
				$pos = self._$nextBufferPosition();
				self._$buffer().$unsignedByteAt$put$($pos + 1, $byte);
				$pos = $pos + 1;
				(function (cascadeReceiver) {
					cascadeReceiver.$nextBufferPosition$($pos);
					return cascadeReceiver.$bufferNumElements$($pos.$max$(self._$bufferNumElements()));
				})(self);
				if ($pos.$$greater$equal(self._$bufferSize())) {
					(function (cascadeReceiver) {
						cascadeReceiver.$writeBuffer();
						cascadeReceiver.$advanceBuffer();
						return cascadeReceiver.$dirty$(false);
					})(self);
				} else {
					self._$dirty$(true);
				};
				return $byte;
			});
			this.$updateBufferLocationAfterFlush = (function () {
				var self = this;
				self._$advanceBufferLocation();
				return self;
			});
			this.$writeBuffer = (function () {
				var self = this;
				self._$descriptor().$write$at$ifFail$(self._$bufferNumElements(), self._$bufferOrigin(), (function ($err) {
					return self._$error$($err);
				}));
				return self;
			});
			this.$dirty = (function () {
				return this.$dirty$slot;
			});
			this.$dirty$ = (function (v) {
				this.$dirty$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`ExternalOutputStream";
					this._$superInit$Streams$ExternalOutputStream = $.$superInit$Streams$ExternalOutputStream;
					this.$superInit$Streams$ExternalOutputStream = dnuCatcher("$superInit$Streams$ExternalOutputStream");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$close = $.$close;
					this.$close = dnuCatcher("$close");
					this._$externalFlush = $.$externalFlush;
					this.$externalFlush = dnuCatcher("$externalFlush");
					this._$flush = $.$flush;
					this.$flush = dnuCatcher("$flush");
					this._$logicalFlush = $.$logicalFlush;
					this.$logicalFlush = dnuCatcher("$logicalFlush");
					this._$advanceBufferLocation = $.$advanceBufferLocation;
					this.$advanceBufferLocation = dnuCatcher("$advanceBufferLocation");
					this._$arrangeForFinalization = $.$arrangeForFinalization;
					this.$arrangeForFinalization = dnuCatcher("$arrangeForFinalization");
					this._$finalize = $.$finalize;
					this.$finalize = dnuCatcher("$finalize");
					this._$nextPut$ = $.$nextPut$;
					this.$nextPut$ = dnuCatcher("$nextPut$");
					this._$updateBufferLocationAfterFlush = $.$updateBufferLocationAfterFlush;
					this.$updateBufferLocationAfterFlush = dnuCatcher("$updateBufferLocationAfterFlush");
					this._$writeBuffer = $.$writeBuffer;
					this.$writeBuffer = dnuCatcher("$writeBuffer");
					this._$dirty = $.$dirty;
					this.$dirty = dnuCatcher("$dirty");
					this._$dirty$ = $.$dirty$;
					this.$dirty$ = dnuCatcher("$dirty$");
					this.$enclosingObjects$Streams$ExternalOutputStream = enclosingObjects;
					this.$super$Streams$ExternalOutputStream$slot = runtimeSuperclass;
					this["Streams`ExternalOutputStream"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$dirty$slot = nil;
					});
					this.basicNew = this["Streams`ExternalOutputStream"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`ExternalOutputStream";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("onDescriptor:", false, "onDescriptor: d <DESCRIPTOR> ^ <Instance> = (\r\r    ^self new initDescriptor: d\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$onDescriptor$ = (function ($d) {
					var self = this;
					return self._$new().$initDescriptor$($d);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`ExternalOutputStream";
						this.$new = this._$new = $.$new;
						this._$onDescriptor$ = $.$onDescriptor$;
						this.$onDescriptor$ = dnuCatcher("$onDescriptor$");
						this.$enclosingObjects$Streams$ExternalOutputStream = enclosingObjects;
						this.$super$Streams$ExternalOutputStream = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$ExternalReadStream = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`ExternalReadStream";
			this.name = "Streams`ExternalReadStream";
			this.header = "ExternalReadStream = EIStream (\r(* %note: the actualPosition slot inherited from BasicReadStream is\rnot used; its access methods are reimplemented to use the\rbuffer origin and buffer position. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`Streams`ExternalReadStream", true, "EIStream"),
				new MM("instance`initializer", true, "EIStream"),
				new MM("at:", false, "at: index <Integer> ^ <Integer> = (\r\r\r	| i <Integer> |\r	i:: index - self bufferOrigin.\r	^(i < 1 or: [ i > self bufferNumElements ])\r		ifFalse: [ self buffer byteAt: i - 1 ]\r		ifTrue: [	| pos <Integer> result <Integer> |\r						pos:: self position.\r						self position: index - 1.\r						(* Use a recursive call, which should now be in range *)\r						result:: self at: index.\r						self position: pos.\r						result	]\r)"),
				new MM("repositioningAt:", false, "repositioningAt: index <Integer> ^ <Integer> = (\r\r	\r	| i <Integer> |\r	i:: index - self bufferOrigin.\r	^(i < 1 or: [ i > self bufferNumElements ])\r		ifFalse: [ self buffer byteAt: i - 1 ]\r		ifTrue: [	self position: index - 1.\r						self at: index  ]\r)"),
				new MM("size", false, "size ^ <Integer> = (\r\r\r	^self descriptor size\r)"),
				new MM("initializeActualPosition", false, "initializeActualPosition\r = (\r    (* disable initialization, since we don't use the inherited actualPosition instance variable *)\r)"),
				new MM("actualAtEnd", false, "actualAtEnd ^ <Boolean> = (\r\r    (* copied-down implementation from ExternalInputStream for efficiency *)\r    ^self nextBufferPosition >= self bufferNumElements\r)"),
				new MM("actualPosition", false, "actualPosition ^ <Integer> = (\r\r\r	^self bufferOrigin + self nextBufferPosition\r)"),
				new MM("actualPosition:", false, "actualPosition: p <Integer>\r = (\r    | bufPos <Integer> |\r    bufPos:: p - self bufferOrigin.\r    (bufPos >= 0 and: [ bufPos < self bufferNumElements ])\r        ifTrue: [ self nextBufferPosition: bufPos ]\r        ifFalse: [    (* We need to reload the buffer *)\r					self assert: [ p between: 0 and: self size ] message: ''.\r                    self writeIfNeededBeforePositionChange.\r                    self bufferOrigin: (self goodBufferOriginForPosition: p).\r                    self descriptor position: self bufferOrigin.\r                    self fillBuffer.\r                    self nextBufferPosition: p - self bufferOrigin.    ].\r)"),
				new MM("goodBufferOriginForPosition:", false, "goodBufferOriginForPosition: nextPos <Integer> ^ <Integer> = (\r\r    (* Try to keep the origin on a buffer-aligned boundary *)\r    ^nextPos - (nextPos \\\\ self bufferSize)\r)"),
				new MM("writeIfNeededBeforePositionChange", false, "writeIfNeededBeforePositionChange\r = (\r\r	(* This is a hook for mutable subclasses to do any buffer flushing necessary before\r	 the buffer is repositioned.  By default, do nothing *)\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$ExternalReadStream = (function () {
				var self = this;
				self.$super$Streams$ExternalReadStream$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$ExternalReadStream();
				return self;
			});
			this.$at$ = (function ($index) {
				var self = this;
				var $i = nil;
				$i = $index - self._$bufferOrigin();
				return (($i < 1) || $i.$$greater(self._$bufferNumElements())).$ifFalse$ifTrue$((function () {
					return self._$buffer().$byteAt$($i - 1);
				}), (function () {
					var $pos = nil;
					var $result = nil;
					$pos = self._$position();
					self._$position$($index - 1);
					$result = self._$at$($index);
					self._$position$($pos);
					return $result;
				}));
			});
			this.$repositioningAt$ = (function ($index) {
				var self = this;
				var $i = nil;
				$i = $index - self._$bufferOrigin();
				return (($i < 1) || $i.$$greater(self._$bufferNumElements())).$ifFalse$ifTrue$((function () {
					return self._$buffer().$byteAt$($i - 1);
				}), (function () {
					self._$position$($index - 1);
					return self._$at$($index);
				}));
			});
			this.$size = (function () {
				var self = this;
				return self._$descriptor().$size();
			});
			this.$initializeActualPosition = (function () {
				var self = this;
				return self;
			});
			this.$actualAtEnd = (function () {
				var self = this;
				return self._$nextBufferPosition().$$greater$equal(self._$bufferNumElements());
			});
			this.$actualPosition = (function () {
				var self = this;
				return self._$bufferOrigin() + self._$nextBufferPosition();
			});
			this.$actualPosition$ = (function ($p) {
				var self = this;
				var $bufPos = nil;
				$bufPos = $p - self._$bufferOrigin();
				if (($bufPos >= 0) && $bufPos.$$less(self._$bufferNumElements())) {
					self._$nextBufferPosition$($bufPos);
				} else {
					self._$assert$message$((function () {
						return $p.$between$and$(0, self._$size());
					}), "");
					self._$writeIfNeededBeforePositionChange();
					self._$bufferOrigin$(self._$goodBufferOriginForPosition$($p));
					self._$descriptor().$position$(self._$bufferOrigin());
					self._$fillBuffer();
					self._$nextBufferPosition$($p - self._$bufferOrigin());
				};
				return self;
			});
			this.$goodBufferOriginForPosition$ = (function ($nextPos) {
				var self = this;
				return $nextPos - $nextPos.$$back$back(self._$bufferSize());
			});
			this.$writeIfNeededBeforePositionChange = (function () {
				var self = this;
				return self;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`ExternalReadStream";
					this._$superInit$Streams$ExternalReadStream = $.$superInit$Streams$ExternalReadStream;
					this.$superInit$Streams$ExternalReadStream = dnuCatcher("$superInit$Streams$ExternalReadStream");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$at$ = $.$at$;
					this.$at$ = dnuCatcher("$at$");
					this._$repositioningAt$ = $.$repositioningAt$;
					this.$repositioningAt$ = dnuCatcher("$repositioningAt$");
					this._$size = $.$size;
					this.$size = dnuCatcher("$size");
					this._$initializeActualPosition = $.$initializeActualPosition;
					this.$initializeActualPosition = dnuCatcher("$initializeActualPosition");
					this._$actualAtEnd = $.$actualAtEnd;
					this.$actualAtEnd = dnuCatcher("$actualAtEnd");
					this._$actualPosition = $.$actualPosition;
					this.$actualPosition = dnuCatcher("$actualPosition");
					this._$actualPosition$ = $.$actualPosition$;
					this.$actualPosition$ = dnuCatcher("$actualPosition$");
					this._$goodBufferOriginForPosition$ = $.$goodBufferOriginForPosition$;
					this.$goodBufferOriginForPosition$ = dnuCatcher("$goodBufferOriginForPosition$");
					this._$writeIfNeededBeforePositionChange = $.$writeIfNeededBeforePositionChange;
					this.$writeIfNeededBeforePositionChange = dnuCatcher("$writeIfNeededBeforePositionChange");
					this.$enclosingObjects$Streams$ExternalReadStream = enclosingObjects;
					this.$super$Streams$ExternalReadStream$slot = runtimeSuperclass;
					this["Streams`ExternalReadStream"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Streams`ExternalReadStream"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`ExternalReadStream";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("onDescriptor:", false, "onDescriptor: d <DESCRIPTOR> ^ <Instance> = (\r\r    ^self new initDescriptor: d\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$onDescriptor$ = (function ($d) {
					var self = this;
					return self._$new().$initDescriptor$($d);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`ExternalReadStream";
						this.$new = this._$new = $.$new;
						this._$onDescriptor$ = $.$onDescriptor$;
						this.$onDescriptor$ = dnuCatcher("$onDescriptor$");
						this.$enclosingObjects$Streams$ExternalReadStream = enclosingObjects;
						this.$super$Streams$ExternalReadStream = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$ExternalReadWriteStream = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`ExternalReadWriteStream";
			this.name = "Streams`ExternalReadWriteStream";
			this.header = "ExternalReadWriteStream = EIOStream (\r(* Implements positionable streams of bytes from an external source.  Currently, this class is used both\rfor read-only streams and read-write streams, with different creation messages. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`Streams`ExternalReadWriteStream", true, "EIOStream"),
				new MM("instance`initializer", true, "EIOStream"),
				new MM("contents", false, "contents  ^ <List[Integer]> = (\r\r\r	(* Obsolete: this method is included purely for BlueBook compatibility.  If possible, use \r	 #contentsRemaining and #contentsWritten, which will work when a ReadWriteStream\r	 is substituted for a ReadStream or a WriteStream, unlike this method *)\r\r	^self collection\r)"),
				new MM("contentsWritten", false, "contentsWritten  ^ <List[Integer]> = (\r\r    (* %copied (substituting for E) from BasicReadWriteStream *)\r    | cltn <VarSeqCltn[Integer]>  origPos <Integer> |\r    cltn:: self newCollectionOfSize: self position.\r    origPos:: self position.\r    self position: 0.\r    1 to: origPos do: [ :i <Integer> |\r        cltn at: i put: self next.    ].\r    self position: origPos.\r    ^cltn\r)"),
				new MM("size", false, "size ^ <Integer> = (\r\r\r	(* Make sure we flush our buffer if needed to ensure that\r	 the buffer contents are taken into account *)\r\r	self flush.\r	^super size\r)"),
				new MM("updateBufferLocationAfterFlush", false, "updateBufferLocationAfterFlush\r = (\r\r	(* We don't advance the buffer here because we need to preserve the read semantics *)\r)"),
				new MM("writeIfNeededBeforePositionChange", false, "writeIfNeededBeforePositionChange\r = (\r    self dirty\r        ifTrue: [ self writeBuffer; dirty: false. ].\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$ExternalReadWriteStream = (function () {
				var self = this;
				self.$super$Streams$ExternalReadWriteStream$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$ExternalReadWriteStream();
				return self;
			});
			this.$contents = (function () {
				var self = this;
				return self._$collection();
			});
			this.$contentsWritten = (function () {
				var self = this;
				var $cltn = nil;
				var $origPos = nil;
				$cltn = self._$newCollectionOfSize$(self._$position());
				$origPos = self._$position();
				self._$position$(0);
				{
					var $$limit = nil;
					var $i = nil;
					nil;
					$i = 1;
					$$limit = $origPos;
					for (; $$limit.$$greater$equal($i); ) {
						$cltn.$at$put$($i, self._$next());
						$i = (1).$$plus($i);
					};
				};
				self._$position$($origPos);
				return $cltn;
			});
			this.$size = (function () {
				var self = this;
				self._$flush();
				return self.$super$Streams$ExternalReadWriteStream$slot._$size.call(self);
			});
			this.$updateBufferLocationAfterFlush = (function () {
				var self = this;
				return self;
			});
			this.$writeIfNeededBeforePositionChange = (function () {
				var self = this;
				if (self._$dirty()) {
					(function (cascadeReceiver) {
						cascadeReceiver.$writeBuffer();
						return cascadeReceiver.$dirty$(false);
					})(self);
				} else {
					nil;
				};
				return self;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`ExternalReadWriteStream";
					this._$superInit$Streams$ExternalReadWriteStream = $.$superInit$Streams$ExternalReadWriteStream;
					this.$superInit$Streams$ExternalReadWriteStream = dnuCatcher("$superInit$Streams$ExternalReadWriteStream");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$contents = $.$contents;
					this.$contents = dnuCatcher("$contents");
					this._$contentsWritten = $.$contentsWritten;
					this.$contentsWritten = dnuCatcher("$contentsWritten");
					this._$size = $.$size;
					this.$size = dnuCatcher("$size");
					this._$updateBufferLocationAfterFlush = $.$updateBufferLocationAfterFlush;
					this.$updateBufferLocationAfterFlush = dnuCatcher("$updateBufferLocationAfterFlush");
					this._$writeIfNeededBeforePositionChange = $.$writeIfNeededBeforePositionChange;
					this.$writeIfNeededBeforePositionChange = dnuCatcher("$writeIfNeededBeforePositionChange");
					this.$enclosingObjects$Streams$ExternalReadWriteStream = enclosingObjects;
					this.$super$Streams$ExternalReadWriteStream$slot = runtimeSuperclass;
					this["Streams`ExternalReadWriteStream"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Streams`ExternalReadWriteStream"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`ExternalReadWriteStream";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("onDescriptor:", false, "onDescriptor: d <DESCRIPTOR> ^ <Instance> = (\r\r    ^self new initDescriptor: d\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$onDescriptor$ = (function ($d) {
					var self = this;
					return self._$new().$initDescriptor$($d);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`ExternalReadWriteStream";
						this.$new = this._$new = $.$new;
						this._$onDescriptor$ = $.$onDescriptor$;
						this.$onDescriptor$ = dnuCatcher("$onDescriptor$");
						this.$enclosingObjects$Streams$ExternalReadWriteStream = enclosingObjects;
						this.$super$Streams$ExternalReadWriteStream = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$ExternalStream = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`ExternalStream";
			this.name = "Streams`ExternalStream";
			this.header = "ExternalStream = Object (\r(* This is the abstract superclass for all external stream classes.  It\rprovides buffer management for subclasses.   Library users don't normally directly instantiate ExternalStreams,\rsince that exposes you to genericity and raw ExternalDescriptors; instead, more appropriate entry points\rsuch as readStream/writeStream/readWriteStream are implemented for the various kinds of external objects\rthat can be streamed over, such as File.\r\rInvariant: the buffer position is always less than the index of the last buffer element.   This is accomplished by proactively filling/flushing the buffer when the end is reached.\r\r%responsibility #arrangeForFinalization\r    Subclasses should reimplement this appropriately to do any finalization registration\r      to ensure that the stream is closed when it is garbage collected. *)| \rdescriptor <DESCRIPTOR> (* = d. *)\rbuffer <ExternalProxy> (* I/O buffer, cached from descriptor for speed (0 indexed) *)\rbufferSize <Integer> (* I/O buffer size, cached from descriptor for speed *)\rbufferOrigin <Integer> (* the offset between position and buffer coordinates *)\rnextBufferPosition <Integer> (* The actual position, in buffer coordinates, of the next element (i.e. position + 1 in buffer coords) *)\rbufferNumElements <Integer> (* The number of valid data bytes in the buffer *)\r|)";
			this.slots = [
				new SM("descriptor", true, false),
				new SM("buffer", true, false),
				new SM("bufferSize", true, false),
				new SM("bufferOrigin", true, false),
				new SM("nextBufferPosition", true, false),
				new SM("bufferNumElements", true, false)
			];
			this.methods = [
				new MM("superInit`Streams`ExternalStream", true, "Object"),
				new MM("instance`initializer", true, "Object"),
				new MM("close", false, "close\r = (\r    self doClose\r)"),
				new MM("initBuffer", false, "initBuffer\r = (\r\r	buffer:: descriptor buffer.\r	bufferSize:: descriptor bufferSize.\r	self arrangeForFinalization.\r)"),
				new MM("initDescriptor:", false, "initDescriptor: d <DESCRIPTOR>  = (\r\r\r	self descriptor: d.\r	self initBuffer.\r\r	self bufferOrigin: 0.\r	self bufferNumElements: 0.\r	self nextBufferPosition: 0.\r)"),
				new MM("advanceBuffer", false, "advanceBuffer\r = (\r    (* advance the buffer, and fill it if the receiver is readable.  Assumption: the last advanceBuffer completely\r      filled the buffer *)\r    self bufferOrigin: self bufferOrigin + self bufferSize.\r    self fillBuffer.\r    self nextBufferPosition: 0.\r)"),
				new MM("arrangeForFinalization", false, "arrangeForFinalization\r = (\r	(* Subclasses should reimplement this appropriately to do any finalization registration\r	  to ensure that the stream is closed when it is garbage collected. *)\r\r	self subclassResponsibility\r)"),
				new MM("doClose", false, "doClose\r = (\r    (* This is factored out from close so that subclasses that mixin BasicInputStream can reimplement close to call this *)\r    self descriptor close.\r    buffer:: nil.\r)"),
				new MM("fillBuffer", false, "fillBuffer\r = (\r    (* fill the buffer if needed (this default implementation works for noninput streams) *)\r\r	self bufferNumElements: 0\r)"),
				new MM("postCopy", false, "postCopy\r = (\r\r	super postCopy.\r	self descriptor: self descriptor copy.\r	self initBuffer.\r)"),
				new MM("descriptor", true, null),
				new MM("descriptor:", true, null),
				new MM("buffer", true, null),
				new MM("buffer:", true, null),
				new MM("bufferSize", true, null),
				new MM("bufferSize:", true, null),
				new MM("bufferOrigin", true, null),
				new MM("bufferOrigin:", true, null),
				new MM("nextBufferPosition", true, null),
				new MM("nextBufferPosition:", true, null),
				new MM("bufferNumElements", true, null),
				new MM("bufferNumElements:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$ExternalStream = (function () {
				var self = this;
				self.$super$Streams$ExternalStream$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$ExternalStream();
				return self;
			});
			this.$close = (function () {
				var self = this;
				self._$doClose();
				return self;
			});
			this.$initBuffer = (function () {
				var self = this;
				self._$buffer$(self._$descriptor().$buffer());
				self._$bufferSize$(self._$descriptor().$bufferSize());
				self._$arrangeForFinalization();
				return self;
			});
			this.$initDescriptor$ = (function ($d) {
				var self = this;
				self._$descriptor$($d);
				self._$initBuffer();
				self._$bufferOrigin$(0);
				self._$bufferNumElements$(0);
				self._$nextBufferPosition$(0);
				return self;
			});
			this.$advanceBuffer = (function () {
				var self = this;
				self._$bufferOrigin$(self._$bufferOrigin() + self._$bufferSize());
				self._$fillBuffer();
				self._$nextBufferPosition$(0);
				return self;
			});
			this.$arrangeForFinalization = (function () {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$doClose = (function () {
				var self = this;
				self._$descriptor().$close();
				self._$buffer$(nil);
				return self;
			});
			this.$fillBuffer = (function () {
				var self = this;
				self._$bufferNumElements$(0);
				return self;
			});
			this.$postCopy = (function () {
				var self = this;
				self.$super$Streams$ExternalStream$slot._$postCopy.call(self);
				self._$descriptor$(self._$descriptor().$copy());
				self._$initBuffer();
				return self;
			});
			this.$descriptor = (function () {
				return this.$descriptor$slot;
			});
			this.$descriptor$ = (function (v) {
				this.$descriptor$slot = v;
				return this;
			});
			this.$buffer = (function () {
				return this.$buffer$slot;
			});
			this.$buffer$ = (function (v) {
				this.$buffer$slot = v;
				return this;
			});
			this.$bufferSize = (function () {
				return this.$bufferSize$slot;
			});
			this.$bufferSize$ = (function (v) {
				this.$bufferSize$slot = v;
				return this;
			});
			this.$bufferOrigin = (function () {
				return this.$bufferOrigin$slot;
			});
			this.$bufferOrigin$ = (function (v) {
				this.$bufferOrigin$slot = v;
				return this;
			});
			this.$nextBufferPosition = (function () {
				return this.$nextBufferPosition$slot;
			});
			this.$nextBufferPosition$ = (function (v) {
				this.$nextBufferPosition$slot = v;
				return this;
			});
			this.$bufferNumElements = (function () {
				return this.$bufferNumElements$slot;
			});
			this.$bufferNumElements$ = (function (v) {
				this.$bufferNumElements$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`ExternalStream";
					this._$superInit$Streams$ExternalStream = $.$superInit$Streams$ExternalStream;
					this.$superInit$Streams$ExternalStream = dnuCatcher("$superInit$Streams$ExternalStream");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$close = $.$close;
					this.$close = dnuCatcher("$close");
					this._$initBuffer = $.$initBuffer;
					this.$initBuffer = dnuCatcher("$initBuffer");
					this._$initDescriptor$ = $.$initDescriptor$;
					this.$initDescriptor$ = dnuCatcher("$initDescriptor$");
					this._$advanceBuffer = $.$advanceBuffer;
					this.$advanceBuffer = dnuCatcher("$advanceBuffer");
					this._$arrangeForFinalization = $.$arrangeForFinalization;
					this.$arrangeForFinalization = dnuCatcher("$arrangeForFinalization");
					this._$doClose = $.$doClose;
					this.$doClose = dnuCatcher("$doClose");
					this._$fillBuffer = $.$fillBuffer;
					this.$fillBuffer = dnuCatcher("$fillBuffer");
					this._$postCopy = $.$postCopy;
					this.$postCopy = dnuCatcher("$postCopy");
					this._$descriptor = $.$descriptor;
					this.$descriptor = dnuCatcher("$descriptor");
					this._$descriptor$ = $.$descriptor$;
					this.$descriptor$ = dnuCatcher("$descriptor$");
					this._$buffer = $.$buffer;
					this.$buffer = dnuCatcher("$buffer");
					this._$buffer$ = $.$buffer$;
					this.$buffer$ = dnuCatcher("$buffer$");
					this._$bufferSize = $.$bufferSize;
					this.$bufferSize = dnuCatcher("$bufferSize");
					this._$bufferSize$ = $.$bufferSize$;
					this.$bufferSize$ = dnuCatcher("$bufferSize$");
					this._$bufferOrigin = $.$bufferOrigin;
					this.$bufferOrigin = dnuCatcher("$bufferOrigin");
					this._$bufferOrigin$ = $.$bufferOrigin$;
					this.$bufferOrigin$ = dnuCatcher("$bufferOrigin$");
					this._$nextBufferPosition = $.$nextBufferPosition;
					this.$nextBufferPosition = dnuCatcher("$nextBufferPosition");
					this._$nextBufferPosition$ = $.$nextBufferPosition$;
					this.$nextBufferPosition$ = dnuCatcher("$nextBufferPosition$");
					this._$bufferNumElements = $.$bufferNumElements;
					this.$bufferNumElements = dnuCatcher("$bufferNumElements");
					this._$bufferNumElements$ = $.$bufferNumElements$;
					this.$bufferNumElements$ = dnuCatcher("$bufferNumElements$");
					this.$enclosingObjects$Streams$ExternalStream = enclosingObjects;
					this.$super$Streams$ExternalStream$slot = runtimeSuperclass;
					this["Streams`ExternalStream"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$descriptor$slot = nil;
						this.$buffer$slot = nil;
						this.$bufferSize$slot = nil;
						this.$bufferOrigin$slot = nil;
						this.$nextBufferPosition$slot = nil;
						this.$bufferNumElements$slot = nil;
					});
					this.basicNew = this["Streams`ExternalStream"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`ExternalStream";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("onDescriptor:", false, "onDescriptor: d <DESCRIPTOR> ^ <Instance> = (\r\r    ^self new initDescriptor: d\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$onDescriptor$ = (function ($d) {
					var self = this;
					return self._$new().$initDescriptor$($d);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`ExternalStream";
						this.$new = this._$new = $.$new;
						this._$onDescriptor$ = $.$onDescriptor$;
						this.$onDescriptor$ = dnuCatcher("$onDescriptor$");
						this.$enclosingObjects$Streams$ExternalStream = enclosingObjects;
						this.$super$Streams$ExternalStream = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$SeqCltnReadStream = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`SeqCltnReadStream";
			this.name = "Streams`SeqCltnReadStream";
			this.header = "SeqCltnReadStream = BasicReadStream (\r(* This is the standard concrete class used for creating ReadStreams on lists. *)| collection <List[E]> (* = sc. *)  |)";
			this.slots = [new SM("collection", true, false)];
			this.methods = [
				new MM("superInit`Streams`SeqCltnReadStream", true, "BasicReadStream"),
				new MM("instance`initializer", true, "BasicReadStream"),
				new MM("at:", false, "at: index <Integer> ^ <E> = (\r\r\r	^self collection at: index\r)"),
				new MM("atEnd", false, "public atEnd ^<Boolean> = (\r	(* %optimization: we can ensure that atEnd and actualAtEnd are identical, since we reimplement peek to avoid the superclass\r	  peek buffer, because we can look ahead quickly in a seqcltn *)\r	^self actualAtEnd\r)"),
				new MM("next", false, "public next ^<E> = (\r	(* %optimization: we can ensure that next and actualNext are identical, since we reimplement peek to avoid the superclass\r	  peek buffer, since we can look ahead quickly in a seqcltn *)\r	^self actualNext\r)"),
				new MM("nextIfAbsent:", false, "public nextIfAbsent: f <[X def]> ^ <E | X> = (\r	| pos <Integer> |\r	pos:: self actualPosition.\r	pos:: pos + 1.\r	pos > self size\r		ifTrue: [ ^f value ].\r	self actualPosition: pos.\r	^self collection at: pos\r)"),
				new MM("peek", false, "public peek ^<E> = (\r	| pos <Integer> |\r	pos:: self position.\r	pos:: pos + 1.\r	pos > self size\r		ifTrue: [ self error: 'Attempt to read past the end of a stream' ].\r	^self collection at: pos\r)"),
				new MM("peekIfAbsent:", false, "peekIfAbsent: f <[X def]>  ^ <E | X> = (\r\r\r	| pos <Integer> |\r	pos:: self position.\r	pos:: pos + 1.\r	pos > self size\r		ifTrue: [ ^f value ].\r	^self collection at: pos\r)"),
				new MM("position:", false, "public position: p <Integer> = (\r	self actualPosition: p.\r	(* Don't have to unset the peekVal *)\r)"),
				new MM("size", false, "public size ^<Integer> = (\r	^self collection size\r)"),
				new MM("initCollection:", false, "public initCollection: sc <List[E]> = (\r	collection:: sc.\r)"),
				new MM("printOn:", false, "public printOn: strm <CharOutputStream> = (\r	strm nextPutAll: self class name;\r			nextPutAll: '(position='; 	print: self position;\r			nextPutAll: ' collection=';  print: self collection;\r			nextPut: \")\"\r)"),
				new MM("accumulateUntil:", false, "accumulateUntil: predicate <[Boolean]>  ^ <List[E]> = (\r\r\r	| start <Integer> |\r\r	start:: self position.\r	[ predicate value ]\r		whileFalse: [ self position: self position + 1 ].\r	^self collection copyFrom: start + 1 to: self position\r)"),
				new MM("actualNext", false, "public actualNext ^<E> = (\r	| pos <Integer> |\r	pos:: self actualPosition.\r	pos:: pos + 1.\r	pos > self size\r		ifTrue: [ self error: 'Attempt to read past the end of a stream' ].\r	self actualPosition: pos.\r	^self collection at: pos\r)"),
				new MM("nextFromPeek", false, "nextFromPeek ^ <E> = (\r\r\r	(* If this happens, you should have overridden the calling method *)\r	self shouldNotHappen\r)"),
				new MM("peekVal", false, "peekVal ^ <E> = (\r\r\r	self shouldNotHappen\r)"),
				new MM("collection", true, null),
				new MM("collection:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$SeqCltnReadStream = (function () {
				var self = this;
				self.$super$Streams$SeqCltnReadStream$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$SeqCltnReadStream();
				return self;
			});
			this.$at$ = (function ($index) {
				var self = this;
				return self._$collection().$at$($index);
			});
			this.$atEnd = (function () {
				var self = this;
				return self._$actualAtEnd();
			});
			this.$next = (function () {
				var self = this;
				return self._$actualNext();
			});
			this.$nextIfAbsent$ = (function ($f) {
				var self = this;
				var $pos = nil;
				$pos = self._$actualPosition();
				$pos = $pos + 1;
				if ($pos.$$greater(self._$size())) {
					return $f.$value();
				} else {
					nil;
				};
				self._$actualPosition$($pos);
				return self._$collection().$at$($pos);
			});
			this.$peek = (function () {
				var self = this;
				var $pos = nil;
				$pos = self._$position();
				$pos = $pos + 1;
				if ($pos.$$greater(self._$size())) {
					self._$error$("Attempt to read past the end of a stream");
				} else {
					nil;
				};
				return self._$collection().$at$($pos);
			});
			this.$peekIfAbsent$ = (function ($f) {
				var self = this;
				var $pos = nil;
				$pos = self._$position();
				$pos = $pos + 1;
				if ($pos.$$greater(self._$size())) {
					return $f.$value();
				} else {
					nil;
				};
				return self._$collection().$at$($pos);
			});
			this.$position$ = (function ($p) {
				var self = this;
				self._$actualPosition$($p);
				return self;
			});
			this.$size = (function () {
				var self = this;
				return self._$collection().$size();
			});
			this.$initCollection$ = (function ($sc) {
				var self = this;
				self._$collection$($sc);
				return self;
			});
			this.$printOn$ = (function ($strm) {
				var self = this;
				(function (cascadeReceiver) {
					cascadeReceiver.$nextPutAll$(self._$class().$name());
					cascadeReceiver.$nextPutAll$("(position=");
					cascadeReceiver.$print$(self._$position());
					cascadeReceiver.$nextPutAll$(" collection=");
					cascadeReceiver.$print$(self._$collection());
					return cascadeReceiver.$nextPut$(")");
				})($strm);
				return self;
			});
			this.$accumulateUntil$ = (function ($predicate) {
				var self = this;
				var $start = nil;
				$start = self._$position();
				{
					nil;
					for (; !$predicate.$value(); ) {
						self._$position$(self._$position() + 1);
					};
				};
				return self._$collection().$copyFrom$to$($start + 1, self._$position());
			});
			this.$actualNext = (function () {
				var self = this;
				var $pos = nil;
				$pos = self._$actualPosition();
				$pos = $pos + 1;
				if ($pos.$$greater(self._$size())) {
					self._$error$("Attempt to read past the end of a stream");
				} else {
					nil;
				};
				self._$actualPosition$($pos);
				return self._$collection().$at$($pos);
			});
			this.$nextFromPeek = (function () {
				var self = this;
				self._$shouldNotHappen();
				return self;
			});
			this.$peekVal = (function () {
				var self = this;
				self._$shouldNotHappen();
				return self;
			});
			this.$collection = (function () {
				return this.$collection$slot;
			});
			this.$collection$ = (function (v) {
				this.$collection$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`SeqCltnReadStream";
					this._$superInit$Streams$SeqCltnReadStream = $.$superInit$Streams$SeqCltnReadStream;
					this.$superInit$Streams$SeqCltnReadStream = dnuCatcher("$superInit$Streams$SeqCltnReadStream");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$at$ = $.$at$;
					this.$at$ = dnuCatcher("$at$");
					this.$atEnd = this._$atEnd = $.$atEnd;
					this.$next = this._$next = $.$next;
					this.$nextIfAbsent$ = this._$nextIfAbsent$ = $.$nextIfAbsent$;
					this.$peek = this._$peek = $.$peek;
					this._$peekIfAbsent$ = $.$peekIfAbsent$;
					this.$peekIfAbsent$ = dnuCatcher("$peekIfAbsent$");
					this.$position$ = this._$position$ = $.$position$;
					this.$size = this._$size = $.$size;
					this.$initCollection$ = this._$initCollection$ = $.$initCollection$;
					this.$printOn$ = this._$printOn$ = $.$printOn$;
					this._$accumulateUntil$ = $.$accumulateUntil$;
					this.$accumulateUntil$ = dnuCatcher("$accumulateUntil$");
					this.$actualNext = this._$actualNext = $.$actualNext;
					this._$nextFromPeek = $.$nextFromPeek;
					this.$nextFromPeek = dnuCatcher("$nextFromPeek");
					this._$peekVal = $.$peekVal;
					this.$peekVal = dnuCatcher("$peekVal");
					this._$collection = $.$collection;
					this.$collection = dnuCatcher("$collection");
					this._$collection$ = $.$collection$;
					this.$collection$ = dnuCatcher("$collection$");
					this.$enclosingObjects$Streams$SeqCltnReadStream = enclosingObjects;
					this.$super$Streams$SeqCltnReadStream$slot = runtimeSuperclass;
					this["Streams`SeqCltnReadStream"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$collection$slot = nil;
					});
					this.basicNew = this["Streams`SeqCltnReadStream"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`SeqCltnReadStream";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("on:", false, "public on: sc <List[E]> ^<ReadStream[E]> = (\r	^self over: sc\r)"),
					new MM("over:", false, "over: sc <List[E]> ^ <Instance> = (\r\r	(* This is like on: except it returns type Instance.   on: for streams may return a non-instance type. *)\r\r	^self new initCollection: sc\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$on$ = (function ($sc) {
					var self = this;
					return self._$over$($sc);
				});
				this.$over$ = (function ($sc) {
					var self = this;
					return self._$new().$initCollection$($sc);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`SeqCltnReadStream";
						this.$new = this._$new = $.$new;
						this.$on$ = this._$on$ = $.$on$;
						this._$over$ = $.$over$;
						this.$over$ = dnuCatcher("$over$");
						this.$enclosingObjects$Streams$SeqCltnReadStream = enclosingObjects;
						this.$super$Streams$SeqCltnReadStream = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$SeqCltnReadWriteStream = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`SeqCltnReadWriteStream";
			this.name = "Streams`SeqCltnReadWriteStream";
			this.header = "SeqCltnReadWriteStream = BasicReadWriteStream (\r(* This is the standard concrete class used for creating WriteStreams or ReadWriteStreams on lists. *)| buffer <MutableList[E]> (* = sc *) |)";
			this.slots = [new SM("buffer", true, false)];
			this.methods = [
				new MM("superInit`Streams`SeqCltnReadWriteStream", true, "BasicReadWriteStream"),
				new MM("instance`initializer", true, "BasicReadWriteStream"),
				new MM("at:", false, "at: index <Integer> ^ <E> = (\r\r\r	self assert: [ index <= self size ].\r	^self buffer at: index\r)"),
				new MM("atEnd", false, "public atEnd ^ <Boolean> = (\r\r\r	(* %optimization: we can ensure that atEnd and actualAtEnd are identical, since we reimplement peek to avoid the superclass\r	  peek buffer, because we can look ahead quickly in a seqcltn *)\r	^self actualAtEnd\r)"),
				new MM("contents", false, "public contents  ^ <List[E]> = (\r\r	(* Obsolete: this method is included purely for BlueBook compatibility.  If possible, use \r	 #contentsRemaining and #contentsWritten, which will work when a ReadWriteStream\r	 is substituted for a ReadStream or a WriteStream, unlike this method *)\r\r	(* This originally referred to contentsWritten. The result of 'contents' should not depend on how much of a stream has already been read, see Blue Book - Protocol for Streams *)\r		\r	^ self collection\r)"),
				new MM("next", false, "next ^ <E> = (\r\r\r	(* %optimization: we can ensure that next and actualNext are identical, since we reimplement peek to avoid the superclass\r	  peek buffer, since we can look ahead quickly in a seqcltn *)\r	^self actualNext\r)"),
				new MM("nextIfAbsent:", false, "public nextIfAbsent: f <[X def]> ^ <E | X> = (\r	| pos <Integer> |\r	pos:: self actualPosition.\r	pos:: pos + 1.\r	pos > self size\r		ifTrue: [ ^f value ].\r	self actualPosition: pos.\r	^self buffer at: pos\r)"),
				new MM("nextPut:", false, "nextPut: el <E> ^ <E> = (\r\r\r	| pos <Integer> |\r	super nextPut: el.\r	(pos:: self position) > self buffer size\r		ifTrue: [ self initBuffer: (self buffer copyWithSize: (self buffer size * 2 max: 8)) ].\r	self buffer at: pos put: el.\r	^el\r)"),
				new MM("peek", false, "peek ^ <E> = (\r\r\r	| pos <Integer> |\r	pos:: self position.\r	pos:: pos + 1.\r	pos > self size\r		ifTrue: [ self error: 'Attempt to read past the end of a stream' ].\r	^self buffer at: pos\r)"),
				new MM("peekIfAbsent:", false, "peekIfAbsent: f <[X def]>  ^ <E | X> = (\r\r\r	| pos <Integer> |\r	pos:: self position.\r	pos:: pos + 1.\r	pos > self size\r		ifTrue: [ ^f value ].\r	^self buffer at: pos\r)"),
				new MM("position:", false, "position: p <Integer>\r = (\r\r	self actualPosition: p.\r	(* Don't have to unset the peekVal *)\r)"),
				new MM("initBuffer:", false, "public initBuffer: sc <MutableList[E]> = (\r	buffer:: sc.\r)"),
				new MM("printOn:", false, "printOn: strm <CharOutputStream>\r = (\r\r	strm nextPutAll: self class name;\r			nextPutAll: '(position='; 	print: self position;\r			nextPutAll: ' buffer=';  print: self buffer;\r			nextPut: \")\"\r			\r)"),
				new MM("accumulateUntil:", false, "accumulateUntil: predicate <[Boolean]>  ^ <List[E]> = (\r\r\r	| start <Integer> |\r\r	start:: self position.\r	[ predicate value ]\r		whileFalse: [ self position: self position + 1 ].\r	^self buffer copyFrom: start + 1 to: self position\r)"),
				new MM("actualNext", false, "actualNext ^ <E> = (\r\r\r	| pos <Integer> |\r	pos:: self actualPosition.\r	pos:: pos + 1.\r	pos > self size\r		ifTrue: [ self error: 'Attempt to read past the end of a stream' ].\r	self actualPosition: pos.\r	^self buffer at: pos\r)"),
				new MM("collection", false, "collection ^ <MutableList[E]> = (\r\r\r	^self buffer copyFrom: 1 to: self size\r)"),
				new MM("nextFromPeek", false, "nextFromPeek ^ <E> = (\r\r\r	(* If this happens, you should have overridden the calling method *)\r	self shouldNotHappen\r)"),
				new MM("peekVal", false, "peekVal ^ <E> = (\r\r\r	self shouldNotHappen\r)"),
				new MM("buffer", true, null),
				new MM("buffer:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$SeqCltnReadWriteStream = (function () {
				var self = this;
				self.$super$Streams$SeqCltnReadWriteStream$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$SeqCltnReadWriteStream();
				return self;
			});
			this.$at$ = (function ($index) {
				var self = this;
				self._$assert$((function () {
					return $index.$$less$equal(self._$size());
				}));
				return self._$buffer().$at$($index);
			});
			this.$atEnd = (function () {
				var self = this;
				return self._$actualAtEnd();
			});
			this.$contents = (function () {
				var self = this;
				return self._$collection();
			});
			this.$next = (function () {
				var self = this;
				return self._$actualNext();
			});
			this.$nextIfAbsent$ = (function ($f) {
				var self = this;
				var $pos = nil;
				$pos = self._$actualPosition();
				$pos = $pos + 1;
				if ($pos.$$greater(self._$size())) {
					return $f.$value();
				} else {
					nil;
				};
				self._$actualPosition$($pos);
				return self._$buffer().$at$($pos);
			});
			this.$nextPut$ = (function ($el) {
				var self = this;
				var $pos = nil;
				self.$super$Streams$SeqCltnReadWriteStream$slot._$nextPut$.call(self, $el);
				if (($pos = self._$position()).$$greater(self._$buffer().$size())) {
					self._$initBuffer$(self._$buffer().$copyWithSize$((self._$buffer().$size() * 2).$max$(8)));
				} else {
					nil;
				};
				self._$buffer().$at$put$($pos, $el);
				return $el;
			});
			this.$peek = (function () {
				var self = this;
				var $pos = nil;
				$pos = self._$position();
				$pos = $pos + 1;
				if ($pos.$$greater(self._$size())) {
					self._$error$("Attempt to read past the end of a stream");
				} else {
					nil;
				};
				return self._$buffer().$at$($pos);
			});
			this.$peekIfAbsent$ = (function ($f) {
				var self = this;
				var $pos = nil;
				$pos = self._$position();
				$pos = $pos + 1;
				if ($pos.$$greater(self._$size())) {
					return $f.$value();
				} else {
					nil;
				};
				return self._$buffer().$at$($pos);
			});
			this.$position$ = (function ($p) {
				var self = this;
				self._$actualPosition$($p);
				return self;
			});
			this.$initBuffer$ = (function ($sc) {
				var self = this;
				self._$buffer$($sc);
				return self;
			});
			this.$printOn$ = (function ($strm) {
				var self = this;
				(function (cascadeReceiver) {
					cascadeReceiver.$nextPutAll$(self._$class().$name());
					cascadeReceiver.$nextPutAll$("(position=");
					cascadeReceiver.$print$(self._$position());
					cascadeReceiver.$nextPutAll$(" buffer=");
					cascadeReceiver.$print$(self._$buffer());
					return cascadeReceiver.$nextPut$(")");
				})($strm);
				return self;
			});
			this.$accumulateUntil$ = (function ($predicate) {
				var self = this;
				var $start = nil;
				$start = self._$position();
				{
					nil;
					for (; !$predicate.$value(); ) {
						self._$position$(self._$position() + 1);
					};
				};
				return self._$buffer().$copyFrom$to$($start + 1, self._$position());
			});
			this.$actualNext = (function () {
				var self = this;
				var $pos = nil;
				$pos = self._$actualPosition();
				$pos = $pos + 1;
				if ($pos.$$greater(self._$size())) {
					self._$error$("Attempt to read past the end of a stream");
				} else {
					nil;
				};
				self._$actualPosition$($pos);
				return self._$buffer().$at$($pos);
			});
			this.$collection = (function () {
				var self = this;
				return self._$buffer().$copyFrom$to$(1, self._$size());
			});
			this.$nextFromPeek = (function () {
				var self = this;
				self._$shouldNotHappen();
				return self;
			});
			this.$peekVal = (function () {
				var self = this;
				self._$shouldNotHappen();
				return self;
			});
			this.$buffer = (function () {
				return this.$buffer$slot;
			});
			this.$buffer$ = (function (v) {
				this.$buffer$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`SeqCltnReadWriteStream";
					this._$superInit$Streams$SeqCltnReadWriteStream = $.$superInit$Streams$SeqCltnReadWriteStream;
					this.$superInit$Streams$SeqCltnReadWriteStream = dnuCatcher("$superInit$Streams$SeqCltnReadWriteStream");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$at$ = $.$at$;
					this.$at$ = dnuCatcher("$at$");
					this.$atEnd = this._$atEnd = $.$atEnd;
					this.$contents = this._$contents = $.$contents;
					this._$next = $.$next;
					this.$next = dnuCatcher("$next");
					this.$nextIfAbsent$ = this._$nextIfAbsent$ = $.$nextIfAbsent$;
					this._$nextPut$ = $.$nextPut$;
					this.$nextPut$ = dnuCatcher("$nextPut$");
					this._$peek = $.$peek;
					this.$peek = dnuCatcher("$peek");
					this._$peekIfAbsent$ = $.$peekIfAbsent$;
					this.$peekIfAbsent$ = dnuCatcher("$peekIfAbsent$");
					this._$position$ = $.$position$;
					this.$position$ = dnuCatcher("$position$");
					this.$initBuffer$ = this._$initBuffer$ = $.$initBuffer$;
					this._$printOn$ = $.$printOn$;
					this.$printOn$ = dnuCatcher("$printOn$");
					this._$accumulateUntil$ = $.$accumulateUntil$;
					this.$accumulateUntil$ = dnuCatcher("$accumulateUntil$");
					this._$actualNext = $.$actualNext;
					this.$actualNext = dnuCatcher("$actualNext");
					this._$collection = $.$collection;
					this.$collection = dnuCatcher("$collection");
					this._$nextFromPeek = $.$nextFromPeek;
					this.$nextFromPeek = dnuCatcher("$nextFromPeek");
					this._$peekVal = $.$peekVal;
					this.$peekVal = dnuCatcher("$peekVal");
					this._$buffer = $.$buffer;
					this.$buffer = dnuCatcher("$buffer");
					this._$buffer$ = $.$buffer$;
					this.$buffer$ = dnuCatcher("$buffer$");
					this.$enclosingObjects$Streams$SeqCltnReadWriteStream = enclosingObjects;
					this.$super$Streams$SeqCltnReadWriteStream$slot = runtimeSuperclass;
					this["Streams`SeqCltnReadWriteStream"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$buffer$slot = nil;
					});
					this.basicNew = this["Streams`SeqCltnReadWriteStream"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`SeqCltnReadWriteStream";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("on:", false, "on: sc <MutableList[E]> ^ <ReadWriteStream[E]> = (\r\r\r	^self over: sc\r)"),
					new MM("on:numElements:", false, "on: sc <MutableList[E]> numElements: n <Integer> ^ <ReadWriteStream[E]> = (\r\r\r	^(self over: sc) size: n\r)"),
					new MM("over:", false, "over: sc <MutableList[E]> ^ <Instance> = (\r\r	(* This is like on: except it returns type Instance.   on: for streams may return a non-instance type. *)\r\r	^self new initBuffer: sc\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$on$ = (function ($sc) {
					var self = this;
					return self._$over$($sc);
				});
				this.$on$numElements$ = (function ($sc, $n) {
					var self = this;
					return self._$over$($sc).$size$($n);
				});
				this.$over$ = (function ($sc) {
					var self = this;
					return self._$new().$initBuffer$($sc);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`SeqCltnReadWriteStream";
						this.$new = this._$new = $.$new;
						this._$on$ = $.$on$;
						this.$on$ = dnuCatcher("$on$");
						this._$on$numElements$ = $.$on$numElements$;
						this.$on$numElements$ = dnuCatcher("$on$numElements$");
						this._$over$ = $.$over$;
						this.$over$ = dnuCatcher("$over$");
						this.$enclosingObjects$Streams$SeqCltnReadWriteStream = enclosingObjects;
						this.$super$Streams$SeqCltnReadWriteStream = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$TempTranscript = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Streams`TempTranscript";
			this.name = "Streams`TempTranscript";
			this.header = "TempTranscript = CharacterOStream (\r(* This probably doesn't belong here.  *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`Streams`TempTranscript", true, "CharacterOStream"),
				new MM("instance`initializer", true, "CharacterOStream"),
				new MM("cr", false, "cr\r = (\r	(* self nextPut: Character cr. *)\r	self nextPut: Character lf.\r)"),
				new MM("nextPut:", false, "nextPut: c <Character> ^ <Character> = (\r\r    c unicodeValue printCharacter.\r	c == Character cr\r		ifTrue: [ Character lf unicodeValue printCharacter. ].\r)"),
				new MM("show:", false, "show: s <Collection[Character]>  ^ <Collection[Object]> = (\r\r\r	self nextPutAll: s.\r	^s\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Streams$TempTranscript = (function () {
				var self = this;
				self.$super$Streams$TempTranscript$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Streams$TempTranscript();
				return self;
			});
			this.$cr = (function () {
				var self = this;
				self._$nextPut$(self._$Character().$lf());
				return self;
			});
			this.$nextPut$ = (function ($c) {
				var self = this;
				$c.$unicodeValue().$printCharacter();
				if ($c === self._$Character().$cr()) {
					self._$Character().$lf().$unicodeValue().$printCharacter();
				} else {
					nil;
				};
				return self;
			});
			this.$show$ = (function ($s) {
				var self = this;
				self._$nextPutAll$($s);
				return $s;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Streams`TempTranscript";
					this._$superInit$Streams$TempTranscript = $.$superInit$Streams$TempTranscript;
					this.$superInit$Streams$TempTranscript = dnuCatcher("$superInit$Streams$TempTranscript");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$cr = $.$cr;
					this.$cr = dnuCatcher("$cr");
					this._$nextPut$ = $.$nextPut$;
					this.$nextPut$ = dnuCatcher("$nextPut$");
					this._$show$ = $.$show$;
					this.$show$ = dnuCatcher("$show$");
					this.$enclosingObjects$Streams$TempTranscript = enclosingObjects;
					this.$super$Streams$TempTranscript$slot = runtimeSuperclass;
					this["Streams`TempTranscript"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Streams`TempTranscript"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Streams`TempTranscript";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Streams`TempTranscript";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Streams$TempTranscript = enclosingObjects;
						this.$super$Streams$TempTranscript = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Streams$BasicInputStream.enclosingMixin = this;
		this.$Streams$BasicOutputStream.enclosingMixin = this;
		this.$Streams$BasicReadStream.enclosingMixin = this;
		this.$Streams$BasicReadWriteStream.enclosingMixin = this;
		this.$Streams$CharacterInput.enclosingMixin = this;
		this.$Streams$CharacterInputConverter.enclosingMixin = this;
		this.$Streams$CharacterInputOutputConverter.enclosingMixin = this;
		this.$Streams$CharacterOutput.enclosingMixin = this;
		this.$Streams$CharacterOutputConverter.enclosingMixin = this;
		this.$Streams$CharacterReadConverter.enclosingMixin = this;
		this.$Streams$CharacterReadStream.enclosingMixin = this;
		this.$Streams$CharacterReadWriteStream.enclosingMixin = this;
		this.$Streams$ExternalInputStream.enclosingMixin = this;
		this.$Streams$ExternalOutputStream.enclosingMixin = this;
		this.$Streams$ExternalReadStream.enclosingMixin = this;
		this.$Streams$ExternalReadWriteStream.enclosingMixin = this;
		this.$Streams$ExternalStream.enclosingMixin = this;
		this.$Streams$SeqCltnReadStream.enclosingMixin = this;
		this.$Streams$SeqCltnReadWriteStream.enclosingMixin = this;
		this.$Streams$TempTranscript.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for Streams";
				this._$superInit$Streams = $.$superInit$Streams;
				this.$superInit$Streams = dnuCatcher("$superInit$Streams");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this._$usingCrLfConvention = $.$usingCrLfConvention;
				this.$usingCrLfConvention = dnuCatcher("$usingCrLfConvention");
				this.$BasicInputStream = this._$BasicInputStream = $.$BasicInputStream;
				this.$BasicOutputStream = this._$BasicOutputStream = $.$BasicOutputStream;
				this._$BasicReadStream = $.$BasicReadStream;
				this.$BasicReadStream = dnuCatcher("$BasicReadStream");
				this._$BasicReadWriteStream = $.$BasicReadWriteStream;
				this.$BasicReadWriteStream = dnuCatcher("$BasicReadWriteStream");
				this._$CharacterInput = $.$CharacterInput;
				this.$CharacterInput = dnuCatcher("$CharacterInput");
				this._$CharacterInputConverter = $.$CharacterInputConverter;
				this.$CharacterInputConverter = dnuCatcher("$CharacterInputConverter");
				this._$CharacterInputOutputConverter = $.$CharacterInputOutputConverter;
				this.$CharacterInputOutputConverter = dnuCatcher("$CharacterInputOutputConverter");
				this._$CharacterOutput = $.$CharacterOutput;
				this.$CharacterOutput = dnuCatcher("$CharacterOutput");
				this._$CharacterOutputConverter = $.$CharacterOutputConverter;
				this.$CharacterOutputConverter = dnuCatcher("$CharacterOutputConverter");
				this._$CharacterReadConverter = $.$CharacterReadConverter;
				this.$CharacterReadConverter = dnuCatcher("$CharacterReadConverter");
				this.$CharacterReadStream = this._$CharacterReadStream = $.$CharacterReadStream;
				this.$CharacterReadWriteStream = this._$CharacterReadWriteStream = $.$CharacterReadWriteStream;
				this._$ExternalInputStream = $.$ExternalInputStream;
				this.$ExternalInputStream = dnuCatcher("$ExternalInputStream");
				this._$ExternalOutputStream = $.$ExternalOutputStream;
				this.$ExternalOutputStream = dnuCatcher("$ExternalOutputStream");
				this._$ExternalReadStream = $.$ExternalReadStream;
				this.$ExternalReadStream = dnuCatcher("$ExternalReadStream");
				this._$ExternalReadWriteStream = $.$ExternalReadWriteStream;
				this.$ExternalReadWriteStream = dnuCatcher("$ExternalReadWriteStream");
				this._$ExternalStream = $.$ExternalStream;
				this.$ExternalStream = dnuCatcher("$ExternalStream");
				this.$SeqCltnReadStream = this._$SeqCltnReadStream = $.$SeqCltnReadStream;
				this.$SeqCltnReadWriteStream = this._$SeqCltnReadWriteStream = $.$SeqCltnReadWriteStream;
				this._$TempTranscript = $.$TempTranscript;
				this.$TempTranscript = dnuCatcher("$TempTranscript");
				this.$Streams$BasicInputStream = this._$Streams$BasicInputStream = $.$Streams$BasicInputStream;
				this.$Streams$BasicInputStream$ = this._$Streams$BasicInputStream$ = $.$Streams$BasicInputStream$;
				this.$Streams$BasicOutputStream = this._$Streams$BasicOutputStream = $.$Streams$BasicOutputStream;
				this.$Streams$BasicOutputStream$ = this._$Streams$BasicOutputStream$ = $.$Streams$BasicOutputStream$;
				this.$Streams$BasicReadStream = this._$Streams$BasicReadStream = $.$Streams$BasicReadStream;
				this.$Streams$BasicReadStream$ = this._$Streams$BasicReadStream$ = $.$Streams$BasicReadStream$;
				this.$Streams$BasicReadWriteStream = this._$Streams$BasicReadWriteStream = $.$Streams$BasicReadWriteStream;
				this.$Streams$BasicReadWriteStream$ = this._$Streams$BasicReadWriteStream$ = $.$Streams$BasicReadWriteStream$;
				this.$Streams$CharacterInput = this._$Streams$CharacterInput = $.$Streams$CharacterInput;
				this.$Streams$CharacterInput$ = this._$Streams$CharacterInput$ = $.$Streams$CharacterInput$;
				this.$Streams$CharacterInputConverter = this._$Streams$CharacterInputConverter = $.$Streams$CharacterInputConverter;
				this.$Streams$CharacterInputConverter$ = this._$Streams$CharacterInputConverter$ = $.$Streams$CharacterInputConverter$;
				this.$Streams$CharacterInputOutputConverter = this._$Streams$CharacterInputOutputConverter = $.$Streams$CharacterInputOutputConverter;
				this.$Streams$CharacterInputOutputConverter$ = this._$Streams$CharacterInputOutputConverter$ = $.$Streams$CharacterInputOutputConverter$;
				this.$Streams$CharacterOutput = this._$Streams$CharacterOutput = $.$Streams$CharacterOutput;
				this.$Streams$CharacterOutput$ = this._$Streams$CharacterOutput$ = $.$Streams$CharacterOutput$;
				this.$Streams$CharacterOutputConverter = this._$Streams$CharacterOutputConverter = $.$Streams$CharacterOutputConverter;
				this.$Streams$CharacterOutputConverter$ = this._$Streams$CharacterOutputConverter$ = $.$Streams$CharacterOutputConverter$;
				this.$Streams$CharacterReadConverter = this._$Streams$CharacterReadConverter = $.$Streams$CharacterReadConverter;
				this.$Streams$CharacterReadConverter$ = this._$Streams$CharacterReadConverter$ = $.$Streams$CharacterReadConverter$;
				this.$Streams$CharacterReadStream = this._$Streams$CharacterReadStream = $.$Streams$CharacterReadStream;
				this.$Streams$CharacterReadStream$ = this._$Streams$CharacterReadStream$ = $.$Streams$CharacterReadStream$;
				this.$Streams$CharacterReadWriteStream = this._$Streams$CharacterReadWriteStream = $.$Streams$CharacterReadWriteStream;
				this.$Streams$CharacterReadWriteStream$ = this._$Streams$CharacterReadWriteStream$ = $.$Streams$CharacterReadWriteStream$;
				this.$Streams$ExternalInputStream = this._$Streams$ExternalInputStream = $.$Streams$ExternalInputStream;
				this.$Streams$ExternalInputStream$ = this._$Streams$ExternalInputStream$ = $.$Streams$ExternalInputStream$;
				this.$Streams$ExternalOutputStream = this._$Streams$ExternalOutputStream = $.$Streams$ExternalOutputStream;
				this.$Streams$ExternalOutputStream$ = this._$Streams$ExternalOutputStream$ = $.$Streams$ExternalOutputStream$;
				this.$Streams$ExternalReadStream = this._$Streams$ExternalReadStream = $.$Streams$ExternalReadStream;
				this.$Streams$ExternalReadStream$ = this._$Streams$ExternalReadStream$ = $.$Streams$ExternalReadStream$;
				this.$Streams$ExternalReadWriteStream = this._$Streams$ExternalReadWriteStream = $.$Streams$ExternalReadWriteStream;
				this.$Streams$ExternalReadWriteStream$ = this._$Streams$ExternalReadWriteStream$ = $.$Streams$ExternalReadWriteStream$;
				this.$Streams$ExternalStream = this._$Streams$ExternalStream = $.$Streams$ExternalStream;
				this.$Streams$ExternalStream$ = this._$Streams$ExternalStream$ = $.$Streams$ExternalStream$;
				this.$Streams$SeqCltnReadStream = this._$Streams$SeqCltnReadStream = $.$Streams$SeqCltnReadStream;
				this.$Streams$SeqCltnReadStream$ = this._$Streams$SeqCltnReadStream$ = $.$Streams$SeqCltnReadStream$;
				this.$Streams$SeqCltnReadWriteStream = this._$Streams$SeqCltnReadWriteStream = $.$Streams$SeqCltnReadWriteStream;
				this.$Streams$SeqCltnReadWriteStream$ = this._$Streams$SeqCltnReadWriteStream$ = $.$Streams$SeqCltnReadWriteStream$;
				this.$Streams$TempTranscript = this._$Streams$TempTranscript = $.$Streams$TempTranscript;
				this.$Streams$TempTranscript$ = this._$Streams$TempTranscript$ = $.$Streams$TempTranscript$;
				this.$enclosingObjects$Streams = enclosingObjects;
				this.$super$Streams$slot = runtimeSuperclass;
				this.Streams = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$String$slot = nil;
					this.$BasicOutputReadStream$slot = nil;
					this.$CharacterSequenceReadStream$slot = nil;
					this.$CharacterIStream$slot = nil;
					this.$CharacterOStream$slot = nil;
					this.$CharacterSequenceReadWriteStream$slot = nil;
					this.$CharacterConverterWithOutput$slot = nil;
					this.$OutputInputConverter$slot = nil;
					this.$BasicIExStream$slot = nil;
					this.$EIStream$slot = nil;
					this.$ReadExternalOutputStream$slot = nil;
					this.$EOStream$slot = nil;
					this.$EIOStream$slot = nil;
					this.$Streams$BasicInputStream$slot = nil;
					this.$Streams$BasicOutputStream$slot = nil;
					this.$Streams$BasicReadStream$slot = nil;
					this.$Streams$BasicReadWriteStream$slot = nil;
					this.$Streams$CharacterInput$slot = nil;
					this.$Streams$CharacterInputConverter$slot = nil;
					this.$Streams$CharacterInputOutputConverter$slot = nil;
					this.$Streams$CharacterOutput$slot = nil;
					this.$Streams$CharacterOutputConverter$slot = nil;
					this.$Streams$CharacterReadConverter$slot = nil;
					this.$Streams$CharacterReadStream$slot = nil;
					this.$Streams$CharacterReadWriteStream$slot = nil;
					this.$Streams$ExternalInputStream$slot = nil;
					this.$Streams$ExternalOutputStream$slot = nil;
					this.$Streams$ExternalReadStream$slot = nil;
					this.$Streams$ExternalReadWriteStream$slot = nil;
					this.$Streams$ExternalStream$slot = nil;
					this.$Streams$SeqCltnReadStream$slot = nil;
					this.$Streams$SeqCltnReadWriteStream$slot = nil;
					this.$Streams$TempTranscript$slot = nil;
				});
				this.basicNew = this.Streams;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for Streams";
			this.slots = [];
			this.methods = [new MM("usingPlatform:", true, null)];
			this.nestedClasses = [];
			this.$usingPlatform$ = (function ($platform) {
				return (new this.nonMeta.basicNew()).$instance$initializer($platform);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for Streams";
					this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
					this.$enclosingObjects$Streams = enclosingObjects;
					this.$super$Streams = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$TimeForV8 = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for TimeForV8";
		this.name = "TimeForV8";
		this.header = "TimeForV8 usingPlatform: p = (\r(* Just enough of a time library to do benchmarking.\r\rCopyright 2012 Google Inc.\rCopyright 2013 Ryan Macnak\r\rLicensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)|\r|)";
		this.slots = [
			new SM("TimeForV8`Time", true, true),
			new SM("TimeForV8`Timer", true, true)
		];
		this.methods = [
			new MM("superInit`TimeForV8", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("Time", true, null),
			new MM("Timer", true, null),
			new MM("TimeForV8`Time", true, null),
			new MM("TimeForV8`Time:", true, null),
			new MM("TimeForV8`Timer", true, null),
			new MM("TimeForV8`Timer:", true, null)
		];
		this.nestedClasses = [
			"TimeForV8`Time",
			"TimeForV8`Timer"
		];
		this.applications = [];
		this.$superInit$TimeForV8 = (function ($p) {
			var self = this;
			self.$super$TimeForV8$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($p) {
			var self = this;
			self._$superInit$TimeForV8($p);
			return self;
		});
		this.$Time = (function () {
			if (nil === this.$TimeForV8$Time$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$TimeForV8);
				var mixin = $.$TimeForV8$Time;
				this.$TimeForV8$Time$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$TimeForV8$Time$slot;
		});
		this.$Timer = (function () {
			if (nil === this.$TimeForV8$Timer$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$TimeForV8);
				var mixin = $.$TimeForV8$Timer;
				this.$TimeForV8$Timer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$TimeForV8$Timer$slot;
		});
		this.$TimeForV8$Time = (function () {
			return this.$TimeForV8$Time$slot;
		});
		this.$TimeForV8$Time$ = (function (v) {
			this.$TimeForV8$Time$slot = v;
			return this;
		});
		this.$TimeForV8$Timer = (function () {
			return this.$TimeForV8$Timer$slot;
		});
		this.$TimeForV8$Timer$ = (function (v) {
			this.$TimeForV8$Timer$slot = v;
			return this;
		});
		this.$TimeForV8$Time = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for TimeForV8`Time";
			this.name = "TimeForV8`Time";
			this.header = "Time = ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`TimeForV8`Time", true, " "),
				new MM("instance`initializer", true, " ")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$TimeForV8$Time = (function () {
				var self = this;
				self.$super$TimeForV8$Time$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$TimeForV8$Time();
				return self;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for TimeForV8`Time";
					this._$superInit$TimeForV8$Time = $.$superInit$TimeForV8$Time;
					this.$superInit$TimeForV8$Time = dnuCatcher("$superInit$TimeForV8$Time");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$enclosingObjects$TimeForV8$Time = enclosingObjects;
					this.$super$TimeForV8$Time$slot = runtimeSuperclass;
					this["TimeForV8`Time"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["TimeForV8`Time"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for TimeForV8`Time";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("microsecondClockValue", false, "public microsecondClockValue = (\r	^js verbatim: 'performance.now() * 1000'\r)"),
					new MM("millisecondClockValue", false, "public millisecondClockValue = (\r	^js verbatim: 'new Date().getTime()'\r)"),
					new MM("millisecondsToRun:", false, "public millisecondsToRun: block = (\r	| start = self millisecondClockValue. |\r	block value.\r	^self millisecondClockValue -start\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$microsecondClockValue = (function () {
					var self = this;
					return performance.now() * 1000;
				});
				this.$millisecondClockValue = (function () {
					var self = this;
					return new Date().getTime();
				});
				this.$millisecondsToRun$ = (function ($block) {
					var self = this;
					var $start = nil;
					$start = self._$millisecondClockValue();
					$block.$value();
					return self._$millisecondClockValue() - $start;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for TimeForV8`Time";
						this.$new = this._$new = $.$new;
						this.$microsecondClockValue = this._$microsecondClockValue = $.$microsecondClockValue;
						this.$millisecondClockValue = this._$millisecondClockValue = $.$millisecondClockValue;
						this.$millisecondsToRun$ = this._$millisecondsToRun$ = $.$millisecondsToRun$;
						this.$enclosingObjects$TimeForV8$Time = enclosingObjects;
						this.$super$TimeForV8$Time = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$TimeForV8$Timer = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for TimeForV8`Timer";
			this.name = "TimeForV8`Timer";
			this.header = "Timer = ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`TimeForV8`Timer", true, " "),
				new MM("instance`initializer", true, " ")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$TimeForV8$Timer = (function () {
				var self = this;
				self.$super$TimeForV8$Timer$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$TimeForV8$Timer();
				return self;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for TimeForV8`Timer";
					this._$superInit$TimeForV8$Timer = $.$superInit$TimeForV8$Timer;
					this.$superInit$TimeForV8$Timer = dnuCatcher("$superInit$TimeForV8$Timer");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$enclosingObjects$TimeForV8$Timer = enclosingObjects;
					this.$super$TimeForV8$Timer$slot = runtimeSuperclass;
					this["TimeForV8`Timer"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["TimeForV8`Timer"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for TimeForV8`Timer";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("after:do:", false, "public after: duration do: callback = (\r	js call: (js propertyOf: (js ident: 'window') at: (js literal: 'setTimeout'))\r	with: {callback. duration}\r)"),
					new MM("every:do:", false, "public every: duration do: callback = (\r	js call: (js propertyOf: (js ident: 'window') at: (js literal: 'setInterval'))\r	with: {callback. duration}\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$after$do$ = (function ($duration, $callback) {
					var self = this;
					window.setTimeout($callback, $duration);
					return self;
				});
				this.$every$do$ = (function ($duration, $callback) {
					var self = this;
					window.setInterval($callback, $duration);
					return self;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for TimeForV8`Timer";
						this.$new = this._$new = $.$new;
						this.$after$do$ = this._$after$do$ = $.$after$do$;
						this.$every$do$ = this._$every$do$ = $.$every$do$;
						this.$enclosingObjects$TimeForV8$Timer = enclosingObjects;
						this.$super$TimeForV8$Timer = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$TimeForV8$Time.enclosingMixin = this;
		this.$TimeForV8$Timer.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for TimeForV8";
				this._$superInit$TimeForV8 = $.$superInit$TimeForV8;
				this.$superInit$TimeForV8 = dnuCatcher("$superInit$TimeForV8");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this.$Time = this._$Time = $.$Time;
				this.$Timer = this._$Timer = $.$Timer;
				this.$TimeForV8$Time = this._$TimeForV8$Time = $.$TimeForV8$Time;
				this.$TimeForV8$Time$ = this._$TimeForV8$Time$ = $.$TimeForV8$Time$;
				this.$TimeForV8$Timer = this._$TimeForV8$Timer = $.$TimeForV8$Timer;
				this.$TimeForV8$Timer$ = this._$TimeForV8$Timer$ = $.$TimeForV8$Timer$;
				this.$enclosingObjects$TimeForV8 = enclosingObjects;
				this.$super$TimeForV8$slot = runtimeSuperclass;
				this.TimeForV8 = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$TimeForV8$Time$slot = nil;
					this.$TimeForV8$Timer$slot = nil;
				});
				this.basicNew = this.TimeForV8;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for TimeForV8";
			this.slots = [];
			this.methods = [new MM("usingPlatform:", true, null)];
			this.nestedClasses = [];
			this.$usingPlatform$ = (function ($p) {
				return (new this.nonMeta.basicNew()).$instance$initializer($p);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for TimeForV8";
					this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
					this.$enclosingObjects$TimeForV8 = enclosingObjects;
					this.$super$TimeForV8 = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$CombinatorialParsing = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for CombinatorialParsing";
		this.name = "CombinatorialParsing";
		this.header = "CombinatorialParsing usingPlatform: platform = ((* The Newspeak version of the original parser combinator library.\r\rCopyright 2008 Cadence Design Systems, Inc.\rCopyright 2012 Cadence Design Systems, Inc.\rCopyright 2013 Ryan Macnak\r\rLicensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)| \r\rprivate OrderedCollection = platform collections OrderedCollection.\rprivate Dictionary = platform collections Dictionary.\rprivate ObjectMirror = platform mirrors ObjectMirror.\r|)";
		this.slots = [
			new SM("OrderedCollection", false, false),
			new SM("Dictionary", false, false),
			new SM("ObjectMirror", false, false),
			new SM("CombinatorialParsing`AlternatingParser", true, true),
			new SM("CombinatorialParsing`CharParser", true, true),
			new SM("CombinatorialParsing`CollectingCommentParser", true, true),
			new SM("CombinatorialParsing`CombinatorialParser", true, true),
			new SM("CombinatorialParsing`CommentParser", true, true),
			new SM("CombinatorialParsing`EOIParser", true, true),
			new SM("CombinatorialParsing`EmptyParser", true, true),
			new SM("CombinatorialParsing`ExecutableGrammar", true, true),
			new SM("CombinatorialParsing`FailingParser", true, true),
			new SM("CombinatorialParsing`ForwardReferenceParser", true, true),
			new SM("CombinatorialParsing`ForwardingWrappingParser", true, true),
			new SM("CombinatorialParsing`NamedWrappingParser", true, true),
			new SM("CombinatorialParsing`NegatingParser", true, true),
			new SM("CombinatorialParsing`ParserContext", true, true),
			new SM("CombinatorialParsing`ParserError", true, true),
			new SM("CombinatorialParsing`PlusParser", true, true),
			new SM("CombinatorialParsing`PredicateTokenParser", true, true),
			new SM("CombinatorialParsing`SequentialParser", true, true),
			new SM("CombinatorialParsing`StarParser", true, true),
			new SM("CombinatorialParsing`SymbolicTokenParser", true, true),
			new SM("CombinatorialParsing`Token", true, true),
			new SM("CombinatorialParsing`TokenParser", true, true),
			new SM("CombinatorialParsing`TokenizingParser", true, true),
			new SM("CombinatorialParsing`WhitespaceParser", true, true),
			new SM("CombinatorialParsing`WrappingParser", true, true)
		];
		this.methods = [
			new MM("superInit`CombinatorialParsing", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("AlternatingParser", true, null),
			new MM("CharParser", true, null),
			new MM("CollectingCommentParser", true, null),
			new MM("CombinatorialParser", true, null),
			new MM("CommentParser", true, null),
			new MM("EOIParser", true, null),
			new MM("EmptyParser", true, null),
			new MM("ExecutableGrammar", true, null),
			new MM("FailingParser", true, null),
			new MM("ForwardReferenceParser", true, null),
			new MM("ForwardingWrappingParser", true, null),
			new MM("NamedWrappingParser", true, null),
			new MM("NegatingParser", true, null),
			new MM("ParserContext", true, null),
			new MM("ParserError", true, null),
			new MM("PlusParser", true, null),
			new MM("PredicateTokenParser", true, null),
			new MM("SequentialParser", true, null),
			new MM("StarParser", true, null),
			new MM("SymbolicTokenParser", true, null),
			new MM("Token", true, null),
			new MM("TokenParser", true, null),
			new MM("TokenizingParser", true, null),
			new MM("WhitespaceParser", true, null),
			new MM("WrappingParser", true, null),
			new MM("OrderedCollection", true, null),
			new MM("setOnce`OrderedCollection:", true, null),
			new MM("Dictionary", true, null),
			new MM("setOnce`Dictionary:", true, null),
			new MM("ObjectMirror", true, null),
			new MM("setOnce`ObjectMirror:", true, null),
			new MM("CombinatorialParsing`AlternatingParser", true, null),
			new MM("CombinatorialParsing`AlternatingParser:", true, null),
			new MM("CombinatorialParsing`CharParser", true, null),
			new MM("CombinatorialParsing`CharParser:", true, null),
			new MM("CombinatorialParsing`CollectingCommentParser", true, null),
			new MM("CombinatorialParsing`CollectingCommentParser:", true, null),
			new MM("CombinatorialParsing`CombinatorialParser", true, null),
			new MM("CombinatorialParsing`CombinatorialParser:", true, null),
			new MM("CombinatorialParsing`CommentParser", true, null),
			new MM("CombinatorialParsing`CommentParser:", true, null),
			new MM("CombinatorialParsing`EOIParser", true, null),
			new MM("CombinatorialParsing`EOIParser:", true, null),
			new MM("CombinatorialParsing`EmptyParser", true, null),
			new MM("CombinatorialParsing`EmptyParser:", true, null),
			new MM("CombinatorialParsing`ExecutableGrammar", true, null),
			new MM("CombinatorialParsing`ExecutableGrammar:", true, null),
			new MM("CombinatorialParsing`FailingParser", true, null),
			new MM("CombinatorialParsing`FailingParser:", true, null),
			new MM("CombinatorialParsing`ForwardReferenceParser", true, null),
			new MM("CombinatorialParsing`ForwardReferenceParser:", true, null),
			new MM("CombinatorialParsing`ForwardingWrappingParser", true, null),
			new MM("CombinatorialParsing`ForwardingWrappingParser:", true, null),
			new MM("CombinatorialParsing`NamedWrappingParser", true, null),
			new MM("CombinatorialParsing`NamedWrappingParser:", true, null),
			new MM("CombinatorialParsing`NegatingParser", true, null),
			new MM("CombinatorialParsing`NegatingParser:", true, null),
			new MM("CombinatorialParsing`ParserContext", true, null),
			new MM("CombinatorialParsing`ParserContext:", true, null),
			new MM("CombinatorialParsing`ParserError", true, null),
			new MM("CombinatorialParsing`ParserError:", true, null),
			new MM("CombinatorialParsing`PlusParser", true, null),
			new MM("CombinatorialParsing`PlusParser:", true, null),
			new MM("CombinatorialParsing`PredicateTokenParser", true, null),
			new MM("CombinatorialParsing`PredicateTokenParser:", true, null),
			new MM("CombinatorialParsing`SequentialParser", true, null),
			new MM("CombinatorialParsing`SequentialParser:", true, null),
			new MM("CombinatorialParsing`StarParser", true, null),
			new MM("CombinatorialParsing`StarParser:", true, null),
			new MM("CombinatorialParsing`SymbolicTokenParser", true, null),
			new MM("CombinatorialParsing`SymbolicTokenParser:", true, null),
			new MM("CombinatorialParsing`Token", true, null),
			new MM("CombinatorialParsing`Token:", true, null),
			new MM("CombinatorialParsing`TokenParser", true, null),
			new MM("CombinatorialParsing`TokenParser:", true, null),
			new MM("CombinatorialParsing`TokenizingParser", true, null),
			new MM("CombinatorialParsing`TokenizingParser:", true, null),
			new MM("CombinatorialParsing`WhitespaceParser", true, null),
			new MM("CombinatorialParsing`WhitespaceParser:", true, null),
			new MM("CombinatorialParsing`WrappingParser", true, null),
			new MM("CombinatorialParsing`WrappingParser:", true, null)
		];
		this.nestedClasses = [
			"CombinatorialParsing`AlternatingParser",
			"CombinatorialParsing`CharParser",
			"CombinatorialParsing`CollectingCommentParser",
			"CombinatorialParsing`CombinatorialParser",
			"CombinatorialParsing`CommentParser",
			"CombinatorialParsing`EOIParser",
			"CombinatorialParsing`EmptyParser",
			"CombinatorialParsing`ExecutableGrammar",
			"CombinatorialParsing`FailingParser",
			"CombinatorialParsing`ForwardReferenceParser",
			"CombinatorialParsing`ForwardingWrappingParser",
			"CombinatorialParsing`NamedWrappingParser",
			"CombinatorialParsing`NegatingParser",
			"CombinatorialParsing`ParserContext",
			"CombinatorialParsing`ParserError",
			"CombinatorialParsing`PlusParser",
			"CombinatorialParsing`PredicateTokenParser",
			"CombinatorialParsing`SequentialParser",
			"CombinatorialParsing`StarParser",
			"CombinatorialParsing`SymbolicTokenParser",
			"CombinatorialParsing`Token",
			"CombinatorialParsing`TokenParser",
			"CombinatorialParsing`TokenizingParser",
			"CombinatorialParsing`WhitespaceParser",
			"CombinatorialParsing`WrappingParser"
		];
		this.applications = [];
		this.$superInit$CombinatorialParsing = (function ($platform) {
			var self = this;
			self.$super$CombinatorialParsing$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($platform) {
			var self = this;
			self._$superInit$CombinatorialParsing($platform);
			$0.$setOnce$OrderedCollection$.call(self, $platform.$collections().$OrderedCollection());
			$0.$setOnce$Dictionary$.call(self, $platform.$collections().$Dictionary());
			$0.$setOnce$ObjectMirror$.call(self, $platform.$mirrors().$ObjectMirror());
			return self;
		});
		this.$AlternatingParser = (function () {
			if (nil === this.$CombinatorialParsing$AlternatingParser$slot) {
				var self = this;
				var superclass = self._$CombinatorialParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$AlternatingParser;
				this.$CombinatorialParsing$AlternatingParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$AlternatingParser$slot;
		});
		this.$CharParser = (function () {
			if (nil === this.$CombinatorialParsing$CharParser$slot) {
				var self = this;
				var superclass = self._$PredicateTokenParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$CharParser;
				this.$CombinatorialParsing$CharParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$CharParser$slot;
		});
		this.$CollectingCommentParser = (function () {
			if (nil === this.$CombinatorialParsing$CollectingCommentParser$slot) {
				var self = this;
				var superclass = self._$CommentParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$CollectingCommentParser;
				this.$CombinatorialParsing$CollectingCommentParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$CollectingCommentParser$slot;
		});
		this.$CombinatorialParser = (function () {
			if (nil === this.$CombinatorialParsing$CombinatorialParser$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$CombinatorialParser;
				this.$CombinatorialParsing$CombinatorialParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$CombinatorialParser$slot;
		});
		this.$CommentParser = (function () {
			if (nil === this.$CombinatorialParsing$CommentParser$slot) {
				var self = this;
				var superclass = self._$CombinatorialParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$CommentParser;
				this.$CombinatorialParsing$CommentParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$CommentParser$slot;
		});
		this.$EOIParser = (function () {
			if (nil === this.$CombinatorialParsing$EOIParser$slot) {
				var self = this;
				var superclass = self._$CombinatorialParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$EOIParser;
				this.$CombinatorialParsing$EOIParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$EOIParser$slot;
		});
		this.$EmptyParser = (function () {
			if (nil === this.$CombinatorialParsing$EmptyParser$slot) {
				var self = this;
				var superclass = self._$CombinatorialParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$EmptyParser;
				this.$CombinatorialParsing$EmptyParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$EmptyParser$slot;
		});
		this.$ExecutableGrammar = (function () {
			if (nil === this.$CombinatorialParsing$ExecutableGrammar$slot) {
				var self = this;
				var superclass = self._$CombinatorialParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$ExecutableGrammar;
				this.$CombinatorialParsing$ExecutableGrammar$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$ExecutableGrammar$slot;
		});
		this.$FailingParser = (function () {
			if (nil === this.$CombinatorialParsing$FailingParser$slot) {
				var self = this;
				var superclass = self._$CombinatorialParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$FailingParser;
				this.$CombinatorialParsing$FailingParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$FailingParser$slot;
		});
		this.$ForwardReferenceParser = (function () {
			if (nil === this.$CombinatorialParsing$ForwardReferenceParser$slot) {
				var self = this;
				var superclass = self._$CombinatorialParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$ForwardReferenceParser;
				this.$CombinatorialParsing$ForwardReferenceParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$ForwardReferenceParser$slot;
		});
		this.$ForwardingWrappingParser = (function () {
			if (nil === this.$CombinatorialParsing$ForwardingWrappingParser$slot) {
				var self = this;
				var superclass = self._$WrappingParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$ForwardingWrappingParser;
				this.$CombinatorialParsing$ForwardingWrappingParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$ForwardingWrappingParser$slot;
		});
		this.$NamedWrappingParser = (function () {
			if (nil === this.$CombinatorialParsing$NamedWrappingParser$slot) {
				var self = this;
				var superclass = self._$WrappingParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$NamedWrappingParser;
				this.$CombinatorialParsing$NamedWrappingParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$NamedWrappingParser$slot;
		});
		this.$NegatingParser = (function () {
			if (nil === this.$CombinatorialParsing$NegatingParser$slot) {
				var self = this;
				var superclass = self._$CombinatorialParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$NegatingParser;
				this.$CombinatorialParsing$NegatingParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$NegatingParser$slot;
		});
		this.$ParserContext = (function () {
			if (nil === this.$CombinatorialParsing$ParserContext$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$ParserContext;
				this.$CombinatorialParsing$ParserContext$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$ParserContext$slot;
		});
		this.$ParserError = (function () {
			if (nil === this.$CombinatorialParsing$ParserError$slot) {
				var self = this;
				var superclass = self._$Error();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$ParserError;
				this.$CombinatorialParsing$ParserError$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$ParserError$slot;
		});
		this.$PlusParser = (function () {
			if (nil === this.$CombinatorialParsing$PlusParser$slot) {
				var self = this;
				var superclass = self._$CombinatorialParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$PlusParser;
				this.$CombinatorialParsing$PlusParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$PlusParser$slot;
		});
		this.$PredicateTokenParser = (function () {
			if (nil === this.$CombinatorialParsing$PredicateTokenParser$slot) {
				var self = this;
				var superclass = self._$CombinatorialParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$PredicateTokenParser;
				this.$CombinatorialParsing$PredicateTokenParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$PredicateTokenParser$slot;
		});
		this.$SequentialParser = (function () {
			if (nil === this.$CombinatorialParsing$SequentialParser$slot) {
				var self = this;
				var superclass = self._$CombinatorialParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$SequentialParser;
				this.$CombinatorialParsing$SequentialParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$SequentialParser$slot;
		});
		this.$StarParser = (function () {
			if (nil === this.$CombinatorialParsing$StarParser$slot) {
				var self = this;
				var superclass = self._$CombinatorialParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$StarParser;
				this.$CombinatorialParsing$StarParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$StarParser$slot;
		});
		this.$SymbolicTokenParser = (function () {
			if (nil === this.$CombinatorialParsing$SymbolicTokenParser$slot) {
				var self = this;
				var superclass = self._$CombinatorialParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$SymbolicTokenParser;
				this.$CombinatorialParsing$SymbolicTokenParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$SymbolicTokenParser$slot;
		});
		this.$Token = (function () {
			if (nil === this.$CombinatorialParsing$Token$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$Token;
				this.$CombinatorialParsing$Token$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$Token$slot;
		});
		this.$TokenParser = (function () {
			if (nil === this.$CombinatorialParsing$TokenParser$slot) {
				var self = this;
				var superclass = self._$PredicateTokenParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$TokenParser;
				this.$CombinatorialParsing$TokenParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$TokenParser$slot;
		});
		this.$TokenizingParser = (function () {
			if (nil === this.$CombinatorialParsing$TokenizingParser$slot) {
				var self = this;
				var superclass = self._$CombinatorialParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$TokenizingParser;
				this.$CombinatorialParsing$TokenizingParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$TokenizingParser$slot;
		});
		this.$WhitespaceParser = (function () {
			if (nil === this.$CombinatorialParsing$WhitespaceParser$slot) {
				var self = this;
				var superclass = self._$CombinatorialParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$WhitespaceParser;
				this.$CombinatorialParsing$WhitespaceParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$WhitespaceParser$slot;
		});
		this.$WrappingParser = (function () {
			if (nil === this.$CombinatorialParsing$WrappingParser$slot) {
				var self = this;
				var superclass = self._$CombinatorialParser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$CombinatorialParsing);
				var mixin = $.$CombinatorialParsing$WrappingParser;
				this.$CombinatorialParsing$WrappingParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$CombinatorialParsing$WrappingParser$slot;
		});
		this.$OrderedCollection = (function () {
			return this.$OrderedCollection$slot;
		});
		this.$setOnce$OrderedCollection$ = (function (v) {
			this.$OrderedCollection$slot = v;
			return this;
		});
		this.$Dictionary = (function () {
			return this.$Dictionary$slot;
		});
		this.$setOnce$Dictionary$ = (function (v) {
			this.$Dictionary$slot = v;
			return this;
		});
		this.$ObjectMirror = (function () {
			return this.$ObjectMirror$slot;
		});
		this.$setOnce$ObjectMirror$ = (function (v) {
			this.$ObjectMirror$slot = v;
			return this;
		});
		this.$CombinatorialParsing$AlternatingParser = (function () {
			return this.$CombinatorialParsing$AlternatingParser$slot;
		});
		this.$CombinatorialParsing$AlternatingParser$ = (function (v) {
			this.$CombinatorialParsing$AlternatingParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$CharParser = (function () {
			return this.$CombinatorialParsing$CharParser$slot;
		});
		this.$CombinatorialParsing$CharParser$ = (function (v) {
			this.$CombinatorialParsing$CharParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$CollectingCommentParser = (function () {
			return this.$CombinatorialParsing$CollectingCommentParser$slot;
		});
		this.$CombinatorialParsing$CollectingCommentParser$ = (function (v) {
			this.$CombinatorialParsing$CollectingCommentParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$CombinatorialParser = (function () {
			return this.$CombinatorialParsing$CombinatorialParser$slot;
		});
		this.$CombinatorialParsing$CombinatorialParser$ = (function (v) {
			this.$CombinatorialParsing$CombinatorialParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$CommentParser = (function () {
			return this.$CombinatorialParsing$CommentParser$slot;
		});
		this.$CombinatorialParsing$CommentParser$ = (function (v) {
			this.$CombinatorialParsing$CommentParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$EOIParser = (function () {
			return this.$CombinatorialParsing$EOIParser$slot;
		});
		this.$CombinatorialParsing$EOIParser$ = (function (v) {
			this.$CombinatorialParsing$EOIParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$EmptyParser = (function () {
			return this.$CombinatorialParsing$EmptyParser$slot;
		});
		this.$CombinatorialParsing$EmptyParser$ = (function (v) {
			this.$CombinatorialParsing$EmptyParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$ExecutableGrammar = (function () {
			return this.$CombinatorialParsing$ExecutableGrammar$slot;
		});
		this.$CombinatorialParsing$ExecutableGrammar$ = (function (v) {
			this.$CombinatorialParsing$ExecutableGrammar$slot = v;
			return this;
		});
		this.$CombinatorialParsing$FailingParser = (function () {
			return this.$CombinatorialParsing$FailingParser$slot;
		});
		this.$CombinatorialParsing$FailingParser$ = (function (v) {
			this.$CombinatorialParsing$FailingParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$ForwardReferenceParser = (function () {
			return this.$CombinatorialParsing$ForwardReferenceParser$slot;
		});
		this.$CombinatorialParsing$ForwardReferenceParser$ = (function (v) {
			this.$CombinatorialParsing$ForwardReferenceParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$ForwardingWrappingParser = (function () {
			return this.$CombinatorialParsing$ForwardingWrappingParser$slot;
		});
		this.$CombinatorialParsing$ForwardingWrappingParser$ = (function (v) {
			this.$CombinatorialParsing$ForwardingWrappingParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$NamedWrappingParser = (function () {
			return this.$CombinatorialParsing$NamedWrappingParser$slot;
		});
		this.$CombinatorialParsing$NamedWrappingParser$ = (function (v) {
			this.$CombinatorialParsing$NamedWrappingParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$NegatingParser = (function () {
			return this.$CombinatorialParsing$NegatingParser$slot;
		});
		this.$CombinatorialParsing$NegatingParser$ = (function (v) {
			this.$CombinatorialParsing$NegatingParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$ParserContext = (function () {
			return this.$CombinatorialParsing$ParserContext$slot;
		});
		this.$CombinatorialParsing$ParserContext$ = (function (v) {
			this.$CombinatorialParsing$ParserContext$slot = v;
			return this;
		});
		this.$CombinatorialParsing$ParserError = (function () {
			return this.$CombinatorialParsing$ParserError$slot;
		});
		this.$CombinatorialParsing$ParserError$ = (function (v) {
			this.$CombinatorialParsing$ParserError$slot = v;
			return this;
		});
		this.$CombinatorialParsing$PlusParser = (function () {
			return this.$CombinatorialParsing$PlusParser$slot;
		});
		this.$CombinatorialParsing$PlusParser$ = (function (v) {
			this.$CombinatorialParsing$PlusParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$PredicateTokenParser = (function () {
			return this.$CombinatorialParsing$PredicateTokenParser$slot;
		});
		this.$CombinatorialParsing$PredicateTokenParser$ = (function (v) {
			this.$CombinatorialParsing$PredicateTokenParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$SequentialParser = (function () {
			return this.$CombinatorialParsing$SequentialParser$slot;
		});
		this.$CombinatorialParsing$SequentialParser$ = (function (v) {
			this.$CombinatorialParsing$SequentialParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$StarParser = (function () {
			return this.$CombinatorialParsing$StarParser$slot;
		});
		this.$CombinatorialParsing$StarParser$ = (function (v) {
			this.$CombinatorialParsing$StarParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$SymbolicTokenParser = (function () {
			return this.$CombinatorialParsing$SymbolicTokenParser$slot;
		});
		this.$CombinatorialParsing$SymbolicTokenParser$ = (function (v) {
			this.$CombinatorialParsing$SymbolicTokenParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$Token = (function () {
			return this.$CombinatorialParsing$Token$slot;
		});
		this.$CombinatorialParsing$Token$ = (function (v) {
			this.$CombinatorialParsing$Token$slot = v;
			return this;
		});
		this.$CombinatorialParsing$TokenParser = (function () {
			return this.$CombinatorialParsing$TokenParser$slot;
		});
		this.$CombinatorialParsing$TokenParser$ = (function (v) {
			this.$CombinatorialParsing$TokenParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$TokenizingParser = (function () {
			return this.$CombinatorialParsing$TokenizingParser$slot;
		});
		this.$CombinatorialParsing$TokenizingParser$ = (function (v) {
			this.$CombinatorialParsing$TokenizingParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$WhitespaceParser = (function () {
			return this.$CombinatorialParsing$WhitespaceParser$slot;
		});
		this.$CombinatorialParsing$WhitespaceParser$ = (function (v) {
			this.$CombinatorialParsing$WhitespaceParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$WrappingParser = (function () {
			return this.$CombinatorialParsing$WrappingParser$slot;
		});
		this.$CombinatorialParsing$WrappingParser$ = (function (v) {
			this.$CombinatorialParsing$WrappingParser$slot = v;
			return this;
		});
		this.$CombinatorialParsing$AlternatingParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`AlternatingParser";
			this.name = "CombinatorialParsing`AlternatingParser";
			this.header = "AlternatingParser either: p_ or: q_ = CombinatorialParser ((* A parser that parses either P or Q. *)|\rp <CombinatorialParser> = p_.\rq <CombinatorialParser> = q_.\r|)";
			this.slots = [
				new SM("p", false, false),
				new SM("q", false, false)
			];
			this.methods = [
				new MM("superInit`CombinatorialParsing`AlternatingParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("parse:inContext:ifError:", false, "public parse: input <ReadStream> inContext: context <ParserContext> ifError: blk <[:String :Integer]> = (\r	| rewindPosition |\r	rewindPosition:: input position.\r  	^p parse: input inContext: context ifError:\r		[:msg1 :pos1 |\r		input position: rewindPosition.\r		context recordFailure: {msg1. pos1}.\r		^q parse: input inContext: context ifError:\r			[:msg2 :pos2 |\r			context recordFailure: {msg2. pos2}.\r			pos1 > pos2 ifTrue: [^blk value: msg1 value: pos1].\r			pos2 > pos1 ifTrue: [^blk value: msg2 value: pos2].\r			^combineErrors: msg1 and: msg2 at: pos1 with: blk]]\r)"),
				new MM("combineErrors:and:at:with:", false, "combineErrors: e1 <String> and: e2 <String> at: pos <Integer> with: blk <[:String :Integer]> = (\r	| or <String> msg <String> |\r	or:: (e1 = '' or: [e2 = '']) ifTrue:[''] ifFalse:[' or '].\r	msg:: e1 = e2 ifTrue: [e1] ifFalse: [e1, or , e2].\r	^blk value: msg value: pos\r)"),
				new MM("p", true, null),
				new MM("setOnce`p:", true, null),
				new MM("q", true, null),
				new MM("setOnce`q:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$AlternatingParser = (function ($p_, $q_) {
				var self = this;
				self.$super$CombinatorialParsing$AlternatingParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($p_, $q_) {
				var self = this;
				self._$superInit$CombinatorialParsing$AlternatingParser($p_, $q_);
				self._$setOnce$p$($p_);
				self._$setOnce$q$($q_);
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				var NLR = new Object();
				try {
					var $rewindPosition = nil;
					$rewindPosition = $input.$position();
					return self._$p().$parse$inContext$ifError$($input, $context, (function ($msg1, $pos1) {
						$input.$position$($rewindPosition);
						$context.$recordFailure$([
							$msg1,
							$pos1
						]);
						{
							NLR.value = self._$q().$parse$inContext$ifError$($input, $context, (function ($msg2, $pos2) {
								$context.$recordFailure$([
									$msg2,
									$pos2
								]);
								if ($pos1.$$greater($pos2)) {
									{
										NLR.value = $blk.$value$value$($msg1, $pos1);
										throw NLR;
									};
								} else {
									nil;
								};
								if ($pos2.$$greater($pos1)) {
									{
										NLR.value = $blk.$value$value$($msg2, $pos2);
										throw NLR;
									};
								} else {
									nil;
								};
								{
									NLR.value = self._$combineErrors$and$at$with$($msg1, $msg2, $pos1, $blk);
									throw NLR;
								};
							}));
							throw NLR;
						};
					}));
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$combineErrors$and$at$with$ = (function ($e1, $e2, $pos, $blk) {
				var self = this;
				var $or = nil;
				var $msg = nil;
				$or = ($e1.$$equal("") || $e2.$$equal("")).$ifTrue$ifFalse$((function () {
					return "";
				}), (function () {
					return " or ";
				}));
				$msg = $e1.$$equal($e2).$ifTrue$ifFalse$((function () {
					return $e1;
				}), (function () {
					return $e1.$$comma($or).$$comma($e2);
				}));
				return $blk.$value$value$($msg, $pos);
			});
			this.$p = (function () {
				return this.$p$slot;
			});
			this.$setOnce$p$ = (function (v) {
				this.$p$slot = v;
				return this;
			});
			this.$q = (function () {
				return this.$q$slot;
			});
			this.$setOnce$q$ = (function (v) {
				this.$q$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`AlternatingParser";
					this._$superInit$CombinatorialParsing$AlternatingParser = $.$superInit$CombinatorialParsing$AlternatingParser;
					this.$superInit$CombinatorialParsing$AlternatingParser = dnuCatcher("$superInit$CombinatorialParsing$AlternatingParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this._$combineErrors$and$at$with$ = $.$combineErrors$and$at$with$;
					this.$combineErrors$and$at$with$ = dnuCatcher("$combineErrors$and$at$with$");
					this._$p = $.$p;
					this.$p = dnuCatcher("$p");
					this._$setOnce$p$ = $.$setOnce$p$;
					this.$setOnce$p$ = dnuCatcher("$setOnce$p$");
					this._$q = $.$q;
					this.$q = dnuCatcher("$q");
					this._$setOnce$q$ = $.$setOnce$q$;
					this.$setOnce$q$ = dnuCatcher("$setOnce$q$");
					this.$enclosingObjects$CombinatorialParsing$AlternatingParser = enclosingObjects;
					this.$super$CombinatorialParsing$AlternatingParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`AlternatingParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$p$slot = nil;
						this.$q$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`AlternatingParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`AlternatingParser";
				this.slots = [];
				this.methods = [new MM("either:or:", true, null)];
				this.nestedClasses = [];
				this.$either$or$ = (function ($p_, $q_) {
					return (new this.nonMeta.basicNew()).$instance$initializer($p_, $q_);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`AlternatingParser";
						this.$either$or$ = this._$either$or$ = $.$either$or$;
						this.$enclosingObjects$CombinatorialParsing$AlternatingParser = enclosingObjects;
						this.$super$CombinatorialParsing$AlternatingParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$CharParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`CharParser";
			this.name = "CombinatorialParsing`CharParser";
			this.header = "CharParser = PredicateTokenParser ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`CombinatorialParsing`CharParser", true, "PredicateTokenParser"),
				new MM("instance`initializer", true, "PredicateTokenParser"),
				new MM("for:", false, "public for: token = (\r 	(* This method leverages the assumption that characters are immutable values. Hence, if an input equals the specified token, it is indistiguishable from it, and we can just return token as the result of the parse. Consequently, the wrapper function we pass to the superclass constructor ignores its input and returns token. *)\r 	^accept: [:t | t = token] errorMsg: token asString, ' expected'\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$CharParser = (function () {
				var self = this;
				self.$super$CombinatorialParsing$CharParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$CharParser();
				return self;
			});
			this.$for$ = (function ($token) {
				var self = this;
				return self._$accept$errorMsg$((function ($t) {
					return $t.$$equal($token);
				}), $token.$asString().$$comma(" expected"));
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`CharParser";
					this._$superInit$CombinatorialParsing$CharParser = $.$superInit$CombinatorialParsing$CharParser;
					this.$superInit$CombinatorialParsing$CharParser = dnuCatcher("$superInit$CombinatorialParsing$CharParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$for$ = this._$for$ = $.$for$;
					this.$enclosingObjects$CombinatorialParsing$CharParser = enclosingObjects;
					this.$super$CombinatorialParsing$CharParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`CharParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["CombinatorialParsing`CharParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`CharParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`CharParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$CharParser = enclosingObjects;
						this.$super$CombinatorialParsing$CharParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$CollectingCommentParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`CollectingCommentParser";
			this.name = "CombinatorialParsing`CollectingCommentParser";
			this.header = "CollectingCommentParser = CommentParser ((* A special parser used for inputs that need to be rapidly scanned over. It differs from its superclass in that it actually collects the characters it scans, in case they are needed (e.g., for pretty printers). \r\rIdeally,we should not have to do this, but until we do proper optimization by compiling combinators, this will have to suffice. It provides a marked improvement in performance, By using such parsers for comments, whitespace and strings, the overall performance of the Newqueak parser improved by a factor of 2 or so. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`CombinatorialParsing`CollectingCommentParser", true, "CommentParser"),
				new MM("instance`initializer", true, "CommentParser"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context ifError: blk = (\r	| comment char onFail |\r	onFail:: [blk value: 'Premature end of input' value: input position - 1].\r	comment: OrderedCollection new.\r	[termBlock value: input] whileFalse:\r		[char:: input nextIfAbsent: onFail.\r		comment add: char]. \r	^comment\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$CollectingCommentParser = (function () {
				var self = this;
				self.$super$CombinatorialParsing$CollectingCommentParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$CollectingCommentParser();
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				var $comment = nil;
				var $char = nil;
				var $onFail = nil;
				$onFail = (function () {
					return $blk.$value$value$("Premature end of input", $input.$position() - 1);
				});
				$comment = $0.$OrderedCollection.call(self.$enclosingObjects$CombinatorialParsing$CollectingCommentParser[0]).$new();
				{
					nil;
					for (; !self._$termBlock().$value$($input); ) {
						$char = $input.$nextIfAbsent$($onFail);
						$comment.$add$($char);
					};
				};
				return $comment;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`CollectingCommentParser";
					this._$superInit$CombinatorialParsing$CollectingCommentParser = $.$superInit$CombinatorialParsing$CollectingCommentParser;
					this.$superInit$CombinatorialParsing$CollectingCommentParser = dnuCatcher("$superInit$CombinatorialParsing$CollectingCommentParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this.$enclosingObjects$CombinatorialParsing$CollectingCommentParser = enclosingObjects;
					this.$super$CombinatorialParsing$CollectingCommentParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`CollectingCommentParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["CombinatorialParsing`CollectingCommentParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`CollectingCommentParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`CollectingCommentParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$CollectingCommentParser = enclosingObjects;
						this.$super$CombinatorialParsing$CollectingCommentParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$CombinatorialParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`CombinatorialParser";
			this.name = "CombinatorialParsing`CombinatorialParser";
			this.header = "CombinatorialParser = ((* This class is intended to implement Parser\rCombinators. A CombinatorialParser[T]\rreturns a value of type T after successful\rparsing.\r\rThe class is abstract. It does not implement\r the parsing routine parse:ifError: .\r \rIf parsing fails, parse:ifError: should call the error handling block\rpassed to it.\r\rConcrete subclasses should implement specific grammars.\r\rParsing is initiated by calling parse:ifError:. This routine takes a ReadStream[Object] as input.\rIf parsing fails, it is the caller''s responsibility to set the input stream back to its original position\r(Q: is this a good idea?).\rIf an error occurs, the error block passed in is called. *)| public name |)";
			this.slots = [new SM("name", true, false)];
			this.methods = [
				new MM("superInit`CombinatorialParsing`CombinatorialParser", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("assert:", false, "assert: b = (\r	^assert: b message: 'Assertion failed'\r)"),
				new MM("isKindOfCombinatorialParser", false, "public isKindOfCombinatorialParser = (\r	(* should be auto-generated *)\r	^true\r)"),
				new MM("printOn:", false, "public printOn: stream = (\r	name isNil\r		ifTrue: [super printOn: stream]\r		ifFalse: [stream nextPutAll: name]\r)"),
				new MM("recordFailure:", false, "public recordFailure: f = (\r	(* YK- do nothing, save time *)\r)"),
				new MM("ultimateParser", false, "public ultimateParser = (\r	(* Used to bypass 0 .. n ForwardReferenceParsers to get to the real parser.  Usually, this is self. Only ForwardReferenceParsers forward the request to their forwardee *)\r	^self\r)"),
				new MM("value", false, "public value = (\r	^self\r)"),
				new MM("&", false, "public & p <CombinatorialParser> ^<SequentialParser> = (\r	(* The sequencing combinator (implicit in BNF). *)\r	^SequentialParser withSubparsers: {self. p}\r)"),
				new MM(",", false, "public , p <CombinatorialParser> ^<SequentialParser> = (\r	(* The flattening sequencing combinator. *)\r	\r(* This is what one should typically use in a grammar.\r It differs from '&' in its specification.  '&' is not intended to\rflatten the resulting parser tree, while ',' is; this achieved by overriding ',' in SequentialParser to do the flattening.\r\rWhy would one want to flatten the tree? Because, given a production\r\rFoo -> Bam Ban Bar Bat\r\rone doesn't want to build the AST by writing\r\rFoo:: Bam & Ban & Bar & Bat\r   wrapper:[:start :end | \r	            FooNode b1:start first b2: (start at: 2)  b3: (start at: 3) b4: end\r	]\r\rIt is much more convenient to flatten the tree and have a flat list of the correct arity.\r*)\r	^self & p\r)"),
				new MM("empty", false, "empty ^<CombinatorialParser> = (\r	^EmptyParser new\r)"),
				new MM("eoi", false, "eoi ^<CombinatorialParser> = (\r	^tokenFor: EOIParser new\r)"),
				new MM("fail", false, "fail ^<CombinatorialParser> = (\r	^FailingParser new\r)"),
				new MM("not", false, "public not ^<CombinatorialParser> = (\r	^NegatingParser withSubparser: self\r)"),
				new MM("opt", false, "public opt ^ <CombinatorialParser>= (\r	(* [P] = P | e *)\r	^self | empty\r)"),
				new MM("plus", false, "public plus ^<CombinatorialParser> = (\r	(* Return a parser that accepts one or more repetitions of what the receiver accepts. Denoted by the postfix + in BNF *)\r	^PlusParser withSubparser: self.\r)"),
				new MM("plusSeparatedBy:", false, "public plusSeparatedBy: separator <CombinatorialParser> ^<CombinatorialParser> = (\r\r(* Utility for the common case of a list with separators. The separators are discarded, as they are usually only used to guide parsing and\rhave no semantic value.  If one needs them, one can always build the rule directly *)\r\r^self & (separator value & self wrapper:[:s  :v |  v]) star\r        wrapper:[:fst :rst  |\r                            | results  |\r                              OrderedCollection new  addFirst: fst; addAll: rst; yourself (* could be optimized to reuse rst *)\r                           ]\r)"),
				new MM("plusSeparatedOrTerminatedBy:", false, "public plusSeparatedOrTerminatedBy: separator  <CombinatorialParser> ^ <CombinatorialParser>  = (\r \r(* Utility for the common case of a list with separators, allowing for an optional appearance of the separator at the end. The separators are discarded, as they are usually only used to guide parsing and\rhave no semantic value.  If one needs them, one can always build the rule directly *)\r\r^( plusSeparatedBy: separator), separator value opt\r         wrapper:[:lst  :end | lst]\r)"),
				new MM("star", false, "public star ^<CombinatorialParser> = (\r	(* Return a parser that accepts zero or more repetitions of what the receiver accepts. Denoted by the postfix * in BNF *)\r	(* P* = [P+] *)\r	(* We tweak the classic formulation by wrapping it in a parser that takes care to avoid returning nil. In the ordinary case, if the input is empty, the empty parser will return nil as the result. However, we'd rather not  have to check for nil every time we get a result from a starred production; it is verbose and error prone. In the case of star, it is better to return an empty list for empty input. *)\r	^StarParser withSubparser: self.\r)"),
				new MM("starSeparatedBy:", false, "public starSeparatedBy: separator  <CombinatorialParser> ^<CombinatorialParser> = (\r	(* See analogous plus methods. Must wrap to prevent returning nil in empty case *)\r	^(plusSeparatedBy: separator) opt\r		wrap: [:rs | rs isNil ifTrue: [OrderedCollection new] ifFalse: [rs]]\r)"),
				new MM("starSeparatedOrTerminatedBy:", false, "public starSeparatedOrTerminatedBy: separator <CombinatorialParser> ^<CombinatorialParser> = (\r 	(* See analogous plus methods. Must wrap to prevent returning nil in empty case *)\r	^(plusSeparatedOrTerminatedBy: separator) opt\r		wrap: [:rs | rs isNil ifTrue: [OrderedCollection new] ifFalse: [rs]]\r)"),
				new MM("|", false, "public | p <CombinatorialParser> ^<CombinatorialParser> = (\r	(* The alternation combinator - denoted by | in BNF *)\r	^AlternatingParser either: self or: p \r)"),
				new MM("parse:", false, "public parse: input <ReadStream> ^ <T | ParserError> = (\r	^self\r		parse: input\r		ifErrorNoContext: [:msg :pos | ^(ParserError message: msg position: pos) signal]\r)"),
				new MM("parse:ifError:", false, "public parse: input <ReadStream> ifError: blk <[:String :Integer | X def]> ^ <T|X>= (\r	#FLAG. \r	^self parse: input ifErrorNoContext: blk\r(* | context |\r\r  context:: ParserContext new.\r   ^parse: input \r        inContext: context\r        ifError:[:msg :pos |\r	               context errorPosition = pos \r	                  ifTrue:[\r		                      context recordFailure: ( combineErrors: context errorMessage \r		                                                                 and: msg \r		                                                                 at: pos\r		                                                          )\r		                      ]\r	                  ifFalse:[context recordFailure:{msg. pos.}]. \r	               blk value: context errorMessage value: context errorPosition.\r	            ] *)\r)"),
				new MM("parse:ifErrorNoContext:", false, "public parse: input <ReadStream> ifErrorNoContext: blk <[:String :Integer | X def]> ^ <T|X>= (\r	(* YK - a context-less protocol for speeding up parsing *)\r	(* Turns out maintaining a context is expensive in runtime and doesn't\r	do much for locating errors. Experimenting with other error localization\r	mechanism. To minimize impact, the parse:inContext:ifError: protocol\r	is maintained, and a bogus reportFailure is implemented on self *) \r	^self parse: input inContext: self ifError: blk\r)"),
				new MM("parse:inContext:ifError:", false, "public parse: input <ReadStream> inContext: context ifError: blk = (\r	subclassResponsibility\r)"),
				new MM("char:", false, "char: c <Character> ^<CombinatorialParser> = (\r	^CharParser new for: c\r)"),
				new MM("charBetween:and:", false, "charBetween: c1 <Character> and: c2 <Character> ^<CombinatorialParser> = (\r	^PredicateTokenParser new \r		accept: [:c | c between: c1 and: c2]\r		errorMsg: 'character between ', c1 asString, 'and ', c2 asString, 'expected'\r)"),
				new MM("comment", false, "comment ^<CombinatorialParser> = (\r	^fail\r)"),
				new MM("tokenFor:", false, "tokenFor: p <CombinatorialParser> ^ <CombinatorialParser> = (\r\r(* Tokenizing involves throwing away leading whitespace and comments.\rIn addition, it involves associating the token with a starting position within the input stream;\rWe do the latter first by wrapping p in a TokenizingParser; then we prefix it with a parser\rthat deals with whitespace and comments, and return the result. *)\r\r^(whitespace | comment) star, (TokenizingParser withSubparser: p)\r          wrapper: [:discardWhitespace :t | t].\r\r          (* type safety note: wrapper is only defined on SequentialParser. The call is always\r           statically unsafe but checked dynamically   (see its definition). One could use\r           guaranteed to cast to a SequentialParser, but that would not be enough to silence\r           the typechecker anyway *)\r(* Design note: It seems tempting to define a combinator, 'token', that returns a tokenized version of its receiver.  Alas, this doesn't work out, since tokenization relies on concepts of whitespace and comment, which are often specific to a given grammar. Hence, the combinator needs to be aan operation of the grammar, not of a specific production. *)\r)"),
				new MM("tokenFromChar:", false, "tokenFromChar: c <Character> ^<CombinatorialParser> = (\r 	^tokenFor: (char: c)\r)"),
				new MM("tokenFromSymbol:", false, "tokenFromSymbol: s <Symbol> ^<CombinatorialParser> = (\r	^tokenFor: (SymbolicTokenParser new forSymbol: s)\r)"),
				new MM("whitespace", false, "whitespace ^<CombinatorialParser> = (\r(* It's rare that anyone will need to change this definition *)\r (* ^ aWhitespaceChar plus. *)\r(* As an optimization, we process whitespace with a dedicated scanning parser. Of course, this regrettable, and Perhaps Squeak specific, but it is a significant win. *)\r	^WhitespaceParser new\r)"),
				new MM("wrap:", false, "public wrap: blk = (\r	^WrappingParser new wrapParser: self withWrapper: blk\r)"),
				new MM("wrap:name:", false, "public wrap: blk name: msg = (\r	^(NamedWrappingParser new wrapParser: self withWrapper: blk) name: msg\r)"),
				new MM("wrapper:", false, "public wrapper: blk = (\r	^wrap: [:rs | blk\r			valueWithArguments: (rs isCollection\r						ifTrue: [rs asArray]\r						ifFalse: [Array with: rs])]\r)"),
				new MM("wrapper:name:", false, "public wrapper: blk name: msg = (\r	^wrap: [:rs | blk\r			valueWithArguments: (rs isKindOfCollection\r						ifTrue: [rs asArray]\r						ifFalse: [Array with: rs])]\r	name: msg\r)"),
				new MM("name", true, null),
				new MM("name:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$CombinatorialParser = (function () {
				var self = this;
				self.$super$CombinatorialParsing$CombinatorialParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$CombinatorialParser();
				return self;
			});
			this.$assert$ = (function ($b) {
				var self = this;
				return self._$assert$message$($b, "Assertion failed");
			});
			this.$isKindOfCombinatorialParser = (function () {
				var self = this;
				return true;
			});
			this.$printOn$ = (function ($stream) {
				var self = this;
				if (self._$name().$isNil()) {
					self.$super$CombinatorialParsing$CombinatorialParser$slot._$printOn$.call(self, $stream);
				} else {
					$stream.$nextPutAll$(self._$name());
				};
				return self;
			});
			this.$recordFailure$ = (function ($f) {
				var self = this;
				return self;
			});
			this.$ultimateParser = (function () {
				var self = this;
				return self;
			});
			this.$value = (function () {
				var self = this;
				return self;
			});
			this.$$amp = (function ($p) {
				var self = this;
				return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$SequentialParser().$withSubparsers$([
					self,
					$p
				]);
			});
			this.$$comma = (function ($p) {
				var self = this;
				return self._$$amp($p);
			});
			this.$empty = (function () {
				var self = this;
				return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$EmptyParser().$new();
			});
			this.$eoi = (function () {
				var self = this;
				return self._$tokenFor$(self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$EOIParser().$new());
			});
			this.$fail = (function () {
				var self = this;
				return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$FailingParser().$new();
			});
			this.$not = (function () {
				var self = this;
				return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$NegatingParser().$withSubparser$(self);
			});
			this.$opt = (function () {
				var self = this;
				return self._$$pipe(self._$empty());
			});
			this.$plus = (function () {
				var self = this;
				return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$PlusParser().$withSubparser$(self);
			});
			this.$plusSeparatedBy$ = (function ($separator) {
				var self = this;
				return self._$$amp($separator.$value().$$amp(self).$wrapper$((function ($s, $v) {
					return $v;
				})).$star()).$wrapper$((function ($fst, $rst) {
					var $results = nil;
					return (function (cascadeReceiver) {
						cascadeReceiver.$addFirst$($fst);
						cascadeReceiver.$addAll$($rst);
						return cascadeReceiver.$yourself();
					})($0.$OrderedCollection.call(self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]).$new());
				}));
			});
			this.$plusSeparatedOrTerminatedBy$ = (function ($separator) {
				var self = this;
				return self._$plusSeparatedBy$($separator).$$comma($separator.$value().$opt()).$wrapper$((function ($lst, $end) {
					return $lst;
				}));
			});
			this.$star = (function () {
				var self = this;
				return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$StarParser().$withSubparser$(self);
			});
			this.$starSeparatedBy$ = (function ($separator) {
				var self = this;
				return self._$plusSeparatedBy$($separator).$opt().$wrap$((function ($rs) {
					return $rs.$isNil().$ifTrue$ifFalse$((function () {
						return $0.$OrderedCollection.call(self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]).$new();
					}), (function () {
						return $rs;
					}));
				}));
			});
			this.$starSeparatedOrTerminatedBy$ = (function ($separator) {
				var self = this;
				return self._$plusSeparatedOrTerminatedBy$($separator).$opt().$wrap$((function ($rs) {
					return $rs.$isNil().$ifTrue$ifFalse$((function () {
						return $0.$OrderedCollection.call(self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]).$new();
					}), (function () {
						return $rs;
					}));
				}));
			});
			this.$$pipe = (function ($p) {
				var self = this;
				return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$AlternatingParser().$either$or$(self, $p);
			});
			this.$parse$ = (function ($input) {
				var self = this;
				var NLR = new Object();
				try {
					return self._$parse$ifErrorNoContext$($input, (function ($msg, $pos) {
						{
							NLR.value = self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$ParserError().$message$position$($msg, $pos).$signal();
							throw NLR;
						};
					}));
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$parse$ifError$ = (function ($input, $blk) {
				var self = this;
				"FLAG";
				return self._$parse$ifErrorNoContext$($input, $blk);
			});
			this.$parse$ifErrorNoContext$ = (function ($input, $blk) {
				var self = this;
				return self._$parse$inContext$ifError$($input, self, $blk);
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$char$ = (function ($c) {
				var self = this;
				return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$CharParser().$new().$for$($c);
			});
			this.$charBetween$and$ = (function ($c1, $c2) {
				var self = this;
				return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$PredicateTokenParser().$new().$accept$errorMsg$((function ($c) {
					return $c.$between$and$($c1, $c2);
				}), ("character between ").$$comma($c1.$asString()).$$comma("and ").$$comma($c2.$asString()).$$comma("expected"));
			});
			this.$comment = (function () {
				var self = this;
				return self._$fail();
			});
			this.$tokenFor$ = (function ($p) {
				var self = this;
				return self._$whitespace().$$pipe(self._$comment()).$star().$$comma(self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$TokenizingParser().$withSubparser$($p)).$wrapper$((function ($discardWhitespace, $t) {
					return $t;
				}));
			});
			this.$tokenFromChar$ = (function ($c) {
				var self = this;
				return self._$tokenFor$(self._$char$($c));
			});
			this.$tokenFromSymbol$ = (function ($s) {
				var self = this;
				return self._$tokenFor$(self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$SymbolicTokenParser().$new().$forSymbol$($s));
			});
			this.$whitespace = (function () {
				var self = this;
				return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$WhitespaceParser().$new();
			});
			this.$wrap$ = (function ($blk) {
				var self = this;
				return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$WrappingParser().$new().$wrapParser$withWrapper$(self, $blk);
			});
			this.$wrap$name$ = (function ($blk, $msg) {
				var self = this;
				return self.$enclosingObjects$CombinatorialParsing$CombinatorialParser[0]._$NamedWrappingParser().$new().$wrapParser$withWrapper$(self, $blk).$name$($msg);
			});
			this.$wrapper$ = (function ($blk) {
				var self = this;
				return self._$wrap$((function ($rs) {
					return $blk.$valueWithArguments$($rs.$isCollection().$ifTrue$ifFalse$((function () {
						return $rs.$asArray();
					}), (function () {
						return self._$Array().$with$($rs);
					})));
				}));
			});
			this.$wrapper$name$ = (function ($blk, $msg) {
				var self = this;
				return self._$wrap$name$((function ($rs) {
					return $blk.$valueWithArguments$($rs.$isKindOfCollection().$ifTrue$ifFalse$((function () {
						return $rs.$asArray();
					}), (function () {
						return self._$Array().$with$($rs);
					})));
				}), $msg);
			});
			this.$name = (function () {
				return this.$name$slot;
			});
			this.$name$ = (function (v) {
				this.$name$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`CombinatorialParser";
					this._$superInit$CombinatorialParsing$CombinatorialParser = $.$superInit$CombinatorialParsing$CombinatorialParser;
					this.$superInit$CombinatorialParsing$CombinatorialParser = dnuCatcher("$superInit$CombinatorialParsing$CombinatorialParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$assert$ = $.$assert$;
					this.$assert$ = dnuCatcher("$assert$");
					this.$isKindOfCombinatorialParser = this._$isKindOfCombinatorialParser = $.$isKindOfCombinatorialParser;
					this.$printOn$ = this._$printOn$ = $.$printOn$;
					this.$recordFailure$ = this._$recordFailure$ = $.$recordFailure$;
					this.$ultimateParser = this._$ultimateParser = $.$ultimateParser;
					this.$value = this._$value = $.$value;
					this.$$amp = this._$$amp = $.$$amp;
					this.$$comma = this._$$comma = $.$$comma;
					this._$empty = $.$empty;
					this.$empty = dnuCatcher("$empty");
					this._$eoi = $.$eoi;
					this.$eoi = dnuCatcher("$eoi");
					this._$fail = $.$fail;
					this.$fail = dnuCatcher("$fail");
					this.$not = this._$not = $.$not;
					this.$opt = this._$opt = $.$opt;
					this.$plus = this._$plus = $.$plus;
					this.$plusSeparatedBy$ = this._$plusSeparatedBy$ = $.$plusSeparatedBy$;
					this.$plusSeparatedOrTerminatedBy$ = this._$plusSeparatedOrTerminatedBy$ = $.$plusSeparatedOrTerminatedBy$;
					this.$star = this._$star = $.$star;
					this.$starSeparatedBy$ = this._$starSeparatedBy$ = $.$starSeparatedBy$;
					this.$starSeparatedOrTerminatedBy$ = this._$starSeparatedOrTerminatedBy$ = $.$starSeparatedOrTerminatedBy$;
					this.$$pipe = this._$$pipe = $.$$pipe;
					this.$parse$ = this._$parse$ = $.$parse$;
					this.$parse$ifError$ = this._$parse$ifError$ = $.$parse$ifError$;
					this.$parse$ifErrorNoContext$ = this._$parse$ifErrorNoContext$ = $.$parse$ifErrorNoContext$;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this._$char$ = $.$char$;
					this.$char$ = dnuCatcher("$char$");
					this._$charBetween$and$ = $.$charBetween$and$;
					this.$charBetween$and$ = dnuCatcher("$charBetween$and$");
					this._$comment = $.$comment;
					this.$comment = dnuCatcher("$comment");
					this._$tokenFor$ = $.$tokenFor$;
					this.$tokenFor$ = dnuCatcher("$tokenFor$");
					this._$tokenFromChar$ = $.$tokenFromChar$;
					this.$tokenFromChar$ = dnuCatcher("$tokenFromChar$");
					this._$tokenFromSymbol$ = $.$tokenFromSymbol$;
					this.$tokenFromSymbol$ = dnuCatcher("$tokenFromSymbol$");
					this._$whitespace = $.$whitespace;
					this.$whitespace = dnuCatcher("$whitespace");
					this.$wrap$ = this._$wrap$ = $.$wrap$;
					this.$wrap$name$ = this._$wrap$name$ = $.$wrap$name$;
					this.$wrapper$ = this._$wrapper$ = $.$wrapper$;
					this.$wrapper$name$ = this._$wrapper$name$ = $.$wrapper$name$;
					this.$name = this._$name = $.$name;
					this.$name$ = this._$name$ = $.$name$;
					this.$enclosingObjects$CombinatorialParsing$CombinatorialParser = enclosingObjects;
					this.$super$CombinatorialParsing$CombinatorialParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`CombinatorialParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$name$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`CombinatorialParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`CombinatorialParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`CombinatorialParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$CombinatorialParser = enclosingObjects;
						this.$super$CombinatorialParsing$CombinatorialParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$CommentParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`CommentParser";
			this.name = "CombinatorialParsing`CommentParser";
			this.header = "CommentParser = CombinatorialParser (| \r	public termBlock\r|)";
			this.slots = [new SM("termBlock", true, false)];
			this.methods = [
				new MM("superInit`CombinatorialParsing`CommentParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context ifError: blk = (\r\r\r	[termBlock value: input] whileFalse: [\r		input nextIfAbsent: [blk value:'Premature end of input' value: input position-1]\r	]. \r)"),
				new MM("termBlock", true, null),
				new MM("termBlock:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$CommentParser = (function () {
				var self = this;
				self.$super$CombinatorialParsing$CommentParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$CommentParser();
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				{
					nil;
					for (; !self._$termBlock().$value$($input); ) {
						$input.$nextIfAbsent$((function () {
							return $blk.$value$value$("Premature end of input", $input.$position() - 1);
						}));
					};
				};
				return self;
			});
			this.$termBlock = (function () {
				return this.$termBlock$slot;
			});
			this.$termBlock$ = (function (v) {
				this.$termBlock$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`CommentParser";
					this._$superInit$CombinatorialParsing$CommentParser = $.$superInit$CombinatorialParsing$CommentParser;
					this.$superInit$CombinatorialParsing$CommentParser = dnuCatcher("$superInit$CombinatorialParsing$CommentParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this.$termBlock = this._$termBlock = $.$termBlock;
					this.$termBlock$ = this._$termBlock$ = $.$termBlock$;
					this.$enclosingObjects$CombinatorialParsing$CommentParser = enclosingObjects;
					this.$super$CombinatorialParsing$CommentParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`CommentParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$termBlock$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`CommentParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`CommentParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`CommentParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$CommentParser = enclosingObjects;
						this.$super$CombinatorialParsing$CommentParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$EOIParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`EOIParser";
			this.name = "CombinatorialParsing`EOIParser";
			this.header = "EOIParser = CombinatorialParser ((* A parser that only succeeds at the end of the input. This addresses a common problem with combinator parsers. If there is garbage at the end of the input, no production matches it. Consequently, the parsers backtrack to the point where the legal input was consumed, without giving an error message about the junk at the end. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`CombinatorialParsing`EOIParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context ifError: blk = (\r	input atEnd \r      	ifTrue: [^true]\r		ifFalse: [blk value: 'Unexpected input' value: input position+1]\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$EOIParser = (function () {
				var self = this;
				self.$super$CombinatorialParsing$EOIParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$EOIParser();
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				if ($input.$atEnd()) {
					return true;
				} else {
					$blk.$value$value$("Unexpected input", $input.$position() + 1);
				};
				return self;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`EOIParser";
					this._$superInit$CombinatorialParsing$EOIParser = $.$superInit$CombinatorialParsing$EOIParser;
					this.$superInit$CombinatorialParsing$EOIParser = dnuCatcher("$superInit$CombinatorialParsing$EOIParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this.$enclosingObjects$CombinatorialParsing$EOIParser = enclosingObjects;
					this.$super$CombinatorialParsing$EOIParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`EOIParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["CombinatorialParsing`EOIParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`EOIParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`EOIParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$EOIParser = enclosingObjects;
						this.$super$CombinatorialParsing$EOIParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$EmptyParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`EmptyParser";
			this.name = "CombinatorialParsing`EmptyParser";
			this.header = "EmptyParser = CombinatorialParser ((* The parser that parses the empty input. It always succeeds. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`CombinatorialParsing`EmptyParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context ifError: blk = (\r	^nil\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$EmptyParser = (function () {
				var self = this;
				self.$super$CombinatorialParsing$EmptyParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$EmptyParser();
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				return nil;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`EmptyParser";
					this._$superInit$CombinatorialParsing$EmptyParser = $.$superInit$CombinatorialParsing$EmptyParser;
					this.$superInit$CombinatorialParsing$EmptyParser = dnuCatcher("$superInit$CombinatorialParsing$EmptyParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this.$enclosingObjects$CombinatorialParsing$EmptyParser = enclosingObjects;
					this.$super$CombinatorialParsing$EmptyParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`EmptyParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["CombinatorialParsing`EmptyParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`EmptyParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`EmptyParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$EmptyParser = enclosingObjects;
						this.$super$CombinatorialParsing$EmptyParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$ExecutableGrammar = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`ExecutableGrammar";
			this.name = "CombinatorialParsing`ExecutableGrammar";
			this.header = "ExecutableGrammar = CombinatorialParser ((* This class is intended to implement Parser\rCombinators. A ExecutableGrammar[T]\rreturns a value of type T after successful\rparsing.\r\rThe class is abstract. It does not implement\r the parsing routine parse:ifError: .\r \rIf parsing fails, parse:ifError: should call the error handling block\rpassed to it.\r\rConcrete subclasses should implement specific grammars.\r\rParsing is initiated by calling parse:ifError:. This routine takes a ReadStream[Object] as input.\rIf parsing fails, it is the caller''s responsibility to set the input stream back to its original position\r(Q: is this a good idea?).\rIf an error occurs, the error block passed in is called. *)| \r	forwardReferenceTable ::= Dictionary new.\r	protected  selfMirror <ObjectMirror> = ObjectMirror reflecting: self. \r|self setupForwardReferences.\r  self bindForwardReferences)";
			this.slots = [
				new SM("forwardReferenceTable", true, false),
				new SM("selfMirror", false, false)
			];
			this.methods = [
				new MM("superInit`CombinatorialParsing`ExecutableGrammar", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("bindForwardReferences", false, "bindForwardReferences = (\r   forwardReferenceTable values do:[:v | v bindingRoutine:[finalBindForwardReferences]].\r)"),
				new MM("finalBindForwardReferences", false, "finalBindForwardReferences = (\r      forwardReferenceTable keysAndValuesDo:[:k :v | | p |\r	p:: (selfMirror getSlot: k asSymbol ifFail:[]) reflecteeIfFail:[].\r	(p isKindOfCombinatorialParser) ifTrue:[\r		v bind: p.\r		p name: k (* a good place to name the productions *)\r	]]\r)"),
				new MM("setupForwardReferences", false, "setupForwardReferences = ( \r  (* go thru all non-nil instance variables and set them to a fresh forward reference *)\r(* If these do not correspond to productions, they will be overridden by the subclass *)\r  (selfMirror getClassIfFail:[]) slots do:[: slot <SlotMirror> |  | fref iv |\r	iv:: slot name.\r	fref::  ForwardReferenceParser new.\r	(selfMirror getSlot: iv asSymbol ifFail:[]) reflectee isNil ifTrue:[\r		forwardReferenceTable at: iv put: fref.\r		(* set iv to fref *)\r		selfMirror  setSlot: iv asSymbol  to: fref ifFail:[].\r		]\r	]\r	 \r)"),
				new MM("forwardReferenceTable", true, null),
				new MM("forwardReferenceTable:", true, null),
				new MM("selfMirror", true, null),
				new MM("setOnce`selfMirror:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$ExecutableGrammar = (function () {
				var self = this;
				self.$super$CombinatorialParsing$ExecutableGrammar$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$ExecutableGrammar();
				self._$forwardReferenceTable$($0.$Dictionary.call(self.$enclosingObjects$CombinatorialParsing$ExecutableGrammar[0]).$new());
				self._$setOnce$selfMirror$($0.$ObjectMirror.call(self.$enclosingObjects$CombinatorialParsing$ExecutableGrammar[0]).$reflecting$(self));
				self._$setupForwardReferences();
				self._$bindForwardReferences();
				return self;
			});
			this.$bindForwardReferences = (function () {
				var self = this;
				self._$forwardReferenceTable().$values().$do$((function ($v) {
					return $v.$bindingRoutine$((function () {
						return self._$finalBindForwardReferences();
					}));
				}));
				return self;
			});
			this.$finalBindForwardReferences = (function () {
				var self = this;
				self._$forwardReferenceTable().$keysAndValuesDo$((function ($k, $v) {
					var $p = nil;
					$p = self._$selfMirror().$getSlot$ifFail$($k.$asSymbol(), (function () {
						return nil;
					})).$reflecteeIfFail$((function () {
						return nil;
					}));
					return $p.$isKindOfCombinatorialParser().$ifTrue$((function () {
						$v.$bind$($p);
						return $p.$name$($k);
					}));
				}));
				return self;
			});
			this.$setupForwardReferences = (function () {
				var self = this;
				self._$selfMirror().$getClassIfFail$((function () {
					return nil;
				})).$slots().$do$((function ($slot) {
					var $fref = nil;
					var $iv = nil;
					$iv = $slot.$name();
					$fref = self.$enclosingObjects$CombinatorialParsing$ExecutableGrammar[0]._$ForwardReferenceParser().$new();
					return self._$selfMirror().$getSlot$ifFail$($iv.$asSymbol(), (function () {
						return nil;
					})).$reflectee().$isNil().$ifTrue$((function () {
						self._$forwardReferenceTable().$at$put$($iv, $fref);
						return self._$selfMirror().$setSlot$to$ifFail$($iv.$asSymbol(), $fref, (function () {
							return nil;
						}));
					}));
				}));
				return self;
			});
			this.$forwardReferenceTable = (function () {
				return this.$forwardReferenceTable$slot;
			});
			this.$forwardReferenceTable$ = (function (v) {
				this.$forwardReferenceTable$slot = v;
				return this;
			});
			this.$selfMirror = (function () {
				return this.$selfMirror$slot;
			});
			this.$setOnce$selfMirror$ = (function (v) {
				this.$selfMirror$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`ExecutableGrammar";
					this._$superInit$CombinatorialParsing$ExecutableGrammar = $.$superInit$CombinatorialParsing$ExecutableGrammar;
					this.$superInit$CombinatorialParsing$ExecutableGrammar = dnuCatcher("$superInit$CombinatorialParsing$ExecutableGrammar");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$bindForwardReferences = $.$bindForwardReferences;
					this.$bindForwardReferences = dnuCatcher("$bindForwardReferences");
					this._$finalBindForwardReferences = $.$finalBindForwardReferences;
					this.$finalBindForwardReferences = dnuCatcher("$finalBindForwardReferences");
					this._$setupForwardReferences = $.$setupForwardReferences;
					this.$setupForwardReferences = dnuCatcher("$setupForwardReferences");
					this._$forwardReferenceTable = $.$forwardReferenceTable;
					this.$forwardReferenceTable = dnuCatcher("$forwardReferenceTable");
					this._$forwardReferenceTable$ = $.$forwardReferenceTable$;
					this.$forwardReferenceTable$ = dnuCatcher("$forwardReferenceTable$");
					this._$selfMirror = $.$selfMirror;
					this.$selfMirror = dnuCatcher("$selfMirror");
					this._$setOnce$selfMirror$ = $.$setOnce$selfMirror$;
					this.$setOnce$selfMirror$ = dnuCatcher("$setOnce$selfMirror$");
					this.$enclosingObjects$CombinatorialParsing$ExecutableGrammar = enclosingObjects;
					this.$super$CombinatorialParsing$ExecutableGrammar$slot = runtimeSuperclass;
					this["CombinatorialParsing`ExecutableGrammar"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$forwardReferenceTable$slot = nil;
						this.$selfMirror$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`ExecutableGrammar"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`ExecutableGrammar";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`ExecutableGrammar";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$ExecutableGrammar = enclosingObjects;
						this.$super$CombinatorialParsing$ExecutableGrammar = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$FailingParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`FailingParser";
			this.name = "CombinatorialParsing`FailingParser";
			this.header = "FailingParser = CombinatorialParser ((* The parser that always fails. It never parses anything. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`CombinatorialParsing`FailingParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context ifError: blk = (\r	^blk value: 'Failing Parser invoked' value: input position\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$FailingParser = (function () {
				var self = this;
				self.$super$CombinatorialParsing$FailingParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$FailingParser();
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				return $blk.$value$value$("Failing Parser invoked", $input.$position());
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`FailingParser";
					this._$superInit$CombinatorialParsing$FailingParser = $.$superInit$CombinatorialParsing$FailingParser;
					this.$superInit$CombinatorialParsing$FailingParser = dnuCatcher("$superInit$CombinatorialParsing$FailingParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this.$enclosingObjects$CombinatorialParsing$FailingParser = enclosingObjects;
					this.$super$CombinatorialParsing$FailingParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`FailingParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["CombinatorialParsing`FailingParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`FailingParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`FailingParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$FailingParser = enclosingObjects;
						this.$super$CombinatorialParsing$FailingParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$ForwardReferenceParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`ForwardReferenceParser";
			this.name = "CombinatorialParsing`ForwardReferenceParser";
			this.header = "ForwardReferenceParser = CombinatorialParser (|\r	forwardee\r	public bindingRoutine\r|)";
			this.slots = [
				new SM("forwardee", true, false),
				new SM("bindingRoutine", true, false)
			];
			this.methods = [
				new MM("superInit`CombinatorialParsing`ForwardReferenceParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("bind:", false, "public bind: p <CombinatorialParser> = (\r	(* as a precaution, only bind if p is a parser *)\r	(p isKindOfCombinatorialParser) ifTrue: [forwardee: p]\r)"),
				new MM("parserToForwardTo", false, "public parserToForwardTo ^<CombinatorialParser> = (\r	forwardee isNil ifTrue: [bindingRoutine value].\r	^forwardee\r)"),
				new MM("ultimateParser", false, "public ultimateParser ^<CombinatorialParser> = (\r	^parserToForwardTo ultimateParser\r)"),
				new MM("&", false, "public & p <CombinatorialParser> ^ <CombinatorialParser> = (\r	^forwardee isNil\r		ifTrue: [super & p]\r		ifFalse: [forwardee & p]\r)"),
				new MM("opt", false, "public opt = (\r	^forwardee isNil\r		ifTrue: [super opt]\r		ifFalse: [forwardee opt]\r)"),
				new MM("wrapper:", false, "public wrapper: blk ^<CombinatorialParser> = (\r	(* see comments in ForwardingWrappingParser *)\r	^ForwardingWrappingParser new wrapParser: self withWrapper: blk\r)"),
				new MM("|", false, "public | p = (\r	^forwardee isNil\r		ifTrue: [super | p]\r		ifFalse: [forwardee | p]\r)"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context  ifError: blk = (\r	^parserToForwardTo parse: input inContext: context  ifError: blk.\r)"),
				new MM("forwardee", true, null),
				new MM("forwardee:", true, null),
				new MM("bindingRoutine", true, null),
				new MM("bindingRoutine:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$ForwardReferenceParser = (function () {
				var self = this;
				self.$super$CombinatorialParsing$ForwardReferenceParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$ForwardReferenceParser();
				return self;
			});
			this.$bind$ = (function ($p) {
				var self = this;
				if ($p.$isKindOfCombinatorialParser()) {
					self._$forwardee$($p);
				} else {
					nil;
				};
				return self;
			});
			this.$parserToForwardTo = (function () {
				var self = this;
				if (self._$forwardee().$isNil()) {
					self._$bindingRoutine().$value();
				} else {
					nil;
				};
				return self._$forwardee();
			});
			this.$ultimateParser = (function () {
				var self = this;
				return self._$parserToForwardTo().$ultimateParser();
			});
			this.$$amp = (function ($p) {
				var self = this;
				return self._$forwardee().$isNil().$ifTrue$ifFalse$((function () {
					return self.$super$CombinatorialParsing$ForwardReferenceParser$slot._$$amp.call(self, $p);
				}), (function () {
					return self._$forwardee().$$amp($p);
				}));
			});
			this.$opt = (function () {
				var self = this;
				return self._$forwardee().$isNil().$ifTrue$ifFalse$((function () {
					return self.$super$CombinatorialParsing$ForwardReferenceParser$slot._$opt.call(self);
				}), (function () {
					return self._$forwardee().$opt();
				}));
			});
			this.$wrapper$ = (function ($blk) {
				var self = this;
				return self.$enclosingObjects$CombinatorialParsing$ForwardReferenceParser[0]._$ForwardingWrappingParser().$new().$wrapParser$withWrapper$(self, $blk);
			});
			this.$$pipe = (function ($p) {
				var self = this;
				return self._$forwardee().$isNil().$ifTrue$ifFalse$((function () {
					return self.$super$CombinatorialParsing$ForwardReferenceParser$slot._$$pipe.call(self, $p);
				}), (function () {
					return self._$forwardee().$$pipe($p);
				}));
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				return self._$parserToForwardTo().$parse$inContext$ifError$($input, $context, $blk);
			});
			this.$forwardee = (function () {
				return this.$forwardee$slot;
			});
			this.$forwardee$ = (function (v) {
				this.$forwardee$slot = v;
				return this;
			});
			this.$bindingRoutine = (function () {
				return this.$bindingRoutine$slot;
			});
			this.$bindingRoutine$ = (function (v) {
				this.$bindingRoutine$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`ForwardReferenceParser";
					this._$superInit$CombinatorialParsing$ForwardReferenceParser = $.$superInit$CombinatorialParsing$ForwardReferenceParser;
					this.$superInit$CombinatorialParsing$ForwardReferenceParser = dnuCatcher("$superInit$CombinatorialParsing$ForwardReferenceParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$bind$ = this._$bind$ = $.$bind$;
					this.$parserToForwardTo = this._$parserToForwardTo = $.$parserToForwardTo;
					this.$ultimateParser = this._$ultimateParser = $.$ultimateParser;
					this.$$amp = this._$$amp = $.$$amp;
					this.$opt = this._$opt = $.$opt;
					this.$wrapper$ = this._$wrapper$ = $.$wrapper$;
					this.$$pipe = this._$$pipe = $.$$pipe;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this._$forwardee = $.$forwardee;
					this.$forwardee = dnuCatcher("$forwardee");
					this._$forwardee$ = $.$forwardee$;
					this.$forwardee$ = dnuCatcher("$forwardee$");
					this.$bindingRoutine = this._$bindingRoutine = $.$bindingRoutine;
					this.$bindingRoutine$ = this._$bindingRoutine$ = $.$bindingRoutine$;
					this.$enclosingObjects$CombinatorialParsing$ForwardReferenceParser = enclosingObjects;
					this.$super$CombinatorialParsing$ForwardReferenceParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`ForwardReferenceParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$forwardee$slot = nil;
						this.$bindingRoutine$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`ForwardReferenceParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`ForwardReferenceParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`ForwardReferenceParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$ForwardReferenceParser = enclosingObjects;
						this.$super$CombinatorialParsing$ForwardReferenceParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$ForwardingWrappingParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`ForwardingWrappingParser";
			this.name = "CombinatorialParsing`ForwardingWrappingParser";
			this.header = "ForwardingWrappingParser = WrappingParser ((* When a ForwardingReferenceParser is wrapped using the wrapper:  combinator, we don't know what the  arity the wrapping block should have - it will depend on the arity of the parser we forward to.  We cannot determine whether to use the implementation of wrapper: given in ordinary parsers, which forwards to the wrap: combinator (designed for block with arity 1) or the implementation used in SequentialParsers, (designed for n-ary blocks, where n is the length of the list of parsers the SequentialParser sequences). Instead, we must defer the decision on how to handle the situation until the parser tree is complete. This is accomplished by using this class as the result of the wrapper: combinator for ForwardReferenceParser.  \r\rInstances of this class determiine how to act when asked to parse. At that time, the parse tree must be complete, and they can ask the ultimate parser for a wrappin parser that is suitable configured, and forward requests to it. *)|\r	wrappingParser\r|)";
			this.slots = [new SM("wrappingParser", true, false)];
			this.methods = [
				new MM("superInit`CombinatorialParsing`ForwardingWrappingParser", true, "WrappingParser"),
				new MM("instance`initializer", true, "WrappingParser"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context ifError: blk = (\r	^trueWrappingParser parse: input inContext: context ifError: blk \r)"),
				new MM("trueWrappingParser", false, "trueWrappingParser ^<WrappingParser> = (\r	wrappingParser isNil ifTrue:\r		[wrappingParser:: parser ultimateParser wrapper: wrapperBlock].\r	^wrappingParser\r)"),
				new MM("wrappingParser", true, null),
				new MM("wrappingParser:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$ForwardingWrappingParser = (function () {
				var self = this;
				self.$super$CombinatorialParsing$ForwardingWrappingParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$ForwardingWrappingParser();
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				return self._$trueWrappingParser().$parse$inContext$ifError$($input, $context, $blk);
			});
			this.$trueWrappingParser = (function () {
				var self = this;
				if (self._$wrappingParser().$isNil()) {
					self._$wrappingParser$(self._$parser().$ultimateParser().$wrapper$(self._$wrapperBlock()));
				} else {
					nil;
				};
				return self._$wrappingParser();
			});
			this.$wrappingParser = (function () {
				return this.$wrappingParser$slot;
			});
			this.$wrappingParser$ = (function (v) {
				this.$wrappingParser$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`ForwardingWrappingParser";
					this._$superInit$CombinatorialParsing$ForwardingWrappingParser = $.$superInit$CombinatorialParsing$ForwardingWrappingParser;
					this.$superInit$CombinatorialParsing$ForwardingWrappingParser = dnuCatcher("$superInit$CombinatorialParsing$ForwardingWrappingParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this._$trueWrappingParser = $.$trueWrappingParser;
					this.$trueWrappingParser = dnuCatcher("$trueWrappingParser");
					this._$wrappingParser = $.$wrappingParser;
					this.$wrappingParser = dnuCatcher("$wrappingParser");
					this._$wrappingParser$ = $.$wrappingParser$;
					this.$wrappingParser$ = dnuCatcher("$wrappingParser$");
					this.$enclosingObjects$CombinatorialParsing$ForwardingWrappingParser = enclosingObjects;
					this.$super$CombinatorialParsing$ForwardingWrappingParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`ForwardingWrappingParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$wrappingParser$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`ForwardingWrappingParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`ForwardingWrappingParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`ForwardingWrappingParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$ForwardingWrappingParser = enclosingObjects;
						this.$super$CombinatorialParsing$ForwardingWrappingParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$NamedWrappingParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`NamedWrappingParser";
			this.name = "CombinatorialParsing`NamedWrappingParser";
			this.header = "NamedWrappingParser = WrappingParser ((* This is exactly the same as a WrappingParser, but it passes itself down\rin the context parameter, to provide more meaningful error messages. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`CombinatorialParsing`NamedWrappingParser", true, "WrappingParser"),
				new MM("instance`initializer", true, "WrappingParser"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context ifError: blk = (\r	^wrapperBlock value: (parser parse: input inContext: self ifError: blk )\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$NamedWrappingParser = (function () {
				var self = this;
				self.$super$CombinatorialParsing$NamedWrappingParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$NamedWrappingParser();
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				return self._$wrapperBlock().$value$(self._$parser().$parse$inContext$ifError$($input, self, $blk));
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`NamedWrappingParser";
					this._$superInit$CombinatorialParsing$NamedWrappingParser = $.$superInit$CombinatorialParsing$NamedWrappingParser;
					this.$superInit$CombinatorialParsing$NamedWrappingParser = dnuCatcher("$superInit$CombinatorialParsing$NamedWrappingParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this.$enclosingObjects$CombinatorialParsing$NamedWrappingParser = enclosingObjects;
					this.$super$CombinatorialParsing$NamedWrappingParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`NamedWrappingParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["CombinatorialParsing`NamedWrappingParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`NamedWrappingParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`NamedWrappingParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$NamedWrappingParser = enclosingObjects;
						this.$super$CombinatorialParsing$NamedWrappingParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$NegatingParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`NegatingParser";
			this.name = "CombinatorialParsing`NegatingParser";
			this.header = "NegatingParser withSubparser: p = CombinatorialParser ((* A parser that implements the 'not' combinator, as in Ford's PEGs. It contains a parser p, and succeeds if p fails and vice versa. It does not move the input forward if it succeeds. *)| subparser <CombinatorialParser> = p. |)";
			this.slots = [new SM("subparser", false, false)];
			this.methods = [
				new MM("superInit`CombinatorialParsing`NegatingParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: ctxt ifError: blk = (\r	| rewindPosition |\r	rewindPosition:: input position.\r	subparser parse: input inContext: ctxt ifError: [:msg :pos | input position: rewindPosition. ^true].\r	blk value: 'not combinator failed' value: rewindPosition.\r)"),
				new MM("subparser", true, null),
				new MM("setOnce`subparser:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$NegatingParser = (function ($p) {
				var self = this;
				self.$super$CombinatorialParsing$NegatingParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($p) {
				var self = this;
				self._$superInit$CombinatorialParsing$NegatingParser($p);
				self._$setOnce$subparser$($p);
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $ctxt, $blk) {
				var self = this;
				var NLR = new Object();
				try {
					var $rewindPosition = nil;
					$rewindPosition = $input.$position();
					self._$subparser().$parse$inContext$ifError$($input, $ctxt, (function ($msg, $pos) {
						$input.$position$($rewindPosition);
						{
							NLR.value = true;
							throw NLR;
						};
					}));
					$blk.$value$value$("not combinator failed", $rewindPosition);
					return self;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$subparser = (function () {
				return this.$subparser$slot;
			});
			this.$setOnce$subparser$ = (function (v) {
				this.$subparser$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`NegatingParser";
					this._$superInit$CombinatorialParsing$NegatingParser = $.$superInit$CombinatorialParsing$NegatingParser;
					this.$superInit$CombinatorialParsing$NegatingParser = dnuCatcher("$superInit$CombinatorialParsing$NegatingParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this._$subparser = $.$subparser;
					this.$subparser = dnuCatcher("$subparser");
					this._$setOnce$subparser$ = $.$setOnce$subparser$;
					this.$setOnce$subparser$ = dnuCatcher("$setOnce$subparser$");
					this.$enclosingObjects$CombinatorialParsing$NegatingParser = enclosingObjects;
					this.$super$CombinatorialParsing$NegatingParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`NegatingParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$subparser$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`NegatingParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`NegatingParser";
				this.slots = [];
				this.methods = [new MM("withSubparser:", true, null)];
				this.nestedClasses = [];
				this.$withSubparser$ = (function ($p) {
					return (new this.nonMeta.basicNew()).$instance$initializer($p);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`NegatingParser";
						this.$withSubparser$ = this._$withSubparser$ = $.$withSubparser$;
						this.$enclosingObjects$CombinatorialParsing$NegatingParser = enclosingObjects;
						this.$super$CombinatorialParsing$NegatingParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$ParserContext = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`ParserContext";
			this.name = "CombinatorialParsing`ParserContext";
			this.header = "ParserContext = ((* This class defines a context that is shared among a set of combinatorial parsers during a parse. The context can be used to manage information on parsing errors: rather than always report the latest failure that occurred, we can report the one that occurred deepest in the input stream, or implement some other policy - as long as we can record what failures took place.\r\rIn addition, this class could be used to support context-sensitive parsing. \r*)| failures ::= OrderedCollection new. |)";
			this.slots = [new SM("failures", true, false)];
			this.methods = [
				new MM("superInit`CombinatorialParsing`ParserContext", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("errorMessage", false, "errorMessage = (\r\r\rfailures isEmpty ifTrue:[^''].\r^failures last first\r)"),
				new MM("errorPosition", false, "errorPosition = (\r\r\rfailures isEmpty ifTrue:[^-1].\r^failures last last\r)"),
				new MM("recordFailure:", false, "recordFailure: f = (\r\r(failures isEmpty or: [ failures last last <= f last ])\r		ifTrue: [ failures addLast: f]\r)"),
				new MM("failures", true, null),
				new MM("failures:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$ParserContext = (function () {
				var self = this;
				self.$super$CombinatorialParsing$ParserContext$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$ParserContext();
				self._$failures$($0.$OrderedCollection.call(self.$enclosingObjects$CombinatorialParsing$ParserContext[0]).$new());
				return self;
			});
			this.$errorMessage = (function () {
				var self = this;
				if (self._$failures().$isEmpty()) {
					return "";
				} else {
					nil;
				};
				return self._$failures().$last().$first();
			});
			this.$errorPosition = (function () {
				var self = this;
				if (self._$failures().$isEmpty()) {
					return -1;
				} else {
					nil;
				};
				return self._$failures().$last().$last();
			});
			this.$recordFailure$ = (function ($f) {
				var self = this;
				if (self._$failures().$isEmpty() || self._$failures().$last().$last().$$less$equal($f.$last())) {
					self._$failures().$addLast$($f);
				} else {
					nil;
				};
				return self;
			});
			this.$failures = (function () {
				return this.$failures$slot;
			});
			this.$failures$ = (function (v) {
				this.$failures$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`ParserContext";
					this._$superInit$CombinatorialParsing$ParserContext = $.$superInit$CombinatorialParsing$ParserContext;
					this.$superInit$CombinatorialParsing$ParserContext = dnuCatcher("$superInit$CombinatorialParsing$ParserContext");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$errorMessage = $.$errorMessage;
					this.$errorMessage = dnuCatcher("$errorMessage");
					this._$errorPosition = $.$errorPosition;
					this.$errorPosition = dnuCatcher("$errorPosition");
					this._$recordFailure$ = $.$recordFailure$;
					this.$recordFailure$ = dnuCatcher("$recordFailure$");
					this._$failures = $.$failures;
					this.$failures = dnuCatcher("$failures");
					this._$failures$ = $.$failures$;
					this.$failures$ = dnuCatcher("$failures$");
					this.$enclosingObjects$CombinatorialParsing$ParserContext = enclosingObjects;
					this.$super$CombinatorialParsing$ParserContext$slot = runtimeSuperclass;
					this["CombinatorialParsing`ParserContext"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$failures$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`ParserContext"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`ParserContext";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`ParserContext";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$ParserContext = enclosingObjects;
						this.$super$CombinatorialParsing$ParserContext = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$ParserError = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`ParserError";
			this.name = "CombinatorialParsing`ParserError";
			this.header = "ParserError message: m position: p = Error (| \r message <String> = m.\r position <Integer> = p.\r |)";
			this.slots = [
				new SM("message", false, false),
				new SM("position", false, false)
			];
			this.methods = [
				new MM("superInit`CombinatorialParsing`ParserError", true, "Error"),
				new MM("instance`initializer", true, "Error"),
				new MM("description", false, "description = (\r	^'ParserError: ', message\r)"),
				new MM("message", true, null),
				new MM("setOnce`message:", true, null),
				new MM("position", true, null),
				new MM("setOnce`position:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$ParserError = (function ($m, $p) {
				var self = this;
				self.$super$CombinatorialParsing$ParserError$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($m, $p) {
				var self = this;
				self._$superInit$CombinatorialParsing$ParserError($m, $p);
				self._$setOnce$message$($m);
				self._$setOnce$position$($p);
				return self;
			});
			this.$description = (function () {
				var self = this;
				return ("ParserError: ").$$comma(self._$message());
			});
			this.$message = (function () {
				return this.$message$slot;
			});
			this.$setOnce$message$ = (function (v) {
				this.$message$slot = v;
				return this;
			});
			this.$position = (function () {
				return this.$position$slot;
			});
			this.$setOnce$position$ = (function (v) {
				this.$position$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`ParserError";
					this._$superInit$CombinatorialParsing$ParserError = $.$superInit$CombinatorialParsing$ParserError;
					this.$superInit$CombinatorialParsing$ParserError = dnuCatcher("$superInit$CombinatorialParsing$ParserError");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$description = $.$description;
					this.$description = dnuCatcher("$description");
					this._$message = $.$message;
					this.$message = dnuCatcher("$message");
					this._$setOnce$message$ = $.$setOnce$message$;
					this.$setOnce$message$ = dnuCatcher("$setOnce$message$");
					this._$position = $.$position;
					this.$position = dnuCatcher("$position");
					this._$setOnce$position$ = $.$setOnce$position$;
					this.$setOnce$position$ = dnuCatcher("$setOnce$position$");
					this.$enclosingObjects$CombinatorialParsing$ParserError = enclosingObjects;
					this.$super$CombinatorialParsing$ParserError$slot = runtimeSuperclass;
					this["CombinatorialParsing`ParserError"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$message$slot = nil;
						this.$position$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`ParserError"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`ParserError";
				this.slots = [];
				this.methods = [new MM("message:position:", true, null)];
				this.nestedClasses = [];
				this.$message$position$ = (function ($m, $p) {
					return (new this.nonMeta.basicNew()).$instance$initializer($m, $p);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`ParserError";
						this.$message$position$ = this._$message$position$ = $.$message$position$;
						this.$enclosingObjects$CombinatorialParsing$ParserError = enclosingObjects;
						this.$super$CombinatorialParsing$ParserError = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$PlusParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`PlusParser";
			this.name = "CombinatorialParsing`PlusParser";
			this.header = "PlusParser withSubparser: p = CombinatorialParser ((* An attempt to optimize the + operator by having a dedicated parser for it. *)| subparser = p. |)";
			this.slots = [new SM("subparser", false, false)];
			this.methods = [
				new MM("superInit`CombinatorialParsing`PlusParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context ifError: blk = (\r	| rewindPosition results nextResult |\r	results:: OrderedCollection new.\r	results add: (subparser parse: input inContext: context ifError: blk).\r	[ \r		rewindPosition: input position.\r		nextResult:: subparser\r			parse: input \r			inContext: context\r			ifError: [:msg :pos | \r				input position: rewindPosition.\r				^results].\r		results add: nextResult.\r	] repeat.\r)"),
				new MM("subparser", true, null),
				new MM("setOnce`subparser:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$PlusParser = (function ($p) {
				var self = this;
				self.$super$CombinatorialParsing$PlusParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($p) {
				var self = this;
				self._$superInit$CombinatorialParsing$PlusParser($p);
				self._$setOnce$subparser$($p);
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				var NLR = new Object();
				try {
					var $rewindPosition = nil;
					var $results = nil;
					var $nextResult = nil;
					$results = $0.$OrderedCollection.call(self.$enclosingObjects$CombinatorialParsing$PlusParser[0]).$new();
					$results.$add$(self._$subparser().$parse$inContext$ifError$($input, $context, $blk));
					{
						nil;
						$rewindPosition = $input.$position();
						$nextResult = self._$subparser().$parse$inContext$ifError$($input, $context, (function ($msg, $pos) {
							$input.$position$($rewindPosition);
							{
								NLR.value = $results;
								throw NLR;
							};
						}));
						$results.$add$($nextResult);
						for (; true; ) {
							nil;
							$rewindPosition = $input.$position();
							$nextResult = self._$subparser().$parse$inContext$ifError$($input, $context, (function ($msg, $pos) {
								$input.$position$($rewindPosition);
								{
									NLR.value = $results;
									throw NLR;
								};
							}));
							$results.$add$($nextResult);
						};
					};
					return self;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$subparser = (function () {
				return this.$subparser$slot;
			});
			this.$setOnce$subparser$ = (function (v) {
				this.$subparser$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`PlusParser";
					this._$superInit$CombinatorialParsing$PlusParser = $.$superInit$CombinatorialParsing$PlusParser;
					this.$superInit$CombinatorialParsing$PlusParser = dnuCatcher("$superInit$CombinatorialParsing$PlusParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this._$subparser = $.$subparser;
					this.$subparser = dnuCatcher("$subparser");
					this._$setOnce$subparser$ = $.$setOnce$subparser$;
					this.$setOnce$subparser$ = dnuCatcher("$setOnce$subparser$");
					this.$enclosingObjects$CombinatorialParsing$PlusParser = enclosingObjects;
					this.$super$CombinatorialParsing$PlusParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`PlusParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$subparser$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`PlusParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`PlusParser";
				this.slots = [];
				this.methods = [new MM("withSubparser:", true, null)];
				this.nestedClasses = [];
				this.$withSubparser$ = (function ($p) {
					return (new this.nonMeta.basicNew()).$instance$initializer($p);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`PlusParser";
						this.$withSubparser$ = this._$withSubparser$ = $.$withSubparser$;
						this.$enclosingObjects$CombinatorialParsing$PlusParser = enclosingObjects;
						this.$super$CombinatorialParsing$PlusParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$PredicateTokenParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`PredicateTokenParser";
			this.name = "CombinatorialParsing`PredicateTokenParser";
			this.header = "PredicateTokenParser = CombinatorialParser ((* Parses a single token matching a given\rpredicate. *)| predicate errMsg |)";
			this.slots = [
				new SM("predicate", true, false),
				new SM("errMsg", true, false)
			];
			this.methods = [
				new MM("superInit`CombinatorialParsing`PredicateTokenParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("accept:errorMsg:", false, "public accept: pred errorMsg: err = (\r	predicate: pred.\r	errMsg: err.\r)"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context  ifError: blk = (\r	| token |\r	token:: input nextIfAbsent: [blk value:errMsg value: input position-1].\r	(predicate value: token) \r		ifFalse: [blk value: errMsg value: input position-1 ].\r	^token.\r)"),
				new MM("predicate", true, null),
				new MM("predicate:", true, null),
				new MM("errMsg", true, null),
				new MM("errMsg:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$PredicateTokenParser = (function () {
				var self = this;
				self.$super$CombinatorialParsing$PredicateTokenParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$PredicateTokenParser();
				return self;
			});
			this.$accept$errorMsg$ = (function ($pred, $err) {
				var self = this;
				self._$predicate$($pred);
				self._$errMsg$($err);
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				var $token = nil;
				$token = $input.$nextIfAbsent$((function () {
					return $blk.$value$value$(self._$errMsg(), $input.$position() - 1);
				}));
				if (!self._$predicate().$value$($token)) {
					$blk.$value$value$(self._$errMsg(), $input.$position() - 1);
				} else {
					nil;
				};
				return $token;
			});
			this.$predicate = (function () {
				return this.$predicate$slot;
			});
			this.$predicate$ = (function (v) {
				this.$predicate$slot = v;
				return this;
			});
			this.$errMsg = (function () {
				return this.$errMsg$slot;
			});
			this.$errMsg$ = (function (v) {
				this.$errMsg$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`PredicateTokenParser";
					this._$superInit$CombinatorialParsing$PredicateTokenParser = $.$superInit$CombinatorialParsing$PredicateTokenParser;
					this.$superInit$CombinatorialParsing$PredicateTokenParser = dnuCatcher("$superInit$CombinatorialParsing$PredicateTokenParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$accept$errorMsg$ = this._$accept$errorMsg$ = $.$accept$errorMsg$;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this._$predicate = $.$predicate;
					this.$predicate = dnuCatcher("$predicate");
					this._$predicate$ = $.$predicate$;
					this.$predicate$ = dnuCatcher("$predicate$");
					this._$errMsg = $.$errMsg;
					this.$errMsg = dnuCatcher("$errMsg");
					this._$errMsg$ = $.$errMsg$;
					this.$errMsg$ = dnuCatcher("$errMsg$");
					this.$enclosingObjects$CombinatorialParsing$PredicateTokenParser = enclosingObjects;
					this.$super$CombinatorialParsing$PredicateTokenParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`PredicateTokenParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$predicate$slot = nil;
						this.$errMsg$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`PredicateTokenParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`PredicateTokenParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`PredicateTokenParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$PredicateTokenParser = enclosingObjects;
						this.$super$CombinatorialParsing$PredicateTokenParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$SequentialParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`SequentialParser";
			this.name = "CombinatorialParsing`SequentialParser";
			this.header = "SequentialParser withSubparsers: s = CombinatorialParser ((* A parser that activates a sequence of subparsers (P1, ,Pn).\r\rOne might think that it would be sufficient to define a class that\rcombined two parsers in sequence, corresponding to the &\roperator, just like AlternatingParser corresponds to the | operator.\rHowever, grammar productions typically involve several elements, so\rthe typical sequencing operation is n-ary *)| subparsers <Array[CombinatorialParser]> = s. |)";
			this.slots = [new SM("subparsers", false, false)];
			this.methods = [
				new MM("superInit`CombinatorialParsing`SequentialParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM(",", false, "public , p <CombinatorialParser> ^<SequentialParser> = (\r	^SequentialParser withSubparsers: (subparsers copyWith: p)\r)"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context ifError: blk = (\r	^subparsers\r		collect: [:p | p parse: input inContext: context ifError: blk]\r)"),
				new MM("wrapper:", false, "public wrapper: block = (\r	(* Untypesafe, but convenient. We can dynamically ensure that the arity of the incoming block matches that of this parser. Given that this routine is only called during parser construction, dynamic failure of the asserts is sufficient. We cannot ensure type correctness of the arguments to the block using this interface. One can use the more verbose followedBy: combinators if that is deemed essential. *)\r	assert: [block numArgs = subparsers size]\r		message: 'Block arity does not match production arity'.\r	^self wrap: [:results | block valueWithArguments: results asArray]      \r)"),
				new MM("subparsers", true, null),
				new MM("setOnce`subparsers:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$SequentialParser = (function ($s) {
				var self = this;
				self.$super$CombinatorialParsing$SequentialParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($s) {
				var self = this;
				self._$superInit$CombinatorialParsing$SequentialParser($s);
				self._$setOnce$subparsers$($s);
				return self;
			});
			this.$$comma = (function ($p) {
				var self = this;
				return self.$enclosingObjects$CombinatorialParsing$SequentialParser[0]._$SequentialParser().$withSubparsers$(self._$subparsers().$copyWith$($p));
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				return self._$subparsers().$collect$((function ($p) {
					return $p.$parse$inContext$ifError$($input, $context, $blk);
				}));
			});
			this.$wrapper$ = (function ($block) {
				var self = this;
				self._$assert$message$((function () {
					return $block.$numArgs().$$equal(self._$subparsers().$size());
				}), "Block arity does not match production arity");
				return self._$wrap$((function ($results) {
					return $block.$valueWithArguments$($results.$asArray());
				}));
			});
			this.$subparsers = (function () {
				return this.$subparsers$slot;
			});
			this.$setOnce$subparsers$ = (function (v) {
				this.$subparsers$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`SequentialParser";
					this._$superInit$CombinatorialParsing$SequentialParser = $.$superInit$CombinatorialParsing$SequentialParser;
					this.$superInit$CombinatorialParsing$SequentialParser = dnuCatcher("$superInit$CombinatorialParsing$SequentialParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$$comma = this._$$comma = $.$$comma;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this.$wrapper$ = this._$wrapper$ = $.$wrapper$;
					this._$subparsers = $.$subparsers;
					this.$subparsers = dnuCatcher("$subparsers");
					this._$setOnce$subparsers$ = $.$setOnce$subparsers$;
					this.$setOnce$subparsers$ = dnuCatcher("$setOnce$subparsers$");
					this.$enclosingObjects$CombinatorialParsing$SequentialParser = enclosingObjects;
					this.$super$CombinatorialParsing$SequentialParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`SequentialParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$subparsers$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`SequentialParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`SequentialParser";
				this.slots = [];
				this.methods = [new MM("withSubparsers:", true, null)];
				this.nestedClasses = [];
				this.$withSubparsers$ = (function ($s) {
					return (new this.nonMeta.basicNew()).$instance$initializer($s);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`SequentialParser";
						this.$withSubparsers$ = this._$withSubparsers$ = $.$withSubparsers$;
						this.$enclosingObjects$CombinatorialParsing$SequentialParser = enclosingObjects;
						this.$super$CombinatorialParsing$SequentialParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$StarParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`StarParser";
			this.name = "CombinatorialParsing`StarParser";
			this.header = "StarParser withSubparser: p = CombinatorialParser ((* An attempt to optimize the * operator by having a dedicated parser for it. *)| subparser = p. |)";
			this.slots = [new SM("subparser", false, false)];
			this.methods = [
				new MM("superInit`CombinatorialParsing`StarParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context ifError: blk = (\r	| rewindPosition results nextResult |\r	results:: OrderedCollection new.\r	[ \r		rewindPosition: input position.\r		nextResult:: subparser\r			parse: input \r			inContext: context\r			ifError: [:msg :pos | \r				input position: rewindPosition.\r				^results].\r		results add: nextResult.\r	] repeat.\r)"),
				new MM("subparser", true, null),
				new MM("setOnce`subparser:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$StarParser = (function ($p) {
				var self = this;
				self.$super$CombinatorialParsing$StarParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($p) {
				var self = this;
				self._$superInit$CombinatorialParsing$StarParser($p);
				self._$setOnce$subparser$($p);
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				var NLR = new Object();
				try {
					var $rewindPosition = nil;
					var $results = nil;
					var $nextResult = nil;
					$results = $0.$OrderedCollection.call(self.$enclosingObjects$CombinatorialParsing$StarParser[0]).$new();
					{
						nil;
						$rewindPosition = $input.$position();
						$nextResult = self._$subparser().$parse$inContext$ifError$($input, $context, (function ($msg, $pos) {
							$input.$position$($rewindPosition);
							{
								NLR.value = $results;
								throw NLR;
							};
						}));
						$results.$add$($nextResult);
						for (; true; ) {
							nil;
							$rewindPosition = $input.$position();
							$nextResult = self._$subparser().$parse$inContext$ifError$($input, $context, (function ($msg, $pos) {
								$input.$position$($rewindPosition);
								{
									NLR.value = $results;
									throw NLR;
								};
							}));
							$results.$add$($nextResult);
						};
					};
					return self;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$subparser = (function () {
				return this.$subparser$slot;
			});
			this.$setOnce$subparser$ = (function (v) {
				this.$subparser$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`StarParser";
					this._$superInit$CombinatorialParsing$StarParser = $.$superInit$CombinatorialParsing$StarParser;
					this.$superInit$CombinatorialParsing$StarParser = dnuCatcher("$superInit$CombinatorialParsing$StarParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this._$subparser = $.$subparser;
					this.$subparser = dnuCatcher("$subparser");
					this._$setOnce$subparser$ = $.$setOnce$subparser$;
					this.$setOnce$subparser$ = dnuCatcher("$setOnce$subparser$");
					this.$enclosingObjects$CombinatorialParsing$StarParser = enclosingObjects;
					this.$super$CombinatorialParsing$StarParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`StarParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$subparser$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`StarParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`StarParser";
				this.slots = [];
				this.methods = [new MM("withSubparser:", true, null)];
				this.nestedClasses = [];
				this.$withSubparser$ = (function ($p) {
					return (new this.nonMeta.basicNew()).$instance$initializer($p);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`StarParser";
						this.$withSubparser$ = this._$withSubparser$ = $.$withSubparser$;
						this.$enclosingObjects$CombinatorialParsing$StarParser = enclosingObjects;
						this.$super$CombinatorialParsing$StarParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$SymbolicTokenParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`SymbolicTokenParser";
			this.name = "CombinatorialParsing`SymbolicTokenParser";
			this.header = "SymbolicTokenParser = CombinatorialParser ((* Parses a given symbol.  One could derive this as an alternation of character parsers, but the derivation is more verbose than defining it directly, and less efficient, so why bother? *)| symbol |)";
			this.slots = [new SM("symbol", true, false)];
			this.methods = [
				new MM("superInit`CombinatorialParsing`SymbolicTokenParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("forSymbol:", false, "public forSymbol: s = (\r	symbol: s\r)"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context ifError: blk = (\r \r	| errMsg pos |\r	errMsg::  symbol , ' expected'.\r	pos:: input position.\r	 symbol\r		do: [:c | c = (input nextIfAbsent: [blk value: errMsg value: pos])\r				ifFalse: [blk value: errMsg value: pos]].\r	^  symbol\r)"),
				new MM("symbol", true, null),
				new MM("symbol:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$SymbolicTokenParser = (function () {
				var self = this;
				self.$super$CombinatorialParsing$SymbolicTokenParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$SymbolicTokenParser();
				return self;
			});
			this.$forSymbol$ = (function ($s) {
				var self = this;
				self._$symbol$($s);
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				var $errMsg = nil;
				var $pos = nil;
				$errMsg = self._$symbol().$$comma(" expected");
				$pos = $input.$position();
				self._$symbol().$do$((function ($c) {
					return $c.$$equal($input.$nextIfAbsent$((function () {
						return $blk.$value$value$($errMsg, $pos);
					}))).$ifFalse$((function () {
						return $blk.$value$value$($errMsg, $pos);
					}));
				}));
				return self._$symbol();
			});
			this.$symbol = (function () {
				return this.$symbol$slot;
			});
			this.$symbol$ = (function (v) {
				this.$symbol$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`SymbolicTokenParser";
					this._$superInit$CombinatorialParsing$SymbolicTokenParser = $.$superInit$CombinatorialParsing$SymbolicTokenParser;
					this.$superInit$CombinatorialParsing$SymbolicTokenParser = dnuCatcher("$superInit$CombinatorialParsing$SymbolicTokenParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$forSymbol$ = this._$forSymbol$ = $.$forSymbol$;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this._$symbol = $.$symbol;
					this.$symbol = dnuCatcher("$symbol");
					this._$symbol$ = $.$symbol$;
					this.$symbol$ = dnuCatcher("$symbol$");
					this.$enclosingObjects$CombinatorialParsing$SymbolicTokenParser = enclosingObjects;
					this.$super$CombinatorialParsing$SymbolicTokenParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`SymbolicTokenParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$symbol$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`SymbolicTokenParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`SymbolicTokenParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`SymbolicTokenParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$SymbolicTokenParser = enclosingObjects;
						this.$super$CombinatorialParsing$SymbolicTokenParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$Token = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`Token";
			this.name = "CombinatorialParsing`Token";
			this.header = "Token = ((* Represents a token of input. Basically, it attaches a start position\rto the token's value. Indeally, we'd use a tuple for this, which is why this class\rimplements the tuple protocol. We could use an array, but that would not be \rtypesafe. Until we have tuples, we'll use this class.\r\rIt's not yet clear if we should bother adding token codes or values here. *)|\r	public token\r	public start\r	public end |)";
			this.slots = [
				new SM("token", true, false),
				new SM("start", true, false),
				new SM("end", true, false)
			];
			this.methods = [
				new MM("superInit`CombinatorialParsing`Token", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("at:", false, "at: n = (\r \r\rassert:[ n <= 2].\rn = 1 ifTrue:[^ token].\r^ start\r)"),
				new MM("=", false, "public = other = (\r    ^other class ==  class\r		and: [other token = token]\r		and: [other start = start]\r		and: [other end = end]\r)"),
				new MM("concreteEnd", false, "public concreteEnd ^ <Integer> = (\r	^end\r)"),
				new MM("concreteStart", false, "public concreteStart ^ <Integer> = (\r	^start\r)"),
				new MM("hash", false, "public hash = (\r	^token hash\r)"),
				new MM("for:start:end:", false, "public for: t start: p end: e = (\r	token: t.\r	start: p.\r	end: e.\r)"),
				new MM("token", true, null),
				new MM("token:", true, null),
				new MM("start", true, null),
				new MM("start:", true, null),
				new MM("end", true, null),
				new MM("end:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$Token = (function () {
				var self = this;
				self.$super$CombinatorialParsing$Token$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$Token();
				return self;
			});
			this.$at$ = (function ($n) {
				var self = this;
				self._$assert$((function () {
					return $n <= 2;
				}));
				if ($n.$$equal(1)) {
					return self._$token();
				} else {
					nil;
				};
				return self._$start();
			});
			this.$$equal = (function ($other) {
				var self = this;
				return ($other.$class() === self._$class()).$and$and$and$((function () {
					return $other.$token().$$equal(self._$token());
				}), (function () {
					return $other.$start().$$equal(self._$start());
				}), (function () {
					return $other.$end().$$equal(self._$end());
				}));
			});
			this.$concreteEnd = (function () {
				var self = this;
				return self._$end();
			});
			this.$concreteStart = (function () {
				var self = this;
				return self._$start();
			});
			this.$hash = (function () {
				var self = this;
				return self._$token().$hash();
			});
			this.$for$start$end$ = (function ($t, $p, $e) {
				var self = this;
				self._$token$($t);
				self._$start$($p);
				self._$end$($e);
				return self;
			});
			this.$token = (function () {
				return this.$token$slot;
			});
			this.$token$ = (function (v) {
				this.$token$slot = v;
				return this;
			});
			this.$start = (function () {
				return this.$start$slot;
			});
			this.$start$ = (function (v) {
				this.$start$slot = v;
				return this;
			});
			this.$end = (function () {
				return this.$end$slot;
			});
			this.$end$ = (function (v) {
				this.$end$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`Token";
					this._$superInit$CombinatorialParsing$Token = $.$superInit$CombinatorialParsing$Token;
					this.$superInit$CombinatorialParsing$Token = dnuCatcher("$superInit$CombinatorialParsing$Token");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$at$ = $.$at$;
					this.$at$ = dnuCatcher("$at$");
					this.$$equal = this._$$equal = $.$$equal;
					this.$concreteEnd = this._$concreteEnd = $.$concreteEnd;
					this.$concreteStart = this._$concreteStart = $.$concreteStart;
					this.$hash = this._$hash = $.$hash;
					this.$for$start$end$ = this._$for$start$end$ = $.$for$start$end$;
					this.$token = this._$token = $.$token;
					this.$token$ = this._$token$ = $.$token$;
					this.$start = this._$start = $.$start;
					this.$start$ = this._$start$ = $.$start$;
					this.$end = this._$end = $.$end;
					this.$end$ = this._$end$ = $.$end$;
					this.$enclosingObjects$CombinatorialParsing$Token = enclosingObjects;
					this.$super$CombinatorialParsing$Token$slot = runtimeSuperclass;
					this["CombinatorialParsing`Token"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$token$slot = nil;
						this.$start$slot = nil;
						this.$end$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`Token"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`Token";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`Token";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$Token = enclosingObjects;
						this.$super$CombinatorialParsing$Token = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$TokenParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`TokenParser";
			this.name = "CombinatorialParsing`TokenParser";
			this.header = "TokenParser = PredicateTokenParser ((* A parser that accepts a single, specified token.\r*))";
			this.slots = [];
			this.methods = [
				new MM("superInit`CombinatorialParsing`TokenParser", true, "PredicateTokenParser"),
				new MM("instance`initializer", true, "PredicateTokenParser"),
				new MM("for:", false, "for: token = (\r 	^accept: [:t | t = token] errorMsg: token printString, ' expected'\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$TokenParser = (function () {
				var self = this;
				self.$super$CombinatorialParsing$TokenParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$TokenParser();
				return self;
			});
			this.$for$ = (function ($token) {
				var self = this;
				return self._$accept$errorMsg$((function ($t) {
					return $t.$$equal($token);
				}), $token.$printString().$$comma(" expected"));
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`TokenParser";
					this._$superInit$CombinatorialParsing$TokenParser = $.$superInit$CombinatorialParsing$TokenParser;
					this.$superInit$CombinatorialParsing$TokenParser = dnuCatcher("$superInit$CombinatorialParsing$TokenParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$for$ = $.$for$;
					this.$for$ = dnuCatcher("$for$");
					this.$enclosingObjects$CombinatorialParsing$TokenParser = enclosingObjects;
					this.$super$CombinatorialParsing$TokenParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`TokenParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["CombinatorialParsing`TokenParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`TokenParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`TokenParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$TokenParser = enclosingObjects;
						this.$super$CombinatorialParsing$TokenParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$TokenizingParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`TokenizingParser";
			this.name = "CombinatorialParsing`TokenizingParser";
			this.header = "TokenizingParser withSubparser: p = CombinatorialParser (| subparser = p. |)";
			this.slots = [new SM("subparser", false, false)];
			this.methods = [
				new MM("superInit`CombinatorialParsing`TokenizingParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context ifError: blk = (\r	| pos res |\r	pos:: input position + 1.\r	res:: subparser parse: input inContext: context ifError: blk.\r	^Token new for: res start: pos end: input position\r)"),
				new MM("subparser", true, null),
				new MM("setOnce`subparser:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$TokenizingParser = (function ($p) {
				var self = this;
				self.$super$CombinatorialParsing$TokenizingParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($p) {
				var self = this;
				self._$superInit$CombinatorialParsing$TokenizingParser($p);
				self._$setOnce$subparser$($p);
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				var $pos = nil;
				var $res = nil;
				$pos = $input.$position() + 1;
				$res = self._$subparser().$parse$inContext$ifError$($input, $context, $blk);
				return self.$enclosingObjects$CombinatorialParsing$TokenizingParser[0]._$Token().$new().$for$start$end$($res, $pos, $input.$position());
			});
			this.$subparser = (function () {
				return this.$subparser$slot;
			});
			this.$setOnce$subparser$ = (function (v) {
				this.$subparser$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`TokenizingParser";
					this._$superInit$CombinatorialParsing$TokenizingParser = $.$superInit$CombinatorialParsing$TokenizingParser;
					this.$superInit$CombinatorialParsing$TokenizingParser = dnuCatcher("$superInit$CombinatorialParsing$TokenizingParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this._$subparser = $.$subparser;
					this.$subparser = dnuCatcher("$subparser");
					this._$setOnce$subparser$ = $.$setOnce$subparser$;
					this.$setOnce$subparser$ = dnuCatcher("$setOnce$subparser$");
					this.$enclosingObjects$CombinatorialParsing$TokenizingParser = enclosingObjects;
					this.$super$CombinatorialParsing$TokenizingParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`TokenizingParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$subparser$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`TokenizingParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`TokenizingParser";
				this.slots = [];
				this.methods = [new MM("withSubparser:", true, null)];
				this.nestedClasses = [];
				this.$withSubparser$ = (function ($p) {
					return (new this.nonMeta.basicNew()).$instance$initializer($p);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`TokenizingParser";
						this.$withSubparser$ = this._$withSubparser$ = $.$withSubparser$;
						this.$enclosingObjects$CombinatorialParsing$TokenizingParser = enclosingObjects;
						this.$super$CombinatorialParsing$TokenizingParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$WhitespaceParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`WhitespaceParser";
			this.name = "CombinatorialParsing`WhitespaceParser";
			this.header = "WhitespaceParser = CombinatorialParser ((* A simple scanner to optimize the handling of whitespace. Should be equivalent to'\r aWhitespaceChar plus\rEventually, the framework should optimize well enough that this will be unnecessary. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`CombinatorialParsing`WhitespaceParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context ifError: blk = (\r	| rewindPosition |\r	rewindPosition:: input position.\r	[input atEnd ifTrue: [false] ifFalse: [input peek <= \" \"]] whileTrue: [input next].\r	input position = rewindPosition ifTrue:\r		[input position: rewindPosition.\r		blk value: 'Whitespace expected' value: rewindPosition].\r	^Token new for: #whitespace start: rewindPosition + 1 end: input position \r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$WhitespaceParser = (function () {
				var self = this;
				self.$super$CombinatorialParsing$WhitespaceParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$WhitespaceParser();
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				var $rewindPosition = nil;
				$rewindPosition = $input.$position();
				{
					nil;
					for (; $input.$atEnd().$ifTrue$ifFalse$((function () {
						return false;
					}), (function () {
						return $input.$peek().$$less$equal(" ");
					})); ) {
						$input.$next();
					};
				};
				if ($input.$position().$$equal($rewindPosition)) {
					$input.$position$($rewindPosition);
					$blk.$value$value$("Whitespace expected", $rewindPosition);
				} else {
					nil;
				};
				return self.$enclosingObjects$CombinatorialParsing$WhitespaceParser[0]._$Token().$new().$for$start$end$("whitespace", $rewindPosition + 1, $input.$position());
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`WhitespaceParser";
					this._$superInit$CombinatorialParsing$WhitespaceParser = $.$superInit$CombinatorialParsing$WhitespaceParser;
					this.$superInit$CombinatorialParsing$WhitespaceParser = dnuCatcher("$superInit$CombinatorialParsing$WhitespaceParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this.$enclosingObjects$CombinatorialParsing$WhitespaceParser = enclosingObjects;
					this.$super$CombinatorialParsing$WhitespaceParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`WhitespaceParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["CombinatorialParsing`WhitespaceParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`WhitespaceParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`WhitespaceParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$WhitespaceParser = enclosingObjects;
						this.$super$CombinatorialParsing$WhitespaceParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$WrappingParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for CombinatorialParsing`WrappingParser";
			this.name = "CombinatorialParsing`WrappingParser";
			this.header = "WrappingParser = CombinatorialParser ((* Used to transform the output of another parser. A wrapping parser accepts exactly the same input as the wrapped\rparser does, and performs the same error handling. The only differenceis that it takes the output of the wrapped\rparser and passes it on to a wrapper block which uses it to produce a new result, which is the output of the wrapping\rparser. A typical use is to build nodes of an abstract syntax tree.\r\rThe output type of the wrapped parser, S, is also the input to the wrapper. The output type of the wrapper is the output of this \r(the wrapping) parser. *)| parser wrapperBlock |)";
			this.slots = [
				new SM("parser", true, false),
				new SM("wrapperBlock", true, false)
			];
			this.methods = [
				new MM("superInit`CombinatorialParsing`WrappingParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("wrapParser:withWrapper:", false, "public wrapParser: p withWrapper: blk = (\r	parser:: p.\r	wrapperBlock:: blk\r)"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context ifError: blk = (\r	^wrapperBlock value: (parser parse: input inContext: context ifError: blk )\r)"),
				new MM("parser", true, null),
				new MM("parser:", true, null),
				new MM("wrapperBlock", true, null),
				new MM("wrapperBlock:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$CombinatorialParsing$WrappingParser = (function () {
				var self = this;
				self.$super$CombinatorialParsing$WrappingParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$CombinatorialParsing$WrappingParser();
				return self;
			});
			this.$wrapParser$withWrapper$ = (function ($p, $blk) {
				var self = this;
				self._$parser$($p);
				self._$wrapperBlock$($blk);
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				return self._$wrapperBlock().$value$(self._$parser().$parse$inContext$ifError$($input, $context, $blk));
			});
			this.$parser = (function () {
				return this.$parser$slot;
			});
			this.$parser$ = (function (v) {
				this.$parser$slot = v;
				return this;
			});
			this.$wrapperBlock = (function () {
				return this.$wrapperBlock$slot;
			});
			this.$wrapperBlock$ = (function (v) {
				this.$wrapperBlock$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for CombinatorialParsing`WrappingParser";
					this._$superInit$CombinatorialParsing$WrappingParser = $.$superInit$CombinatorialParsing$WrappingParser;
					this.$superInit$CombinatorialParsing$WrappingParser = dnuCatcher("$superInit$CombinatorialParsing$WrappingParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$wrapParser$withWrapper$ = this._$wrapParser$withWrapper$ = $.$wrapParser$withWrapper$;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this._$parser = $.$parser;
					this.$parser = dnuCatcher("$parser");
					this._$parser$ = $.$parser$;
					this.$parser$ = dnuCatcher("$parser$");
					this._$wrapperBlock = $.$wrapperBlock;
					this.$wrapperBlock = dnuCatcher("$wrapperBlock");
					this._$wrapperBlock$ = $.$wrapperBlock$;
					this.$wrapperBlock$ = dnuCatcher("$wrapperBlock$");
					this.$enclosingObjects$CombinatorialParsing$WrappingParser = enclosingObjects;
					this.$super$CombinatorialParsing$WrappingParser$slot = runtimeSuperclass;
					this["CombinatorialParsing`WrappingParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$parser$slot = nil;
						this.$wrapperBlock$slot = nil;
					});
					this.basicNew = this["CombinatorialParsing`WrappingParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for CombinatorialParsing`WrappingParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for CombinatorialParsing`WrappingParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$CombinatorialParsing$WrappingParser = enclosingObjects;
						this.$super$CombinatorialParsing$WrappingParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$CombinatorialParsing$AlternatingParser.enclosingMixin = this;
		this.$CombinatorialParsing$CharParser.enclosingMixin = this;
		this.$CombinatorialParsing$CollectingCommentParser.enclosingMixin = this;
		this.$CombinatorialParsing$CombinatorialParser.enclosingMixin = this;
		this.$CombinatorialParsing$CommentParser.enclosingMixin = this;
		this.$CombinatorialParsing$EOIParser.enclosingMixin = this;
		this.$CombinatorialParsing$EmptyParser.enclosingMixin = this;
		this.$CombinatorialParsing$ExecutableGrammar.enclosingMixin = this;
		this.$CombinatorialParsing$FailingParser.enclosingMixin = this;
		this.$CombinatorialParsing$ForwardReferenceParser.enclosingMixin = this;
		this.$CombinatorialParsing$ForwardingWrappingParser.enclosingMixin = this;
		this.$CombinatorialParsing$NamedWrappingParser.enclosingMixin = this;
		this.$CombinatorialParsing$NegatingParser.enclosingMixin = this;
		this.$CombinatorialParsing$ParserContext.enclosingMixin = this;
		this.$CombinatorialParsing$ParserError.enclosingMixin = this;
		this.$CombinatorialParsing$PlusParser.enclosingMixin = this;
		this.$CombinatorialParsing$PredicateTokenParser.enclosingMixin = this;
		this.$CombinatorialParsing$SequentialParser.enclosingMixin = this;
		this.$CombinatorialParsing$StarParser.enclosingMixin = this;
		this.$CombinatorialParsing$SymbolicTokenParser.enclosingMixin = this;
		this.$CombinatorialParsing$Token.enclosingMixin = this;
		this.$CombinatorialParsing$TokenParser.enclosingMixin = this;
		this.$CombinatorialParsing$TokenizingParser.enclosingMixin = this;
		this.$CombinatorialParsing$WhitespaceParser.enclosingMixin = this;
		this.$CombinatorialParsing$WrappingParser.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for CombinatorialParsing";
				this._$superInit$CombinatorialParsing = $.$superInit$CombinatorialParsing;
				this.$superInit$CombinatorialParsing = dnuCatcher("$superInit$CombinatorialParsing");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this._$AlternatingParser = $.$AlternatingParser;
				this.$AlternatingParser = dnuCatcher("$AlternatingParser");
				this._$CharParser = $.$CharParser;
				this.$CharParser = dnuCatcher("$CharParser");
				this.$CollectingCommentParser = this._$CollectingCommentParser = $.$CollectingCommentParser;
				this.$CombinatorialParser = this._$CombinatorialParser = $.$CombinatorialParser;
				this._$CommentParser = $.$CommentParser;
				this.$CommentParser = dnuCatcher("$CommentParser");
				this._$EOIParser = $.$EOIParser;
				this.$EOIParser = dnuCatcher("$EOIParser");
				this._$EmptyParser = $.$EmptyParser;
				this.$EmptyParser = dnuCatcher("$EmptyParser");
				this.$ExecutableGrammar = this._$ExecutableGrammar = $.$ExecutableGrammar;
				this._$FailingParser = $.$FailingParser;
				this.$FailingParser = dnuCatcher("$FailingParser");
				this._$ForwardReferenceParser = $.$ForwardReferenceParser;
				this.$ForwardReferenceParser = dnuCatcher("$ForwardReferenceParser");
				this._$ForwardingWrappingParser = $.$ForwardingWrappingParser;
				this.$ForwardingWrappingParser = dnuCatcher("$ForwardingWrappingParser");
				this._$NamedWrappingParser = $.$NamedWrappingParser;
				this.$NamedWrappingParser = dnuCatcher("$NamedWrappingParser");
				this._$NegatingParser = $.$NegatingParser;
				this.$NegatingParser = dnuCatcher("$NegatingParser");
				this._$ParserContext = $.$ParserContext;
				this.$ParserContext = dnuCatcher("$ParserContext");
				this.$ParserError = this._$ParserError = $.$ParserError;
				this._$PlusParser = $.$PlusParser;
				this.$PlusParser = dnuCatcher("$PlusParser");
				this.$PredicateTokenParser = this._$PredicateTokenParser = $.$PredicateTokenParser;
				this._$SequentialParser = $.$SequentialParser;
				this.$SequentialParser = dnuCatcher("$SequentialParser");
				this._$StarParser = $.$StarParser;
				this.$StarParser = dnuCatcher("$StarParser");
				this._$SymbolicTokenParser = $.$SymbolicTokenParser;
				this.$SymbolicTokenParser = dnuCatcher("$SymbolicTokenParser");
				this.$Token = this._$Token = $.$Token;
				this._$TokenParser = $.$TokenParser;
				this.$TokenParser = dnuCatcher("$TokenParser");
				this._$TokenizingParser = $.$TokenizingParser;
				this.$TokenizingParser = dnuCatcher("$TokenizingParser");
				this._$WhitespaceParser = $.$WhitespaceParser;
				this.$WhitespaceParser = dnuCatcher("$WhitespaceParser");
				this._$WrappingParser = $.$WrappingParser;
				this.$WrappingParser = dnuCatcher("$WrappingParser");
				this.$CombinatorialParsing$AlternatingParser = this._$CombinatorialParsing$AlternatingParser = $.$CombinatorialParsing$AlternatingParser;
				this.$CombinatorialParsing$AlternatingParser$ = this._$CombinatorialParsing$AlternatingParser$ = $.$CombinatorialParsing$AlternatingParser$;
				this.$CombinatorialParsing$CharParser = this._$CombinatorialParsing$CharParser = $.$CombinatorialParsing$CharParser;
				this.$CombinatorialParsing$CharParser$ = this._$CombinatorialParsing$CharParser$ = $.$CombinatorialParsing$CharParser$;
				this.$CombinatorialParsing$CollectingCommentParser = this._$CombinatorialParsing$CollectingCommentParser = $.$CombinatorialParsing$CollectingCommentParser;
				this.$CombinatorialParsing$CollectingCommentParser$ = this._$CombinatorialParsing$CollectingCommentParser$ = $.$CombinatorialParsing$CollectingCommentParser$;
				this.$CombinatorialParsing$CombinatorialParser = this._$CombinatorialParsing$CombinatorialParser = $.$CombinatorialParsing$CombinatorialParser;
				this.$CombinatorialParsing$CombinatorialParser$ = this._$CombinatorialParsing$CombinatorialParser$ = $.$CombinatorialParsing$CombinatorialParser$;
				this.$CombinatorialParsing$CommentParser = this._$CombinatorialParsing$CommentParser = $.$CombinatorialParsing$CommentParser;
				this.$CombinatorialParsing$CommentParser$ = this._$CombinatorialParsing$CommentParser$ = $.$CombinatorialParsing$CommentParser$;
				this.$CombinatorialParsing$EOIParser = this._$CombinatorialParsing$EOIParser = $.$CombinatorialParsing$EOIParser;
				this.$CombinatorialParsing$EOIParser$ = this._$CombinatorialParsing$EOIParser$ = $.$CombinatorialParsing$EOIParser$;
				this.$CombinatorialParsing$EmptyParser = this._$CombinatorialParsing$EmptyParser = $.$CombinatorialParsing$EmptyParser;
				this.$CombinatorialParsing$EmptyParser$ = this._$CombinatorialParsing$EmptyParser$ = $.$CombinatorialParsing$EmptyParser$;
				this.$CombinatorialParsing$ExecutableGrammar = this._$CombinatorialParsing$ExecutableGrammar = $.$CombinatorialParsing$ExecutableGrammar;
				this.$CombinatorialParsing$ExecutableGrammar$ = this._$CombinatorialParsing$ExecutableGrammar$ = $.$CombinatorialParsing$ExecutableGrammar$;
				this.$CombinatorialParsing$FailingParser = this._$CombinatorialParsing$FailingParser = $.$CombinatorialParsing$FailingParser;
				this.$CombinatorialParsing$FailingParser$ = this._$CombinatorialParsing$FailingParser$ = $.$CombinatorialParsing$FailingParser$;
				this.$CombinatorialParsing$ForwardReferenceParser = this._$CombinatorialParsing$ForwardReferenceParser = $.$CombinatorialParsing$ForwardReferenceParser;
				this.$CombinatorialParsing$ForwardReferenceParser$ = this._$CombinatorialParsing$ForwardReferenceParser$ = $.$CombinatorialParsing$ForwardReferenceParser$;
				this.$CombinatorialParsing$ForwardingWrappingParser = this._$CombinatorialParsing$ForwardingWrappingParser = $.$CombinatorialParsing$ForwardingWrappingParser;
				this.$CombinatorialParsing$ForwardingWrappingParser$ = this._$CombinatorialParsing$ForwardingWrappingParser$ = $.$CombinatorialParsing$ForwardingWrappingParser$;
				this.$CombinatorialParsing$NamedWrappingParser = this._$CombinatorialParsing$NamedWrappingParser = $.$CombinatorialParsing$NamedWrappingParser;
				this.$CombinatorialParsing$NamedWrappingParser$ = this._$CombinatorialParsing$NamedWrappingParser$ = $.$CombinatorialParsing$NamedWrappingParser$;
				this.$CombinatorialParsing$NegatingParser = this._$CombinatorialParsing$NegatingParser = $.$CombinatorialParsing$NegatingParser;
				this.$CombinatorialParsing$NegatingParser$ = this._$CombinatorialParsing$NegatingParser$ = $.$CombinatorialParsing$NegatingParser$;
				this.$CombinatorialParsing$ParserContext = this._$CombinatorialParsing$ParserContext = $.$CombinatorialParsing$ParserContext;
				this.$CombinatorialParsing$ParserContext$ = this._$CombinatorialParsing$ParserContext$ = $.$CombinatorialParsing$ParserContext$;
				this.$CombinatorialParsing$ParserError = this._$CombinatorialParsing$ParserError = $.$CombinatorialParsing$ParserError;
				this.$CombinatorialParsing$ParserError$ = this._$CombinatorialParsing$ParserError$ = $.$CombinatorialParsing$ParserError$;
				this.$CombinatorialParsing$PlusParser = this._$CombinatorialParsing$PlusParser = $.$CombinatorialParsing$PlusParser;
				this.$CombinatorialParsing$PlusParser$ = this._$CombinatorialParsing$PlusParser$ = $.$CombinatorialParsing$PlusParser$;
				this.$CombinatorialParsing$PredicateTokenParser = this._$CombinatorialParsing$PredicateTokenParser = $.$CombinatorialParsing$PredicateTokenParser;
				this.$CombinatorialParsing$PredicateTokenParser$ = this._$CombinatorialParsing$PredicateTokenParser$ = $.$CombinatorialParsing$PredicateTokenParser$;
				this.$CombinatorialParsing$SequentialParser = this._$CombinatorialParsing$SequentialParser = $.$CombinatorialParsing$SequentialParser;
				this.$CombinatorialParsing$SequentialParser$ = this._$CombinatorialParsing$SequentialParser$ = $.$CombinatorialParsing$SequentialParser$;
				this.$CombinatorialParsing$StarParser = this._$CombinatorialParsing$StarParser = $.$CombinatorialParsing$StarParser;
				this.$CombinatorialParsing$StarParser$ = this._$CombinatorialParsing$StarParser$ = $.$CombinatorialParsing$StarParser$;
				this.$CombinatorialParsing$SymbolicTokenParser = this._$CombinatorialParsing$SymbolicTokenParser = $.$CombinatorialParsing$SymbolicTokenParser;
				this.$CombinatorialParsing$SymbolicTokenParser$ = this._$CombinatorialParsing$SymbolicTokenParser$ = $.$CombinatorialParsing$SymbolicTokenParser$;
				this.$CombinatorialParsing$Token = this._$CombinatorialParsing$Token = $.$CombinatorialParsing$Token;
				this.$CombinatorialParsing$Token$ = this._$CombinatorialParsing$Token$ = $.$CombinatorialParsing$Token$;
				this.$CombinatorialParsing$TokenParser = this._$CombinatorialParsing$TokenParser = $.$CombinatorialParsing$TokenParser;
				this.$CombinatorialParsing$TokenParser$ = this._$CombinatorialParsing$TokenParser$ = $.$CombinatorialParsing$TokenParser$;
				this.$CombinatorialParsing$TokenizingParser = this._$CombinatorialParsing$TokenizingParser = $.$CombinatorialParsing$TokenizingParser;
				this.$CombinatorialParsing$TokenizingParser$ = this._$CombinatorialParsing$TokenizingParser$ = $.$CombinatorialParsing$TokenizingParser$;
				this.$CombinatorialParsing$WhitespaceParser = this._$CombinatorialParsing$WhitespaceParser = $.$CombinatorialParsing$WhitespaceParser;
				this.$CombinatorialParsing$WhitespaceParser$ = this._$CombinatorialParsing$WhitespaceParser$ = $.$CombinatorialParsing$WhitespaceParser$;
				this.$CombinatorialParsing$WrappingParser = this._$CombinatorialParsing$WrappingParser = $.$CombinatorialParsing$WrappingParser;
				this.$CombinatorialParsing$WrappingParser$ = this._$CombinatorialParsing$WrappingParser$ = $.$CombinatorialParsing$WrappingParser$;
				this.$enclosingObjects$CombinatorialParsing = enclosingObjects;
				this.$super$CombinatorialParsing$slot = runtimeSuperclass;
				this.CombinatorialParsing = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$OrderedCollection$slot = nil;
					this.$Dictionary$slot = nil;
					this.$ObjectMirror$slot = nil;
					this.$CombinatorialParsing$AlternatingParser$slot = nil;
					this.$CombinatorialParsing$CharParser$slot = nil;
					this.$CombinatorialParsing$CollectingCommentParser$slot = nil;
					this.$CombinatorialParsing$CombinatorialParser$slot = nil;
					this.$CombinatorialParsing$CommentParser$slot = nil;
					this.$CombinatorialParsing$EOIParser$slot = nil;
					this.$CombinatorialParsing$EmptyParser$slot = nil;
					this.$CombinatorialParsing$ExecutableGrammar$slot = nil;
					this.$CombinatorialParsing$FailingParser$slot = nil;
					this.$CombinatorialParsing$ForwardReferenceParser$slot = nil;
					this.$CombinatorialParsing$ForwardingWrappingParser$slot = nil;
					this.$CombinatorialParsing$NamedWrappingParser$slot = nil;
					this.$CombinatorialParsing$NegatingParser$slot = nil;
					this.$CombinatorialParsing$ParserContext$slot = nil;
					this.$CombinatorialParsing$ParserError$slot = nil;
					this.$CombinatorialParsing$PlusParser$slot = nil;
					this.$CombinatorialParsing$PredicateTokenParser$slot = nil;
					this.$CombinatorialParsing$SequentialParser$slot = nil;
					this.$CombinatorialParsing$StarParser$slot = nil;
					this.$CombinatorialParsing$SymbolicTokenParser$slot = nil;
					this.$CombinatorialParsing$Token$slot = nil;
					this.$CombinatorialParsing$TokenParser$slot = nil;
					this.$CombinatorialParsing$TokenizingParser$slot = nil;
					this.$CombinatorialParsing$WhitespaceParser$slot = nil;
					this.$CombinatorialParsing$WrappingParser$slot = nil;
				});
				this.basicNew = this.CombinatorialParsing;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for CombinatorialParsing";
			this.slots = [];
			this.methods = [new MM("usingPlatform:", true, null)];
			this.nestedClasses = [];
			this.$usingPlatform$ = (function ($platform) {
				return (new this.nonMeta.basicNew()).$instance$initializer($platform);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for CombinatorialParsing";
					this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
					this.$enclosingObjects$CombinatorialParsing = enclosingObjects;
					this.$super$CombinatorialParsing = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$NewspeakGrammar = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for NewspeakGrammar";
		this.name = "NewspeakGrammar";
		this.header = "NewspeakGrammar usingPlatform: p parsers: parsers = ((* The Newspeak grammar, both with and without type declarations.\r\rCopyright 2008 Cadence Design Systems, Inc.\rCopyright 2010 Felix Geller and Ryan Macnak\rCopyright 2012 Ryan Macnak\r   \rLicensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)|\r\rprivate OrderedCollection = p collections OrderedCollection.\r\rprivate ExecutableGrammar = parsers ExecutableGrammar.\rprivate CollectingCommentParser = parsers CollectingCommentParser. \rprivate CombinatorialParser = parsers CombinatorialParser.\rprivate PredicateTokenParser = parsers PredicateTokenParser.\rprivate Token = parsers Token.\rpublic ParserError = parsers ParserError.\r|)";
		this.slots = [
			new SM("OrderedCollection", false, false),
			new SM("ExecutableGrammar", false, false),
			new SM("CollectingCommentParser", false, false),
			new SM("CombinatorialParser", false, false),
			new SM("PredicateTokenParser", false, false),
			new SM("Token", false, false),
			new SM("ParserError", false, false),
			new SM("NewspeakGrammar`NS3Grammar", true, true),
			new SM("NewspeakGrammar`NSCommentParser", true, true),
			new SM("NewspeakGrammar`TypedNS3Grammar", true, true),
			new SM("NewspeakGrammar`UnarySelectorParser", true, true)
		];
		this.methods = [
			new MM("superInit`NewspeakGrammar", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("NS3Grammar", true, null),
			new MM("NSCommentParser", true, null),
			new MM("TypedNS3Grammar", true, null),
			new MM("UnarySelectorParser", true, null),
			new MM("OrderedCollection", true, null),
			new MM("setOnce`OrderedCollection:", true, null),
			new MM("ExecutableGrammar", true, null),
			new MM("setOnce`ExecutableGrammar:", true, null),
			new MM("CollectingCommentParser", true, null),
			new MM("setOnce`CollectingCommentParser:", true, null),
			new MM("CombinatorialParser", true, null),
			new MM("setOnce`CombinatorialParser:", true, null),
			new MM("PredicateTokenParser", true, null),
			new MM("setOnce`PredicateTokenParser:", true, null),
			new MM("Token", true, null),
			new MM("setOnce`Token:", true, null),
			new MM("ParserError", true, null),
			new MM("setOnce`ParserError:", true, null),
			new MM("NewspeakGrammar`NS3Grammar", true, null),
			new MM("NewspeakGrammar`NS3Grammar:", true, null),
			new MM("NewspeakGrammar`NSCommentParser", true, null),
			new MM("NewspeakGrammar`NSCommentParser:", true, null),
			new MM("NewspeakGrammar`TypedNS3Grammar", true, null),
			new MM("NewspeakGrammar`TypedNS3Grammar:", true, null),
			new MM("NewspeakGrammar`UnarySelectorParser", true, null),
			new MM("NewspeakGrammar`UnarySelectorParser:", true, null)
		];
		this.nestedClasses = [
			"NewspeakGrammar`NS3Grammar",
			"NewspeakGrammar`NSCommentParser",
			"NewspeakGrammar`TypedNS3Grammar",
			"NewspeakGrammar`UnarySelectorParser"
		];
		this.applications = [];
		this.$superInit$NewspeakGrammar = (function ($p, $parsers) {
			var self = this;
			self.$super$NewspeakGrammar$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($p, $parsers) {
			var self = this;
			self._$superInit$NewspeakGrammar($p, $parsers);
			$0.$setOnce$OrderedCollection$.call(self, $p.$collections().$OrderedCollection());
			$0.$setOnce$ExecutableGrammar$.call(self, $parsers.$ExecutableGrammar());
			$0.$setOnce$CollectingCommentParser$.call(self, $parsers.$CollectingCommentParser());
			$0.$setOnce$CombinatorialParser$.call(self, $parsers.$CombinatorialParser());
			$0.$setOnce$PredicateTokenParser$.call(self, $parsers.$PredicateTokenParser());
			$0.$setOnce$Token$.call(self, $parsers.$Token());
			self._$setOnce$ParserError$($parsers.$ParserError());
			return self;
		});
		this.$NS3Grammar = (function () {
			if (nil === this.$NewspeakGrammar$NS3Grammar$slot) {
				var self = this;
				var superclass = $0.$ExecutableGrammar.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakGrammar);
				var mixin = $.$NewspeakGrammar$NS3Grammar;
				this.$NewspeakGrammar$NS3Grammar$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakGrammar$NS3Grammar$slot;
		});
		this.$NSCommentParser = (function () {
			if (nil === this.$NewspeakGrammar$NSCommentParser$slot) {
				var self = this;
				var superclass = $0.$CombinatorialParser.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakGrammar);
				var mixin = $.$NewspeakGrammar$NSCommentParser;
				this.$NewspeakGrammar$NSCommentParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakGrammar$NSCommentParser$slot;
		});
		this.$TypedNS3Grammar = (function () {
			if (nil === this.$NewspeakGrammar$TypedNS3Grammar$slot) {
				var self = this;
				var superclass = self._$NS3Grammar();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakGrammar);
				var mixin = $.$NewspeakGrammar$TypedNS3Grammar;
				this.$NewspeakGrammar$TypedNS3Grammar$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakGrammar$TypedNS3Grammar$slot;
		});
		this.$UnarySelectorParser = (function () {
			if (nil === this.$NewspeakGrammar$UnarySelectorParser$slot) {
				var self = this;
				var superclass = $0.$CombinatorialParser.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakGrammar);
				var mixin = $.$NewspeakGrammar$UnarySelectorParser;
				this.$NewspeakGrammar$UnarySelectorParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakGrammar$UnarySelectorParser$slot;
		});
		this.$OrderedCollection = (function () {
			return this.$OrderedCollection$slot;
		});
		this.$setOnce$OrderedCollection$ = (function (v) {
			this.$OrderedCollection$slot = v;
			return this;
		});
		this.$ExecutableGrammar = (function () {
			return this.$ExecutableGrammar$slot;
		});
		this.$setOnce$ExecutableGrammar$ = (function (v) {
			this.$ExecutableGrammar$slot = v;
			return this;
		});
		this.$CollectingCommentParser = (function () {
			return this.$CollectingCommentParser$slot;
		});
		this.$setOnce$CollectingCommentParser$ = (function (v) {
			this.$CollectingCommentParser$slot = v;
			return this;
		});
		this.$CombinatorialParser = (function () {
			return this.$CombinatorialParser$slot;
		});
		this.$setOnce$CombinatorialParser$ = (function (v) {
			this.$CombinatorialParser$slot = v;
			return this;
		});
		this.$PredicateTokenParser = (function () {
			return this.$PredicateTokenParser$slot;
		});
		this.$setOnce$PredicateTokenParser$ = (function (v) {
			this.$PredicateTokenParser$slot = v;
			return this;
		});
		this.$Token = (function () {
			return this.$Token$slot;
		});
		this.$setOnce$Token$ = (function (v) {
			this.$Token$slot = v;
			return this;
		});
		this.$ParserError = (function () {
			return this.$ParserError$slot;
		});
		this.$setOnce$ParserError$ = (function (v) {
			this.$ParserError$slot = v;
			return this;
		});
		this.$NewspeakGrammar$NS3Grammar = (function () {
			return this.$NewspeakGrammar$NS3Grammar$slot;
		});
		this.$NewspeakGrammar$NS3Grammar$ = (function (v) {
			this.$NewspeakGrammar$NS3Grammar$slot = v;
			return this;
		});
		this.$NewspeakGrammar$NSCommentParser = (function () {
			return this.$NewspeakGrammar$NSCommentParser$slot;
		});
		this.$NewspeakGrammar$NSCommentParser$ = (function (v) {
			this.$NewspeakGrammar$NSCommentParser$slot = v;
			return this;
		});
		this.$NewspeakGrammar$TypedNS3Grammar = (function () {
			return this.$NewspeakGrammar$TypedNS3Grammar$slot;
		});
		this.$NewspeakGrammar$TypedNS3Grammar$ = (function (v) {
			this.$NewspeakGrammar$TypedNS3Grammar$slot = v;
			return this;
		});
		this.$NewspeakGrammar$UnarySelectorParser = (function () {
			return this.$NewspeakGrammar$UnarySelectorParser$slot;
		});
		this.$NewspeakGrammar$UnarySelectorParser$ = (function (v) {
			this.$NewspeakGrammar$UnarySelectorParser$slot = v;
			return this;
		});
		this.$NewspeakGrammar$NS3Grammar = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakGrammar`NS3Grammar";
			this.name = "NewspeakGrammar`NS3Grammar";
			this.header = "NS3Grammar = ExecutableGrammar ((* Grammar for Newspeak3 (without types). *)| \r whitespace = super whitespace. (* cache whitespace parser *)\r colon =  tokenFromChar: \":\".\r comma =  tokenFromChar: \",\".\r dollar = tokenFromChar: \"$\".\r dot = tokenFromChar: \".\".\r equalSign = tokenFromChar: \"=\".\r hat = tokenFromChar: \"^\".\r lbracket = tokenFromChar: \"[\".\r lcurly = tokenFromChar: \"{\".\r lparen = tokenFromChar: \"(\".\r langleBracket = tokenFromChar: \"<\".\r pound = tokenFromChar: \"#\".\r rangleBracket = tokenFromChar: \">\".\r rbracket = tokenFromChar: \"]\".\r rcurly = tokenFromChar: \"}\".\r rparen = tokenFromChar: \")\".\r semicolon = tokenFromChar: \";\".\r slash = tokenFromChar: \"/\".\r vbar = tokenFromChar: \"|\".\r mixinOperator =  tokenFromSymbol: # ':>'.\r inverseMixinOperator =  tokenFromSymbol: # '<:'.\r eventualSendOperator = tokenFromSymbol: #'<-:'.\r digit = charBetween: \"0\" and: \"9\".\r digits =  digit plus.\r uppercaseLetter = charBetween: \"A\" and: \"Z\".\r extendedDigits = (digit | uppercaseLetter) plus.\r radix = digits, (char: \"r\").                  \r fraction =  (char: \".\"), digits.\r extendedFraction =  (char: \".\"), extendedDigits.                    \r exponent = (char: \"e\"), (char: \"-\" ) opt, digits.\r decimalNum = (char: \"-\")  opt,  \r                  digits, \r                  fraction opt,\r                  exponent opt.\r radixNum = radix,\r               (char: \"-\")  opt,  \r               extendedDigits, \r               extendedFraction opt,\r               exponent opt.       \r num =   radixNum | decimalNum.\r (* must distinguish internal use of productions from use as tokens *)                              \r number =  tokenFor: num.\r letter = uppercaseLetter | (charBetween: \"a\" and: \"z\").\r specialCharacter = (char: \"+\" )  | (char: \"/\" ) |  \r                                       (char: \"\\\" ) | (char: \"*\" )   |\r                                       (char: \"~\" ) | (char: \"<\") | (char: \">\") |\r                                       (char: \"=\") | (char: \"@\" )  |\r                                       (char: \"%\" ) | (char: \"|\" )  |\r                                       (char: \"&\" ) | (char: \"?\" )  |\r                                       (char: \"!\" ) |  (char: \",\" ).                                                    \r character = digit | letter | specialCharacter | (char: \"[\"  ) | (char: \"]\"  ) |\r                        (char: \"{\" ) | (char: \"}\" ) | (char: \"(\"  ) |\r                        (char: \")\" ) | (char: \"^\" ) | (char: \";\" ) | (char: \"$\" ) | (char: \"#\"  ) |\r                        (char: \":\" ) | (char: \".\" ) | (char: \"-\") | (char: \"_\") | (char: \"`\") (* the Smalltalk grammar neglects to add - to characters, or to comments. It does add | [self char: $' ], but these are both bugs. We also support underscores, which Squeak insists on turning into assignment arrows. However, we do not support these as assignments.  *).\r                        \r\r  id =  (letter | _), ((letter | digit | _)) star\r	wrapper: [:fst :snd  | fst asString, (String withAll: snd)].\r                                           \r public identifier = tokenFor: id.\r\r charIncludingQuotesAndSpace = character | (char: \"'\" ) | (char: \"\"\" ) | (char: \" \").\r newChar = tokenFor: (char: \"\"\"), charIncludingQuotesAndSpace, (char: \"\"\").\r oldChar = tokenFor: (char: \"$\"), charIncludingQuotesAndSpace.\r\r characterConstant = oldChar | newChar.\r\r str = (char: \"'\" ), stringBody, (char: \"'\")\r	wrapper:[:oq :es :eq | es inject: '' into: [:s :e | s, e asString]].\r \r string = tokenFor: str.\r\r kw = id, (char: \":\") \r	wrapper:[: i  :c   | i, \":\" asString]. \r\r kwds = kw plus\r	wrap: [:c | c inject: '' into: [:s :e | s, e]].   \r  \r public keyword = tokenFor: kw. \r\r setterKw = kw, (char: \":\")\r	wrapper: [:i :c | i, \":\" asString]. \r\r setterKeyword = tokenFor: setterKw. \r\r sym = str | kwds | binSel | id. \r \r symbol = tokenFor: sym.\r\r comment = NSCommentParser new.\r\r binSel = (specialCharacter | (char: \"-\" )), specialCharacter star\r	wrapper: [:c1 :c2 |\r		(* probably delay interning as symbol until later phase *)\r		c2 isEmpty\r			ifTrue: [c1 asString asSymbol]\r			ifFalse: [(c1 asString, (c2 inject: '' into: [:s :e | s, e asString])) asSymbol]].\r                                           \r binarySelector = tokenFor: binSel. (* maybe intern as symbol here *) \r\r\r(* syntactic productions *)\r\rsymbolConstant = pound, symbol.\r\r tuple = lcurly, (expression starSeparatedOrTerminatedBy:  dot), rcurly.\r \r(* patterns *)\r\r(* adding literals for patterns *)\rliteral = pattern | number | symbolConstant | characterConstant | string | tuple.\r\rpattern = (tokenFromChar: \"<\"), patternLiteral, (tokenFromChar: \">\").\rpatternLiteral = wildcardPattern | literalPattern | keywordPattern.\r\rwildcardPattern = tokenFromChar: \"_\".\r\r(* values which are comparable by means of #= *)\rliteralPattern = tokenFor:\r  number | symbolConstant | characterConstant | string | tuple.\r\r(* keyword patterns *)\rkeywordPattern = kwPatternPair plus.\rkwPatternPair = keyword, kwPatternValue opt.\rkwPatternValue =\r  wildcardPattern | literalPattern | variablePattern | nestedPatternLiteral.\rvariablePattern = tokenFor: ( (char: \"?\"), id ).\rnestedPatternLiteral = tokenFor: ( pattern ).\r                                  \r slotName =  identifier.                                                                                                                                                               \r unarySelector = UnarySelectorParser new on: self. (* the one hack/flaw. See UnarySelectorParser for details *)\r                                          \r parenthesizedExpression =  lparen, expression, rparen.\r                                                                                                          \r primary =  slotName | \r                   literal | \r                   block | \r                   parenthesizedExpression.\r \r unaryMsg = eventualSendOperator opt, unarySelector.\r\r unaryExpression = primary, unaryMsg star.\r\r binaryMsg = eventualSendOperator opt, binarySelector, unaryExpression.\r\r binaryExpression = unaryExpression, binaryMsg star.\r                                                                \r keywordMsg = eventualSendOperator opt, (keyword, binaryExpression) plus.\r\r message = keywordMsg | binaryMsg | unaryMsg.\r\r nontrivialUnaryMessages = unaryMsg plus, binaryMsg star, keywordMsg opt.\r\r nontrivialBinaryMessages = binaryMsg plus, keywordMsg opt.\r\r keywordMessages = keywordMsg.\r\r nonEmptyMessages = nontrivialUnaryMessages |\r						nontrivialBinaryMessages  |\r						keywordMessages.\r                                               \r keywordExpression = binaryExpression, keywordMsg opt.\r\r keywordHereSend = keywordMsg.\r\r cascadeMsg = semicolon, (keywordMsg | binaryMsg | unaryMsg).\r\r msgCascade = nonEmptyMessages, cascadeMsg star.\r                                                                                                                        \r cascadedMessageExpression = primary, msgCascade opt.\r\r sendExpression = keywordHereSend | cascadedMessageExpression. \r\r expression = setterKeyword star, sendExpression.\r                                              \r returnStatement = hat,  expression, dot opt.\r                                                                                                                        \r furtherStatements = dot,  statements.             \r                                                            \r statementSequence = expression, furtherStatements  opt.\r                                         \r statements = returnStatement  |   \r                  statementSequence |\r                  empty.\r                             \r blockParameter = colon, slotDecl.\r                                          \r blockParameters = blockParameter plus, vbar.\r\r slotDefs = slotDef star.\r seqSlotDecls = vbar, slotDefs, vbar.\r simSlotDecls = vbar, vbar, slotDefs, vbar, vbar.\r slotDecls = simSlotDecls | seqSlotDecls.\r\r temporaries = slotDecls.\r\rbeginNSComment = (char: \"(\"), (char: \"*\").\rendNSComment = (char: \"*\"), (char: \")\").\rkeywordAndLiteral = keyword, literal.\rliteralMessage = unaryMsg | keywordAndLiteral plus.\rliteralMessageComment = beginNSComment, (tokenFromSymbol:#':literalmessage:'), whitespace opt, literalMessage, whitespace opt, endNSComment.\r\r codeBody = (literalMessageComment | comment | whitespace) star, temporaries opt,  statements.\r                              \r block = lbracket,  blockParameters opt, codeBody,  rbracket.\r                      \r slotDecl = identifier.\r\r accessModifier =  ((tokenFromSymbol: #private) | \r                              (tokenFromSymbol: #public) | \r                              (tokenFromSymbol: #protected)), whitespace.\r\r slotDef =  accessModifier opt, slotDecl, \r                    (((tokenFromSymbol: #=) | \r                      (tokenFromSymbol: #'::=')\r                     ), expression, dot) opt.\r                    \r initExprs = expression starSeparatedOrTerminatedBy: dot.\r\r unaryMsgPattern = unarySelector.\r\r binaryMsgPattern = binarySelector, slotDecl.  \r                                                         \r keywordMsgPattern = (keyword, slotDecl) plus.                                        \r                                                                                  \r messagePattern =  unaryMsgPattern |\r                                binaryMsgPattern |\r                                keywordMsgPattern.       \r\r method = messagePattern, codeBody, eoi. (* A method in a browser *)\r                                                                 \r methodHeader = accessModifier opt, messagePattern.         \r     \r                                                                 (* Top level productions for classes *)\r\r methodDecl = accessModifier opt, messagePattern, equalSign, lparen, codeBody, rparen.\r\roptionalFactorySection =  messagePattern opt, equalSign.\r\r(* Binding the message pattern for the primary factory to the following equal sign is an odd factoring of the grammar designed to work around some ugly problems.\r\rThe two would naturally be separated in classPrefix below, e.g.,\r\r classPrefix =  (tokenFromSymbol: #class), identifier, messagePattern opt, equalSign \r                        superclassClause opt. \r\rAlas, this doesn't work. If the primary factory signature is omitted, the equal sign and following superclass clause is matched. This eventually fails.  Unlike BNF,  the '|' operator  'cuts' at the first successful branch  rather than evaluating all branches in parallel or backtracking, so the message opt is not retried. We'd have to use a more general and expensive BNF style combinator.\r\rOriginally, we split this into two branches - one using a mandatory messagePattern and one with empty (the messagePattern could not simply be dropped, because the arity of the wrapper for each branch would differ).\r\rThis solution seems cleaner.\rAS YET UNTESTED.\r*)\r\r classPrefix =  (tokenFromSymbol: #class), identifier, optionalFactorySection, \r                        superclassClause opt. \r\r mixinApplication =  classPrefix , inverseMixinOperator,  sendExpression. \r\r nestedClassDecl = accessModifier opt, classDecl.\r \r category = string, methodDecl star.\r\r classComment = whitespace opt, comment. (* A hack, to preserve comments from a complete class declaration *)              \r\r sideDecl =  lparen, nestedClassDecl star, category star, rparen.\r\r classSideDecl = colon, lparen, category star, rparen.\r\r languageId = identifier.\r\r classCategory = string opt.\r\r superclassClause = superclassPrefix opt, unaryMsg, message opt. (* unaryMsg should be identifier. Parser needs refactoring. *)\r\r superclassPrefix = outerReceiver |\r                              (tokenFromSymbol: #self) |  \r                              (tokenFromSymbol: #super).\r\r outerReceiver = (tokenFromSymbol: #outer) , identifier.\r\r classHeader =  (identifier, messagePattern, equalSign, \r                        superclassClause opt, lparen,  classComment opt, \r                        slotDecls opt, initExprs,  rparen) |\r                        (identifier, empty, equalSign,\r                        superclassClause opt, lparen,  classComment opt, \r                        slotDecls opt,  initExprs, rparen).\r(* A gross hack to allow for a default constructor pattern.  This should at least be refactored (note the awful use of empty to keep the arity the same for the wrapper in the parser. Ugh). \rIt would be nice to just say messagePattern opt]. Alas, because the '|' operator  'cuts' at the first successful branch  rather than evaluating all branches in parallel or backtracking, this won't work. *)\r classDeclaration = (tokenFromSymbol: #class), classHeader, sideDecl, classSideDecl opt.\r\r inheritanceClause = superclassClause.\r\r instanceInitializer = lparen,  classComment opt, \r                        slotDecls opt,  initExprs, rparen.\r\r classBody = instanceInitializer, sideDecl, classSideDecl opt.\r\r mixinAppSuffix = ((tokenFromSymbol: #'<:'), inheritanceClause) plus, (dot | classBody).\r\r mixinSpec = classBody | mixinAppSuffix.\r\r explicitInheritanceListAndOrBody = inheritanceClause, mixinSpec.\r\r defaultSuperclassAndBody = classBody.\r\r inheritanceListAndOrBody = defaultSuperclassAndBody | explicitInheritanceListAndOrBody.\r\r classDecl =  ((tokenFromSymbol: #class), identifier, messagePattern, equalSign, \r                        inheritanceListAndOrBody) |\r                        ((tokenFromSymbol: #class), identifier, empty, equalSign,\r                        inheritanceListAndOrBody).\r\r toplevelClass = classCategory, classDecl.\r\r compilationUnit =  languageId, toplevelClass, eoi.\r\r doItExpression = codeBody, eoi.\r|)";
			this.slots = [
				new SM("whitespace", false, false),
				new SM("colon", false, false),
				new SM("comma", false, false),
				new SM("dollar", false, false),
				new SM("dot", false, false),
				new SM("equalSign", false, false),
				new SM("hat", false, false),
				new SM("lbracket", false, false),
				new SM("lcurly", false, false),
				new SM("lparen", false, false),
				new SM("langleBracket", false, false),
				new SM("pound", false, false),
				new SM("rangleBracket", false, false),
				new SM("rbracket", false, false),
				new SM("rcurly", false, false),
				new SM("rparen", false, false),
				new SM("semicolon", false, false),
				new SM("slash", false, false),
				new SM("vbar", false, false),
				new SM("mixinOperator", false, false),
				new SM("inverseMixinOperator", false, false),
				new SM("eventualSendOperator", false, false),
				new SM("digit", false, false),
				new SM("digits", false, false),
				new SM("uppercaseLetter", false, false),
				new SM("extendedDigits", false, false),
				new SM("radix", false, false),
				new SM("fraction", false, false),
				new SM("extendedFraction", false, false),
				new SM("exponent", false, false),
				new SM("decimalNum", false, false),
				new SM("radixNum", false, false),
				new SM("num", false, false),
				new SM("number", false, false),
				new SM("letter", false, false),
				new SM("specialCharacter", false, false),
				new SM("character", false, false),
				new SM("id", false, false),
				new SM("identifier", false, false),
				new SM("charIncludingQuotesAndSpace", false, false),
				new SM("newChar", false, false),
				new SM("oldChar", false, false),
				new SM("characterConstant", false, false),
				new SM("str", false, false),
				new SM("string", false, false),
				new SM("kw", false, false),
				new SM("kwds", false, false),
				new SM("keyword", false, false),
				new SM("setterKw", false, false),
				new SM("setterKeyword", false, false),
				new SM("sym", false, false),
				new SM("symbol", false, false),
				new SM("comment", false, false),
				new SM("binSel", false, false),
				new SM("binarySelector", false, false),
				new SM("symbolConstant", false, false),
				new SM("tuple", false, false),
				new SM("literal", false, false),
				new SM("pattern", false, false),
				new SM("patternLiteral", false, false),
				new SM("wildcardPattern", false, false),
				new SM("literalPattern", false, false),
				new SM("keywordPattern", false, false),
				new SM("kwPatternPair", false, false),
				new SM("kwPatternValue", false, false),
				new SM("variablePattern", false, false),
				new SM("nestedPatternLiteral", false, false),
				new SM("slotName", false, false),
				new SM("unarySelector", false, false),
				new SM("parenthesizedExpression", false, false),
				new SM("primary", false, false),
				new SM("unaryMsg", false, false),
				new SM("unaryExpression", false, false),
				new SM("binaryMsg", false, false),
				new SM("binaryExpression", false, false),
				new SM("keywordMsg", false, false),
				new SM("message", false, false),
				new SM("nontrivialUnaryMessages", false, false),
				new SM("nontrivialBinaryMessages", false, false),
				new SM("keywordMessages", false, false),
				new SM("nonEmptyMessages", false, false),
				new SM("keywordExpression", false, false),
				new SM("keywordHereSend", false, false),
				new SM("cascadeMsg", false, false),
				new SM("msgCascade", false, false),
				new SM("cascadedMessageExpression", false, false),
				new SM("sendExpression", false, false),
				new SM("expression", false, false),
				new SM("returnStatement", false, false),
				new SM("furtherStatements", false, false),
				new SM("statementSequence", false, false),
				new SM("statements", false, false),
				new SM("blockParameter", false, false),
				new SM("blockParameters", false, false),
				new SM("slotDefs", false, false),
				new SM("seqSlotDecls", false, false),
				new SM("simSlotDecls", false, false),
				new SM("slotDecls", false, false),
				new SM("temporaries", false, false),
				new SM("beginNSComment", false, false),
				new SM("endNSComment", false, false),
				new SM("keywordAndLiteral", false, false),
				new SM("literalMessage", false, false),
				new SM("literalMessageComment", false, false),
				new SM("codeBody", false, false),
				new SM("block", false, false),
				new SM("slotDecl", false, false),
				new SM("accessModifier", false, false),
				new SM("slotDef", false, false),
				new SM("initExprs", false, false),
				new SM("unaryMsgPattern", false, false),
				new SM("binaryMsgPattern", false, false),
				new SM("keywordMsgPattern", false, false),
				new SM("messagePattern", false, false),
				new SM("method", false, false),
				new SM("methodHeader", false, false),
				new SM("methodDecl", false, false),
				new SM("optionalFactorySection", false, false),
				new SM("classPrefix", false, false),
				new SM("mixinApplication", false, false),
				new SM("nestedClassDecl", false, false),
				new SM("category", false, false),
				new SM("classComment", false, false),
				new SM("sideDecl", false, false),
				new SM("classSideDecl", false, false),
				new SM("languageId", false, false),
				new SM("classCategory", false, false),
				new SM("superclassClause", false, false),
				new SM("superclassPrefix", false, false),
				new SM("outerReceiver", false, false),
				new SM("classHeader", false, false),
				new SM("classDeclaration", false, false),
				new SM("inheritanceClause", false, false),
				new SM("instanceInitializer", false, false),
				new SM("classBody", false, false),
				new SM("mixinAppSuffix", false, false),
				new SM("mixinSpec", false, false),
				new SM("explicitInheritanceListAndOrBody", false, false),
				new SM("defaultSuperclassAndBody", false, false),
				new SM("inheritanceListAndOrBody", false, false),
				new SM("classDecl", false, false),
				new SM("toplevelClass", false, false),
				new SM("compilationUnit", false, false),
				new SM("doItExpression", false, false)
			];
			this.methods = [
				new MM("superInit`NewspeakGrammar`NS3Grammar", true, "ExecutableGrammar"),
				new MM("instance`initializer", true, "ExecutableGrammar"),
				new MM("_", false, "_ = (\r	^char: \"_\"\r)"),
				new MM("stringBody", false, "stringBody = (\r\r\r(* As an optimization, we process the body of a string with a dedicated scanning parser.\rIt should be equivalent to:\r\r  ^(self character | self aWhitespaceChar | (self char: \"\"\" ) | self twoQuotes) star *)\r^CollectingCommentParser new \r   termBlock:[: input | | c|\r                c: input peek.\r                c isNil \r                    ifTrue:[false] (* let main routine handle end of input *)\r                    ifFalse:[c = \"'\"\r                              ifFalse:[false]\r                              ifTrue:[| pos | \r                                       pos: input position.\r                                       input next.\r                                       input peek = \"'\" ifTrue:[false] ifFalse:[input position: pos. true]\r                                     ]\r                             ]\r               ]\r)"),
				new MM("whitespace", true, null),
				new MM("setOnce`whitespace:", true, null),
				new MM("colon", true, null),
				new MM("setOnce`colon:", true, null),
				new MM("comma", true, null),
				new MM("setOnce`comma:", true, null),
				new MM("dollar", true, null),
				new MM("setOnce`dollar:", true, null),
				new MM("dot", true, null),
				new MM("setOnce`dot:", true, null),
				new MM("equalSign", true, null),
				new MM("setOnce`equalSign:", true, null),
				new MM("hat", true, null),
				new MM("setOnce`hat:", true, null),
				new MM("lbracket", true, null),
				new MM("setOnce`lbracket:", true, null),
				new MM("lcurly", true, null),
				new MM("setOnce`lcurly:", true, null),
				new MM("lparen", true, null),
				new MM("setOnce`lparen:", true, null),
				new MM("langleBracket", true, null),
				new MM("setOnce`langleBracket:", true, null),
				new MM("pound", true, null),
				new MM("setOnce`pound:", true, null),
				new MM("rangleBracket", true, null),
				new MM("setOnce`rangleBracket:", true, null),
				new MM("rbracket", true, null),
				new MM("setOnce`rbracket:", true, null),
				new MM("rcurly", true, null),
				new MM("setOnce`rcurly:", true, null),
				new MM("rparen", true, null),
				new MM("setOnce`rparen:", true, null),
				new MM("semicolon", true, null),
				new MM("setOnce`semicolon:", true, null),
				new MM("slash", true, null),
				new MM("setOnce`slash:", true, null),
				new MM("vbar", true, null),
				new MM("setOnce`vbar:", true, null),
				new MM("mixinOperator", true, null),
				new MM("setOnce`mixinOperator:", true, null),
				new MM("inverseMixinOperator", true, null),
				new MM("setOnce`inverseMixinOperator:", true, null),
				new MM("eventualSendOperator", true, null),
				new MM("setOnce`eventualSendOperator:", true, null),
				new MM("digit", true, null),
				new MM("setOnce`digit:", true, null),
				new MM("digits", true, null),
				new MM("setOnce`digits:", true, null),
				new MM("uppercaseLetter", true, null),
				new MM("setOnce`uppercaseLetter:", true, null),
				new MM("extendedDigits", true, null),
				new MM("setOnce`extendedDigits:", true, null),
				new MM("radix", true, null),
				new MM("setOnce`radix:", true, null),
				new MM("fraction", true, null),
				new MM("setOnce`fraction:", true, null),
				new MM("extendedFraction", true, null),
				new MM("setOnce`extendedFraction:", true, null),
				new MM("exponent", true, null),
				new MM("setOnce`exponent:", true, null),
				new MM("decimalNum", true, null),
				new MM("setOnce`decimalNum:", true, null),
				new MM("radixNum", true, null),
				new MM("setOnce`radixNum:", true, null),
				new MM("num", true, null),
				new MM("setOnce`num:", true, null),
				new MM("number", true, null),
				new MM("setOnce`number:", true, null),
				new MM("letter", true, null),
				new MM("setOnce`letter:", true, null),
				new MM("specialCharacter", true, null),
				new MM("setOnce`specialCharacter:", true, null),
				new MM("character", true, null),
				new MM("setOnce`character:", true, null),
				new MM("id", true, null),
				new MM("setOnce`id:", true, null),
				new MM("identifier", true, null),
				new MM("setOnce`identifier:", true, null),
				new MM("charIncludingQuotesAndSpace", true, null),
				new MM("setOnce`charIncludingQuotesAndSpace:", true, null),
				new MM("newChar", true, null),
				new MM("setOnce`newChar:", true, null),
				new MM("oldChar", true, null),
				new MM("setOnce`oldChar:", true, null),
				new MM("characterConstant", true, null),
				new MM("setOnce`characterConstant:", true, null),
				new MM("str", true, null),
				new MM("setOnce`str:", true, null),
				new MM("string", true, null),
				new MM("setOnce`string:", true, null),
				new MM("kw", true, null),
				new MM("setOnce`kw:", true, null),
				new MM("kwds", true, null),
				new MM("setOnce`kwds:", true, null),
				new MM("keyword", true, null),
				new MM("setOnce`keyword:", true, null),
				new MM("setterKw", true, null),
				new MM("setOnce`setterKw:", true, null),
				new MM("setterKeyword", true, null),
				new MM("setOnce`setterKeyword:", true, null),
				new MM("sym", true, null),
				new MM("setOnce`sym:", true, null),
				new MM("symbol", true, null),
				new MM("setOnce`symbol:", true, null),
				new MM("comment", true, null),
				new MM("setOnce`comment:", true, null),
				new MM("binSel", true, null),
				new MM("setOnce`binSel:", true, null),
				new MM("binarySelector", true, null),
				new MM("setOnce`binarySelector:", true, null),
				new MM("symbolConstant", true, null),
				new MM("setOnce`symbolConstant:", true, null),
				new MM("tuple", true, null),
				new MM("setOnce`tuple:", true, null),
				new MM("literal", true, null),
				new MM("setOnce`literal:", true, null),
				new MM("pattern", true, null),
				new MM("setOnce`pattern:", true, null),
				new MM("patternLiteral", true, null),
				new MM("setOnce`patternLiteral:", true, null),
				new MM("wildcardPattern", true, null),
				new MM("setOnce`wildcardPattern:", true, null),
				new MM("literalPattern", true, null),
				new MM("setOnce`literalPattern:", true, null),
				new MM("keywordPattern", true, null),
				new MM("setOnce`keywordPattern:", true, null),
				new MM("kwPatternPair", true, null),
				new MM("setOnce`kwPatternPair:", true, null),
				new MM("kwPatternValue", true, null),
				new MM("setOnce`kwPatternValue:", true, null),
				new MM("variablePattern", true, null),
				new MM("setOnce`variablePattern:", true, null),
				new MM("nestedPatternLiteral", true, null),
				new MM("setOnce`nestedPatternLiteral:", true, null),
				new MM("slotName", true, null),
				new MM("setOnce`slotName:", true, null),
				new MM("unarySelector", true, null),
				new MM("setOnce`unarySelector:", true, null),
				new MM("parenthesizedExpression", true, null),
				new MM("setOnce`parenthesizedExpression:", true, null),
				new MM("primary", true, null),
				new MM("setOnce`primary:", true, null),
				new MM("unaryMsg", true, null),
				new MM("setOnce`unaryMsg:", true, null),
				new MM("unaryExpression", true, null),
				new MM("setOnce`unaryExpression:", true, null),
				new MM("binaryMsg", true, null),
				new MM("setOnce`binaryMsg:", true, null),
				new MM("binaryExpression", true, null),
				new MM("setOnce`binaryExpression:", true, null),
				new MM("keywordMsg", true, null),
				new MM("setOnce`keywordMsg:", true, null),
				new MM("message", true, null),
				new MM("setOnce`message:", true, null),
				new MM("nontrivialUnaryMessages", true, null),
				new MM("setOnce`nontrivialUnaryMessages:", true, null),
				new MM("nontrivialBinaryMessages", true, null),
				new MM("setOnce`nontrivialBinaryMessages:", true, null),
				new MM("keywordMessages", true, null),
				new MM("setOnce`keywordMessages:", true, null),
				new MM("nonEmptyMessages", true, null),
				new MM("setOnce`nonEmptyMessages:", true, null),
				new MM("keywordExpression", true, null),
				new MM("setOnce`keywordExpression:", true, null),
				new MM("keywordHereSend", true, null),
				new MM("setOnce`keywordHereSend:", true, null),
				new MM("cascadeMsg", true, null),
				new MM("setOnce`cascadeMsg:", true, null),
				new MM("msgCascade", true, null),
				new MM("setOnce`msgCascade:", true, null),
				new MM("cascadedMessageExpression", true, null),
				new MM("setOnce`cascadedMessageExpression:", true, null),
				new MM("sendExpression", true, null),
				new MM("setOnce`sendExpression:", true, null),
				new MM("expression", true, null),
				new MM("setOnce`expression:", true, null),
				new MM("returnStatement", true, null),
				new MM("setOnce`returnStatement:", true, null),
				new MM("furtherStatements", true, null),
				new MM("setOnce`furtherStatements:", true, null),
				new MM("statementSequence", true, null),
				new MM("setOnce`statementSequence:", true, null),
				new MM("statements", true, null),
				new MM("setOnce`statements:", true, null),
				new MM("blockParameter", true, null),
				new MM("setOnce`blockParameter:", true, null),
				new MM("blockParameters", true, null),
				new MM("setOnce`blockParameters:", true, null),
				new MM("slotDefs", true, null),
				new MM("setOnce`slotDefs:", true, null),
				new MM("seqSlotDecls", true, null),
				new MM("setOnce`seqSlotDecls:", true, null),
				new MM("simSlotDecls", true, null),
				new MM("setOnce`simSlotDecls:", true, null),
				new MM("slotDecls", true, null),
				new MM("setOnce`slotDecls:", true, null),
				new MM("temporaries", true, null),
				new MM("setOnce`temporaries:", true, null),
				new MM("beginNSComment", true, null),
				new MM("setOnce`beginNSComment:", true, null),
				new MM("endNSComment", true, null),
				new MM("setOnce`endNSComment:", true, null),
				new MM("keywordAndLiteral", true, null),
				new MM("setOnce`keywordAndLiteral:", true, null),
				new MM("literalMessage", true, null),
				new MM("setOnce`literalMessage:", true, null),
				new MM("literalMessageComment", true, null),
				new MM("setOnce`literalMessageComment:", true, null),
				new MM("codeBody", true, null),
				new MM("setOnce`codeBody:", true, null),
				new MM("block", true, null),
				new MM("setOnce`block:", true, null),
				new MM("slotDecl", true, null),
				new MM("setOnce`slotDecl:", true, null),
				new MM("accessModifier", true, null),
				new MM("setOnce`accessModifier:", true, null),
				new MM("slotDef", true, null),
				new MM("setOnce`slotDef:", true, null),
				new MM("initExprs", true, null),
				new MM("setOnce`initExprs:", true, null),
				new MM("unaryMsgPattern", true, null),
				new MM("setOnce`unaryMsgPattern:", true, null),
				new MM("binaryMsgPattern", true, null),
				new MM("setOnce`binaryMsgPattern:", true, null),
				new MM("keywordMsgPattern", true, null),
				new MM("setOnce`keywordMsgPattern:", true, null),
				new MM("messagePattern", true, null),
				new MM("setOnce`messagePattern:", true, null),
				new MM("method", true, null),
				new MM("setOnce`method:", true, null),
				new MM("methodHeader", true, null),
				new MM("setOnce`methodHeader:", true, null),
				new MM("methodDecl", true, null),
				new MM("setOnce`methodDecl:", true, null),
				new MM("optionalFactorySection", true, null),
				new MM("setOnce`optionalFactorySection:", true, null),
				new MM("classPrefix", true, null),
				new MM("setOnce`classPrefix:", true, null),
				new MM("mixinApplication", true, null),
				new MM("setOnce`mixinApplication:", true, null),
				new MM("nestedClassDecl", true, null),
				new MM("setOnce`nestedClassDecl:", true, null),
				new MM("category", true, null),
				new MM("setOnce`category:", true, null),
				new MM("classComment", true, null),
				new MM("setOnce`classComment:", true, null),
				new MM("sideDecl", true, null),
				new MM("setOnce`sideDecl:", true, null),
				new MM("classSideDecl", true, null),
				new MM("setOnce`classSideDecl:", true, null),
				new MM("languageId", true, null),
				new MM("setOnce`languageId:", true, null),
				new MM("classCategory", true, null),
				new MM("setOnce`classCategory:", true, null),
				new MM("superclassClause", true, null),
				new MM("setOnce`superclassClause:", true, null),
				new MM("superclassPrefix", true, null),
				new MM("setOnce`superclassPrefix:", true, null),
				new MM("outerReceiver", true, null),
				new MM("setOnce`outerReceiver:", true, null),
				new MM("classHeader", true, null),
				new MM("setOnce`classHeader:", true, null),
				new MM("classDeclaration", true, null),
				new MM("setOnce`classDeclaration:", true, null),
				new MM("inheritanceClause", true, null),
				new MM("setOnce`inheritanceClause:", true, null),
				new MM("instanceInitializer", true, null),
				new MM("setOnce`instanceInitializer:", true, null),
				new MM("classBody", true, null),
				new MM("setOnce`classBody:", true, null),
				new MM("mixinAppSuffix", true, null),
				new MM("setOnce`mixinAppSuffix:", true, null),
				new MM("mixinSpec", true, null),
				new MM("setOnce`mixinSpec:", true, null),
				new MM("explicitInheritanceListAndOrBody", true, null),
				new MM("setOnce`explicitInheritanceListAndOrBody:", true, null),
				new MM("defaultSuperclassAndBody", true, null),
				new MM("setOnce`defaultSuperclassAndBody:", true, null),
				new MM("inheritanceListAndOrBody", true, null),
				new MM("setOnce`inheritanceListAndOrBody:", true, null),
				new MM("classDecl", true, null),
				new MM("setOnce`classDecl:", true, null),
				new MM("toplevelClass", true, null),
				new MM("setOnce`toplevelClass:", true, null),
				new MM("compilationUnit", true, null),
				new MM("setOnce`compilationUnit:", true, null),
				new MM("doItExpression", true, null),
				new MM("setOnce`doItExpression:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakGrammar$NS3Grammar = (function () {
				var self = this;
				self.$super$NewspeakGrammar$NS3Grammar$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakGrammar$NS3Grammar();
				self._$setOnce$whitespace$(self.$super$NewspeakGrammar$NS3Grammar$slot._$whitespace.call(self));
				self._$setOnce$colon$(self._$tokenFromChar$(":"));
				self._$setOnce$comma$(self._$tokenFromChar$(","));
				self._$setOnce$dollar$(self._$tokenFromChar$("$"));
				self._$setOnce$dot$(self._$tokenFromChar$("."));
				self._$setOnce$equalSign$(self._$tokenFromChar$("="));
				self._$setOnce$hat$(self._$tokenFromChar$("^"));
				self._$setOnce$lbracket$(self._$tokenFromChar$("["));
				self._$setOnce$lcurly$(self._$tokenFromChar$("{"));
				self._$setOnce$lparen$(self._$tokenFromChar$("("));
				self._$setOnce$langleBracket$(self._$tokenFromChar$("<"));
				self._$setOnce$pound$(self._$tokenFromChar$("#"));
				self._$setOnce$rangleBracket$(self._$tokenFromChar$(">"));
				self._$setOnce$rbracket$(self._$tokenFromChar$("]"));
				self._$setOnce$rcurly$(self._$tokenFromChar$("}"));
				self._$setOnce$rparen$(self._$tokenFromChar$(")"));
				self._$setOnce$semicolon$(self._$tokenFromChar$(";"));
				self._$setOnce$slash$(self._$tokenFromChar$("/"));
				self._$setOnce$vbar$(self._$tokenFromChar$("|"));
				self._$setOnce$mixinOperator$(self._$tokenFromSymbol$(":>"));
				self._$setOnce$inverseMixinOperator$(self._$tokenFromSymbol$("<:"));
				self._$setOnce$eventualSendOperator$(self._$tokenFromSymbol$("<-:"));
				self._$setOnce$digit$(self._$charBetween$and$("0", "9"));
				self._$setOnce$digits$(self._$digit().$plus());
				self._$setOnce$uppercaseLetter$(self._$charBetween$and$("A", "Z"));
				self._$setOnce$extendedDigits$(self._$digit().$$pipe(self._$uppercaseLetter()).$plus());
				self._$setOnce$radix$(self._$digits().$$comma(self._$char$("r")));
				self._$setOnce$fraction$(self._$char$(".").$$comma(self._$digits()));
				self._$setOnce$extendedFraction$(self._$char$(".").$$comma(self._$extendedDigits()));
				self._$setOnce$exponent$(self._$char$("e").$$comma(self._$char$("-").$opt()).$$comma(self._$digits()));
				self._$setOnce$decimalNum$(self._$char$("-").$opt().$$comma(self._$digits()).$$comma(self._$fraction().$opt()).$$comma(self._$exponent().$opt()));
				self._$setOnce$radixNum$(self._$radix().$$comma(self._$char$("-").$opt()).$$comma(self._$extendedDigits()).$$comma(self._$extendedFraction().$opt()).$$comma(self._$exponent().$opt()));
				self._$setOnce$num$(self._$radixNum().$$pipe(self._$decimalNum()));
				self._$setOnce$number$(self._$tokenFor$(self._$num()));
				self._$setOnce$letter$(self._$uppercaseLetter().$$pipe(self._$charBetween$and$("a", "z")));
				self._$setOnce$specialCharacter$(self._$char$("+").$$pipe(self._$char$("/")).$$pipe(self._$char$("\\")).$$pipe(self._$char$("*")).$$pipe(self._$char$("~")).$$pipe(self._$char$("<")).$$pipe(self._$char$(">")).$$pipe(self._$char$("=")).$$pipe(self._$char$("@")).$$pipe(self._$char$("%")).$$pipe(self._$char$("|")).$$pipe(self._$char$("&")).$$pipe(self._$char$("?")).$$pipe(self._$char$("!")).$$pipe(self._$char$(",")));
				self._$setOnce$character$(self._$digit().$$pipe(self._$letter()).$$pipe(self._$specialCharacter()).$$pipe(self._$char$("[")).$$pipe(self._$char$("]")).$$pipe(self._$char$("{")).$$pipe(self._$char$("}")).$$pipe(self._$char$("(")).$$pipe(self._$char$(")")).$$pipe(self._$char$("^")).$$pipe(self._$char$(";")).$$pipe(self._$char$("$")).$$pipe(self._$char$("#")).$$pipe(self._$char$(":")).$$pipe(self._$char$(".")).$$pipe(self._$char$("-")).$$pipe(self._$char$("_")).$$pipe(self._$char$("`")));
				self._$setOnce$id$(self._$letter().$$pipe(self._$_()).$$comma(self._$letter().$$pipe(self._$digit()).$$pipe(self._$_()).$star()).$wrapper$((function ($fst, $snd) {
					return $fst.$asString().$$comma(self._$String().$withAll$($snd));
				})));
				self._$setOnce$identifier$(self._$tokenFor$(self._$id()));
				self._$setOnce$charIncludingQuotesAndSpace$(self._$character().$$pipe(self._$char$("'")).$$pipe(self._$char$("\"")).$$pipe(self._$char$(" ")));
				self._$setOnce$newChar$(self._$tokenFor$(self._$char$("\"").$$comma(self._$charIncludingQuotesAndSpace()).$$comma(self._$char$("\""))));
				self._$setOnce$oldChar$(self._$tokenFor$(self._$char$("$").$$comma(self._$charIncludingQuotesAndSpace())));
				self._$setOnce$characterConstant$(self._$oldChar().$$pipe(self._$newChar()));
				self._$setOnce$str$(self._$char$("'").$$comma(self._$stringBody()).$$comma(self._$char$("'")).$wrapper$((function ($oq, $es, $eq) {
					return $es.$inject$into$("", (function ($s, $e) {
						return $s.$$comma($e.$asString());
					}));
				})));
				self._$setOnce$string$(self._$tokenFor$(self._$str()));
				self._$setOnce$kw$(self._$id().$$comma(self._$char$(":")).$wrapper$((function ($i, $c) {
					return $i.$$comma((":").$asString());
				})));
				self._$setOnce$kwds$(self._$kw().$plus().$wrap$((function ($c) {
					return $c.$inject$into$("", (function ($s, $e) {
						return $s.$$comma($e);
					}));
				})));
				self._$setOnce$keyword$(self._$tokenFor$(self._$kw()));
				self._$setOnce$setterKw$(self._$kw().$$comma(self._$char$(":")).$wrapper$((function ($i, $c) {
					return $i.$$comma((":").$asString());
				})));
				self._$setOnce$setterKeyword$(self._$tokenFor$(self._$setterKw()));
				self._$setOnce$sym$(self._$str().$$pipe(self._$kwds()).$$pipe(self._$binSel()).$$pipe(self._$id()));
				self._$setOnce$symbol$(self._$tokenFor$(self._$sym()));
				self._$setOnce$comment$(self.$enclosingObjects$NewspeakGrammar$NS3Grammar[0]._$NSCommentParser().$new());
				self._$setOnce$binSel$(self._$specialCharacter().$$pipe(self._$char$("-")).$$comma(self._$specialCharacter().$star()).$wrapper$((function ($c1, $c2) {
					return $c2.$isEmpty().$ifTrue$ifFalse$((function () {
						return $c1.$asString().$asSymbol();
					}), (function () {
						return $c1.$asString().$$comma($c2.$inject$into$("", (function ($s, $e) {
							return $s.$$comma($e.$asString());
						}))).$asSymbol();
					}));
				})));
				self._$setOnce$binarySelector$(self._$tokenFor$(self._$binSel()));
				self._$setOnce$symbolConstant$(self._$pound().$$comma(self._$symbol()));
				self._$setOnce$tuple$(self._$lcurly().$$comma(self._$expression().$starSeparatedOrTerminatedBy$(self._$dot())).$$comma(self._$rcurly()));
				self._$setOnce$literal$(self._$pattern().$$pipe(self._$number()).$$pipe(self._$symbolConstant()).$$pipe(self._$characterConstant()).$$pipe(self._$string()).$$pipe(self._$tuple()));
				self._$setOnce$pattern$(self._$tokenFromChar$("<").$$comma(self._$patternLiteral()).$$comma(self._$tokenFromChar$(">")));
				self._$setOnce$patternLiteral$(self._$wildcardPattern().$$pipe(self._$literalPattern()).$$pipe(self._$keywordPattern()));
				self._$setOnce$wildcardPattern$(self._$tokenFromChar$("_"));
				self._$setOnce$literalPattern$(self._$tokenFor$(self._$number().$$pipe(self._$symbolConstant()).$$pipe(self._$characterConstant()).$$pipe(self._$string()).$$pipe(self._$tuple())));
				self._$setOnce$keywordPattern$(self._$kwPatternPair().$plus());
				self._$setOnce$kwPatternPair$(self._$keyword().$$comma(self._$kwPatternValue().$opt()));
				self._$setOnce$kwPatternValue$(self._$wildcardPattern().$$pipe(self._$literalPattern()).$$pipe(self._$variablePattern()).$$pipe(self._$nestedPatternLiteral()));
				self._$setOnce$variablePattern$(self._$tokenFor$(self._$char$("?").$$comma(self._$id())));
				self._$setOnce$nestedPatternLiteral$(self._$tokenFor$(self._$pattern()));
				self._$setOnce$slotName$(self._$identifier());
				self._$setOnce$unarySelector$(self.$enclosingObjects$NewspeakGrammar$NS3Grammar[0]._$UnarySelectorParser().$new().$on$(self));
				self._$setOnce$parenthesizedExpression$(self._$lparen().$$comma(self._$expression()).$$comma(self._$rparen()));
				self._$setOnce$primary$(self._$slotName().$$pipe(self._$literal()).$$pipe(self._$block()).$$pipe(self._$parenthesizedExpression()));
				self._$setOnce$unaryMsg$(self._$eventualSendOperator().$opt().$$comma(self._$unarySelector()));
				self._$setOnce$unaryExpression$(self._$primary().$$comma(self._$unaryMsg().$star()));
				self._$setOnce$binaryMsg$(self._$eventualSendOperator().$opt().$$comma(self._$binarySelector()).$$comma(self._$unaryExpression()));
				self._$setOnce$binaryExpression$(self._$unaryExpression().$$comma(self._$binaryMsg().$star()));
				self._$setOnce$keywordMsg$(self._$eventualSendOperator().$opt().$$comma(self._$keyword().$$comma(self._$binaryExpression()).$plus()));
				self._$setOnce$message$(self._$keywordMsg().$$pipe(self._$binaryMsg()).$$pipe(self._$unaryMsg()));
				self._$setOnce$nontrivialUnaryMessages$(self._$unaryMsg().$plus().$$comma(self._$binaryMsg().$star()).$$comma(self._$keywordMsg().$opt()));
				self._$setOnce$nontrivialBinaryMessages$(self._$binaryMsg().$plus().$$comma(self._$keywordMsg().$opt()));
				self._$setOnce$keywordMessages$(self._$keywordMsg());
				self._$setOnce$nonEmptyMessages$(self._$nontrivialUnaryMessages().$$pipe(self._$nontrivialBinaryMessages()).$$pipe(self._$keywordMessages()));
				self._$setOnce$keywordExpression$(self._$binaryExpression().$$comma(self._$keywordMsg().$opt()));
				self._$setOnce$keywordHereSend$(self._$keywordMsg());
				self._$setOnce$cascadeMsg$(self._$semicolon().$$comma(self._$keywordMsg().$$pipe(self._$binaryMsg()).$$pipe(self._$unaryMsg())));
				self._$setOnce$msgCascade$(self._$nonEmptyMessages().$$comma(self._$cascadeMsg().$star()));
				self._$setOnce$cascadedMessageExpression$(self._$primary().$$comma(self._$msgCascade().$opt()));
				self._$setOnce$sendExpression$(self._$keywordHereSend().$$pipe(self._$cascadedMessageExpression()));
				self._$setOnce$expression$(self._$setterKeyword().$star().$$comma(self._$sendExpression()));
				self._$setOnce$returnStatement$(self._$hat().$$comma(self._$expression()).$$comma(self._$dot().$opt()));
				self._$setOnce$furtherStatements$(self._$dot().$$comma(self._$statements()));
				self._$setOnce$statementSequence$(self._$expression().$$comma(self._$furtherStatements().$opt()));
				self._$setOnce$statements$(self._$returnStatement().$$pipe(self._$statementSequence()).$$pipe(self._$empty()));
				self._$setOnce$blockParameter$(self._$colon().$$comma(self._$slotDecl()));
				self._$setOnce$blockParameters$(self._$blockParameter().$plus().$$comma(self._$vbar()));
				self._$setOnce$slotDefs$(self._$slotDef().$star());
				self._$setOnce$seqSlotDecls$(self._$vbar().$$comma(self._$slotDefs()).$$comma(self._$vbar()));
				self._$setOnce$simSlotDecls$(self._$vbar().$$comma(self._$vbar()).$$comma(self._$slotDefs()).$$comma(self._$vbar()).$$comma(self._$vbar()));
				self._$setOnce$slotDecls$(self._$simSlotDecls().$$pipe(self._$seqSlotDecls()));
				self._$setOnce$temporaries$(self._$slotDecls());
				self._$setOnce$beginNSComment$(self._$char$("(").$$comma(self._$char$("*")));
				self._$setOnce$endNSComment$(self._$char$("*").$$comma(self._$char$(")")));
				self._$setOnce$keywordAndLiteral$(self._$keyword().$$comma(self._$literal()));
				self._$setOnce$literalMessage$(self._$unaryMsg().$$pipe(self._$keywordAndLiteral().$plus()));
				self._$setOnce$literalMessageComment$(self._$beginNSComment().$$comma(self._$tokenFromSymbol$(":literalmessage:")).$$comma(self._$whitespace().$opt()).$$comma(self._$literalMessage()).$$comma(self._$whitespace().$opt()).$$comma(self._$endNSComment()));
				self._$setOnce$codeBody$(self._$literalMessageComment().$$pipe(self._$comment()).$$pipe(self._$whitespace()).$star().$$comma(self._$temporaries().$opt()).$$comma(self._$statements()));
				self._$setOnce$block$(self._$lbracket().$$comma(self._$blockParameters().$opt()).$$comma(self._$codeBody()).$$comma(self._$rbracket()));
				self._$setOnce$slotDecl$(self._$identifier());
				self._$setOnce$accessModifier$(self._$tokenFromSymbol$("private").$$pipe(self._$tokenFromSymbol$("public")).$$pipe(self._$tokenFromSymbol$("protected")).$$comma(self._$whitespace()));
				self._$setOnce$slotDef$(self._$accessModifier().$opt().$$comma(self._$slotDecl()).$$comma(self._$tokenFromSymbol$("=").$$pipe(self._$tokenFromSymbol$("::=")).$$comma(self._$expression()).$$comma(self._$dot()).$opt()));
				self._$setOnce$initExprs$(self._$expression().$starSeparatedOrTerminatedBy$(self._$dot()));
				self._$setOnce$unaryMsgPattern$(self._$unarySelector());
				self._$setOnce$binaryMsgPattern$(self._$binarySelector().$$comma(self._$slotDecl()));
				self._$setOnce$keywordMsgPattern$(self._$keyword().$$comma(self._$slotDecl()).$plus());
				self._$setOnce$messagePattern$(self._$unaryMsgPattern().$$pipe(self._$binaryMsgPattern()).$$pipe(self._$keywordMsgPattern()));
				self._$setOnce$method$(self._$messagePattern().$$comma(self._$codeBody()).$$comma(self._$eoi()));
				self._$setOnce$methodHeader$(self._$accessModifier().$opt().$$comma(self._$messagePattern()));
				self._$setOnce$methodDecl$(self._$accessModifier().$opt().$$comma(self._$messagePattern()).$$comma(self._$equalSign()).$$comma(self._$lparen()).$$comma(self._$codeBody()).$$comma(self._$rparen()));
				self._$setOnce$optionalFactorySection$(self._$messagePattern().$opt().$$comma(self._$equalSign()));
				self._$setOnce$classPrefix$(self._$tokenFromSymbol$("class").$$comma(self._$identifier()).$$comma(self._$optionalFactorySection()).$$comma(self._$superclassClause().$opt()));
				self._$setOnce$mixinApplication$(self._$classPrefix().$$comma(self._$inverseMixinOperator()).$$comma(self._$sendExpression()));
				self._$setOnce$nestedClassDecl$(self._$accessModifier().$opt().$$comma(self._$classDecl()));
				self._$setOnce$category$(self._$string().$$comma(self._$methodDecl().$star()));
				self._$setOnce$classComment$(self._$whitespace().$opt().$$comma(self._$comment()));
				self._$setOnce$sideDecl$(self._$lparen().$$comma(self._$nestedClassDecl().$star()).$$comma(self._$category().$star()).$$comma(self._$rparen()));
				self._$setOnce$classSideDecl$(self._$colon().$$comma(self._$lparen()).$$comma(self._$category().$star()).$$comma(self._$rparen()));
				self._$setOnce$languageId$(self._$identifier());
				self._$setOnce$classCategory$(self._$string().$opt());
				self._$setOnce$superclassClause$(self._$superclassPrefix().$opt().$$comma(self._$unaryMsg()).$$comma(self._$message().$opt()));
				self._$setOnce$superclassPrefix$(self._$outerReceiver().$$pipe(self._$tokenFromSymbol$("self")).$$pipe(self._$tokenFromSymbol$("super")));
				self._$setOnce$outerReceiver$(self._$tokenFromSymbol$("outer").$$comma(self._$identifier()));
				self._$setOnce$classHeader$(self._$identifier().$$comma(self._$messagePattern()).$$comma(self._$equalSign()).$$comma(self._$superclassClause().$opt()).$$comma(self._$lparen()).$$comma(self._$classComment().$opt()).$$comma(self._$slotDecls().$opt()).$$comma(self._$initExprs()).$$comma(self._$rparen()).$$pipe(self._$identifier().$$comma(self._$empty()).$$comma(self._$equalSign()).$$comma(self._$superclassClause().$opt()).$$comma(self._$lparen()).$$comma(self._$classComment().$opt()).$$comma(self._$slotDecls().$opt()).$$comma(self._$initExprs()).$$comma(self._$rparen())));
				self._$setOnce$classDeclaration$(self._$tokenFromSymbol$("class").$$comma(self._$classHeader()).$$comma(self._$sideDecl()).$$comma(self._$classSideDecl().$opt()));
				self._$setOnce$inheritanceClause$(self._$superclassClause());
				self._$setOnce$instanceInitializer$(self._$lparen().$$comma(self._$classComment().$opt()).$$comma(self._$slotDecls().$opt()).$$comma(self._$initExprs()).$$comma(self._$rparen()));
				self._$setOnce$classBody$(self._$instanceInitializer().$$comma(self._$sideDecl()).$$comma(self._$classSideDecl().$opt()));
				self._$setOnce$mixinAppSuffix$(self._$tokenFromSymbol$("<:").$$comma(self._$inheritanceClause()).$plus().$$comma(self._$dot().$$pipe(self._$classBody())));
				self._$setOnce$mixinSpec$(self._$classBody().$$pipe(self._$mixinAppSuffix()));
				self._$setOnce$explicitInheritanceListAndOrBody$(self._$inheritanceClause().$$comma(self._$mixinSpec()));
				self._$setOnce$defaultSuperclassAndBody$(self._$classBody());
				self._$setOnce$inheritanceListAndOrBody$(self._$defaultSuperclassAndBody().$$pipe(self._$explicitInheritanceListAndOrBody()));
				self._$setOnce$classDecl$(self._$tokenFromSymbol$("class").$$comma(self._$identifier()).$$comma(self._$messagePattern()).$$comma(self._$equalSign()).$$comma(self._$inheritanceListAndOrBody()).$$pipe(self._$tokenFromSymbol$("class").$$comma(self._$identifier()).$$comma(self._$empty()).$$comma(self._$equalSign()).$$comma(self._$inheritanceListAndOrBody())));
				self._$setOnce$toplevelClass$(self._$classCategory().$$comma(self._$classDecl()));
				self._$setOnce$compilationUnit$(self._$languageId().$$comma(self._$toplevelClass()).$$comma(self._$eoi()));
				self._$setOnce$doItExpression$(self._$codeBody().$$comma(self._$eoi()));
				return self;
			});
			this.$_ = (function () {
				var self = this;
				return self._$char$("_");
			});
			this.$stringBody = (function () {
				var self = this;
				return $0.$CollectingCommentParser.call(self.$enclosingObjects$NewspeakGrammar$NS3Grammar[0]).$new().$termBlock$((function ($input) {
					var $c = nil;
					$c = $input.$peek();
					return $c.$isNil().$ifTrue$ifFalse$((function () {
						return false;
					}), (function () {
						return $c.$$equal("'").$ifFalse$ifTrue$((function () {
							return false;
						}), (function () {
							var $pos = nil;
							$pos = $input.$position();
							$input.$next();
							return $input.$peek().$$equal("'").$ifTrue$ifFalse$((function () {
								return false;
							}), (function () {
								$input.$position$($pos);
								return true;
							}));
						}));
					}));
				}));
			});
			this.$whitespace = (function () {
				return this.$whitespace$slot;
			});
			this.$setOnce$whitespace$ = (function (v) {
				this.$whitespace$slot = v;
				return this;
			});
			this.$colon = (function () {
				return this.$colon$slot;
			});
			this.$setOnce$colon$ = (function (v) {
				this.$colon$slot = v;
				return this;
			});
			this.$comma = (function () {
				return this.$comma$slot;
			});
			this.$setOnce$comma$ = (function (v) {
				this.$comma$slot = v;
				return this;
			});
			this.$dollar = (function () {
				return this.$dollar$slot;
			});
			this.$setOnce$dollar$ = (function (v) {
				this.$dollar$slot = v;
				return this;
			});
			this.$dot = (function () {
				return this.$dot$slot;
			});
			this.$setOnce$dot$ = (function (v) {
				this.$dot$slot = v;
				return this;
			});
			this.$equalSign = (function () {
				return this.$equalSign$slot;
			});
			this.$setOnce$equalSign$ = (function (v) {
				this.$equalSign$slot = v;
				return this;
			});
			this.$hat = (function () {
				return this.$hat$slot;
			});
			this.$setOnce$hat$ = (function (v) {
				this.$hat$slot = v;
				return this;
			});
			this.$lbracket = (function () {
				return this.$lbracket$slot;
			});
			this.$setOnce$lbracket$ = (function (v) {
				this.$lbracket$slot = v;
				return this;
			});
			this.$lcurly = (function () {
				return this.$lcurly$slot;
			});
			this.$setOnce$lcurly$ = (function (v) {
				this.$lcurly$slot = v;
				return this;
			});
			this.$lparen = (function () {
				return this.$lparen$slot;
			});
			this.$setOnce$lparen$ = (function (v) {
				this.$lparen$slot = v;
				return this;
			});
			this.$langleBracket = (function () {
				return this.$langleBracket$slot;
			});
			this.$setOnce$langleBracket$ = (function (v) {
				this.$langleBracket$slot = v;
				return this;
			});
			this.$pound = (function () {
				return this.$pound$slot;
			});
			this.$setOnce$pound$ = (function (v) {
				this.$pound$slot = v;
				return this;
			});
			this.$rangleBracket = (function () {
				return this.$rangleBracket$slot;
			});
			this.$setOnce$rangleBracket$ = (function (v) {
				this.$rangleBracket$slot = v;
				return this;
			});
			this.$rbracket = (function () {
				return this.$rbracket$slot;
			});
			this.$setOnce$rbracket$ = (function (v) {
				this.$rbracket$slot = v;
				return this;
			});
			this.$rcurly = (function () {
				return this.$rcurly$slot;
			});
			this.$setOnce$rcurly$ = (function (v) {
				this.$rcurly$slot = v;
				return this;
			});
			this.$rparen = (function () {
				return this.$rparen$slot;
			});
			this.$setOnce$rparen$ = (function (v) {
				this.$rparen$slot = v;
				return this;
			});
			this.$semicolon = (function () {
				return this.$semicolon$slot;
			});
			this.$setOnce$semicolon$ = (function (v) {
				this.$semicolon$slot = v;
				return this;
			});
			this.$slash = (function () {
				return this.$slash$slot;
			});
			this.$setOnce$slash$ = (function (v) {
				this.$slash$slot = v;
				return this;
			});
			this.$vbar = (function () {
				return this.$vbar$slot;
			});
			this.$setOnce$vbar$ = (function (v) {
				this.$vbar$slot = v;
				return this;
			});
			this.$mixinOperator = (function () {
				return this.$mixinOperator$slot;
			});
			this.$setOnce$mixinOperator$ = (function (v) {
				this.$mixinOperator$slot = v;
				return this;
			});
			this.$inverseMixinOperator = (function () {
				return this.$inverseMixinOperator$slot;
			});
			this.$setOnce$inverseMixinOperator$ = (function (v) {
				this.$inverseMixinOperator$slot = v;
				return this;
			});
			this.$eventualSendOperator = (function () {
				return this.$eventualSendOperator$slot;
			});
			this.$setOnce$eventualSendOperator$ = (function (v) {
				this.$eventualSendOperator$slot = v;
				return this;
			});
			this.$digit = (function () {
				return this.$digit$slot;
			});
			this.$setOnce$digit$ = (function (v) {
				this.$digit$slot = v;
				return this;
			});
			this.$digits = (function () {
				return this.$digits$slot;
			});
			this.$setOnce$digits$ = (function (v) {
				this.$digits$slot = v;
				return this;
			});
			this.$uppercaseLetter = (function () {
				return this.$uppercaseLetter$slot;
			});
			this.$setOnce$uppercaseLetter$ = (function (v) {
				this.$uppercaseLetter$slot = v;
				return this;
			});
			this.$extendedDigits = (function () {
				return this.$extendedDigits$slot;
			});
			this.$setOnce$extendedDigits$ = (function (v) {
				this.$extendedDigits$slot = v;
				return this;
			});
			this.$radix = (function () {
				return this.$radix$slot;
			});
			this.$setOnce$radix$ = (function (v) {
				this.$radix$slot = v;
				return this;
			});
			this.$fraction = (function () {
				return this.$fraction$slot;
			});
			this.$setOnce$fraction$ = (function (v) {
				this.$fraction$slot = v;
				return this;
			});
			this.$extendedFraction = (function () {
				return this.$extendedFraction$slot;
			});
			this.$setOnce$extendedFraction$ = (function (v) {
				this.$extendedFraction$slot = v;
				return this;
			});
			this.$exponent = (function () {
				return this.$exponent$slot;
			});
			this.$setOnce$exponent$ = (function (v) {
				this.$exponent$slot = v;
				return this;
			});
			this.$decimalNum = (function () {
				return this.$decimalNum$slot;
			});
			this.$setOnce$decimalNum$ = (function (v) {
				this.$decimalNum$slot = v;
				return this;
			});
			this.$radixNum = (function () {
				return this.$radixNum$slot;
			});
			this.$setOnce$radixNum$ = (function (v) {
				this.$radixNum$slot = v;
				return this;
			});
			this.$num = (function () {
				return this.$num$slot;
			});
			this.$setOnce$num$ = (function (v) {
				this.$num$slot = v;
				return this;
			});
			this.$number = (function () {
				return this.$number$slot;
			});
			this.$setOnce$number$ = (function (v) {
				this.$number$slot = v;
				return this;
			});
			this.$letter = (function () {
				return this.$letter$slot;
			});
			this.$setOnce$letter$ = (function (v) {
				this.$letter$slot = v;
				return this;
			});
			this.$specialCharacter = (function () {
				return this.$specialCharacter$slot;
			});
			this.$setOnce$specialCharacter$ = (function (v) {
				this.$specialCharacter$slot = v;
				return this;
			});
			this.$character = (function () {
				return this.$character$slot;
			});
			this.$setOnce$character$ = (function (v) {
				this.$character$slot = v;
				return this;
			});
			this.$id = (function () {
				return this.$id$slot;
			});
			this.$setOnce$id$ = (function (v) {
				this.$id$slot = v;
				return this;
			});
			this.$identifier = (function () {
				return this.$identifier$slot;
			});
			this.$setOnce$identifier$ = (function (v) {
				this.$identifier$slot = v;
				return this;
			});
			this.$charIncludingQuotesAndSpace = (function () {
				return this.$charIncludingQuotesAndSpace$slot;
			});
			this.$setOnce$charIncludingQuotesAndSpace$ = (function (v) {
				this.$charIncludingQuotesAndSpace$slot = v;
				return this;
			});
			this.$newChar = (function () {
				return this.$newChar$slot;
			});
			this.$setOnce$newChar$ = (function (v) {
				this.$newChar$slot = v;
				return this;
			});
			this.$oldChar = (function () {
				return this.$oldChar$slot;
			});
			this.$setOnce$oldChar$ = (function (v) {
				this.$oldChar$slot = v;
				return this;
			});
			this.$characterConstant = (function () {
				return this.$characterConstant$slot;
			});
			this.$setOnce$characterConstant$ = (function (v) {
				this.$characterConstant$slot = v;
				return this;
			});
			this.$str = (function () {
				return this.$str$slot;
			});
			this.$setOnce$str$ = (function (v) {
				this.$str$slot = v;
				return this;
			});
			this.$string = (function () {
				return this.$string$slot;
			});
			this.$setOnce$string$ = (function (v) {
				this.$string$slot = v;
				return this;
			});
			this.$kw = (function () {
				return this.$kw$slot;
			});
			this.$setOnce$kw$ = (function (v) {
				this.$kw$slot = v;
				return this;
			});
			this.$kwds = (function () {
				return this.$kwds$slot;
			});
			this.$setOnce$kwds$ = (function (v) {
				this.$kwds$slot = v;
				return this;
			});
			this.$keyword = (function () {
				return this.$keyword$slot;
			});
			this.$setOnce$keyword$ = (function (v) {
				this.$keyword$slot = v;
				return this;
			});
			this.$setterKw = (function () {
				return this.$setterKw$slot;
			});
			this.$setOnce$setterKw$ = (function (v) {
				this.$setterKw$slot = v;
				return this;
			});
			this.$setterKeyword = (function () {
				return this.$setterKeyword$slot;
			});
			this.$setOnce$setterKeyword$ = (function (v) {
				this.$setterKeyword$slot = v;
				return this;
			});
			this.$sym = (function () {
				return this.$sym$slot;
			});
			this.$setOnce$sym$ = (function (v) {
				this.$sym$slot = v;
				return this;
			});
			this.$symbol = (function () {
				return this.$symbol$slot;
			});
			this.$setOnce$symbol$ = (function (v) {
				this.$symbol$slot = v;
				return this;
			});
			this.$comment = (function () {
				return this.$comment$slot;
			});
			this.$setOnce$comment$ = (function (v) {
				this.$comment$slot = v;
				return this;
			});
			this.$binSel = (function () {
				return this.$binSel$slot;
			});
			this.$setOnce$binSel$ = (function (v) {
				this.$binSel$slot = v;
				return this;
			});
			this.$binarySelector = (function () {
				return this.$binarySelector$slot;
			});
			this.$setOnce$binarySelector$ = (function (v) {
				this.$binarySelector$slot = v;
				return this;
			});
			this.$symbolConstant = (function () {
				return this.$symbolConstant$slot;
			});
			this.$setOnce$symbolConstant$ = (function (v) {
				this.$symbolConstant$slot = v;
				return this;
			});
			this.$tuple = (function () {
				return this.$tuple$slot;
			});
			this.$setOnce$tuple$ = (function (v) {
				this.$tuple$slot = v;
				return this;
			});
			this.$literal = (function () {
				return this.$literal$slot;
			});
			this.$setOnce$literal$ = (function (v) {
				this.$literal$slot = v;
				return this;
			});
			this.$pattern = (function () {
				return this.$pattern$slot;
			});
			this.$setOnce$pattern$ = (function (v) {
				this.$pattern$slot = v;
				return this;
			});
			this.$patternLiteral = (function () {
				return this.$patternLiteral$slot;
			});
			this.$setOnce$patternLiteral$ = (function (v) {
				this.$patternLiteral$slot = v;
				return this;
			});
			this.$wildcardPattern = (function () {
				return this.$wildcardPattern$slot;
			});
			this.$setOnce$wildcardPattern$ = (function (v) {
				this.$wildcardPattern$slot = v;
				return this;
			});
			this.$literalPattern = (function () {
				return this.$literalPattern$slot;
			});
			this.$setOnce$literalPattern$ = (function (v) {
				this.$literalPattern$slot = v;
				return this;
			});
			this.$keywordPattern = (function () {
				return this.$keywordPattern$slot;
			});
			this.$setOnce$keywordPattern$ = (function (v) {
				this.$keywordPattern$slot = v;
				return this;
			});
			this.$kwPatternPair = (function () {
				return this.$kwPatternPair$slot;
			});
			this.$setOnce$kwPatternPair$ = (function (v) {
				this.$kwPatternPair$slot = v;
				return this;
			});
			this.$kwPatternValue = (function () {
				return this.$kwPatternValue$slot;
			});
			this.$setOnce$kwPatternValue$ = (function (v) {
				this.$kwPatternValue$slot = v;
				return this;
			});
			this.$variablePattern = (function () {
				return this.$variablePattern$slot;
			});
			this.$setOnce$variablePattern$ = (function (v) {
				this.$variablePattern$slot = v;
				return this;
			});
			this.$nestedPatternLiteral = (function () {
				return this.$nestedPatternLiteral$slot;
			});
			this.$setOnce$nestedPatternLiteral$ = (function (v) {
				this.$nestedPatternLiteral$slot = v;
				return this;
			});
			this.$slotName = (function () {
				return this.$slotName$slot;
			});
			this.$setOnce$slotName$ = (function (v) {
				this.$slotName$slot = v;
				return this;
			});
			this.$unarySelector = (function () {
				return this.$unarySelector$slot;
			});
			this.$setOnce$unarySelector$ = (function (v) {
				this.$unarySelector$slot = v;
				return this;
			});
			this.$parenthesizedExpression = (function () {
				return this.$parenthesizedExpression$slot;
			});
			this.$setOnce$parenthesizedExpression$ = (function (v) {
				this.$parenthesizedExpression$slot = v;
				return this;
			});
			this.$primary = (function () {
				return this.$primary$slot;
			});
			this.$setOnce$primary$ = (function (v) {
				this.$primary$slot = v;
				return this;
			});
			this.$unaryMsg = (function () {
				return this.$unaryMsg$slot;
			});
			this.$setOnce$unaryMsg$ = (function (v) {
				this.$unaryMsg$slot = v;
				return this;
			});
			this.$unaryExpression = (function () {
				return this.$unaryExpression$slot;
			});
			this.$setOnce$unaryExpression$ = (function (v) {
				this.$unaryExpression$slot = v;
				return this;
			});
			this.$binaryMsg = (function () {
				return this.$binaryMsg$slot;
			});
			this.$setOnce$binaryMsg$ = (function (v) {
				this.$binaryMsg$slot = v;
				return this;
			});
			this.$binaryExpression = (function () {
				return this.$binaryExpression$slot;
			});
			this.$setOnce$binaryExpression$ = (function (v) {
				this.$binaryExpression$slot = v;
				return this;
			});
			this.$keywordMsg = (function () {
				return this.$keywordMsg$slot;
			});
			this.$setOnce$keywordMsg$ = (function (v) {
				this.$keywordMsg$slot = v;
				return this;
			});
			this.$message = (function () {
				return this.$message$slot;
			});
			this.$setOnce$message$ = (function (v) {
				this.$message$slot = v;
				return this;
			});
			this.$nontrivialUnaryMessages = (function () {
				return this.$nontrivialUnaryMessages$slot;
			});
			this.$setOnce$nontrivialUnaryMessages$ = (function (v) {
				this.$nontrivialUnaryMessages$slot = v;
				return this;
			});
			this.$nontrivialBinaryMessages = (function () {
				return this.$nontrivialBinaryMessages$slot;
			});
			this.$setOnce$nontrivialBinaryMessages$ = (function (v) {
				this.$nontrivialBinaryMessages$slot = v;
				return this;
			});
			this.$keywordMessages = (function () {
				return this.$keywordMessages$slot;
			});
			this.$setOnce$keywordMessages$ = (function (v) {
				this.$keywordMessages$slot = v;
				return this;
			});
			this.$nonEmptyMessages = (function () {
				return this.$nonEmptyMessages$slot;
			});
			this.$setOnce$nonEmptyMessages$ = (function (v) {
				this.$nonEmptyMessages$slot = v;
				return this;
			});
			this.$keywordExpression = (function () {
				return this.$keywordExpression$slot;
			});
			this.$setOnce$keywordExpression$ = (function (v) {
				this.$keywordExpression$slot = v;
				return this;
			});
			this.$keywordHereSend = (function () {
				return this.$keywordHereSend$slot;
			});
			this.$setOnce$keywordHereSend$ = (function (v) {
				this.$keywordHereSend$slot = v;
				return this;
			});
			this.$cascadeMsg = (function () {
				return this.$cascadeMsg$slot;
			});
			this.$setOnce$cascadeMsg$ = (function (v) {
				this.$cascadeMsg$slot = v;
				return this;
			});
			this.$msgCascade = (function () {
				return this.$msgCascade$slot;
			});
			this.$setOnce$msgCascade$ = (function (v) {
				this.$msgCascade$slot = v;
				return this;
			});
			this.$cascadedMessageExpression = (function () {
				return this.$cascadedMessageExpression$slot;
			});
			this.$setOnce$cascadedMessageExpression$ = (function (v) {
				this.$cascadedMessageExpression$slot = v;
				return this;
			});
			this.$sendExpression = (function () {
				return this.$sendExpression$slot;
			});
			this.$setOnce$sendExpression$ = (function (v) {
				this.$sendExpression$slot = v;
				return this;
			});
			this.$expression = (function () {
				return this.$expression$slot;
			});
			this.$setOnce$expression$ = (function (v) {
				this.$expression$slot = v;
				return this;
			});
			this.$returnStatement = (function () {
				return this.$returnStatement$slot;
			});
			this.$setOnce$returnStatement$ = (function (v) {
				this.$returnStatement$slot = v;
				return this;
			});
			this.$furtherStatements = (function () {
				return this.$furtherStatements$slot;
			});
			this.$setOnce$furtherStatements$ = (function (v) {
				this.$furtherStatements$slot = v;
				return this;
			});
			this.$statementSequence = (function () {
				return this.$statementSequence$slot;
			});
			this.$setOnce$statementSequence$ = (function (v) {
				this.$statementSequence$slot = v;
				return this;
			});
			this.$statements = (function () {
				return this.$statements$slot;
			});
			this.$setOnce$statements$ = (function (v) {
				this.$statements$slot = v;
				return this;
			});
			this.$blockParameter = (function () {
				return this.$blockParameter$slot;
			});
			this.$setOnce$blockParameter$ = (function (v) {
				this.$blockParameter$slot = v;
				return this;
			});
			this.$blockParameters = (function () {
				return this.$blockParameters$slot;
			});
			this.$setOnce$blockParameters$ = (function (v) {
				this.$blockParameters$slot = v;
				return this;
			});
			this.$slotDefs = (function () {
				return this.$slotDefs$slot;
			});
			this.$setOnce$slotDefs$ = (function (v) {
				this.$slotDefs$slot = v;
				return this;
			});
			this.$seqSlotDecls = (function () {
				return this.$seqSlotDecls$slot;
			});
			this.$setOnce$seqSlotDecls$ = (function (v) {
				this.$seqSlotDecls$slot = v;
				return this;
			});
			this.$simSlotDecls = (function () {
				return this.$simSlotDecls$slot;
			});
			this.$setOnce$simSlotDecls$ = (function (v) {
				this.$simSlotDecls$slot = v;
				return this;
			});
			this.$slotDecls = (function () {
				return this.$slotDecls$slot;
			});
			this.$setOnce$slotDecls$ = (function (v) {
				this.$slotDecls$slot = v;
				return this;
			});
			this.$temporaries = (function () {
				return this.$temporaries$slot;
			});
			this.$setOnce$temporaries$ = (function (v) {
				this.$temporaries$slot = v;
				return this;
			});
			this.$beginNSComment = (function () {
				return this.$beginNSComment$slot;
			});
			this.$setOnce$beginNSComment$ = (function (v) {
				this.$beginNSComment$slot = v;
				return this;
			});
			this.$endNSComment = (function () {
				return this.$endNSComment$slot;
			});
			this.$setOnce$endNSComment$ = (function (v) {
				this.$endNSComment$slot = v;
				return this;
			});
			this.$keywordAndLiteral = (function () {
				return this.$keywordAndLiteral$slot;
			});
			this.$setOnce$keywordAndLiteral$ = (function (v) {
				this.$keywordAndLiteral$slot = v;
				return this;
			});
			this.$literalMessage = (function () {
				return this.$literalMessage$slot;
			});
			this.$setOnce$literalMessage$ = (function (v) {
				this.$literalMessage$slot = v;
				return this;
			});
			this.$literalMessageComment = (function () {
				return this.$literalMessageComment$slot;
			});
			this.$setOnce$literalMessageComment$ = (function (v) {
				this.$literalMessageComment$slot = v;
				return this;
			});
			this.$codeBody = (function () {
				return this.$codeBody$slot;
			});
			this.$setOnce$codeBody$ = (function (v) {
				this.$codeBody$slot = v;
				return this;
			});
			this.$block = (function () {
				return this.$block$slot;
			});
			this.$setOnce$block$ = (function (v) {
				this.$block$slot = v;
				return this;
			});
			this.$slotDecl = (function () {
				return this.$slotDecl$slot;
			});
			this.$setOnce$slotDecl$ = (function (v) {
				this.$slotDecl$slot = v;
				return this;
			});
			this.$accessModifier = (function () {
				return this.$accessModifier$slot;
			});
			this.$setOnce$accessModifier$ = (function (v) {
				this.$accessModifier$slot = v;
				return this;
			});
			this.$slotDef = (function () {
				return this.$slotDef$slot;
			});
			this.$setOnce$slotDef$ = (function (v) {
				this.$slotDef$slot = v;
				return this;
			});
			this.$initExprs = (function () {
				return this.$initExprs$slot;
			});
			this.$setOnce$initExprs$ = (function (v) {
				this.$initExprs$slot = v;
				return this;
			});
			this.$unaryMsgPattern = (function () {
				return this.$unaryMsgPattern$slot;
			});
			this.$setOnce$unaryMsgPattern$ = (function (v) {
				this.$unaryMsgPattern$slot = v;
				return this;
			});
			this.$binaryMsgPattern = (function () {
				return this.$binaryMsgPattern$slot;
			});
			this.$setOnce$binaryMsgPattern$ = (function (v) {
				this.$binaryMsgPattern$slot = v;
				return this;
			});
			this.$keywordMsgPattern = (function () {
				return this.$keywordMsgPattern$slot;
			});
			this.$setOnce$keywordMsgPattern$ = (function (v) {
				this.$keywordMsgPattern$slot = v;
				return this;
			});
			this.$messagePattern = (function () {
				return this.$messagePattern$slot;
			});
			this.$setOnce$messagePattern$ = (function (v) {
				this.$messagePattern$slot = v;
				return this;
			});
			this.$method = (function () {
				return this.$method$slot;
			});
			this.$setOnce$method$ = (function (v) {
				this.$method$slot = v;
				return this;
			});
			this.$methodHeader = (function () {
				return this.$methodHeader$slot;
			});
			this.$setOnce$methodHeader$ = (function (v) {
				this.$methodHeader$slot = v;
				return this;
			});
			this.$methodDecl = (function () {
				return this.$methodDecl$slot;
			});
			this.$setOnce$methodDecl$ = (function (v) {
				this.$methodDecl$slot = v;
				return this;
			});
			this.$optionalFactorySection = (function () {
				return this.$optionalFactorySection$slot;
			});
			this.$setOnce$optionalFactorySection$ = (function (v) {
				this.$optionalFactorySection$slot = v;
				return this;
			});
			this.$classPrefix = (function () {
				return this.$classPrefix$slot;
			});
			this.$setOnce$classPrefix$ = (function (v) {
				this.$classPrefix$slot = v;
				return this;
			});
			this.$mixinApplication = (function () {
				return this.$mixinApplication$slot;
			});
			this.$setOnce$mixinApplication$ = (function (v) {
				this.$mixinApplication$slot = v;
				return this;
			});
			this.$nestedClassDecl = (function () {
				return this.$nestedClassDecl$slot;
			});
			this.$setOnce$nestedClassDecl$ = (function (v) {
				this.$nestedClassDecl$slot = v;
				return this;
			});
			this.$category = (function () {
				return this.$category$slot;
			});
			this.$setOnce$category$ = (function (v) {
				this.$category$slot = v;
				return this;
			});
			this.$classComment = (function () {
				return this.$classComment$slot;
			});
			this.$setOnce$classComment$ = (function (v) {
				this.$classComment$slot = v;
				return this;
			});
			this.$sideDecl = (function () {
				return this.$sideDecl$slot;
			});
			this.$setOnce$sideDecl$ = (function (v) {
				this.$sideDecl$slot = v;
				return this;
			});
			this.$classSideDecl = (function () {
				return this.$classSideDecl$slot;
			});
			this.$setOnce$classSideDecl$ = (function (v) {
				this.$classSideDecl$slot = v;
				return this;
			});
			this.$languageId = (function () {
				return this.$languageId$slot;
			});
			this.$setOnce$languageId$ = (function (v) {
				this.$languageId$slot = v;
				return this;
			});
			this.$classCategory = (function () {
				return this.$classCategory$slot;
			});
			this.$setOnce$classCategory$ = (function (v) {
				this.$classCategory$slot = v;
				return this;
			});
			this.$superclassClause = (function () {
				return this.$superclassClause$slot;
			});
			this.$setOnce$superclassClause$ = (function (v) {
				this.$superclassClause$slot = v;
				return this;
			});
			this.$superclassPrefix = (function () {
				return this.$superclassPrefix$slot;
			});
			this.$setOnce$superclassPrefix$ = (function (v) {
				this.$superclassPrefix$slot = v;
				return this;
			});
			this.$outerReceiver = (function () {
				return this.$outerReceiver$slot;
			});
			this.$setOnce$outerReceiver$ = (function (v) {
				this.$outerReceiver$slot = v;
				return this;
			});
			this.$classHeader = (function () {
				return this.$classHeader$slot;
			});
			this.$setOnce$classHeader$ = (function (v) {
				this.$classHeader$slot = v;
				return this;
			});
			this.$classDeclaration = (function () {
				return this.$classDeclaration$slot;
			});
			this.$setOnce$classDeclaration$ = (function (v) {
				this.$classDeclaration$slot = v;
				return this;
			});
			this.$inheritanceClause = (function () {
				return this.$inheritanceClause$slot;
			});
			this.$setOnce$inheritanceClause$ = (function (v) {
				this.$inheritanceClause$slot = v;
				return this;
			});
			this.$instanceInitializer = (function () {
				return this.$instanceInitializer$slot;
			});
			this.$setOnce$instanceInitializer$ = (function (v) {
				this.$instanceInitializer$slot = v;
				return this;
			});
			this.$classBody = (function () {
				return this.$classBody$slot;
			});
			this.$setOnce$classBody$ = (function (v) {
				this.$classBody$slot = v;
				return this;
			});
			this.$mixinAppSuffix = (function () {
				return this.$mixinAppSuffix$slot;
			});
			this.$setOnce$mixinAppSuffix$ = (function (v) {
				this.$mixinAppSuffix$slot = v;
				return this;
			});
			this.$mixinSpec = (function () {
				return this.$mixinSpec$slot;
			});
			this.$setOnce$mixinSpec$ = (function (v) {
				this.$mixinSpec$slot = v;
				return this;
			});
			this.$explicitInheritanceListAndOrBody = (function () {
				return this.$explicitInheritanceListAndOrBody$slot;
			});
			this.$setOnce$explicitInheritanceListAndOrBody$ = (function (v) {
				this.$explicitInheritanceListAndOrBody$slot = v;
				return this;
			});
			this.$defaultSuperclassAndBody = (function () {
				return this.$defaultSuperclassAndBody$slot;
			});
			this.$setOnce$defaultSuperclassAndBody$ = (function (v) {
				this.$defaultSuperclassAndBody$slot = v;
				return this;
			});
			this.$inheritanceListAndOrBody = (function () {
				return this.$inheritanceListAndOrBody$slot;
			});
			this.$setOnce$inheritanceListAndOrBody$ = (function (v) {
				this.$inheritanceListAndOrBody$slot = v;
				return this;
			});
			this.$classDecl = (function () {
				return this.$classDecl$slot;
			});
			this.$setOnce$classDecl$ = (function (v) {
				this.$classDecl$slot = v;
				return this;
			});
			this.$toplevelClass = (function () {
				return this.$toplevelClass$slot;
			});
			this.$setOnce$toplevelClass$ = (function (v) {
				this.$toplevelClass$slot = v;
				return this;
			});
			this.$compilationUnit = (function () {
				return this.$compilationUnit$slot;
			});
			this.$setOnce$compilationUnit$ = (function (v) {
				this.$compilationUnit$slot = v;
				return this;
			});
			this.$doItExpression = (function () {
				return this.$doItExpression$slot;
			});
			this.$setOnce$doItExpression$ = (function (v) {
				this.$doItExpression$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakGrammar`NS3Grammar";
					this._$superInit$NewspeakGrammar$NS3Grammar = $.$superInit$NewspeakGrammar$NS3Grammar;
					this.$superInit$NewspeakGrammar$NS3Grammar = dnuCatcher("$superInit$NewspeakGrammar$NS3Grammar");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$_ = $.$_;
					this.$_ = dnuCatcher("$_");
					this._$stringBody = $.$stringBody;
					this.$stringBody = dnuCatcher("$stringBody");
					this._$whitespace = $.$whitespace;
					this.$whitespace = dnuCatcher("$whitespace");
					this._$setOnce$whitespace$ = $.$setOnce$whitespace$;
					this.$setOnce$whitespace$ = dnuCatcher("$setOnce$whitespace$");
					this._$colon = $.$colon;
					this.$colon = dnuCatcher("$colon");
					this._$setOnce$colon$ = $.$setOnce$colon$;
					this.$setOnce$colon$ = dnuCatcher("$setOnce$colon$");
					this._$comma = $.$comma;
					this.$comma = dnuCatcher("$comma");
					this._$setOnce$comma$ = $.$setOnce$comma$;
					this.$setOnce$comma$ = dnuCatcher("$setOnce$comma$");
					this._$dollar = $.$dollar;
					this.$dollar = dnuCatcher("$dollar");
					this._$setOnce$dollar$ = $.$setOnce$dollar$;
					this.$setOnce$dollar$ = dnuCatcher("$setOnce$dollar$");
					this._$dot = $.$dot;
					this.$dot = dnuCatcher("$dot");
					this._$setOnce$dot$ = $.$setOnce$dot$;
					this.$setOnce$dot$ = dnuCatcher("$setOnce$dot$");
					this._$equalSign = $.$equalSign;
					this.$equalSign = dnuCatcher("$equalSign");
					this._$setOnce$equalSign$ = $.$setOnce$equalSign$;
					this.$setOnce$equalSign$ = dnuCatcher("$setOnce$equalSign$");
					this._$hat = $.$hat;
					this.$hat = dnuCatcher("$hat");
					this._$setOnce$hat$ = $.$setOnce$hat$;
					this.$setOnce$hat$ = dnuCatcher("$setOnce$hat$");
					this._$lbracket = $.$lbracket;
					this.$lbracket = dnuCatcher("$lbracket");
					this._$setOnce$lbracket$ = $.$setOnce$lbracket$;
					this.$setOnce$lbracket$ = dnuCatcher("$setOnce$lbracket$");
					this._$lcurly = $.$lcurly;
					this.$lcurly = dnuCatcher("$lcurly");
					this._$setOnce$lcurly$ = $.$setOnce$lcurly$;
					this.$setOnce$lcurly$ = dnuCatcher("$setOnce$lcurly$");
					this._$lparen = $.$lparen;
					this.$lparen = dnuCatcher("$lparen");
					this._$setOnce$lparen$ = $.$setOnce$lparen$;
					this.$setOnce$lparen$ = dnuCatcher("$setOnce$lparen$");
					this._$langleBracket = $.$langleBracket;
					this.$langleBracket = dnuCatcher("$langleBracket");
					this._$setOnce$langleBracket$ = $.$setOnce$langleBracket$;
					this.$setOnce$langleBracket$ = dnuCatcher("$setOnce$langleBracket$");
					this._$pound = $.$pound;
					this.$pound = dnuCatcher("$pound");
					this._$setOnce$pound$ = $.$setOnce$pound$;
					this.$setOnce$pound$ = dnuCatcher("$setOnce$pound$");
					this._$rangleBracket = $.$rangleBracket;
					this.$rangleBracket = dnuCatcher("$rangleBracket");
					this._$setOnce$rangleBracket$ = $.$setOnce$rangleBracket$;
					this.$setOnce$rangleBracket$ = dnuCatcher("$setOnce$rangleBracket$");
					this._$rbracket = $.$rbracket;
					this.$rbracket = dnuCatcher("$rbracket");
					this._$setOnce$rbracket$ = $.$setOnce$rbracket$;
					this.$setOnce$rbracket$ = dnuCatcher("$setOnce$rbracket$");
					this._$rcurly = $.$rcurly;
					this.$rcurly = dnuCatcher("$rcurly");
					this._$setOnce$rcurly$ = $.$setOnce$rcurly$;
					this.$setOnce$rcurly$ = dnuCatcher("$setOnce$rcurly$");
					this._$rparen = $.$rparen;
					this.$rparen = dnuCatcher("$rparen");
					this._$setOnce$rparen$ = $.$setOnce$rparen$;
					this.$setOnce$rparen$ = dnuCatcher("$setOnce$rparen$");
					this._$semicolon = $.$semicolon;
					this.$semicolon = dnuCatcher("$semicolon");
					this._$setOnce$semicolon$ = $.$setOnce$semicolon$;
					this.$setOnce$semicolon$ = dnuCatcher("$setOnce$semicolon$");
					this._$slash = $.$slash;
					this.$slash = dnuCatcher("$slash");
					this._$setOnce$slash$ = $.$setOnce$slash$;
					this.$setOnce$slash$ = dnuCatcher("$setOnce$slash$");
					this._$vbar = $.$vbar;
					this.$vbar = dnuCatcher("$vbar");
					this._$setOnce$vbar$ = $.$setOnce$vbar$;
					this.$setOnce$vbar$ = dnuCatcher("$setOnce$vbar$");
					this._$mixinOperator = $.$mixinOperator;
					this.$mixinOperator = dnuCatcher("$mixinOperator");
					this._$setOnce$mixinOperator$ = $.$setOnce$mixinOperator$;
					this.$setOnce$mixinOperator$ = dnuCatcher("$setOnce$mixinOperator$");
					this._$inverseMixinOperator = $.$inverseMixinOperator;
					this.$inverseMixinOperator = dnuCatcher("$inverseMixinOperator");
					this._$setOnce$inverseMixinOperator$ = $.$setOnce$inverseMixinOperator$;
					this.$setOnce$inverseMixinOperator$ = dnuCatcher("$setOnce$inverseMixinOperator$");
					this._$eventualSendOperator = $.$eventualSendOperator;
					this.$eventualSendOperator = dnuCatcher("$eventualSendOperator");
					this._$setOnce$eventualSendOperator$ = $.$setOnce$eventualSendOperator$;
					this.$setOnce$eventualSendOperator$ = dnuCatcher("$setOnce$eventualSendOperator$");
					this._$digit = $.$digit;
					this.$digit = dnuCatcher("$digit");
					this._$setOnce$digit$ = $.$setOnce$digit$;
					this.$setOnce$digit$ = dnuCatcher("$setOnce$digit$");
					this._$digits = $.$digits;
					this.$digits = dnuCatcher("$digits");
					this._$setOnce$digits$ = $.$setOnce$digits$;
					this.$setOnce$digits$ = dnuCatcher("$setOnce$digits$");
					this._$uppercaseLetter = $.$uppercaseLetter;
					this.$uppercaseLetter = dnuCatcher("$uppercaseLetter");
					this._$setOnce$uppercaseLetter$ = $.$setOnce$uppercaseLetter$;
					this.$setOnce$uppercaseLetter$ = dnuCatcher("$setOnce$uppercaseLetter$");
					this._$extendedDigits = $.$extendedDigits;
					this.$extendedDigits = dnuCatcher("$extendedDigits");
					this._$setOnce$extendedDigits$ = $.$setOnce$extendedDigits$;
					this.$setOnce$extendedDigits$ = dnuCatcher("$setOnce$extendedDigits$");
					this._$radix = $.$radix;
					this.$radix = dnuCatcher("$radix");
					this._$setOnce$radix$ = $.$setOnce$radix$;
					this.$setOnce$radix$ = dnuCatcher("$setOnce$radix$");
					this._$fraction = $.$fraction;
					this.$fraction = dnuCatcher("$fraction");
					this._$setOnce$fraction$ = $.$setOnce$fraction$;
					this.$setOnce$fraction$ = dnuCatcher("$setOnce$fraction$");
					this._$extendedFraction = $.$extendedFraction;
					this.$extendedFraction = dnuCatcher("$extendedFraction");
					this._$setOnce$extendedFraction$ = $.$setOnce$extendedFraction$;
					this.$setOnce$extendedFraction$ = dnuCatcher("$setOnce$extendedFraction$");
					this._$exponent = $.$exponent;
					this.$exponent = dnuCatcher("$exponent");
					this._$setOnce$exponent$ = $.$setOnce$exponent$;
					this.$setOnce$exponent$ = dnuCatcher("$setOnce$exponent$");
					this._$decimalNum = $.$decimalNum;
					this.$decimalNum = dnuCatcher("$decimalNum");
					this._$setOnce$decimalNum$ = $.$setOnce$decimalNum$;
					this.$setOnce$decimalNum$ = dnuCatcher("$setOnce$decimalNum$");
					this._$radixNum = $.$radixNum;
					this.$radixNum = dnuCatcher("$radixNum");
					this._$setOnce$radixNum$ = $.$setOnce$radixNum$;
					this.$setOnce$radixNum$ = dnuCatcher("$setOnce$radixNum$");
					this._$num = $.$num;
					this.$num = dnuCatcher("$num");
					this._$setOnce$num$ = $.$setOnce$num$;
					this.$setOnce$num$ = dnuCatcher("$setOnce$num$");
					this._$number = $.$number;
					this.$number = dnuCatcher("$number");
					this._$setOnce$number$ = $.$setOnce$number$;
					this.$setOnce$number$ = dnuCatcher("$setOnce$number$");
					this._$letter = $.$letter;
					this.$letter = dnuCatcher("$letter");
					this._$setOnce$letter$ = $.$setOnce$letter$;
					this.$setOnce$letter$ = dnuCatcher("$setOnce$letter$");
					this._$specialCharacter = $.$specialCharacter;
					this.$specialCharacter = dnuCatcher("$specialCharacter");
					this._$setOnce$specialCharacter$ = $.$setOnce$specialCharacter$;
					this.$setOnce$specialCharacter$ = dnuCatcher("$setOnce$specialCharacter$");
					this._$character = $.$character;
					this.$character = dnuCatcher("$character");
					this._$setOnce$character$ = $.$setOnce$character$;
					this.$setOnce$character$ = dnuCatcher("$setOnce$character$");
					this._$id = $.$id;
					this.$id = dnuCatcher("$id");
					this._$setOnce$id$ = $.$setOnce$id$;
					this.$setOnce$id$ = dnuCatcher("$setOnce$id$");
					this.$identifier = this._$identifier = $.$identifier;
					this.$setOnce$identifier$ = this._$setOnce$identifier$ = $.$setOnce$identifier$;
					this._$charIncludingQuotesAndSpace = $.$charIncludingQuotesAndSpace;
					this.$charIncludingQuotesAndSpace = dnuCatcher("$charIncludingQuotesAndSpace");
					this._$setOnce$charIncludingQuotesAndSpace$ = $.$setOnce$charIncludingQuotesAndSpace$;
					this.$setOnce$charIncludingQuotesAndSpace$ = dnuCatcher("$setOnce$charIncludingQuotesAndSpace$");
					this._$newChar = $.$newChar;
					this.$newChar = dnuCatcher("$newChar");
					this._$setOnce$newChar$ = $.$setOnce$newChar$;
					this.$setOnce$newChar$ = dnuCatcher("$setOnce$newChar$");
					this._$oldChar = $.$oldChar;
					this.$oldChar = dnuCatcher("$oldChar");
					this._$setOnce$oldChar$ = $.$setOnce$oldChar$;
					this.$setOnce$oldChar$ = dnuCatcher("$setOnce$oldChar$");
					this._$characterConstant = $.$characterConstant;
					this.$characterConstant = dnuCatcher("$characterConstant");
					this._$setOnce$characterConstant$ = $.$setOnce$characterConstant$;
					this.$setOnce$characterConstant$ = dnuCatcher("$setOnce$characterConstant$");
					this._$str = $.$str;
					this.$str = dnuCatcher("$str");
					this._$setOnce$str$ = $.$setOnce$str$;
					this.$setOnce$str$ = dnuCatcher("$setOnce$str$");
					this._$string = $.$string;
					this.$string = dnuCatcher("$string");
					this._$setOnce$string$ = $.$setOnce$string$;
					this.$setOnce$string$ = dnuCatcher("$setOnce$string$");
					this._$kw = $.$kw;
					this.$kw = dnuCatcher("$kw");
					this._$setOnce$kw$ = $.$setOnce$kw$;
					this.$setOnce$kw$ = dnuCatcher("$setOnce$kw$");
					this._$kwds = $.$kwds;
					this.$kwds = dnuCatcher("$kwds");
					this._$setOnce$kwds$ = $.$setOnce$kwds$;
					this.$setOnce$kwds$ = dnuCatcher("$setOnce$kwds$");
					this.$keyword = this._$keyword = $.$keyword;
					this.$setOnce$keyword$ = this._$setOnce$keyword$ = $.$setOnce$keyword$;
					this._$setterKw = $.$setterKw;
					this.$setterKw = dnuCatcher("$setterKw");
					this._$setOnce$setterKw$ = $.$setOnce$setterKw$;
					this.$setOnce$setterKw$ = dnuCatcher("$setOnce$setterKw$");
					this._$setterKeyword = $.$setterKeyword;
					this.$setterKeyword = dnuCatcher("$setterKeyword");
					this._$setOnce$setterKeyword$ = $.$setOnce$setterKeyword$;
					this.$setOnce$setterKeyword$ = dnuCatcher("$setOnce$setterKeyword$");
					this._$sym = $.$sym;
					this.$sym = dnuCatcher("$sym");
					this._$setOnce$sym$ = $.$setOnce$sym$;
					this.$setOnce$sym$ = dnuCatcher("$setOnce$sym$");
					this._$symbol = $.$symbol;
					this.$symbol = dnuCatcher("$symbol");
					this._$setOnce$symbol$ = $.$setOnce$symbol$;
					this.$setOnce$symbol$ = dnuCatcher("$setOnce$symbol$");
					this._$comment = $.$comment;
					this.$comment = dnuCatcher("$comment");
					this._$setOnce$comment$ = $.$setOnce$comment$;
					this.$setOnce$comment$ = dnuCatcher("$setOnce$comment$");
					this._$binSel = $.$binSel;
					this.$binSel = dnuCatcher("$binSel");
					this._$setOnce$binSel$ = $.$setOnce$binSel$;
					this.$setOnce$binSel$ = dnuCatcher("$setOnce$binSel$");
					this._$binarySelector = $.$binarySelector;
					this.$binarySelector = dnuCatcher("$binarySelector");
					this._$setOnce$binarySelector$ = $.$setOnce$binarySelector$;
					this.$setOnce$binarySelector$ = dnuCatcher("$setOnce$binarySelector$");
					this._$symbolConstant = $.$symbolConstant;
					this.$symbolConstant = dnuCatcher("$symbolConstant");
					this._$setOnce$symbolConstant$ = $.$setOnce$symbolConstant$;
					this.$setOnce$symbolConstant$ = dnuCatcher("$setOnce$symbolConstant$");
					this._$tuple = $.$tuple;
					this.$tuple = dnuCatcher("$tuple");
					this._$setOnce$tuple$ = $.$setOnce$tuple$;
					this.$setOnce$tuple$ = dnuCatcher("$setOnce$tuple$");
					this._$literal = $.$literal;
					this.$literal = dnuCatcher("$literal");
					this._$setOnce$literal$ = $.$setOnce$literal$;
					this.$setOnce$literal$ = dnuCatcher("$setOnce$literal$");
					this._$pattern = $.$pattern;
					this.$pattern = dnuCatcher("$pattern");
					this._$setOnce$pattern$ = $.$setOnce$pattern$;
					this.$setOnce$pattern$ = dnuCatcher("$setOnce$pattern$");
					this._$patternLiteral = $.$patternLiteral;
					this.$patternLiteral = dnuCatcher("$patternLiteral");
					this._$setOnce$patternLiteral$ = $.$setOnce$patternLiteral$;
					this.$setOnce$patternLiteral$ = dnuCatcher("$setOnce$patternLiteral$");
					this._$wildcardPattern = $.$wildcardPattern;
					this.$wildcardPattern = dnuCatcher("$wildcardPattern");
					this._$setOnce$wildcardPattern$ = $.$setOnce$wildcardPattern$;
					this.$setOnce$wildcardPattern$ = dnuCatcher("$setOnce$wildcardPattern$");
					this._$literalPattern = $.$literalPattern;
					this.$literalPattern = dnuCatcher("$literalPattern");
					this._$setOnce$literalPattern$ = $.$setOnce$literalPattern$;
					this.$setOnce$literalPattern$ = dnuCatcher("$setOnce$literalPattern$");
					this._$keywordPattern = $.$keywordPattern;
					this.$keywordPattern = dnuCatcher("$keywordPattern");
					this._$setOnce$keywordPattern$ = $.$setOnce$keywordPattern$;
					this.$setOnce$keywordPattern$ = dnuCatcher("$setOnce$keywordPattern$");
					this._$kwPatternPair = $.$kwPatternPair;
					this.$kwPatternPair = dnuCatcher("$kwPatternPair");
					this._$setOnce$kwPatternPair$ = $.$setOnce$kwPatternPair$;
					this.$setOnce$kwPatternPair$ = dnuCatcher("$setOnce$kwPatternPair$");
					this._$kwPatternValue = $.$kwPatternValue;
					this.$kwPatternValue = dnuCatcher("$kwPatternValue");
					this._$setOnce$kwPatternValue$ = $.$setOnce$kwPatternValue$;
					this.$setOnce$kwPatternValue$ = dnuCatcher("$setOnce$kwPatternValue$");
					this._$variablePattern = $.$variablePattern;
					this.$variablePattern = dnuCatcher("$variablePattern");
					this._$setOnce$variablePattern$ = $.$setOnce$variablePattern$;
					this.$setOnce$variablePattern$ = dnuCatcher("$setOnce$variablePattern$");
					this._$nestedPatternLiteral = $.$nestedPatternLiteral;
					this.$nestedPatternLiteral = dnuCatcher("$nestedPatternLiteral");
					this._$setOnce$nestedPatternLiteral$ = $.$setOnce$nestedPatternLiteral$;
					this.$setOnce$nestedPatternLiteral$ = dnuCatcher("$setOnce$nestedPatternLiteral$");
					this._$slotName = $.$slotName;
					this.$slotName = dnuCatcher("$slotName");
					this._$setOnce$slotName$ = $.$setOnce$slotName$;
					this.$setOnce$slotName$ = dnuCatcher("$setOnce$slotName$");
					this._$unarySelector = $.$unarySelector;
					this.$unarySelector = dnuCatcher("$unarySelector");
					this._$setOnce$unarySelector$ = $.$setOnce$unarySelector$;
					this.$setOnce$unarySelector$ = dnuCatcher("$setOnce$unarySelector$");
					this._$parenthesizedExpression = $.$parenthesizedExpression;
					this.$parenthesizedExpression = dnuCatcher("$parenthesizedExpression");
					this._$setOnce$parenthesizedExpression$ = $.$setOnce$parenthesizedExpression$;
					this.$setOnce$parenthesizedExpression$ = dnuCatcher("$setOnce$parenthesizedExpression$");
					this._$primary = $.$primary;
					this.$primary = dnuCatcher("$primary");
					this._$setOnce$primary$ = $.$setOnce$primary$;
					this.$setOnce$primary$ = dnuCatcher("$setOnce$primary$");
					this._$unaryMsg = $.$unaryMsg;
					this.$unaryMsg = dnuCatcher("$unaryMsg");
					this._$setOnce$unaryMsg$ = $.$setOnce$unaryMsg$;
					this.$setOnce$unaryMsg$ = dnuCatcher("$setOnce$unaryMsg$");
					this._$unaryExpression = $.$unaryExpression;
					this.$unaryExpression = dnuCatcher("$unaryExpression");
					this._$setOnce$unaryExpression$ = $.$setOnce$unaryExpression$;
					this.$setOnce$unaryExpression$ = dnuCatcher("$setOnce$unaryExpression$");
					this._$binaryMsg = $.$binaryMsg;
					this.$binaryMsg = dnuCatcher("$binaryMsg");
					this._$setOnce$binaryMsg$ = $.$setOnce$binaryMsg$;
					this.$setOnce$binaryMsg$ = dnuCatcher("$setOnce$binaryMsg$");
					this._$binaryExpression = $.$binaryExpression;
					this.$binaryExpression = dnuCatcher("$binaryExpression");
					this._$setOnce$binaryExpression$ = $.$setOnce$binaryExpression$;
					this.$setOnce$binaryExpression$ = dnuCatcher("$setOnce$binaryExpression$");
					this._$keywordMsg = $.$keywordMsg;
					this.$keywordMsg = dnuCatcher("$keywordMsg");
					this._$setOnce$keywordMsg$ = $.$setOnce$keywordMsg$;
					this.$setOnce$keywordMsg$ = dnuCatcher("$setOnce$keywordMsg$");
					this._$message = $.$message;
					this.$message = dnuCatcher("$message");
					this._$setOnce$message$ = $.$setOnce$message$;
					this.$setOnce$message$ = dnuCatcher("$setOnce$message$");
					this._$nontrivialUnaryMessages = $.$nontrivialUnaryMessages;
					this.$nontrivialUnaryMessages = dnuCatcher("$nontrivialUnaryMessages");
					this._$setOnce$nontrivialUnaryMessages$ = $.$setOnce$nontrivialUnaryMessages$;
					this.$setOnce$nontrivialUnaryMessages$ = dnuCatcher("$setOnce$nontrivialUnaryMessages$");
					this._$nontrivialBinaryMessages = $.$nontrivialBinaryMessages;
					this.$nontrivialBinaryMessages = dnuCatcher("$nontrivialBinaryMessages");
					this._$setOnce$nontrivialBinaryMessages$ = $.$setOnce$nontrivialBinaryMessages$;
					this.$setOnce$nontrivialBinaryMessages$ = dnuCatcher("$setOnce$nontrivialBinaryMessages$");
					this._$keywordMessages = $.$keywordMessages;
					this.$keywordMessages = dnuCatcher("$keywordMessages");
					this._$setOnce$keywordMessages$ = $.$setOnce$keywordMessages$;
					this.$setOnce$keywordMessages$ = dnuCatcher("$setOnce$keywordMessages$");
					this._$nonEmptyMessages = $.$nonEmptyMessages;
					this.$nonEmptyMessages = dnuCatcher("$nonEmptyMessages");
					this._$setOnce$nonEmptyMessages$ = $.$setOnce$nonEmptyMessages$;
					this.$setOnce$nonEmptyMessages$ = dnuCatcher("$setOnce$nonEmptyMessages$");
					this._$keywordExpression = $.$keywordExpression;
					this.$keywordExpression = dnuCatcher("$keywordExpression");
					this._$setOnce$keywordExpression$ = $.$setOnce$keywordExpression$;
					this.$setOnce$keywordExpression$ = dnuCatcher("$setOnce$keywordExpression$");
					this._$keywordHereSend = $.$keywordHereSend;
					this.$keywordHereSend = dnuCatcher("$keywordHereSend");
					this._$setOnce$keywordHereSend$ = $.$setOnce$keywordHereSend$;
					this.$setOnce$keywordHereSend$ = dnuCatcher("$setOnce$keywordHereSend$");
					this._$cascadeMsg = $.$cascadeMsg;
					this.$cascadeMsg = dnuCatcher("$cascadeMsg");
					this._$setOnce$cascadeMsg$ = $.$setOnce$cascadeMsg$;
					this.$setOnce$cascadeMsg$ = dnuCatcher("$setOnce$cascadeMsg$");
					this._$msgCascade = $.$msgCascade;
					this.$msgCascade = dnuCatcher("$msgCascade");
					this._$setOnce$msgCascade$ = $.$setOnce$msgCascade$;
					this.$setOnce$msgCascade$ = dnuCatcher("$setOnce$msgCascade$");
					this._$cascadedMessageExpression = $.$cascadedMessageExpression;
					this.$cascadedMessageExpression = dnuCatcher("$cascadedMessageExpression");
					this._$setOnce$cascadedMessageExpression$ = $.$setOnce$cascadedMessageExpression$;
					this.$setOnce$cascadedMessageExpression$ = dnuCatcher("$setOnce$cascadedMessageExpression$");
					this._$sendExpression = $.$sendExpression;
					this.$sendExpression = dnuCatcher("$sendExpression");
					this._$setOnce$sendExpression$ = $.$setOnce$sendExpression$;
					this.$setOnce$sendExpression$ = dnuCatcher("$setOnce$sendExpression$");
					this._$expression = $.$expression;
					this.$expression = dnuCatcher("$expression");
					this._$setOnce$expression$ = $.$setOnce$expression$;
					this.$setOnce$expression$ = dnuCatcher("$setOnce$expression$");
					this._$returnStatement = $.$returnStatement;
					this.$returnStatement = dnuCatcher("$returnStatement");
					this._$setOnce$returnStatement$ = $.$setOnce$returnStatement$;
					this.$setOnce$returnStatement$ = dnuCatcher("$setOnce$returnStatement$");
					this._$furtherStatements = $.$furtherStatements;
					this.$furtherStatements = dnuCatcher("$furtherStatements");
					this._$setOnce$furtherStatements$ = $.$setOnce$furtherStatements$;
					this.$setOnce$furtherStatements$ = dnuCatcher("$setOnce$furtherStatements$");
					this._$statementSequence = $.$statementSequence;
					this.$statementSequence = dnuCatcher("$statementSequence");
					this._$setOnce$statementSequence$ = $.$setOnce$statementSequence$;
					this.$setOnce$statementSequence$ = dnuCatcher("$setOnce$statementSequence$");
					this._$statements = $.$statements;
					this.$statements = dnuCatcher("$statements");
					this._$setOnce$statements$ = $.$setOnce$statements$;
					this.$setOnce$statements$ = dnuCatcher("$setOnce$statements$");
					this._$blockParameter = $.$blockParameter;
					this.$blockParameter = dnuCatcher("$blockParameter");
					this._$setOnce$blockParameter$ = $.$setOnce$blockParameter$;
					this.$setOnce$blockParameter$ = dnuCatcher("$setOnce$blockParameter$");
					this._$blockParameters = $.$blockParameters;
					this.$blockParameters = dnuCatcher("$blockParameters");
					this._$setOnce$blockParameters$ = $.$setOnce$blockParameters$;
					this.$setOnce$blockParameters$ = dnuCatcher("$setOnce$blockParameters$");
					this._$slotDefs = $.$slotDefs;
					this.$slotDefs = dnuCatcher("$slotDefs");
					this._$setOnce$slotDefs$ = $.$setOnce$slotDefs$;
					this.$setOnce$slotDefs$ = dnuCatcher("$setOnce$slotDefs$");
					this._$seqSlotDecls = $.$seqSlotDecls;
					this.$seqSlotDecls = dnuCatcher("$seqSlotDecls");
					this._$setOnce$seqSlotDecls$ = $.$setOnce$seqSlotDecls$;
					this.$setOnce$seqSlotDecls$ = dnuCatcher("$setOnce$seqSlotDecls$");
					this._$simSlotDecls = $.$simSlotDecls;
					this.$simSlotDecls = dnuCatcher("$simSlotDecls");
					this._$setOnce$simSlotDecls$ = $.$setOnce$simSlotDecls$;
					this.$setOnce$simSlotDecls$ = dnuCatcher("$setOnce$simSlotDecls$");
					this._$slotDecls = $.$slotDecls;
					this.$slotDecls = dnuCatcher("$slotDecls");
					this._$setOnce$slotDecls$ = $.$setOnce$slotDecls$;
					this.$setOnce$slotDecls$ = dnuCatcher("$setOnce$slotDecls$");
					this._$temporaries = $.$temporaries;
					this.$temporaries = dnuCatcher("$temporaries");
					this._$setOnce$temporaries$ = $.$setOnce$temporaries$;
					this.$setOnce$temporaries$ = dnuCatcher("$setOnce$temporaries$");
					this._$beginNSComment = $.$beginNSComment;
					this.$beginNSComment = dnuCatcher("$beginNSComment");
					this._$setOnce$beginNSComment$ = $.$setOnce$beginNSComment$;
					this.$setOnce$beginNSComment$ = dnuCatcher("$setOnce$beginNSComment$");
					this._$endNSComment = $.$endNSComment;
					this.$endNSComment = dnuCatcher("$endNSComment");
					this._$setOnce$endNSComment$ = $.$setOnce$endNSComment$;
					this.$setOnce$endNSComment$ = dnuCatcher("$setOnce$endNSComment$");
					this._$keywordAndLiteral = $.$keywordAndLiteral;
					this.$keywordAndLiteral = dnuCatcher("$keywordAndLiteral");
					this._$setOnce$keywordAndLiteral$ = $.$setOnce$keywordAndLiteral$;
					this.$setOnce$keywordAndLiteral$ = dnuCatcher("$setOnce$keywordAndLiteral$");
					this._$literalMessage = $.$literalMessage;
					this.$literalMessage = dnuCatcher("$literalMessage");
					this._$setOnce$literalMessage$ = $.$setOnce$literalMessage$;
					this.$setOnce$literalMessage$ = dnuCatcher("$setOnce$literalMessage$");
					this._$literalMessageComment = $.$literalMessageComment;
					this.$literalMessageComment = dnuCatcher("$literalMessageComment");
					this._$setOnce$literalMessageComment$ = $.$setOnce$literalMessageComment$;
					this.$setOnce$literalMessageComment$ = dnuCatcher("$setOnce$literalMessageComment$");
					this._$codeBody = $.$codeBody;
					this.$codeBody = dnuCatcher("$codeBody");
					this._$setOnce$codeBody$ = $.$setOnce$codeBody$;
					this.$setOnce$codeBody$ = dnuCatcher("$setOnce$codeBody$");
					this._$block = $.$block;
					this.$block = dnuCatcher("$block");
					this._$setOnce$block$ = $.$setOnce$block$;
					this.$setOnce$block$ = dnuCatcher("$setOnce$block$");
					this._$slotDecl = $.$slotDecl;
					this.$slotDecl = dnuCatcher("$slotDecl");
					this._$setOnce$slotDecl$ = $.$setOnce$slotDecl$;
					this.$setOnce$slotDecl$ = dnuCatcher("$setOnce$slotDecl$");
					this._$accessModifier = $.$accessModifier;
					this.$accessModifier = dnuCatcher("$accessModifier");
					this._$setOnce$accessModifier$ = $.$setOnce$accessModifier$;
					this.$setOnce$accessModifier$ = dnuCatcher("$setOnce$accessModifier$");
					this._$slotDef = $.$slotDef;
					this.$slotDef = dnuCatcher("$slotDef");
					this._$setOnce$slotDef$ = $.$setOnce$slotDef$;
					this.$setOnce$slotDef$ = dnuCatcher("$setOnce$slotDef$");
					this._$initExprs = $.$initExprs;
					this.$initExprs = dnuCatcher("$initExprs");
					this._$setOnce$initExprs$ = $.$setOnce$initExprs$;
					this.$setOnce$initExprs$ = dnuCatcher("$setOnce$initExprs$");
					this._$unaryMsgPattern = $.$unaryMsgPattern;
					this.$unaryMsgPattern = dnuCatcher("$unaryMsgPattern");
					this._$setOnce$unaryMsgPattern$ = $.$setOnce$unaryMsgPattern$;
					this.$setOnce$unaryMsgPattern$ = dnuCatcher("$setOnce$unaryMsgPattern$");
					this._$binaryMsgPattern = $.$binaryMsgPattern;
					this.$binaryMsgPattern = dnuCatcher("$binaryMsgPattern");
					this._$setOnce$binaryMsgPattern$ = $.$setOnce$binaryMsgPattern$;
					this.$setOnce$binaryMsgPattern$ = dnuCatcher("$setOnce$binaryMsgPattern$");
					this._$keywordMsgPattern = $.$keywordMsgPattern;
					this.$keywordMsgPattern = dnuCatcher("$keywordMsgPattern");
					this._$setOnce$keywordMsgPattern$ = $.$setOnce$keywordMsgPattern$;
					this.$setOnce$keywordMsgPattern$ = dnuCatcher("$setOnce$keywordMsgPattern$");
					this._$messagePattern = $.$messagePattern;
					this.$messagePattern = dnuCatcher("$messagePattern");
					this._$setOnce$messagePattern$ = $.$setOnce$messagePattern$;
					this.$setOnce$messagePattern$ = dnuCatcher("$setOnce$messagePattern$");
					this._$method = $.$method;
					this.$method = dnuCatcher("$method");
					this._$setOnce$method$ = $.$setOnce$method$;
					this.$setOnce$method$ = dnuCatcher("$setOnce$method$");
					this._$methodHeader = $.$methodHeader;
					this.$methodHeader = dnuCatcher("$methodHeader");
					this._$setOnce$methodHeader$ = $.$setOnce$methodHeader$;
					this.$setOnce$methodHeader$ = dnuCatcher("$setOnce$methodHeader$");
					this._$methodDecl = $.$methodDecl;
					this.$methodDecl = dnuCatcher("$methodDecl");
					this._$setOnce$methodDecl$ = $.$setOnce$methodDecl$;
					this.$setOnce$methodDecl$ = dnuCatcher("$setOnce$methodDecl$");
					this._$optionalFactorySection = $.$optionalFactorySection;
					this.$optionalFactorySection = dnuCatcher("$optionalFactorySection");
					this._$setOnce$optionalFactorySection$ = $.$setOnce$optionalFactorySection$;
					this.$setOnce$optionalFactorySection$ = dnuCatcher("$setOnce$optionalFactorySection$");
					this._$classPrefix = $.$classPrefix;
					this.$classPrefix = dnuCatcher("$classPrefix");
					this._$setOnce$classPrefix$ = $.$setOnce$classPrefix$;
					this.$setOnce$classPrefix$ = dnuCatcher("$setOnce$classPrefix$");
					this._$mixinApplication = $.$mixinApplication;
					this.$mixinApplication = dnuCatcher("$mixinApplication");
					this._$setOnce$mixinApplication$ = $.$setOnce$mixinApplication$;
					this.$setOnce$mixinApplication$ = dnuCatcher("$setOnce$mixinApplication$");
					this._$nestedClassDecl = $.$nestedClassDecl;
					this.$nestedClassDecl = dnuCatcher("$nestedClassDecl");
					this._$setOnce$nestedClassDecl$ = $.$setOnce$nestedClassDecl$;
					this.$setOnce$nestedClassDecl$ = dnuCatcher("$setOnce$nestedClassDecl$");
					this._$category = $.$category;
					this.$category = dnuCatcher("$category");
					this._$setOnce$category$ = $.$setOnce$category$;
					this.$setOnce$category$ = dnuCatcher("$setOnce$category$");
					this._$classComment = $.$classComment;
					this.$classComment = dnuCatcher("$classComment");
					this._$setOnce$classComment$ = $.$setOnce$classComment$;
					this.$setOnce$classComment$ = dnuCatcher("$setOnce$classComment$");
					this._$sideDecl = $.$sideDecl;
					this.$sideDecl = dnuCatcher("$sideDecl");
					this._$setOnce$sideDecl$ = $.$setOnce$sideDecl$;
					this.$setOnce$sideDecl$ = dnuCatcher("$setOnce$sideDecl$");
					this._$classSideDecl = $.$classSideDecl;
					this.$classSideDecl = dnuCatcher("$classSideDecl");
					this._$setOnce$classSideDecl$ = $.$setOnce$classSideDecl$;
					this.$setOnce$classSideDecl$ = dnuCatcher("$setOnce$classSideDecl$");
					this._$languageId = $.$languageId;
					this.$languageId = dnuCatcher("$languageId");
					this._$setOnce$languageId$ = $.$setOnce$languageId$;
					this.$setOnce$languageId$ = dnuCatcher("$setOnce$languageId$");
					this._$classCategory = $.$classCategory;
					this.$classCategory = dnuCatcher("$classCategory");
					this._$setOnce$classCategory$ = $.$setOnce$classCategory$;
					this.$setOnce$classCategory$ = dnuCatcher("$setOnce$classCategory$");
					this._$superclassClause = $.$superclassClause;
					this.$superclassClause = dnuCatcher("$superclassClause");
					this._$setOnce$superclassClause$ = $.$setOnce$superclassClause$;
					this.$setOnce$superclassClause$ = dnuCatcher("$setOnce$superclassClause$");
					this._$superclassPrefix = $.$superclassPrefix;
					this.$superclassPrefix = dnuCatcher("$superclassPrefix");
					this._$setOnce$superclassPrefix$ = $.$setOnce$superclassPrefix$;
					this.$setOnce$superclassPrefix$ = dnuCatcher("$setOnce$superclassPrefix$");
					this._$outerReceiver = $.$outerReceiver;
					this.$outerReceiver = dnuCatcher("$outerReceiver");
					this._$setOnce$outerReceiver$ = $.$setOnce$outerReceiver$;
					this.$setOnce$outerReceiver$ = dnuCatcher("$setOnce$outerReceiver$");
					this._$classHeader = $.$classHeader;
					this.$classHeader = dnuCatcher("$classHeader");
					this._$setOnce$classHeader$ = $.$setOnce$classHeader$;
					this.$setOnce$classHeader$ = dnuCatcher("$setOnce$classHeader$");
					this._$classDeclaration = $.$classDeclaration;
					this.$classDeclaration = dnuCatcher("$classDeclaration");
					this._$setOnce$classDeclaration$ = $.$setOnce$classDeclaration$;
					this.$setOnce$classDeclaration$ = dnuCatcher("$setOnce$classDeclaration$");
					this._$inheritanceClause = $.$inheritanceClause;
					this.$inheritanceClause = dnuCatcher("$inheritanceClause");
					this._$setOnce$inheritanceClause$ = $.$setOnce$inheritanceClause$;
					this.$setOnce$inheritanceClause$ = dnuCatcher("$setOnce$inheritanceClause$");
					this._$instanceInitializer = $.$instanceInitializer;
					this.$instanceInitializer = dnuCatcher("$instanceInitializer");
					this._$setOnce$instanceInitializer$ = $.$setOnce$instanceInitializer$;
					this.$setOnce$instanceInitializer$ = dnuCatcher("$setOnce$instanceInitializer$");
					this._$classBody = $.$classBody;
					this.$classBody = dnuCatcher("$classBody");
					this._$setOnce$classBody$ = $.$setOnce$classBody$;
					this.$setOnce$classBody$ = dnuCatcher("$setOnce$classBody$");
					this._$mixinAppSuffix = $.$mixinAppSuffix;
					this.$mixinAppSuffix = dnuCatcher("$mixinAppSuffix");
					this._$setOnce$mixinAppSuffix$ = $.$setOnce$mixinAppSuffix$;
					this.$setOnce$mixinAppSuffix$ = dnuCatcher("$setOnce$mixinAppSuffix$");
					this._$mixinSpec = $.$mixinSpec;
					this.$mixinSpec = dnuCatcher("$mixinSpec");
					this._$setOnce$mixinSpec$ = $.$setOnce$mixinSpec$;
					this.$setOnce$mixinSpec$ = dnuCatcher("$setOnce$mixinSpec$");
					this._$explicitInheritanceListAndOrBody = $.$explicitInheritanceListAndOrBody;
					this.$explicitInheritanceListAndOrBody = dnuCatcher("$explicitInheritanceListAndOrBody");
					this._$setOnce$explicitInheritanceListAndOrBody$ = $.$setOnce$explicitInheritanceListAndOrBody$;
					this.$setOnce$explicitInheritanceListAndOrBody$ = dnuCatcher("$setOnce$explicitInheritanceListAndOrBody$");
					this._$defaultSuperclassAndBody = $.$defaultSuperclassAndBody;
					this.$defaultSuperclassAndBody = dnuCatcher("$defaultSuperclassAndBody");
					this._$setOnce$defaultSuperclassAndBody$ = $.$setOnce$defaultSuperclassAndBody$;
					this.$setOnce$defaultSuperclassAndBody$ = dnuCatcher("$setOnce$defaultSuperclassAndBody$");
					this._$inheritanceListAndOrBody = $.$inheritanceListAndOrBody;
					this.$inheritanceListAndOrBody = dnuCatcher("$inheritanceListAndOrBody");
					this._$setOnce$inheritanceListAndOrBody$ = $.$setOnce$inheritanceListAndOrBody$;
					this.$setOnce$inheritanceListAndOrBody$ = dnuCatcher("$setOnce$inheritanceListAndOrBody$");
					this._$classDecl = $.$classDecl;
					this.$classDecl = dnuCatcher("$classDecl");
					this._$setOnce$classDecl$ = $.$setOnce$classDecl$;
					this.$setOnce$classDecl$ = dnuCatcher("$setOnce$classDecl$");
					this._$toplevelClass = $.$toplevelClass;
					this.$toplevelClass = dnuCatcher("$toplevelClass");
					this._$setOnce$toplevelClass$ = $.$setOnce$toplevelClass$;
					this.$setOnce$toplevelClass$ = dnuCatcher("$setOnce$toplevelClass$");
					this._$compilationUnit = $.$compilationUnit;
					this.$compilationUnit = dnuCatcher("$compilationUnit");
					this._$setOnce$compilationUnit$ = $.$setOnce$compilationUnit$;
					this.$setOnce$compilationUnit$ = dnuCatcher("$setOnce$compilationUnit$");
					this._$doItExpression = $.$doItExpression;
					this.$doItExpression = dnuCatcher("$doItExpression");
					this._$setOnce$doItExpression$ = $.$setOnce$doItExpression$;
					this.$setOnce$doItExpression$ = dnuCatcher("$setOnce$doItExpression$");
					this.$enclosingObjects$NewspeakGrammar$NS3Grammar = enclosingObjects;
					this.$super$NewspeakGrammar$NS3Grammar$slot = runtimeSuperclass;
					this["NewspeakGrammar`NS3Grammar"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$whitespace$slot = nil;
						this.$colon$slot = nil;
						this.$comma$slot = nil;
						this.$dollar$slot = nil;
						this.$dot$slot = nil;
						this.$equalSign$slot = nil;
						this.$hat$slot = nil;
						this.$lbracket$slot = nil;
						this.$lcurly$slot = nil;
						this.$lparen$slot = nil;
						this.$langleBracket$slot = nil;
						this.$pound$slot = nil;
						this.$rangleBracket$slot = nil;
						this.$rbracket$slot = nil;
						this.$rcurly$slot = nil;
						this.$rparen$slot = nil;
						this.$semicolon$slot = nil;
						this.$slash$slot = nil;
						this.$vbar$slot = nil;
						this.$mixinOperator$slot = nil;
						this.$inverseMixinOperator$slot = nil;
						this.$eventualSendOperator$slot = nil;
						this.$digit$slot = nil;
						this.$digits$slot = nil;
						this.$uppercaseLetter$slot = nil;
						this.$extendedDigits$slot = nil;
						this.$radix$slot = nil;
						this.$fraction$slot = nil;
						this.$extendedFraction$slot = nil;
						this.$exponent$slot = nil;
						this.$decimalNum$slot = nil;
						this.$radixNum$slot = nil;
						this.$num$slot = nil;
						this.$number$slot = nil;
						this.$letter$slot = nil;
						this.$specialCharacter$slot = nil;
						this.$character$slot = nil;
						this.$id$slot = nil;
						this.$identifier$slot = nil;
						this.$charIncludingQuotesAndSpace$slot = nil;
						this.$newChar$slot = nil;
						this.$oldChar$slot = nil;
						this.$characterConstant$slot = nil;
						this.$str$slot = nil;
						this.$string$slot = nil;
						this.$kw$slot = nil;
						this.$kwds$slot = nil;
						this.$keyword$slot = nil;
						this.$setterKw$slot = nil;
						this.$setterKeyword$slot = nil;
						this.$sym$slot = nil;
						this.$symbol$slot = nil;
						this.$comment$slot = nil;
						this.$binSel$slot = nil;
						this.$binarySelector$slot = nil;
						this.$symbolConstant$slot = nil;
						this.$tuple$slot = nil;
						this.$literal$slot = nil;
						this.$pattern$slot = nil;
						this.$patternLiteral$slot = nil;
						this.$wildcardPattern$slot = nil;
						this.$literalPattern$slot = nil;
						this.$keywordPattern$slot = nil;
						this.$kwPatternPair$slot = nil;
						this.$kwPatternValue$slot = nil;
						this.$variablePattern$slot = nil;
						this.$nestedPatternLiteral$slot = nil;
						this.$slotName$slot = nil;
						this.$unarySelector$slot = nil;
						this.$parenthesizedExpression$slot = nil;
						this.$primary$slot = nil;
						this.$unaryMsg$slot = nil;
						this.$unaryExpression$slot = nil;
						this.$binaryMsg$slot = nil;
						this.$binaryExpression$slot = nil;
						this.$keywordMsg$slot = nil;
						this.$message$slot = nil;
						this.$nontrivialUnaryMessages$slot = nil;
						this.$nontrivialBinaryMessages$slot = nil;
						this.$keywordMessages$slot = nil;
						this.$nonEmptyMessages$slot = nil;
						this.$keywordExpression$slot = nil;
						this.$keywordHereSend$slot = nil;
						this.$cascadeMsg$slot = nil;
						this.$msgCascade$slot = nil;
						this.$cascadedMessageExpression$slot = nil;
						this.$sendExpression$slot = nil;
						this.$expression$slot = nil;
						this.$returnStatement$slot = nil;
						this.$furtherStatements$slot = nil;
						this.$statementSequence$slot = nil;
						this.$statements$slot = nil;
						this.$blockParameter$slot = nil;
						this.$blockParameters$slot = nil;
						this.$slotDefs$slot = nil;
						this.$seqSlotDecls$slot = nil;
						this.$simSlotDecls$slot = nil;
						this.$slotDecls$slot = nil;
						this.$temporaries$slot = nil;
						this.$beginNSComment$slot = nil;
						this.$endNSComment$slot = nil;
						this.$keywordAndLiteral$slot = nil;
						this.$literalMessage$slot = nil;
						this.$literalMessageComment$slot = nil;
						this.$codeBody$slot = nil;
						this.$block$slot = nil;
						this.$slotDecl$slot = nil;
						this.$accessModifier$slot = nil;
						this.$slotDef$slot = nil;
						this.$initExprs$slot = nil;
						this.$unaryMsgPattern$slot = nil;
						this.$binaryMsgPattern$slot = nil;
						this.$keywordMsgPattern$slot = nil;
						this.$messagePattern$slot = nil;
						this.$method$slot = nil;
						this.$methodHeader$slot = nil;
						this.$methodDecl$slot = nil;
						this.$optionalFactorySection$slot = nil;
						this.$classPrefix$slot = nil;
						this.$mixinApplication$slot = nil;
						this.$nestedClassDecl$slot = nil;
						this.$category$slot = nil;
						this.$classComment$slot = nil;
						this.$sideDecl$slot = nil;
						this.$classSideDecl$slot = nil;
						this.$languageId$slot = nil;
						this.$classCategory$slot = nil;
						this.$superclassClause$slot = nil;
						this.$superclassPrefix$slot = nil;
						this.$outerReceiver$slot = nil;
						this.$classHeader$slot = nil;
						this.$classDeclaration$slot = nil;
						this.$inheritanceClause$slot = nil;
						this.$instanceInitializer$slot = nil;
						this.$classBody$slot = nil;
						this.$mixinAppSuffix$slot = nil;
						this.$mixinSpec$slot = nil;
						this.$explicitInheritanceListAndOrBody$slot = nil;
						this.$defaultSuperclassAndBody$slot = nil;
						this.$inheritanceListAndOrBody$slot = nil;
						this.$classDecl$slot = nil;
						this.$toplevelClass$slot = nil;
						this.$compilationUnit$slot = nil;
						this.$doItExpression$slot = nil;
					});
					this.basicNew = this["NewspeakGrammar`NS3Grammar"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakGrammar`NS3Grammar";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakGrammar`NS3Grammar";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakGrammar$NS3Grammar = enclosingObjects;
						this.$super$NewspeakGrammar$NS3Grammar = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakGrammar$NSCommentParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakGrammar`NSCommentParser";
			this.name = "NewspeakGrammar`NSCommentParser";
			this.header = "NSCommentParser = CombinatorialParser (\r(* As an optimization, we handle comments with a dedicated parser. It should be equivalent to:\r\rbeginComment = (char: \"(\"), (char: \"*\" ).\rendComment = (char: \"*\" ), (char: \")\").\rmetadataTag = (char: $:), id, (char: $:).\rany = charBetween: (Character value: 0) and: (Character value: 16r10FFFF).\rcomment = beginComment, \r	metadataTag opt, \r	((endComment not, any) | comment) star,\r	endComment.\r	\r*))";
			this.slots = [];
			this.methods = [
				new MM("superInit`NewspeakGrammar`NSCommentParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("parse:inContext:ifError:", false, "public parse: input <ReadStream> inContext: context ifError: blk = (\r	| pos = input position. body = OrderedCollection new. |\r	\r	(input atEnd not and: [input next = \"(\" and: [input atEnd not and: [input next = \"*\"]]]) ifFalse: \r		[input position: pos.\r		^blk value: '(* expected' value: pos].\r	\r	[ | c |\r	input atEnd ifTrue: \r		[input position: pos.\r		^blk value: '(* expected' value: pos].\r	c:: input next.\r	body add: c.\r	c = \"(\" ifTrue: \r		[ | d |\r		input atEnd ifTrue: \r			[input position: pos.\r			^blk value: '(* expected' value: pos].\r		d:: input next.\r		d = \"*\" ifTrue: [\r			| res |\r			body removeLast. (* not part of comment body *)\r			input position: input position - 2.\r			res:: self parse: input inContext: context ifError: \r				[:msg :pos2 |\r				input position: pos.\r				^blk value: '(* expected 2' value: pos].\r			body addAll: res token.\r		] ifFalse: [\r			body add: d.\r		]].\r	c = \"*\" ifTrue: \r		[ | d |\r		input atEnd ifTrue: \r			[input position: pos.\r			^blk value: '(* expected' value: pos].\r		d:: input next.\r		d = \")\" ifTrue: [\r			body removeLast. (* not part of comment body *)\r			^Token new\r				for: (String withAll: body)\r				start: pos end: input position]\r		ifFalse: [\r			input position: input position - 1. (* Consider next char as possible end star-paren *)\r		]].\r	c = nil ifTrue: \r		[input position: pos.\r		^blk value: '(* expected' value: pos].\r	] repeat.\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakGrammar$NSCommentParser = (function () {
				var self = this;
				self.$super$NewspeakGrammar$NSCommentParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakGrammar$NSCommentParser();
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				var NLR = new Object();
				try {
					var $pos = nil;
					var $body = nil;
					$pos = $input.$position();
					$body = $0.$OrderedCollection.call(self.$enclosingObjects$NewspeakGrammar$NSCommentParser[0]).$new();
					if (!($input.$atEnd().$not() && ($input.$next().$$equal("(") && ($input.$atEnd().$not() && $input.$next().$$equal("*"))))) {
						$input.$position$($pos);
						return $blk.$value$value$("(* expected", $pos);
					} else {
						nil;
					};
					{
						nil;
						var $c = nil;
						if ($input.$atEnd()) {
							$input.$position$($pos);
							return $blk.$value$value$("(* expected", $pos);
						} else {
							nil;
						};
						$c = $input.$next();
						$body.$add$($c);
						if ($c.$$equal("(")) {
							var $d = nil;
							if ($input.$atEnd()) {
								$input.$position$($pos);
								return $blk.$value$value$("(* expected", $pos);
							} else {
								nil;
							};
							$d = $input.$next();
							if ($d.$$equal("*")) {
								var $res = nil;
								$body.$removeLast();
								$input.$position$($input.$position() - 2);
								$res = self._$parse$inContext$ifError$($input, $context, (function ($msg, $pos2) {
									$input.$position$($pos);
									{
										NLR.value = $blk.$value$value$("(* expected 2", $pos);
										throw NLR;
									};
								}));
								$body.$addAll$($res.$token());
							} else {
								$body.$add$($d);
							};
						} else {
							nil;
						};
						if ($c.$$equal("*")) {
							var $d = nil;
							if ($input.$atEnd()) {
								$input.$position$($pos);
								return $blk.$value$value$("(* expected", $pos);
							} else {
								nil;
							};
							$d = $input.$next();
							if ($d.$$equal(")")) {
								$body.$removeLast();
								return $0.$Token.call(self.$enclosingObjects$NewspeakGrammar$NSCommentParser[0]).$new().$for$start$end$(self._$String().$withAll$($body), $pos, $input.$position());
							} else {
								$input.$position$($input.$position() - 1);
							};
						} else {
							nil;
						};
						if ($c.$$equal(nil)) {
							$input.$position$($pos);
							return $blk.$value$value$("(* expected", $pos);
						} else {
							nil;
						};
						for (; true; ) {
							nil;
							var $c = nil;
							if ($input.$atEnd()) {
								$input.$position$($pos);
								return $blk.$value$value$("(* expected", $pos);
							} else {
								nil;
							};
							$c = $input.$next();
							$body.$add$($c);
							if ($c.$$equal("(")) {
								var $d = nil;
								if ($input.$atEnd()) {
									$input.$position$($pos);
									return $blk.$value$value$("(* expected", $pos);
								} else {
									nil;
								};
								$d = $input.$next();
								if ($d.$$equal("*")) {
									var $res = nil;
									$body.$removeLast();
									$input.$position$($input.$position() - 2);
									$res = self._$parse$inContext$ifError$($input, $context, (function ($msg, $pos2) {
										$input.$position$($pos);
										{
											NLR.value = $blk.$value$value$("(* expected 2", $pos);
											throw NLR;
										};
									}));
									$body.$addAll$($res.$token());
								} else {
									$body.$add$($d);
								};
							} else {
								nil;
							};
							if ($c.$$equal("*")) {
								var $d = nil;
								if ($input.$atEnd()) {
									$input.$position$($pos);
									return $blk.$value$value$("(* expected", $pos);
								} else {
									nil;
								};
								$d = $input.$next();
								if ($d.$$equal(")")) {
									$body.$removeLast();
									return $0.$Token.call(self.$enclosingObjects$NewspeakGrammar$NSCommentParser[0]).$new().$for$start$end$(self._$String().$withAll$($body), $pos, $input.$position());
								} else {
									$input.$position$($input.$position() - 1);
								};
							} else {
								nil;
							};
							if ($c.$$equal(nil)) {
								$input.$position$($pos);
								return $blk.$value$value$("(* expected", $pos);
							} else {
								nil;
							};
						};
					};
					return self;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakGrammar`NSCommentParser";
					this._$superInit$NewspeakGrammar$NSCommentParser = $.$superInit$NewspeakGrammar$NSCommentParser;
					this.$superInit$NewspeakGrammar$NSCommentParser = dnuCatcher("$superInit$NewspeakGrammar$NSCommentParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this.$enclosingObjects$NewspeakGrammar$NSCommentParser = enclosingObjects;
					this.$super$NewspeakGrammar$NSCommentParser$slot = runtimeSuperclass;
					this["NewspeakGrammar`NSCommentParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["NewspeakGrammar`NSCommentParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakGrammar`NSCommentParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakGrammar`NSCommentParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakGrammar$NSCommentParser = enclosingObjects;
						this.$super$NewspeakGrammar$NSCommentParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakGrammar$TypedNS3Grammar = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakGrammar`TypedNS3Grammar";
			this.name = "NewspeakGrammar`TypedNS3Grammar";
			this.header = "TypedNS3Grammar = NS3Grammar ((* A parser for Strongtalk syntax. Adds productions for the Strongtalk type expression sublanguage, and the changes needed to use types in Newsqueak code. *)|                   \r\r arg = tokenFromSymbol: #arg.\r for = tokenFromSymbol: #for.\r generic = tokenFromSymbol: #generic.\r inheritedTypeOf = tokenFromSymbol: #inheritedTypeOf.\r is = tokenFromSymbol: #is.\r mssg = tokenFromSymbol: #message.\r of = tokenFromSymbol: #of.\r\r receiverType = tokenFromSymbol: #receiverType.\r subtypeOf = tokenFromSymbol: #subtypeOf.\r typeArg = tokenFromSymbol: #typeArg.\r where = tokenFromSymbol: #where.\r returnType = hat, type.\r\r                                                                 (* Type Grammar *)\r                                                                 \r  type = langleBracket, typeExpr,  rangleBracket.\r  typePrimary = identifier, typeArguments opt.\r  typeFactor =  typePrimary |\r                   (* blockType | *) newBlockType |\r                   tupleType |\r                   parenthesizedTypeExpression.\r  parenthesizedTypeExpression =  lparen,  typeExpr,  rparen.\r  typeTerm = typeFactor, identifier star.\r  typeExpr = typeTerm, ((vbar | semicolon | slash), typeExpr) opt.\r  typeArguments = lbracket, (typeExpr plusSeparatedBy: comma),  rbracket. \r  blockType =  lbracket, blockTypeArgList,  rbracket.\r  tupleType = lcurly, (typeExpr starSeparatedBy: dot), rcurly.\r  nonEmptyBlockTypeArgList = (typeExpr plusSeparatedBy: comma), \r                                     (comma, blockReturnType) opt.\r  blockTypeArgList =  nonEmptyBlockTypeArgList |\r                                   blockReturnType opt.\r  blockReturnType =  hat, typeExpr.\r\r  newBlockArgType = colon, typeTerm.\r  newBlockReturnType = typeExpr.\r  newNonEmptyBlockArgList = newBlockArgType plus, (vbar, newBlockReturnType) opt.\r  newBlockType = lbracket, (newNonEmptyBlockArgList | newBlockReturnType opt), rbracket.\r                                        \r                                         (* Type inference *)\r                                         \r  typePattern = langleBracket, typeFormal, (semicolon, typeFormal) star,  rangleBracket. (* changed from {} to <> brackets to avoid conflict with tuples *)\r  typeFormal =  where, identifier, typeParamConstraint opt, is, inferenceClause.\r  typeParamConstraint =  langleBracket,  typeBoundQualifier opt,  typeExpr, rangleBracket.\r  typeBoundQualifier =  subtypeOf | inheritedTypeOf.\r  inferenceClause = receiverType | \r                                      (returnType, returnTypeInferenceClause) |\r                                      typeArgInferenceClause |\r                                      (arg,  number, (of, msgSelector) opt).\r  returnTypeInferenceClause =  of, msgSelector.\r  msgSelector =  symbolConstant, mssg, of, inferenceClause.\r  typeArgInferenceClause = typeArg, number, for, generic, symbolConstant, of, inferenceClause. \r |)";
			this.slots = [
				new SM("arg", false, false),
				new SM("for", false, false),
				new SM("generic", false, false),
				new SM("inheritedTypeOf", false, false),
				new SM("is", false, false),
				new SM("mssg", false, false),
				new SM("of", false, false),
				new SM("receiverType", false, false),
				new SM("subtypeOf", false, false),
				new SM("typeArg", false, false),
				new SM("where", false, false),
				new SM("returnType", false, false),
				new SM("type", false, false),
				new SM("typePrimary", false, false),
				new SM("typeFactor", false, false),
				new SM("parenthesizedTypeExpression", false, false),
				new SM("typeTerm", false, false),
				new SM("typeExpr", false, false),
				new SM("typeArguments", false, false),
				new SM("blockType", false, false),
				new SM("tupleType", false, false),
				new SM("nonEmptyBlockTypeArgList", false, false),
				new SM("blockTypeArgList", false, false),
				new SM("blockReturnType", false, false),
				new SM("newBlockArgType", false, false),
				new SM("newBlockReturnType", false, false),
				new SM("newNonEmptyBlockArgList", false, false),
				new SM("newBlockType", false, false),
				new SM("typePattern", false, false),
				new SM("typeFormal", false, false),
				new SM("typeParamConstraint", false, false),
				new SM("typeBoundQualifier", false, false),
				new SM("inferenceClause", false, false),
				new SM("returnTypeInferenceClause", false, false),
				new SM("msgSelector", false, false),
				new SM("typeArgInferenceClause", false, false)
			];
			this.methods = [
				new MM("superInit`NewspeakGrammar`TypedNS3Grammar", true, "NS3Grammar"),
				new MM("instance`initializer", true, "NS3Grammar"),
				new MM("messagePattern", false, "messagePattern = (\r     ^super messagePattern, returnType opt, typePattern opt. (* Type annotations *)\r  )"),
				new MM("slotDecl", false, "slotDecl = (\r    ^super slotDecl , type opt.\r  )"),
				new MM("arg", true, null),
				new MM("setOnce`arg:", true, null),
				new MM("for", true, null),
				new MM("setOnce`for:", true, null),
				new MM("generic", true, null),
				new MM("setOnce`generic:", true, null),
				new MM("inheritedTypeOf", true, null),
				new MM("setOnce`inheritedTypeOf:", true, null),
				new MM("is", true, null),
				new MM("setOnce`is:", true, null),
				new MM("mssg", true, null),
				new MM("setOnce`mssg:", true, null),
				new MM("of", true, null),
				new MM("setOnce`of:", true, null),
				new MM("receiverType", true, null),
				new MM("setOnce`receiverType:", true, null),
				new MM("subtypeOf", true, null),
				new MM("setOnce`subtypeOf:", true, null),
				new MM("typeArg", true, null),
				new MM("setOnce`typeArg:", true, null),
				new MM("where", true, null),
				new MM("setOnce`where:", true, null),
				new MM("returnType", true, null),
				new MM("setOnce`returnType:", true, null),
				new MM("type", true, null),
				new MM("setOnce`type:", true, null),
				new MM("typePrimary", true, null),
				new MM("setOnce`typePrimary:", true, null),
				new MM("typeFactor", true, null),
				new MM("setOnce`typeFactor:", true, null),
				new MM("parenthesizedTypeExpression", true, null),
				new MM("setOnce`parenthesizedTypeExpression:", true, null),
				new MM("typeTerm", true, null),
				new MM("setOnce`typeTerm:", true, null),
				new MM("typeExpr", true, null),
				new MM("setOnce`typeExpr:", true, null),
				new MM("typeArguments", true, null),
				new MM("setOnce`typeArguments:", true, null),
				new MM("blockType", true, null),
				new MM("setOnce`blockType:", true, null),
				new MM("tupleType", true, null),
				new MM("setOnce`tupleType:", true, null),
				new MM("nonEmptyBlockTypeArgList", true, null),
				new MM("setOnce`nonEmptyBlockTypeArgList:", true, null),
				new MM("blockTypeArgList", true, null),
				new MM("setOnce`blockTypeArgList:", true, null),
				new MM("blockReturnType", true, null),
				new MM("setOnce`blockReturnType:", true, null),
				new MM("newBlockArgType", true, null),
				new MM("setOnce`newBlockArgType:", true, null),
				new MM("newBlockReturnType", true, null),
				new MM("setOnce`newBlockReturnType:", true, null),
				new MM("newNonEmptyBlockArgList", true, null),
				new MM("setOnce`newNonEmptyBlockArgList:", true, null),
				new MM("newBlockType", true, null),
				new MM("setOnce`newBlockType:", true, null),
				new MM("typePattern", true, null),
				new MM("setOnce`typePattern:", true, null),
				new MM("typeFormal", true, null),
				new MM("setOnce`typeFormal:", true, null),
				new MM("typeParamConstraint", true, null),
				new MM("setOnce`typeParamConstraint:", true, null),
				new MM("typeBoundQualifier", true, null),
				new MM("setOnce`typeBoundQualifier:", true, null),
				new MM("inferenceClause", true, null),
				new MM("setOnce`inferenceClause:", true, null),
				new MM("returnTypeInferenceClause", true, null),
				new MM("setOnce`returnTypeInferenceClause:", true, null),
				new MM("msgSelector", true, null),
				new MM("setOnce`msgSelector:", true, null),
				new MM("typeArgInferenceClause", true, null),
				new MM("setOnce`typeArgInferenceClause:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakGrammar$TypedNS3Grammar = (function () {
				var self = this;
				self.$super$NewspeakGrammar$TypedNS3Grammar$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakGrammar$TypedNS3Grammar();
				self._$setOnce$arg$(self._$tokenFromSymbol$("arg"));
				self._$setOnce$for$(self._$tokenFromSymbol$("for"));
				self._$setOnce$generic$(self._$tokenFromSymbol$("generic"));
				self._$setOnce$inheritedTypeOf$(self._$tokenFromSymbol$("inheritedTypeOf"));
				self._$setOnce$is$(self._$tokenFromSymbol$("is"));
				self._$setOnce$mssg$(self._$tokenFromSymbol$("message"));
				self._$setOnce$of$(self._$tokenFromSymbol$("of"));
				self._$setOnce$receiverType$(self._$tokenFromSymbol$("receiverType"));
				self._$setOnce$subtypeOf$(self._$tokenFromSymbol$("subtypeOf"));
				self._$setOnce$typeArg$(self._$tokenFromSymbol$("typeArg"));
				self._$setOnce$where$(self._$tokenFromSymbol$("where"));
				self._$setOnce$returnType$(self._$hat().$$comma(self._$type()));
				self._$setOnce$type$(self._$langleBracket().$$comma(self._$typeExpr()).$$comma(self._$rangleBracket()));
				self._$setOnce$typePrimary$(self._$identifier().$$comma(self._$typeArguments().$opt()));
				self._$setOnce$typeFactor$(self._$typePrimary().$$pipe(self._$newBlockType()).$$pipe(self._$tupleType()).$$pipe(self._$parenthesizedTypeExpression()));
				self._$setOnce$parenthesizedTypeExpression$(self._$lparen().$$comma(self._$typeExpr()).$$comma(self._$rparen()));
				self._$setOnce$typeTerm$(self._$typeFactor().$$comma(self._$identifier().$star()));
				self._$setOnce$typeExpr$(self._$typeTerm().$$comma(self._$vbar().$$pipe(self._$semicolon()).$$pipe(self._$slash()).$$comma(self._$typeExpr()).$opt()));
				self._$setOnce$typeArguments$(self._$lbracket().$$comma(self._$typeExpr().$plusSeparatedBy$(self._$comma())).$$comma(self._$rbracket()));
				self._$setOnce$blockType$(self._$lbracket().$$comma(self._$blockTypeArgList()).$$comma(self._$rbracket()));
				self._$setOnce$tupleType$(self._$lcurly().$$comma(self._$typeExpr().$starSeparatedBy$(self._$dot())).$$comma(self._$rcurly()));
				self._$setOnce$nonEmptyBlockTypeArgList$(self._$typeExpr().$plusSeparatedBy$(self._$comma()).$$comma(self._$comma().$$comma(self._$blockReturnType()).$opt()));
				self._$setOnce$blockTypeArgList$(self._$nonEmptyBlockTypeArgList().$$pipe(self._$blockReturnType().$opt()));
				self._$setOnce$blockReturnType$(self._$hat().$$comma(self._$typeExpr()));
				self._$setOnce$newBlockArgType$(self._$colon().$$comma(self._$typeTerm()));
				self._$setOnce$newBlockReturnType$(self._$typeExpr());
				self._$setOnce$newNonEmptyBlockArgList$(self._$newBlockArgType().$plus().$$comma(self._$vbar().$$comma(self._$newBlockReturnType()).$opt()));
				self._$setOnce$newBlockType$(self._$lbracket().$$comma(self._$newNonEmptyBlockArgList().$$pipe(self._$newBlockReturnType().$opt())).$$comma(self._$rbracket()));
				self._$setOnce$typePattern$(self._$langleBracket().$$comma(self._$typeFormal()).$$comma(self._$semicolon().$$comma(self._$typeFormal()).$star()).$$comma(self._$rangleBracket()));
				self._$setOnce$typeFormal$(self._$where().$$comma(self._$identifier()).$$comma(self._$typeParamConstraint().$opt()).$$comma(self._$is()).$$comma(self._$inferenceClause()));
				self._$setOnce$typeParamConstraint$(self._$langleBracket().$$comma(self._$typeBoundQualifier().$opt()).$$comma(self._$typeExpr()).$$comma(self._$rangleBracket()));
				self._$setOnce$typeBoundQualifier$(self._$subtypeOf().$$pipe(self._$inheritedTypeOf()));
				self._$setOnce$inferenceClause$(self._$receiverType().$$pipe(self._$returnType().$$comma(self._$returnTypeInferenceClause())).$$pipe(self._$typeArgInferenceClause()).$$pipe(self._$arg().$$comma(self._$number()).$$comma(self._$of().$$comma(self._$msgSelector()).$opt())));
				self._$setOnce$returnTypeInferenceClause$(self._$of().$$comma(self._$msgSelector()));
				self._$setOnce$msgSelector$(self._$symbolConstant().$$comma(self._$mssg()).$$comma(self._$of()).$$comma(self._$inferenceClause()));
				self._$setOnce$typeArgInferenceClause$(self._$typeArg().$$comma(self._$number()).$$comma(self._$for()).$$comma(self._$generic()).$$comma(self._$symbolConstant()).$$comma(self._$of()).$$comma(self._$inferenceClause()));
				return self;
			});
			this.$messagePattern = (function () {
				var self = this;
				return self.$super$NewspeakGrammar$TypedNS3Grammar$slot._$messagePattern.call(self).$$comma(self._$returnType().$opt()).$$comma(self._$typePattern().$opt());
			});
			this.$slotDecl = (function () {
				var self = this;
				return self.$super$NewspeakGrammar$TypedNS3Grammar$slot._$slotDecl.call(self).$$comma(self._$type().$opt());
			});
			this.$arg = (function () {
				return this.$arg$slot;
			});
			this.$setOnce$arg$ = (function (v) {
				this.$arg$slot = v;
				return this;
			});
			this.$for = (function () {
				return this.$for$slot;
			});
			this.$setOnce$for$ = (function (v) {
				this.$for$slot = v;
				return this;
			});
			this.$generic = (function () {
				return this.$generic$slot;
			});
			this.$setOnce$generic$ = (function (v) {
				this.$generic$slot = v;
				return this;
			});
			this.$inheritedTypeOf = (function () {
				return this.$inheritedTypeOf$slot;
			});
			this.$setOnce$inheritedTypeOf$ = (function (v) {
				this.$inheritedTypeOf$slot = v;
				return this;
			});
			this.$is = (function () {
				return this.$is$slot;
			});
			this.$setOnce$is$ = (function (v) {
				this.$is$slot = v;
				return this;
			});
			this.$mssg = (function () {
				return this.$mssg$slot;
			});
			this.$setOnce$mssg$ = (function (v) {
				this.$mssg$slot = v;
				return this;
			});
			this.$of = (function () {
				return this.$of$slot;
			});
			this.$setOnce$of$ = (function (v) {
				this.$of$slot = v;
				return this;
			});
			this.$receiverType = (function () {
				return this.$receiverType$slot;
			});
			this.$setOnce$receiverType$ = (function (v) {
				this.$receiverType$slot = v;
				return this;
			});
			this.$subtypeOf = (function () {
				return this.$subtypeOf$slot;
			});
			this.$setOnce$subtypeOf$ = (function (v) {
				this.$subtypeOf$slot = v;
				return this;
			});
			this.$typeArg = (function () {
				return this.$typeArg$slot;
			});
			this.$setOnce$typeArg$ = (function (v) {
				this.$typeArg$slot = v;
				return this;
			});
			this.$where = (function () {
				return this.$where$slot;
			});
			this.$setOnce$where$ = (function (v) {
				this.$where$slot = v;
				return this;
			});
			this.$returnType = (function () {
				return this.$returnType$slot;
			});
			this.$setOnce$returnType$ = (function (v) {
				this.$returnType$slot = v;
				return this;
			});
			this.$type = (function () {
				return this.$type$slot;
			});
			this.$setOnce$type$ = (function (v) {
				this.$type$slot = v;
				return this;
			});
			this.$typePrimary = (function () {
				return this.$typePrimary$slot;
			});
			this.$setOnce$typePrimary$ = (function (v) {
				this.$typePrimary$slot = v;
				return this;
			});
			this.$typeFactor = (function () {
				return this.$typeFactor$slot;
			});
			this.$setOnce$typeFactor$ = (function (v) {
				this.$typeFactor$slot = v;
				return this;
			});
			this.$parenthesizedTypeExpression = (function () {
				return this.$parenthesizedTypeExpression$slot;
			});
			this.$setOnce$parenthesizedTypeExpression$ = (function (v) {
				this.$parenthesizedTypeExpression$slot = v;
				return this;
			});
			this.$typeTerm = (function () {
				return this.$typeTerm$slot;
			});
			this.$setOnce$typeTerm$ = (function (v) {
				this.$typeTerm$slot = v;
				return this;
			});
			this.$typeExpr = (function () {
				return this.$typeExpr$slot;
			});
			this.$setOnce$typeExpr$ = (function (v) {
				this.$typeExpr$slot = v;
				return this;
			});
			this.$typeArguments = (function () {
				return this.$typeArguments$slot;
			});
			this.$setOnce$typeArguments$ = (function (v) {
				this.$typeArguments$slot = v;
				return this;
			});
			this.$blockType = (function () {
				return this.$blockType$slot;
			});
			this.$setOnce$blockType$ = (function (v) {
				this.$blockType$slot = v;
				return this;
			});
			this.$tupleType = (function () {
				return this.$tupleType$slot;
			});
			this.$setOnce$tupleType$ = (function (v) {
				this.$tupleType$slot = v;
				return this;
			});
			this.$nonEmptyBlockTypeArgList = (function () {
				return this.$nonEmptyBlockTypeArgList$slot;
			});
			this.$setOnce$nonEmptyBlockTypeArgList$ = (function (v) {
				this.$nonEmptyBlockTypeArgList$slot = v;
				return this;
			});
			this.$blockTypeArgList = (function () {
				return this.$blockTypeArgList$slot;
			});
			this.$setOnce$blockTypeArgList$ = (function (v) {
				this.$blockTypeArgList$slot = v;
				return this;
			});
			this.$blockReturnType = (function () {
				return this.$blockReturnType$slot;
			});
			this.$setOnce$blockReturnType$ = (function (v) {
				this.$blockReturnType$slot = v;
				return this;
			});
			this.$newBlockArgType = (function () {
				return this.$newBlockArgType$slot;
			});
			this.$setOnce$newBlockArgType$ = (function (v) {
				this.$newBlockArgType$slot = v;
				return this;
			});
			this.$newBlockReturnType = (function () {
				return this.$newBlockReturnType$slot;
			});
			this.$setOnce$newBlockReturnType$ = (function (v) {
				this.$newBlockReturnType$slot = v;
				return this;
			});
			this.$newNonEmptyBlockArgList = (function () {
				return this.$newNonEmptyBlockArgList$slot;
			});
			this.$setOnce$newNonEmptyBlockArgList$ = (function (v) {
				this.$newNonEmptyBlockArgList$slot = v;
				return this;
			});
			this.$newBlockType = (function () {
				return this.$newBlockType$slot;
			});
			this.$setOnce$newBlockType$ = (function (v) {
				this.$newBlockType$slot = v;
				return this;
			});
			this.$typePattern = (function () {
				return this.$typePattern$slot;
			});
			this.$setOnce$typePattern$ = (function (v) {
				this.$typePattern$slot = v;
				return this;
			});
			this.$typeFormal = (function () {
				return this.$typeFormal$slot;
			});
			this.$setOnce$typeFormal$ = (function (v) {
				this.$typeFormal$slot = v;
				return this;
			});
			this.$typeParamConstraint = (function () {
				return this.$typeParamConstraint$slot;
			});
			this.$setOnce$typeParamConstraint$ = (function (v) {
				this.$typeParamConstraint$slot = v;
				return this;
			});
			this.$typeBoundQualifier = (function () {
				return this.$typeBoundQualifier$slot;
			});
			this.$setOnce$typeBoundQualifier$ = (function (v) {
				this.$typeBoundQualifier$slot = v;
				return this;
			});
			this.$inferenceClause = (function () {
				return this.$inferenceClause$slot;
			});
			this.$setOnce$inferenceClause$ = (function (v) {
				this.$inferenceClause$slot = v;
				return this;
			});
			this.$returnTypeInferenceClause = (function () {
				return this.$returnTypeInferenceClause$slot;
			});
			this.$setOnce$returnTypeInferenceClause$ = (function (v) {
				this.$returnTypeInferenceClause$slot = v;
				return this;
			});
			this.$msgSelector = (function () {
				return this.$msgSelector$slot;
			});
			this.$setOnce$msgSelector$ = (function (v) {
				this.$msgSelector$slot = v;
				return this;
			});
			this.$typeArgInferenceClause = (function () {
				return this.$typeArgInferenceClause$slot;
			});
			this.$setOnce$typeArgInferenceClause$ = (function (v) {
				this.$typeArgInferenceClause$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakGrammar`TypedNS3Grammar";
					this._$superInit$NewspeakGrammar$TypedNS3Grammar = $.$superInit$NewspeakGrammar$TypedNS3Grammar;
					this.$superInit$NewspeakGrammar$TypedNS3Grammar = dnuCatcher("$superInit$NewspeakGrammar$TypedNS3Grammar");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$messagePattern = $.$messagePattern;
					this.$messagePattern = dnuCatcher("$messagePattern");
					this._$slotDecl = $.$slotDecl;
					this.$slotDecl = dnuCatcher("$slotDecl");
					this._$arg = $.$arg;
					this.$arg = dnuCatcher("$arg");
					this._$setOnce$arg$ = $.$setOnce$arg$;
					this.$setOnce$arg$ = dnuCatcher("$setOnce$arg$");
					this._$for = $.$for;
					this.$for = dnuCatcher("$for");
					this._$setOnce$for$ = $.$setOnce$for$;
					this.$setOnce$for$ = dnuCatcher("$setOnce$for$");
					this._$generic = $.$generic;
					this.$generic = dnuCatcher("$generic");
					this._$setOnce$generic$ = $.$setOnce$generic$;
					this.$setOnce$generic$ = dnuCatcher("$setOnce$generic$");
					this._$inheritedTypeOf = $.$inheritedTypeOf;
					this.$inheritedTypeOf = dnuCatcher("$inheritedTypeOf");
					this._$setOnce$inheritedTypeOf$ = $.$setOnce$inheritedTypeOf$;
					this.$setOnce$inheritedTypeOf$ = dnuCatcher("$setOnce$inheritedTypeOf$");
					this._$is = $.$is;
					this.$is = dnuCatcher("$is");
					this._$setOnce$is$ = $.$setOnce$is$;
					this.$setOnce$is$ = dnuCatcher("$setOnce$is$");
					this._$mssg = $.$mssg;
					this.$mssg = dnuCatcher("$mssg");
					this._$setOnce$mssg$ = $.$setOnce$mssg$;
					this.$setOnce$mssg$ = dnuCatcher("$setOnce$mssg$");
					this._$of = $.$of;
					this.$of = dnuCatcher("$of");
					this._$setOnce$of$ = $.$setOnce$of$;
					this.$setOnce$of$ = dnuCatcher("$setOnce$of$");
					this._$receiverType = $.$receiverType;
					this.$receiverType = dnuCatcher("$receiverType");
					this._$setOnce$receiverType$ = $.$setOnce$receiverType$;
					this.$setOnce$receiverType$ = dnuCatcher("$setOnce$receiverType$");
					this._$subtypeOf = $.$subtypeOf;
					this.$subtypeOf = dnuCatcher("$subtypeOf");
					this._$setOnce$subtypeOf$ = $.$setOnce$subtypeOf$;
					this.$setOnce$subtypeOf$ = dnuCatcher("$setOnce$subtypeOf$");
					this._$typeArg = $.$typeArg;
					this.$typeArg = dnuCatcher("$typeArg");
					this._$setOnce$typeArg$ = $.$setOnce$typeArg$;
					this.$setOnce$typeArg$ = dnuCatcher("$setOnce$typeArg$");
					this._$where = $.$where;
					this.$where = dnuCatcher("$where");
					this._$setOnce$where$ = $.$setOnce$where$;
					this.$setOnce$where$ = dnuCatcher("$setOnce$where$");
					this._$returnType = $.$returnType;
					this.$returnType = dnuCatcher("$returnType");
					this._$setOnce$returnType$ = $.$setOnce$returnType$;
					this.$setOnce$returnType$ = dnuCatcher("$setOnce$returnType$");
					this._$type = $.$type;
					this.$type = dnuCatcher("$type");
					this._$setOnce$type$ = $.$setOnce$type$;
					this.$setOnce$type$ = dnuCatcher("$setOnce$type$");
					this._$typePrimary = $.$typePrimary;
					this.$typePrimary = dnuCatcher("$typePrimary");
					this._$setOnce$typePrimary$ = $.$setOnce$typePrimary$;
					this.$setOnce$typePrimary$ = dnuCatcher("$setOnce$typePrimary$");
					this._$typeFactor = $.$typeFactor;
					this.$typeFactor = dnuCatcher("$typeFactor");
					this._$setOnce$typeFactor$ = $.$setOnce$typeFactor$;
					this.$setOnce$typeFactor$ = dnuCatcher("$setOnce$typeFactor$");
					this._$parenthesizedTypeExpression = $.$parenthesizedTypeExpression;
					this.$parenthesizedTypeExpression = dnuCatcher("$parenthesizedTypeExpression");
					this._$setOnce$parenthesizedTypeExpression$ = $.$setOnce$parenthesizedTypeExpression$;
					this.$setOnce$parenthesizedTypeExpression$ = dnuCatcher("$setOnce$parenthesizedTypeExpression$");
					this._$typeTerm = $.$typeTerm;
					this.$typeTerm = dnuCatcher("$typeTerm");
					this._$setOnce$typeTerm$ = $.$setOnce$typeTerm$;
					this.$setOnce$typeTerm$ = dnuCatcher("$setOnce$typeTerm$");
					this._$typeExpr = $.$typeExpr;
					this.$typeExpr = dnuCatcher("$typeExpr");
					this._$setOnce$typeExpr$ = $.$setOnce$typeExpr$;
					this.$setOnce$typeExpr$ = dnuCatcher("$setOnce$typeExpr$");
					this._$typeArguments = $.$typeArguments;
					this.$typeArguments = dnuCatcher("$typeArguments");
					this._$setOnce$typeArguments$ = $.$setOnce$typeArguments$;
					this.$setOnce$typeArguments$ = dnuCatcher("$setOnce$typeArguments$");
					this._$blockType = $.$blockType;
					this.$blockType = dnuCatcher("$blockType");
					this._$setOnce$blockType$ = $.$setOnce$blockType$;
					this.$setOnce$blockType$ = dnuCatcher("$setOnce$blockType$");
					this._$tupleType = $.$tupleType;
					this.$tupleType = dnuCatcher("$tupleType");
					this._$setOnce$tupleType$ = $.$setOnce$tupleType$;
					this.$setOnce$tupleType$ = dnuCatcher("$setOnce$tupleType$");
					this._$nonEmptyBlockTypeArgList = $.$nonEmptyBlockTypeArgList;
					this.$nonEmptyBlockTypeArgList = dnuCatcher("$nonEmptyBlockTypeArgList");
					this._$setOnce$nonEmptyBlockTypeArgList$ = $.$setOnce$nonEmptyBlockTypeArgList$;
					this.$setOnce$nonEmptyBlockTypeArgList$ = dnuCatcher("$setOnce$nonEmptyBlockTypeArgList$");
					this._$blockTypeArgList = $.$blockTypeArgList;
					this.$blockTypeArgList = dnuCatcher("$blockTypeArgList");
					this._$setOnce$blockTypeArgList$ = $.$setOnce$blockTypeArgList$;
					this.$setOnce$blockTypeArgList$ = dnuCatcher("$setOnce$blockTypeArgList$");
					this._$blockReturnType = $.$blockReturnType;
					this.$blockReturnType = dnuCatcher("$blockReturnType");
					this._$setOnce$blockReturnType$ = $.$setOnce$blockReturnType$;
					this.$setOnce$blockReturnType$ = dnuCatcher("$setOnce$blockReturnType$");
					this._$newBlockArgType = $.$newBlockArgType;
					this.$newBlockArgType = dnuCatcher("$newBlockArgType");
					this._$setOnce$newBlockArgType$ = $.$setOnce$newBlockArgType$;
					this.$setOnce$newBlockArgType$ = dnuCatcher("$setOnce$newBlockArgType$");
					this._$newBlockReturnType = $.$newBlockReturnType;
					this.$newBlockReturnType = dnuCatcher("$newBlockReturnType");
					this._$setOnce$newBlockReturnType$ = $.$setOnce$newBlockReturnType$;
					this.$setOnce$newBlockReturnType$ = dnuCatcher("$setOnce$newBlockReturnType$");
					this._$newNonEmptyBlockArgList = $.$newNonEmptyBlockArgList;
					this.$newNonEmptyBlockArgList = dnuCatcher("$newNonEmptyBlockArgList");
					this._$setOnce$newNonEmptyBlockArgList$ = $.$setOnce$newNonEmptyBlockArgList$;
					this.$setOnce$newNonEmptyBlockArgList$ = dnuCatcher("$setOnce$newNonEmptyBlockArgList$");
					this._$newBlockType = $.$newBlockType;
					this.$newBlockType = dnuCatcher("$newBlockType");
					this._$setOnce$newBlockType$ = $.$setOnce$newBlockType$;
					this.$setOnce$newBlockType$ = dnuCatcher("$setOnce$newBlockType$");
					this._$typePattern = $.$typePattern;
					this.$typePattern = dnuCatcher("$typePattern");
					this._$setOnce$typePattern$ = $.$setOnce$typePattern$;
					this.$setOnce$typePattern$ = dnuCatcher("$setOnce$typePattern$");
					this._$typeFormal = $.$typeFormal;
					this.$typeFormal = dnuCatcher("$typeFormal");
					this._$setOnce$typeFormal$ = $.$setOnce$typeFormal$;
					this.$setOnce$typeFormal$ = dnuCatcher("$setOnce$typeFormal$");
					this._$typeParamConstraint = $.$typeParamConstraint;
					this.$typeParamConstraint = dnuCatcher("$typeParamConstraint");
					this._$setOnce$typeParamConstraint$ = $.$setOnce$typeParamConstraint$;
					this.$setOnce$typeParamConstraint$ = dnuCatcher("$setOnce$typeParamConstraint$");
					this._$typeBoundQualifier = $.$typeBoundQualifier;
					this.$typeBoundQualifier = dnuCatcher("$typeBoundQualifier");
					this._$setOnce$typeBoundQualifier$ = $.$setOnce$typeBoundQualifier$;
					this.$setOnce$typeBoundQualifier$ = dnuCatcher("$setOnce$typeBoundQualifier$");
					this._$inferenceClause = $.$inferenceClause;
					this.$inferenceClause = dnuCatcher("$inferenceClause");
					this._$setOnce$inferenceClause$ = $.$setOnce$inferenceClause$;
					this.$setOnce$inferenceClause$ = dnuCatcher("$setOnce$inferenceClause$");
					this._$returnTypeInferenceClause = $.$returnTypeInferenceClause;
					this.$returnTypeInferenceClause = dnuCatcher("$returnTypeInferenceClause");
					this._$setOnce$returnTypeInferenceClause$ = $.$setOnce$returnTypeInferenceClause$;
					this.$setOnce$returnTypeInferenceClause$ = dnuCatcher("$setOnce$returnTypeInferenceClause$");
					this._$msgSelector = $.$msgSelector;
					this.$msgSelector = dnuCatcher("$msgSelector");
					this._$setOnce$msgSelector$ = $.$setOnce$msgSelector$;
					this.$setOnce$msgSelector$ = dnuCatcher("$setOnce$msgSelector$");
					this._$typeArgInferenceClause = $.$typeArgInferenceClause;
					this.$typeArgInferenceClause = dnuCatcher("$typeArgInferenceClause");
					this._$setOnce$typeArgInferenceClause$ = $.$setOnce$typeArgInferenceClause$;
					this.$setOnce$typeArgInferenceClause$ = dnuCatcher("$setOnce$typeArgInferenceClause$");
					this.$enclosingObjects$NewspeakGrammar$TypedNS3Grammar = enclosingObjects;
					this.$super$NewspeakGrammar$TypedNS3Grammar$slot = runtimeSuperclass;
					this["NewspeakGrammar`TypedNS3Grammar"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$arg$slot = nil;
						this.$for$slot = nil;
						this.$generic$slot = nil;
						this.$inheritedTypeOf$slot = nil;
						this.$is$slot = nil;
						this.$mssg$slot = nil;
						this.$of$slot = nil;
						this.$receiverType$slot = nil;
						this.$subtypeOf$slot = nil;
						this.$typeArg$slot = nil;
						this.$where$slot = nil;
						this.$returnType$slot = nil;
						this.$type$slot = nil;
						this.$typePrimary$slot = nil;
						this.$typeFactor$slot = nil;
						this.$parenthesizedTypeExpression$slot = nil;
						this.$typeTerm$slot = nil;
						this.$typeExpr$slot = nil;
						this.$typeArguments$slot = nil;
						this.$blockType$slot = nil;
						this.$tupleType$slot = nil;
						this.$nonEmptyBlockTypeArgList$slot = nil;
						this.$blockTypeArgList$slot = nil;
						this.$blockReturnType$slot = nil;
						this.$newBlockArgType$slot = nil;
						this.$newBlockReturnType$slot = nil;
						this.$newNonEmptyBlockArgList$slot = nil;
						this.$newBlockType$slot = nil;
						this.$typePattern$slot = nil;
						this.$typeFormal$slot = nil;
						this.$typeParamConstraint$slot = nil;
						this.$typeBoundQualifier$slot = nil;
						this.$inferenceClause$slot = nil;
						this.$returnTypeInferenceClause$slot = nil;
						this.$msgSelector$slot = nil;
						this.$typeArgInferenceClause$slot = nil;
					});
					this.basicNew = this["NewspeakGrammar`TypedNS3Grammar"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakGrammar`TypedNS3Grammar";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakGrammar`TypedNS3Grammar";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakGrammar$TypedNS3Grammar = enclosingObjects;
						this.$super$NewspeakGrammar$TypedNS3Grammar = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakGrammar$UnarySelectorParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakGrammar`UnarySelectorParser";
			this.name = "NewspeakGrammar`UnarySelectorParser";
			this.header = "UnarySelectorParser = CombinatorialParser ((* In the absence of a separate lexer, an ambiguity arises, which this parser deals with.\r The problem is that when parsing a unary expression that is an argument to a keyword\r message, one expects a unary selector, which is an identifer.  However, it may be that the next\r token is actually a keyword, part of the surrounding message. If we aren't actually tokenizing,\r the prefix of the keyword will be misinterpreted as an identifier and hence as another unary\r message being sent to the argument.\r \r Using a lexer solves this but introduces a subtlety around the assignment operator :=. In that case\r if there is no whitespace between a variable name and the assignment, the variable name will\r be tokenized as a keyword rather than as an identifier. The Strongtalk parser, DeltaParser, deals\r with this specially. In the longterm, that is probably the way to go. *)| p |)";
			this.slots = [new SM("p", true, false)];
			this.methods = [
				new MM("superInit`NewspeakGrammar`UnarySelectorParser", true, "CombinatorialParser"),
				new MM("instance`initializer", true, "CombinatorialParser"),
				new MM("on:", false, "public on: s = (\r	p: s.\r)"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context ifError: blk = (\r	| pos |\r	pos:: input position.\r	p keyword\r		parse: input inContext: context\r		ifError: [:msg :position | \r			input position: pos.\r			^p identifier parse: input inContext: context ifError: blk].\r	input position: pos.\r	blk value: 'should not print' value: pos\r)"),
				new MM("p", true, null),
				new MM("p:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakGrammar$UnarySelectorParser = (function () {
				var self = this;
				self.$super$NewspeakGrammar$UnarySelectorParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakGrammar$UnarySelectorParser();
				return self;
			});
			this.$on$ = (function ($s) {
				var self = this;
				self._$p$($s);
				return self;
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				var NLR = new Object();
				try {
					var $pos = nil;
					$pos = $input.$position();
					self._$p().$keyword().$parse$inContext$ifError$($input, $context, (function ($msg, $position) {
						$input.$position$($pos);
						{
							NLR.value = self._$p().$identifier().$parse$inContext$ifError$($input, $context, $blk);
							throw NLR;
						};
					}));
					$input.$position$($pos);
					$blk.$value$value$("should not print", $pos);
					return self;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$p = (function () {
				return this.$p$slot;
			});
			this.$p$ = (function (v) {
				this.$p$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakGrammar`UnarySelectorParser";
					this._$superInit$NewspeakGrammar$UnarySelectorParser = $.$superInit$NewspeakGrammar$UnarySelectorParser;
					this.$superInit$NewspeakGrammar$UnarySelectorParser = dnuCatcher("$superInit$NewspeakGrammar$UnarySelectorParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$on$ = this._$on$ = $.$on$;
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this._$p = $.$p;
					this.$p = dnuCatcher("$p");
					this._$p$ = $.$p$;
					this.$p$ = dnuCatcher("$p$");
					this.$enclosingObjects$NewspeakGrammar$UnarySelectorParser = enclosingObjects;
					this.$super$NewspeakGrammar$UnarySelectorParser$slot = runtimeSuperclass;
					this["NewspeakGrammar`UnarySelectorParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$p$slot = nil;
					});
					this.basicNew = this["NewspeakGrammar`UnarySelectorParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakGrammar`UnarySelectorParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakGrammar`UnarySelectorParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakGrammar$UnarySelectorParser = enclosingObjects;
						this.$super$NewspeakGrammar$UnarySelectorParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakGrammar$NS3Grammar.enclosingMixin = this;
		this.$NewspeakGrammar$NSCommentParser.enclosingMixin = this;
		this.$NewspeakGrammar$TypedNS3Grammar.enclosingMixin = this;
		this.$NewspeakGrammar$UnarySelectorParser.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for NewspeakGrammar";
				this._$superInit$NewspeakGrammar = $.$superInit$NewspeakGrammar;
				this.$superInit$NewspeakGrammar = dnuCatcher("$superInit$NewspeakGrammar");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this._$NS3Grammar = $.$NS3Grammar;
				this.$NS3Grammar = dnuCatcher("$NS3Grammar");
				this._$NSCommentParser = $.$NSCommentParser;
				this.$NSCommentParser = dnuCatcher("$NSCommentParser");
				this.$TypedNS3Grammar = this._$TypedNS3Grammar = $.$TypedNS3Grammar;
				this._$UnarySelectorParser = $.$UnarySelectorParser;
				this.$UnarySelectorParser = dnuCatcher("$UnarySelectorParser");
				this.$ParserError = this._$ParserError = $.$ParserError;
				this.$setOnce$ParserError$ = this._$setOnce$ParserError$ = $.$setOnce$ParserError$;
				this.$NewspeakGrammar$NS3Grammar = this._$NewspeakGrammar$NS3Grammar = $.$NewspeakGrammar$NS3Grammar;
				this.$NewspeakGrammar$NS3Grammar$ = this._$NewspeakGrammar$NS3Grammar$ = $.$NewspeakGrammar$NS3Grammar$;
				this.$NewspeakGrammar$NSCommentParser = this._$NewspeakGrammar$NSCommentParser = $.$NewspeakGrammar$NSCommentParser;
				this.$NewspeakGrammar$NSCommentParser$ = this._$NewspeakGrammar$NSCommentParser$ = $.$NewspeakGrammar$NSCommentParser$;
				this.$NewspeakGrammar$TypedNS3Grammar = this._$NewspeakGrammar$TypedNS3Grammar = $.$NewspeakGrammar$TypedNS3Grammar;
				this.$NewspeakGrammar$TypedNS3Grammar$ = this._$NewspeakGrammar$TypedNS3Grammar$ = $.$NewspeakGrammar$TypedNS3Grammar$;
				this.$NewspeakGrammar$UnarySelectorParser = this._$NewspeakGrammar$UnarySelectorParser = $.$NewspeakGrammar$UnarySelectorParser;
				this.$NewspeakGrammar$UnarySelectorParser$ = this._$NewspeakGrammar$UnarySelectorParser$ = $.$NewspeakGrammar$UnarySelectorParser$;
				this.$enclosingObjects$NewspeakGrammar = enclosingObjects;
				this.$super$NewspeakGrammar$slot = runtimeSuperclass;
				this.NewspeakGrammar = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$OrderedCollection$slot = nil;
					this.$ExecutableGrammar$slot = nil;
					this.$CollectingCommentParser$slot = nil;
					this.$CombinatorialParser$slot = nil;
					this.$PredicateTokenParser$slot = nil;
					this.$Token$slot = nil;
					this.$ParserError$slot = nil;
					this.$NewspeakGrammar$NS3Grammar$slot = nil;
					this.$NewspeakGrammar$NSCommentParser$slot = nil;
					this.$NewspeakGrammar$TypedNS3Grammar$slot = nil;
					this.$NewspeakGrammar$UnarySelectorParser$slot = nil;
				});
				this.basicNew = this.NewspeakGrammar;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for NewspeakGrammar";
			this.slots = [];
			this.methods = [new MM("usingPlatform:parsers:", true, null)];
			this.nestedClasses = [];
			this.$usingPlatform$parsers$ = (function ($p, $parsers) {
				return (new this.nonMeta.basicNew()).$instance$initializer($p, $parsers);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for NewspeakGrammar";
					this.$usingPlatform$parsers$ = this._$usingPlatform$parsers$ = $.$usingPlatform$parsers$;
					this.$enclosingObjects$NewspeakGrammar = enclosingObjects;
					this.$super$NewspeakGrammar = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$NewspeakASTs = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for NewspeakASTs";
		this.name = "NewspeakASTs";
		this.header = "NewspeakASTs usingLib: platform = ((* Abstract syntax tree node classes for Newspeak.\r\rIssues:\rThe abbreviations in class and slot names should be replaced with proper identifiers.\rPossibly ASTs for self/super/outer/implicitReceiver should be defined here.\rThe factory selector should be changed to #usingPlatform:.\r\rCopyright 2008 Cadence Design Systems, Inc.\rCopyright 2010 Felix Geller and Ryan Macnak\r   \rLicensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)| \r        private OrderedCollection = platform collections OrderedCollection. \r|)";
		this.slots = [
			new SM("OrderedCollection", false, false),
			new SM("NewspeakASTs`AST", true, true),
			new SM("NewspeakASTs`ASTCopier", true, true),
			new SM("NewspeakASTs`ASTTool", true, true),
			new SM("NewspeakASTs`ASTTraverser", true, true),
			new SM("NewspeakASTs`AssignmentAST", true, true),
			new SM("NewspeakASTs`BinaryTypeOpAST", true, true),
			new SM("NewspeakASTs`BlockAST", true, true),
			new SM("NewspeakASTs`BlockTypeAST", true, true),
			new SM("NewspeakASTs`CascadedSendAST", true, true),
			new SM("NewspeakASTs`CategoryAST", true, true),
			new SM("NewspeakASTs`CharAST", true, true),
			new SM("NewspeakASTs`ClassBodyAST", true, true),
			new SM("NewspeakASTs`ClassDeclarationAST", true, true),
			new SM("NewspeakASTs`ClassHeaderAST", true, true),
			new SM("NewspeakASTs`ClassPrefixAST", true, true),
			new SM("NewspeakASTs`CodeBodyAST", true, true),
			new SM("NewspeakASTs`ImmutableSlotDefAST", true, true),
			new SM("NewspeakASTs`InitializerAST", true, true),
			new SM("NewspeakASTs`KeywordPatternAST", true, true),
			new SM("NewspeakASTs`KeywordPatternPairAST", true, true),
			new SM("NewspeakASTs`LiteralAST", true, true),
			new SM("NewspeakASTs`LiteralPatternAST", true, true),
			new SM("NewspeakASTs`MessageAST", true, true),
			new SM("NewspeakASTs`MessagePatternAST", true, true),
			new SM("NewspeakASTs`MethodAST", true, true),
			new SM("NewspeakASTs`MixinApplicationAST", true, true),
			new SM("NewspeakASTs`MixinApplicationClassAST", true, true),
			new SM("NewspeakASTs`MutableSlotDefAST", true, true),
			new SM("NewspeakASTs`NSSideAST", true, true),
			new SM("NewspeakASTs`NormalSendAST", true, true),
			new SM("NewspeakASTs`NumberAST", true, true),
			new SM("NewspeakASTs`ParameterizedTypeAST", true, true),
			new SM("NewspeakASTs`PatternAST", true, true),
			new SM("NewspeakASTs`ReturnStatAST", true, true),
			new SM("NewspeakASTs`SendAST", true, true),
			new SM("NewspeakASTs`SetterSendAST", true, true),
			new SM("NewspeakASTs`SideAST", true, true),
			new SM("NewspeakASTs`SlotDefAST", true, true),
			new SM("NewspeakASTs`StringAST", true, true),
			new SM("NewspeakASTs`SymbolAST", true, true),
			new SM("NewspeakASTs`TupleAST", true, true),
			new SM("NewspeakASTs`TypeIdAST", true, true),
			new SM("NewspeakASTs`UnaryTypeOpAST", true, true),
			new SM("NewspeakASTs`VarDeclAST", true, true),
			new SM("NewspeakASTs`VariableAST", true, true),
			new SM("NewspeakASTs`VariablePatternAST", true, true),
			new SM("NewspeakASTs`WildcardPatternAST", true, true)
		];
		this.methods = [
			new MM("superInit`NewspeakASTs", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("AST", true, null),
			new MM("ASTCopier", true, null),
			new MM("ASTTool", true, null),
			new MM("ASTTraverser", true, null),
			new MM("AssignmentAST", true, null),
			new MM("BinaryTypeOpAST", true, null),
			new MM("BlockAST", true, null),
			new MM("BlockTypeAST", true, null),
			new MM("CascadedSendAST", true, null),
			new MM("CategoryAST", true, null),
			new MM("CharAST", true, null),
			new MM("ClassBodyAST", true, null),
			new MM("ClassDeclarationAST", true, null),
			new MM("ClassHeaderAST", true, null),
			new MM("ClassPrefixAST", true, null),
			new MM("CodeBodyAST", true, null),
			new MM("ImmutableSlotDefAST", true, null),
			new MM("InitializerAST", true, null),
			new MM("KeywordPatternAST", true, null),
			new MM("KeywordPatternPairAST", true, null),
			new MM("LiteralAST", true, null),
			new MM("LiteralPatternAST", true, null),
			new MM("MessageAST", true, null),
			new MM("MessagePatternAST", true, null),
			new MM("MethodAST", true, null),
			new MM("MixinApplicationAST", true, null),
			new MM("MixinApplicationClassAST", true, null),
			new MM("MutableSlotDefAST", true, null),
			new MM("NSSideAST", true, null),
			new MM("NormalSendAST", true, null),
			new MM("NumberAST", true, null),
			new MM("ParameterizedTypeAST", true, null),
			new MM("PatternAST", true, null),
			new MM("ReturnStatAST", true, null),
			new MM("SendAST", true, null),
			new MM("SetterSendAST", true, null),
			new MM("SideAST", true, null),
			new MM("SlotDefAST", true, null),
			new MM("StringAST", true, null),
			new MM("SymbolAST", true, null),
			new MM("TupleAST", true, null),
			new MM("TypeIdAST", true, null),
			new MM("UnaryTypeOpAST", true, null),
			new MM("VarDeclAST", true, null),
			new MM("VariableAST", true, null),
			new MM("VariablePatternAST", true, null),
			new MM("WildcardPatternAST", true, null),
			new MM("OrderedCollection", true, null),
			new MM("setOnce`OrderedCollection:", true, null),
			new MM("NewspeakASTs`AST", true, null),
			new MM("NewspeakASTs`AST:", true, null),
			new MM("NewspeakASTs`ASTCopier", true, null),
			new MM("NewspeakASTs`ASTCopier:", true, null),
			new MM("NewspeakASTs`ASTTool", true, null),
			new MM("NewspeakASTs`ASTTool:", true, null),
			new MM("NewspeakASTs`ASTTraverser", true, null),
			new MM("NewspeakASTs`ASTTraverser:", true, null),
			new MM("NewspeakASTs`AssignmentAST", true, null),
			new MM("NewspeakASTs`AssignmentAST:", true, null),
			new MM("NewspeakASTs`BinaryTypeOpAST", true, null),
			new MM("NewspeakASTs`BinaryTypeOpAST:", true, null),
			new MM("NewspeakASTs`BlockAST", true, null),
			new MM("NewspeakASTs`BlockAST:", true, null),
			new MM("NewspeakASTs`BlockTypeAST", true, null),
			new MM("NewspeakASTs`BlockTypeAST:", true, null),
			new MM("NewspeakASTs`CascadedSendAST", true, null),
			new MM("NewspeakASTs`CascadedSendAST:", true, null),
			new MM("NewspeakASTs`CategoryAST", true, null),
			new MM("NewspeakASTs`CategoryAST:", true, null),
			new MM("NewspeakASTs`CharAST", true, null),
			new MM("NewspeakASTs`CharAST:", true, null),
			new MM("NewspeakASTs`ClassBodyAST", true, null),
			new MM("NewspeakASTs`ClassBodyAST:", true, null),
			new MM("NewspeakASTs`ClassDeclarationAST", true, null),
			new MM("NewspeakASTs`ClassDeclarationAST:", true, null),
			new MM("NewspeakASTs`ClassHeaderAST", true, null),
			new MM("NewspeakASTs`ClassHeaderAST:", true, null),
			new MM("NewspeakASTs`ClassPrefixAST", true, null),
			new MM("NewspeakASTs`ClassPrefixAST:", true, null),
			new MM("NewspeakASTs`CodeBodyAST", true, null),
			new MM("NewspeakASTs`CodeBodyAST:", true, null),
			new MM("NewspeakASTs`ImmutableSlotDefAST", true, null),
			new MM("NewspeakASTs`ImmutableSlotDefAST:", true, null),
			new MM("NewspeakASTs`InitializerAST", true, null),
			new MM("NewspeakASTs`InitializerAST:", true, null),
			new MM("NewspeakASTs`KeywordPatternAST", true, null),
			new MM("NewspeakASTs`KeywordPatternAST:", true, null),
			new MM("NewspeakASTs`KeywordPatternPairAST", true, null),
			new MM("NewspeakASTs`KeywordPatternPairAST:", true, null),
			new MM("NewspeakASTs`LiteralAST", true, null),
			new MM("NewspeakASTs`LiteralAST:", true, null),
			new MM("NewspeakASTs`LiteralPatternAST", true, null),
			new MM("NewspeakASTs`LiteralPatternAST:", true, null),
			new MM("NewspeakASTs`MessageAST", true, null),
			new MM("NewspeakASTs`MessageAST:", true, null),
			new MM("NewspeakASTs`MessagePatternAST", true, null),
			new MM("NewspeakASTs`MessagePatternAST:", true, null),
			new MM("NewspeakASTs`MethodAST", true, null),
			new MM("NewspeakASTs`MethodAST:", true, null),
			new MM("NewspeakASTs`MixinApplicationAST", true, null),
			new MM("NewspeakASTs`MixinApplicationAST:", true, null),
			new MM("NewspeakASTs`MixinApplicationClassAST", true, null),
			new MM("NewspeakASTs`MixinApplicationClassAST:", true, null),
			new MM("NewspeakASTs`MutableSlotDefAST", true, null),
			new MM("NewspeakASTs`MutableSlotDefAST:", true, null),
			new MM("NewspeakASTs`NSSideAST", true, null),
			new MM("NewspeakASTs`NSSideAST:", true, null),
			new MM("NewspeakASTs`NormalSendAST", true, null),
			new MM("NewspeakASTs`NormalSendAST:", true, null),
			new MM("NewspeakASTs`NumberAST", true, null),
			new MM("NewspeakASTs`NumberAST:", true, null),
			new MM("NewspeakASTs`ParameterizedTypeAST", true, null),
			new MM("NewspeakASTs`ParameterizedTypeAST:", true, null),
			new MM("NewspeakASTs`PatternAST", true, null),
			new MM("NewspeakASTs`PatternAST:", true, null),
			new MM("NewspeakASTs`ReturnStatAST", true, null),
			new MM("NewspeakASTs`ReturnStatAST:", true, null),
			new MM("NewspeakASTs`SendAST", true, null),
			new MM("NewspeakASTs`SendAST:", true, null),
			new MM("NewspeakASTs`SetterSendAST", true, null),
			new MM("NewspeakASTs`SetterSendAST:", true, null),
			new MM("NewspeakASTs`SideAST", true, null),
			new MM("NewspeakASTs`SideAST:", true, null),
			new MM("NewspeakASTs`SlotDefAST", true, null),
			new MM("NewspeakASTs`SlotDefAST:", true, null),
			new MM("NewspeakASTs`StringAST", true, null),
			new MM("NewspeakASTs`StringAST:", true, null),
			new MM("NewspeakASTs`SymbolAST", true, null),
			new MM("NewspeakASTs`SymbolAST:", true, null),
			new MM("NewspeakASTs`TupleAST", true, null),
			new MM("NewspeakASTs`TupleAST:", true, null),
			new MM("NewspeakASTs`TypeIdAST", true, null),
			new MM("NewspeakASTs`TypeIdAST:", true, null),
			new MM("NewspeakASTs`UnaryTypeOpAST", true, null),
			new MM("NewspeakASTs`UnaryTypeOpAST:", true, null),
			new MM("NewspeakASTs`VarDeclAST", true, null),
			new MM("NewspeakASTs`VarDeclAST:", true, null),
			new MM("NewspeakASTs`VariableAST", true, null),
			new MM("NewspeakASTs`VariableAST:", true, null),
			new MM("NewspeakASTs`VariablePatternAST", true, null),
			new MM("NewspeakASTs`VariablePatternAST:", true, null),
			new MM("NewspeakASTs`WildcardPatternAST", true, null),
			new MM("NewspeakASTs`WildcardPatternAST:", true, null)
		];
		this.nestedClasses = [
			"NewspeakASTs`AST",
			"NewspeakASTs`ASTCopier",
			"NewspeakASTs`ASTTool",
			"NewspeakASTs`ASTTraverser",
			"NewspeakASTs`AssignmentAST",
			"NewspeakASTs`BinaryTypeOpAST",
			"NewspeakASTs`BlockAST",
			"NewspeakASTs`BlockTypeAST",
			"NewspeakASTs`CascadedSendAST",
			"NewspeakASTs`CategoryAST",
			"NewspeakASTs`CharAST",
			"NewspeakASTs`ClassBodyAST",
			"NewspeakASTs`ClassDeclarationAST",
			"NewspeakASTs`ClassHeaderAST",
			"NewspeakASTs`ClassPrefixAST",
			"NewspeakASTs`CodeBodyAST",
			"NewspeakASTs`ImmutableSlotDefAST",
			"NewspeakASTs`InitializerAST",
			"NewspeakASTs`KeywordPatternAST",
			"NewspeakASTs`KeywordPatternPairAST",
			"NewspeakASTs`LiteralAST",
			"NewspeakASTs`LiteralPatternAST",
			"NewspeakASTs`MessageAST",
			"NewspeakASTs`MessagePatternAST",
			"NewspeakASTs`MethodAST",
			"NewspeakASTs`MixinApplicationAST",
			"NewspeakASTs`MixinApplicationClassAST",
			"NewspeakASTs`MutableSlotDefAST",
			"NewspeakASTs`NSSideAST",
			"NewspeakASTs`NormalSendAST",
			"NewspeakASTs`NumberAST",
			"NewspeakASTs`ParameterizedTypeAST",
			"NewspeakASTs`PatternAST",
			"NewspeakASTs`ReturnStatAST",
			"NewspeakASTs`SendAST",
			"NewspeakASTs`SetterSendAST",
			"NewspeakASTs`SideAST",
			"NewspeakASTs`SlotDefAST",
			"NewspeakASTs`StringAST",
			"NewspeakASTs`SymbolAST",
			"NewspeakASTs`TupleAST",
			"NewspeakASTs`TypeIdAST",
			"NewspeakASTs`UnaryTypeOpAST",
			"NewspeakASTs`VarDeclAST",
			"NewspeakASTs`VariableAST",
			"NewspeakASTs`VariablePatternAST",
			"NewspeakASTs`WildcardPatternAST"
		];
		this.applications = [];
		this.$superInit$NewspeakASTs = (function ($platform) {
			var self = this;
			self.$super$NewspeakASTs$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($platform) {
			var self = this;
			self._$superInit$NewspeakASTs($platform);
			$0.$setOnce$OrderedCollection$.call(self, $platform.$collections().$OrderedCollection());
			return self;
		});
		this.$AST = (function () {
			if (nil === this.$NewspeakASTs$AST$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$AST;
				this.$NewspeakASTs$AST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$AST$slot;
		});
		this.$ASTCopier = (function () {
			if (nil === this.$NewspeakASTs$ASTCopier$slot) {
				var self = this;
				var superclass = self._$ASTTool();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$ASTCopier;
				this.$NewspeakASTs$ASTCopier$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$ASTCopier$slot;
		});
		this.$ASTTool = (function () {
			if (nil === this.$NewspeakASTs$ASTTool$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$ASTTool;
				this.$NewspeakASTs$ASTTool$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$ASTTool$slot;
		});
		this.$ASTTraverser = (function () {
			if (nil === this.$NewspeakASTs$ASTTraverser$slot) {
				var self = this;
				var superclass = self._$ASTTool();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$ASTTraverser;
				this.$NewspeakASTs$ASTTraverser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$ASTTraverser$slot;
		});
		this.$AssignmentAST = (function () {
			if (nil === this.$NewspeakASTs$AssignmentAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$AssignmentAST;
				this.$NewspeakASTs$AssignmentAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$AssignmentAST$slot;
		});
		this.$BinaryTypeOpAST = (function () {
			if (nil === this.$NewspeakASTs$BinaryTypeOpAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$BinaryTypeOpAST;
				this.$NewspeakASTs$BinaryTypeOpAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$BinaryTypeOpAST$slot;
		});
		this.$BlockAST = (function () {
			if (nil === this.$NewspeakASTs$BlockAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$BlockAST;
				this.$NewspeakASTs$BlockAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$BlockAST$slot;
		});
		this.$BlockTypeAST = (function () {
			if (nil === this.$NewspeakASTs$BlockTypeAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$BlockTypeAST;
				this.$NewspeakASTs$BlockTypeAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$BlockTypeAST$slot;
		});
		this.$CascadedSendAST = (function () {
			if (nil === this.$NewspeakASTs$CascadedSendAST$slot) {
				var self = this;
				var superclass = self._$SendAST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$CascadedSendAST;
				this.$NewspeakASTs$CascadedSendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$CascadedSendAST$slot;
		});
		this.$CategoryAST = (function () {
			if (nil === this.$NewspeakASTs$CategoryAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$CategoryAST;
				this.$NewspeakASTs$CategoryAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$CategoryAST$slot;
		});
		this.$CharAST = (function () {
			if (nil === this.$NewspeakASTs$CharAST$slot) {
				var self = this;
				var superclass = self._$LiteralAST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$CharAST;
				this.$NewspeakASTs$CharAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$CharAST$slot;
		});
		this.$ClassBodyAST = (function () {
			if (nil === this.$NewspeakASTs$ClassBodyAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$ClassBodyAST;
				this.$NewspeakASTs$ClassBodyAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$ClassBodyAST$slot;
		});
		this.$ClassDeclarationAST = (function () {
			if (nil === this.$NewspeakASTs$ClassDeclarationAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$ClassDeclarationAST;
				this.$NewspeakASTs$ClassDeclarationAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$ClassDeclarationAST$slot;
		});
		this.$ClassHeaderAST = (function () {
			if (nil === this.$NewspeakASTs$ClassHeaderAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$ClassHeaderAST;
				this.$NewspeakASTs$ClassHeaderAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$ClassHeaderAST$slot;
		});
		this.$ClassPrefixAST = (function () {
			if (nil === this.$NewspeakASTs$ClassPrefixAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$ClassPrefixAST;
				this.$NewspeakASTs$ClassPrefixAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$ClassPrefixAST$slot;
		});
		this.$CodeBodyAST = (function () {
			if (nil === this.$NewspeakASTs$CodeBodyAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$CodeBodyAST;
				this.$NewspeakASTs$CodeBodyAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$CodeBodyAST$slot;
		});
		this.$ImmutableSlotDefAST = (function () {
			if (nil === this.$NewspeakASTs$ImmutableSlotDefAST$slot) {
				var self = this;
				var superclass = self._$SlotDefAST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$ImmutableSlotDefAST;
				this.$NewspeakASTs$ImmutableSlotDefAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$ImmutableSlotDefAST$slot;
		});
		this.$InitializerAST = (function () {
			if (nil === this.$NewspeakASTs$InitializerAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$InitializerAST;
				this.$NewspeakASTs$InitializerAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$InitializerAST$slot;
		});
		this.$KeywordPatternAST = (function () {
			if (nil === this.$NewspeakASTs$KeywordPatternAST$slot) {
				var self = this;
				var superclass = self._$PatternAST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$KeywordPatternAST;
				this.$NewspeakASTs$KeywordPatternAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$KeywordPatternAST$slot;
		});
		this.$KeywordPatternPairAST = (function () {
			if (nil === this.$NewspeakASTs$KeywordPatternPairAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$KeywordPatternPairAST;
				this.$NewspeakASTs$KeywordPatternPairAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$KeywordPatternPairAST$slot;
		});
		this.$LiteralAST = (function () {
			if (nil === this.$NewspeakASTs$LiteralAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$LiteralAST;
				this.$NewspeakASTs$LiteralAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$LiteralAST$slot;
		});
		this.$LiteralPatternAST = (function () {
			if (nil === this.$NewspeakASTs$LiteralPatternAST$slot) {
				var self = this;
				var superclass = self._$PatternAST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$LiteralPatternAST;
				this.$NewspeakASTs$LiteralPatternAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$LiteralPatternAST$slot;
		});
		this.$MessageAST = (function () {
			if (nil === this.$NewspeakASTs$MessageAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$MessageAST;
				this.$NewspeakASTs$MessageAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$MessageAST$slot;
		});
		this.$MessagePatternAST = (function () {
			if (nil === this.$NewspeakASTs$MessagePatternAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$MessagePatternAST;
				this.$NewspeakASTs$MessagePatternAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$MessagePatternAST$slot;
		});
		this.$MethodAST = (function () {
			if (nil === this.$NewspeakASTs$MethodAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$MethodAST;
				this.$NewspeakASTs$MethodAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$MethodAST$slot;
		});
		this.$MixinApplicationAST = (function () {
			if (nil === this.$NewspeakASTs$MixinApplicationAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$MixinApplicationAST;
				this.$NewspeakASTs$MixinApplicationAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$MixinApplicationAST$slot;
		});
		this.$MixinApplicationClassAST = (function () {
			if (nil === this.$NewspeakASTs$MixinApplicationClassAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$MixinApplicationClassAST;
				this.$NewspeakASTs$MixinApplicationClassAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$MixinApplicationClassAST$slot;
		});
		this.$MutableSlotDefAST = (function () {
			if (nil === this.$NewspeakASTs$MutableSlotDefAST$slot) {
				var self = this;
				var superclass = self._$SlotDefAST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$MutableSlotDefAST;
				this.$NewspeakASTs$MutableSlotDefAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$MutableSlotDefAST$slot;
		});
		this.$NSSideAST = (function () {
			if (nil === this.$NewspeakASTs$NSSideAST$slot) {
				var self = this;
				var superclass = self._$SideAST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$NSSideAST;
				this.$NewspeakASTs$NSSideAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$NSSideAST$slot;
		});
		this.$NormalSendAST = (function () {
			if (nil === this.$NewspeakASTs$NormalSendAST$slot) {
				var self = this;
				var superclass = self._$SendAST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$NormalSendAST;
				this.$NewspeakASTs$NormalSendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$NormalSendAST$slot;
		});
		this.$NumberAST = (function () {
			if (nil === this.$NewspeakASTs$NumberAST$slot) {
				var self = this;
				var superclass = self._$LiteralAST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$NumberAST;
				this.$NewspeakASTs$NumberAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$NumberAST$slot;
		});
		this.$ParameterizedTypeAST = (function () {
			if (nil === this.$NewspeakASTs$ParameterizedTypeAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$ParameterizedTypeAST;
				this.$NewspeakASTs$ParameterizedTypeAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$ParameterizedTypeAST$slot;
		});
		this.$PatternAST = (function () {
			if (nil === this.$NewspeakASTs$PatternAST$slot) {
				var self = this;
				var superclass = self._$LiteralAST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$PatternAST;
				this.$NewspeakASTs$PatternAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$PatternAST$slot;
		});
		this.$ReturnStatAST = (function () {
			if (nil === this.$NewspeakASTs$ReturnStatAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$ReturnStatAST;
				this.$NewspeakASTs$ReturnStatAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$ReturnStatAST$slot;
		});
		this.$SendAST = (function () {
			if (nil === this.$NewspeakASTs$SendAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$SendAST;
				this.$NewspeakASTs$SendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$SendAST$slot;
		});
		this.$SetterSendAST = (function () {
			if (nil === this.$NewspeakASTs$SetterSendAST$slot) {
				var self = this;
				var superclass = self._$SendAST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$SetterSendAST;
				this.$NewspeakASTs$SetterSendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$SetterSendAST$slot;
		});
		this.$SideAST = (function () {
			if (nil === this.$NewspeakASTs$SideAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$SideAST;
				this.$NewspeakASTs$SideAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$SideAST$slot;
		});
		this.$SlotDefAST = (function () {
			if (nil === this.$NewspeakASTs$SlotDefAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$SlotDefAST;
				this.$NewspeakASTs$SlotDefAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$SlotDefAST$slot;
		});
		this.$StringAST = (function () {
			if (nil === this.$NewspeakASTs$StringAST$slot) {
				var self = this;
				var superclass = self._$LiteralAST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$StringAST;
				this.$NewspeakASTs$StringAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$StringAST$slot;
		});
		this.$SymbolAST = (function () {
			if (nil === this.$NewspeakASTs$SymbolAST$slot) {
				var self = this;
				var superclass = self._$LiteralAST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$SymbolAST;
				this.$NewspeakASTs$SymbolAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$SymbolAST$slot;
		});
		this.$TupleAST = (function () {
			if (nil === this.$NewspeakASTs$TupleAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$TupleAST;
				this.$NewspeakASTs$TupleAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$TupleAST$slot;
		});
		this.$TypeIdAST = (function () {
			if (nil === this.$NewspeakASTs$TypeIdAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$TypeIdAST;
				this.$NewspeakASTs$TypeIdAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$TypeIdAST$slot;
		});
		this.$UnaryTypeOpAST = (function () {
			if (nil === this.$NewspeakASTs$UnaryTypeOpAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$UnaryTypeOpAST;
				this.$NewspeakASTs$UnaryTypeOpAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$UnaryTypeOpAST$slot;
		});
		this.$VarDeclAST = (function () {
			if (nil === this.$NewspeakASTs$VarDeclAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$VarDeclAST;
				this.$NewspeakASTs$VarDeclAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$VarDeclAST$slot;
		});
		this.$VariableAST = (function () {
			if (nil === this.$NewspeakASTs$VariableAST$slot) {
				var self = this;
				var superclass = self._$AST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$VariableAST;
				this.$NewspeakASTs$VariableAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$VariableAST$slot;
		});
		this.$VariablePatternAST = (function () {
			if (nil === this.$NewspeakASTs$VariablePatternAST$slot) {
				var self = this;
				var superclass = self._$PatternAST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$VariablePatternAST;
				this.$NewspeakASTs$VariablePatternAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$VariablePatternAST$slot;
		});
		this.$WildcardPatternAST = (function () {
			if (nil === this.$NewspeakASTs$WildcardPatternAST$slot) {
				var self = this;
				var superclass = self._$PatternAST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakASTs);
				var mixin = $.$NewspeakASTs$WildcardPatternAST;
				this.$NewspeakASTs$WildcardPatternAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakASTs$WildcardPatternAST$slot;
		});
		this.$OrderedCollection = (function () {
			return this.$OrderedCollection$slot;
		});
		this.$setOnce$OrderedCollection$ = (function (v) {
			this.$OrderedCollection$slot = v;
			return this;
		});
		this.$NewspeakASTs$AST = (function () {
			return this.$NewspeakASTs$AST$slot;
		});
		this.$NewspeakASTs$AST$ = (function (v) {
			this.$NewspeakASTs$AST$slot = v;
			return this;
		});
		this.$NewspeakASTs$ASTCopier = (function () {
			return this.$NewspeakASTs$ASTCopier$slot;
		});
		this.$NewspeakASTs$ASTCopier$ = (function (v) {
			this.$NewspeakASTs$ASTCopier$slot = v;
			return this;
		});
		this.$NewspeakASTs$ASTTool = (function () {
			return this.$NewspeakASTs$ASTTool$slot;
		});
		this.$NewspeakASTs$ASTTool$ = (function (v) {
			this.$NewspeakASTs$ASTTool$slot = v;
			return this;
		});
		this.$NewspeakASTs$ASTTraverser = (function () {
			return this.$NewspeakASTs$ASTTraverser$slot;
		});
		this.$NewspeakASTs$ASTTraverser$ = (function (v) {
			this.$NewspeakASTs$ASTTraverser$slot = v;
			return this;
		});
		this.$NewspeakASTs$AssignmentAST = (function () {
			return this.$NewspeakASTs$AssignmentAST$slot;
		});
		this.$NewspeakASTs$AssignmentAST$ = (function (v) {
			this.$NewspeakASTs$AssignmentAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$BinaryTypeOpAST = (function () {
			return this.$NewspeakASTs$BinaryTypeOpAST$slot;
		});
		this.$NewspeakASTs$BinaryTypeOpAST$ = (function (v) {
			this.$NewspeakASTs$BinaryTypeOpAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$BlockAST = (function () {
			return this.$NewspeakASTs$BlockAST$slot;
		});
		this.$NewspeakASTs$BlockAST$ = (function (v) {
			this.$NewspeakASTs$BlockAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$BlockTypeAST = (function () {
			return this.$NewspeakASTs$BlockTypeAST$slot;
		});
		this.$NewspeakASTs$BlockTypeAST$ = (function (v) {
			this.$NewspeakASTs$BlockTypeAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$CascadedSendAST = (function () {
			return this.$NewspeakASTs$CascadedSendAST$slot;
		});
		this.$NewspeakASTs$CascadedSendAST$ = (function (v) {
			this.$NewspeakASTs$CascadedSendAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$CategoryAST = (function () {
			return this.$NewspeakASTs$CategoryAST$slot;
		});
		this.$NewspeakASTs$CategoryAST$ = (function (v) {
			this.$NewspeakASTs$CategoryAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$CharAST = (function () {
			return this.$NewspeakASTs$CharAST$slot;
		});
		this.$NewspeakASTs$CharAST$ = (function (v) {
			this.$NewspeakASTs$CharAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$ClassBodyAST = (function () {
			return this.$NewspeakASTs$ClassBodyAST$slot;
		});
		this.$NewspeakASTs$ClassBodyAST$ = (function (v) {
			this.$NewspeakASTs$ClassBodyAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$ClassDeclarationAST = (function () {
			return this.$NewspeakASTs$ClassDeclarationAST$slot;
		});
		this.$NewspeakASTs$ClassDeclarationAST$ = (function (v) {
			this.$NewspeakASTs$ClassDeclarationAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$ClassHeaderAST = (function () {
			return this.$NewspeakASTs$ClassHeaderAST$slot;
		});
		this.$NewspeakASTs$ClassHeaderAST$ = (function (v) {
			this.$NewspeakASTs$ClassHeaderAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$ClassPrefixAST = (function () {
			return this.$NewspeakASTs$ClassPrefixAST$slot;
		});
		this.$NewspeakASTs$ClassPrefixAST$ = (function (v) {
			this.$NewspeakASTs$ClassPrefixAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$CodeBodyAST = (function () {
			return this.$NewspeakASTs$CodeBodyAST$slot;
		});
		this.$NewspeakASTs$CodeBodyAST$ = (function (v) {
			this.$NewspeakASTs$CodeBodyAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$ImmutableSlotDefAST = (function () {
			return this.$NewspeakASTs$ImmutableSlotDefAST$slot;
		});
		this.$NewspeakASTs$ImmutableSlotDefAST$ = (function (v) {
			this.$NewspeakASTs$ImmutableSlotDefAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$InitializerAST = (function () {
			return this.$NewspeakASTs$InitializerAST$slot;
		});
		this.$NewspeakASTs$InitializerAST$ = (function (v) {
			this.$NewspeakASTs$InitializerAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$KeywordPatternAST = (function () {
			return this.$NewspeakASTs$KeywordPatternAST$slot;
		});
		this.$NewspeakASTs$KeywordPatternAST$ = (function (v) {
			this.$NewspeakASTs$KeywordPatternAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$KeywordPatternPairAST = (function () {
			return this.$NewspeakASTs$KeywordPatternPairAST$slot;
		});
		this.$NewspeakASTs$KeywordPatternPairAST$ = (function (v) {
			this.$NewspeakASTs$KeywordPatternPairAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$LiteralAST = (function () {
			return this.$NewspeakASTs$LiteralAST$slot;
		});
		this.$NewspeakASTs$LiteralAST$ = (function (v) {
			this.$NewspeakASTs$LiteralAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$LiteralPatternAST = (function () {
			return this.$NewspeakASTs$LiteralPatternAST$slot;
		});
		this.$NewspeakASTs$LiteralPatternAST$ = (function (v) {
			this.$NewspeakASTs$LiteralPatternAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$MessageAST = (function () {
			return this.$NewspeakASTs$MessageAST$slot;
		});
		this.$NewspeakASTs$MessageAST$ = (function (v) {
			this.$NewspeakASTs$MessageAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$MessagePatternAST = (function () {
			return this.$NewspeakASTs$MessagePatternAST$slot;
		});
		this.$NewspeakASTs$MessagePatternAST$ = (function (v) {
			this.$NewspeakASTs$MessagePatternAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$MethodAST = (function () {
			return this.$NewspeakASTs$MethodAST$slot;
		});
		this.$NewspeakASTs$MethodAST$ = (function (v) {
			this.$NewspeakASTs$MethodAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$MixinApplicationAST = (function () {
			return this.$NewspeakASTs$MixinApplicationAST$slot;
		});
		this.$NewspeakASTs$MixinApplicationAST$ = (function (v) {
			this.$NewspeakASTs$MixinApplicationAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$MixinApplicationClassAST = (function () {
			return this.$NewspeakASTs$MixinApplicationClassAST$slot;
		});
		this.$NewspeakASTs$MixinApplicationClassAST$ = (function (v) {
			this.$NewspeakASTs$MixinApplicationClassAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$MutableSlotDefAST = (function () {
			return this.$NewspeakASTs$MutableSlotDefAST$slot;
		});
		this.$NewspeakASTs$MutableSlotDefAST$ = (function (v) {
			this.$NewspeakASTs$MutableSlotDefAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$NSSideAST = (function () {
			return this.$NewspeakASTs$NSSideAST$slot;
		});
		this.$NewspeakASTs$NSSideAST$ = (function (v) {
			this.$NewspeakASTs$NSSideAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$NormalSendAST = (function () {
			return this.$NewspeakASTs$NormalSendAST$slot;
		});
		this.$NewspeakASTs$NormalSendAST$ = (function (v) {
			this.$NewspeakASTs$NormalSendAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$NumberAST = (function () {
			return this.$NewspeakASTs$NumberAST$slot;
		});
		this.$NewspeakASTs$NumberAST$ = (function (v) {
			this.$NewspeakASTs$NumberAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$ParameterizedTypeAST = (function () {
			return this.$NewspeakASTs$ParameterizedTypeAST$slot;
		});
		this.$NewspeakASTs$ParameterizedTypeAST$ = (function (v) {
			this.$NewspeakASTs$ParameterizedTypeAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$PatternAST = (function () {
			return this.$NewspeakASTs$PatternAST$slot;
		});
		this.$NewspeakASTs$PatternAST$ = (function (v) {
			this.$NewspeakASTs$PatternAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$ReturnStatAST = (function () {
			return this.$NewspeakASTs$ReturnStatAST$slot;
		});
		this.$NewspeakASTs$ReturnStatAST$ = (function (v) {
			this.$NewspeakASTs$ReturnStatAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$SendAST = (function () {
			return this.$NewspeakASTs$SendAST$slot;
		});
		this.$NewspeakASTs$SendAST$ = (function (v) {
			this.$NewspeakASTs$SendAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$SetterSendAST = (function () {
			return this.$NewspeakASTs$SetterSendAST$slot;
		});
		this.$NewspeakASTs$SetterSendAST$ = (function (v) {
			this.$NewspeakASTs$SetterSendAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$SideAST = (function () {
			return this.$NewspeakASTs$SideAST$slot;
		});
		this.$NewspeakASTs$SideAST$ = (function (v) {
			this.$NewspeakASTs$SideAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$SlotDefAST = (function () {
			return this.$NewspeakASTs$SlotDefAST$slot;
		});
		this.$NewspeakASTs$SlotDefAST$ = (function (v) {
			this.$NewspeakASTs$SlotDefAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$StringAST = (function () {
			return this.$NewspeakASTs$StringAST$slot;
		});
		this.$NewspeakASTs$StringAST$ = (function (v) {
			this.$NewspeakASTs$StringAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$SymbolAST = (function () {
			return this.$NewspeakASTs$SymbolAST$slot;
		});
		this.$NewspeakASTs$SymbolAST$ = (function (v) {
			this.$NewspeakASTs$SymbolAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$TupleAST = (function () {
			return this.$NewspeakASTs$TupleAST$slot;
		});
		this.$NewspeakASTs$TupleAST$ = (function (v) {
			this.$NewspeakASTs$TupleAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$TypeIdAST = (function () {
			return this.$NewspeakASTs$TypeIdAST$slot;
		});
		this.$NewspeakASTs$TypeIdAST$ = (function (v) {
			this.$NewspeakASTs$TypeIdAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$UnaryTypeOpAST = (function () {
			return this.$NewspeakASTs$UnaryTypeOpAST$slot;
		});
		this.$NewspeakASTs$UnaryTypeOpAST$ = (function (v) {
			this.$NewspeakASTs$UnaryTypeOpAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$VarDeclAST = (function () {
			return this.$NewspeakASTs$VarDeclAST$slot;
		});
		this.$NewspeakASTs$VarDeclAST$ = (function (v) {
			this.$NewspeakASTs$VarDeclAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$VariableAST = (function () {
			return this.$NewspeakASTs$VariableAST$slot;
		});
		this.$NewspeakASTs$VariableAST$ = (function (v) {
			this.$NewspeakASTs$VariableAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$VariablePatternAST = (function () {
			return this.$NewspeakASTs$VariablePatternAST$slot;
		});
		this.$NewspeakASTs$VariablePatternAST$ = (function (v) {
			this.$NewspeakASTs$VariablePatternAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$WildcardPatternAST = (function () {
			return this.$NewspeakASTs$WildcardPatternAST$slot;
		});
		this.$NewspeakASTs$WildcardPatternAST$ = (function (v) {
			this.$NewspeakASTs$WildcardPatternAST$slot = v;
			return this;
		});
		this.$NewspeakASTs$AST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`AST";
			this.name = "NewspeakASTs`AST";
			this.header = "AST = ((* An abstract syntax tree. An AST knows where in the source code the corresponding construct is. The slots start and end are indices into the source code marking that position.\r\rIn some cases, the corresponding construct may be associated with tokens that are not strictly part of the abstract syntax. For example, in\r\r(foo)\r\rthe parentheses are not part of the abstract syntax but foo is. Nonetheless, it may be useful to know where the parens are, since they are strongly associated with the AST. We use the slots concStart and concEnd for that purpose. *)|\rpublic start <Integer> ::= 0. (* Note that 0 is out-of-bounds in a Newspeak stream/string. *)\rpublic end <Integer> ::= 0.\rprotected _concreteStart <Integer>\rprotected _concreteEnd <Integer>\r|)";
			this.slots = [
				new SM("start", true, false),
				new SM("end", true, false),
				new SM("_concreteStart", true, false),
				new SM("_concreteEnd", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`AST", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("assert:", false, "assert: block = (\r	self assert: block message: 'Assert failed'\r)"),
				new MM("copyPositionFrom:", false, "public copyPositionFrom: other <AST> = (\r	self start: other start.\r	self end: other end.\r)"),
				new MM("concreteEnd", false, "public concreteEnd ^<Integer> = (\r	(* To be used by leaf nodes; they will typically only have a stored concrete end if it was set by the parser (usually due to surrounding parens), though the AST copier might set it regardless *)\r	^self _concreteEnd isNil ifTrue: [self end] ifFalse: [self _concreteEnd]\r )"),
				new MM("concreteEnd:", false, "public concreteEnd: position <Integer> = (\r	self _concreteEnd: position\r)"),
				new MM("concreteStart", false, "public concreteStart ^<Integer> = (\r(* To be used by leaf nodes; they will typically only have a stored concrete start if it was set by the parser (usually due to surrounding parens), though the AST copier might set it regardless *)\r	^self _concreteStart isNil ifTrue: [self start] ifFalse: [self _concreteStart]\r)"),
				new MM("concreteStart:", false, "public concreteStart: position <Integer> = (\r	self _concreteStart: position\r)"),
				new MM("left:", false, "public left: leftmostSubtree <AST>  = (\r(*\rFor any non-leaf AST, its concrete start is either the stored concrete\rstart value (if there is one, that is, it isn't nil) or else the concrete start of its leftmost subtree.\r\rThe start of an AST is  the concrete start of its leftmost subtree\runless it has no subtrees; then it is the stored value. \r \rOnly the parser knows which subtree is  the leftmost, as this depends on the concrete syntax. The parser may this routine, which sets the indices in the tree.\r*)\r	self _concreteStart isNil ifTrue: [_concreteStart: leftmostSubtree concreteStart].\r	self start = 0 ifTrue: [self start: _concreteStart].\r)"),
				new MM("right:", false, "public right: rightmostSubtree <AST> = (\r(*\rFor any non-leaf AST, its concrete end is either the stored concrete\rend value (if there is one, that is, it isn't nil) or else the concrete end of its rightmost subtree.\r \rThe end of an AST is the concrete end of its rightmost subtree,\runless it has no subtrees; then it is the stored value. \r\rOnly the parser knows which subtree is the rightmost, as this depends on the concrete syntax. The parser calls this routine, which sets the indices in the tree.\r*)\r	self _concreteEnd isNil ifTrue: [_concreteEnd: rightmostSubtree concreteEnd].\r	self end = 0 ifTrue: [self end: _concreteEnd].\r)"),
				new MM("isAST", false, "public isAST ^<Boolean> = (\r	^true\r)"),
				new MM("apply:", false, "public apply: visitor <ASTVisitor> = (\r	^self subclassResponsibility\r)"),
				new MM("start", true, null),
				new MM("start:", true, null),
				new MM("end", true, null),
				new MM("end:", true, null),
				new MM("_concreteStart", true, null),
				new MM("_concreteStart:", true, null),
				new MM("_concreteEnd", true, null),
				new MM("_concreteEnd:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$AST = (function () {
				var self = this;
				self.$super$NewspeakASTs$AST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$AST();
				self._$start$(0);
				self._$end$(0);
				return self;
			});
			this.$assert$ = (function ($block) {
				var self = this;
				self._$assert$message$($block, "Assert failed");
				return self;
			});
			this.$copyPositionFrom$ = (function ($other) {
				var self = this;
				self._$start$($other.$start());
				self._$end$($other.$end());
				return self;
			});
			this.$concreteEnd = (function () {
				var self = this;
				return self._$_concreteEnd().$isNil().$ifTrue$ifFalse$((function () {
					return self._$end();
				}), (function () {
					return self._$_concreteEnd();
				}));
			});
			this.$concreteEnd$ = (function ($position) {
				var self = this;
				self._$_concreteEnd$($position);
				return self;
			});
			this.$concreteStart = (function () {
				var self = this;
				return self._$_concreteStart().$isNil().$ifTrue$ifFalse$((function () {
					return self._$start();
				}), (function () {
					return self._$_concreteStart();
				}));
			});
			this.$concreteStart$ = (function ($position) {
				var self = this;
				self._$_concreteStart$($position);
				return self;
			});
			this.$left$ = (function ($leftmostSubtree) {
				var self = this;
				if (self._$_concreteStart().$isNil()) {
					self._$_concreteStart$($leftmostSubtree.$concreteStart());
				} else {
					nil;
				};
				if (self._$start().$$equal(0)) {
					self._$start$(self._$_concreteStart());
				} else {
					nil;
				};
				return self;
			});
			this.$right$ = (function ($rightmostSubtree) {
				var self = this;
				if (self._$_concreteEnd().$isNil()) {
					self._$_concreteEnd$($rightmostSubtree.$concreteEnd());
				} else {
					nil;
				};
				if (self._$end().$$equal(0)) {
					self._$end$(self._$_concreteEnd());
				} else {
					nil;
				};
				return self;
			});
			this.$isAST = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($visitor) {
				var self = this;
				return self._$subclassResponsibility();
			});
			this.$start = (function () {
				return this.$start$slot;
			});
			this.$start$ = (function (v) {
				this.$start$slot = v;
				return this;
			});
			this.$end = (function () {
				return this.$end$slot;
			});
			this.$end$ = (function (v) {
				this.$end$slot = v;
				return this;
			});
			this.$_concreteStart = (function () {
				return this.$_concreteStart$slot;
			});
			this.$_concreteStart$ = (function (v) {
				this.$_concreteStart$slot = v;
				return this;
			});
			this.$_concreteEnd = (function () {
				return this.$_concreteEnd$slot;
			});
			this.$_concreteEnd$ = (function (v) {
				this.$_concreteEnd$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`AST";
					this._$superInit$NewspeakASTs$AST = $.$superInit$NewspeakASTs$AST;
					this.$superInit$NewspeakASTs$AST = dnuCatcher("$superInit$NewspeakASTs$AST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$assert$ = $.$assert$;
					this.$assert$ = dnuCatcher("$assert$");
					this.$copyPositionFrom$ = this._$copyPositionFrom$ = $.$copyPositionFrom$;
					this.$concreteEnd = this._$concreteEnd = $.$concreteEnd;
					this.$concreteEnd$ = this._$concreteEnd$ = $.$concreteEnd$;
					this.$concreteStart = this._$concreteStart = $.$concreteStart;
					this.$concreteStart$ = this._$concreteStart$ = $.$concreteStart$;
					this.$left$ = this._$left$ = $.$left$;
					this.$right$ = this._$right$ = $.$right$;
					this.$isAST = this._$isAST = $.$isAST;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$start = this._$start = $.$start;
					this.$start$ = this._$start$ = $.$start$;
					this.$end = this._$end = $.$end;
					this.$end$ = this._$end$ = $.$end$;
					this._$_concreteStart = $.$_concreteStart;
					this.$_concreteStart = dnuCatcher("$_concreteStart");
					this._$_concreteStart$ = $.$_concreteStart$;
					this.$_concreteStart$ = dnuCatcher("$_concreteStart$");
					this._$_concreteEnd = $.$_concreteEnd;
					this.$_concreteEnd = dnuCatcher("$_concreteEnd");
					this._$_concreteEnd$ = $.$_concreteEnd$;
					this.$_concreteEnd$ = dnuCatcher("$_concreteEnd$");
					this.$enclosingObjects$NewspeakASTs$AST = enclosingObjects;
					this.$super$NewspeakASTs$AST$slot = runtimeSuperclass;
					this["NewspeakASTs`AST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$start$slot = nil;
						this.$end$slot = nil;
						this.$_concreteStart$slot = nil;
						this.$_concreteEnd$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`AST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`AST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`AST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$AST = enclosingObjects;
						this.$super$NewspeakASTs$AST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$ASTCopier = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`ASTCopier";
			this.name = "NewspeakASTs`ASTCopier";
			this.header = "ASTCopier = ASTTool ((* A visitor that copies an NS2 AST. Subclasses can override selected methods to produce altered copies. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`NewspeakASTs`ASTCopier", true, "ASTTool"),
				new MM("instance`initializer", true, "ASTTool"),
				new MM("assignmentNode:", false, "public assignmentNode: aNode  <AssignmentAST> ^ <AssignmentNode> = (\r	^AssignmentAST new to: (aNode var apply: self) send: (aNode expression apply: self); \r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart; concreteEnd: aNode concreteEnd\r)"),
				new MM("binaryTypeOpNode:", false, "public binaryTypeOpNode: aNode = (\r	^BinaryTypeOpAST new\r		leftOperand: (aNode leftOperand apply: self);\r		operator: aNode operator;\r		rightOperand: (aNode rightOperand apply: self);\r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart; \r		concreteEnd: aNode concreteEnd\r)"),
				new MM("blockNode:", false, "public blockNode: aNode <BlockAST> ^ <BlockAST> = (\r	^BlockAST new body: (aNode body apply: self);  \r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart;\r		concreteEnd: aNode concreteEnd\r)"),
				new MM("blockTypeNode:", false, "public blockTypeNode: aNode = (\r	^(BlockTypeAST \r		formals: ( aNode formals collect:[:f | f apply: self])\r		return: (aNode return ifNotNil: [:it | it apply: self]))\r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart;\r		concreteEnd: aNode concreteEnd\r)"),
				new MM("cascadedSendNode:", false, "public cascadedSendNode: aNode <CascadedSendAST> ^  <CascadedSendAST> = (\r	^CascadedSendAST new\r		to: (aNode previousSend apply: self) cascade: (aNode message apply: self);\r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart; \r		concreteEnd: aNode concreteEnd\r)"),
				new MM("categoryNode:", false, "public categoryNode: node = (\r	^CategoryAST new\r		name: node name;\r		methods: (node methods collect: [:m | m apply: self])\r)"),
				new MM("charNode:", false, "public charNode: aNode <CharAST> = (\r	^CharAST new\r		value: aNode value;\r		copyPositionFrom: aNode\r)"),
				new MM("classHeaderNode:", false, "public classHeaderNode: node = (\r	^ClassHeaderAST new\r		name: node name;\r		constructor: (node constructor apply: self);\r		superclassName: node superclassName;\r		superclassCall: node superclassCall;\r		superConstructorCall: (node superConstructorCall apply: self);\r		slots: (node slots collect: [ :slt | slt apply: self ]);\r		isSeq: node isSeq;\r		classComment: node classComment;\r		category: node category;\r		inheritanceChain: (node inheritanceChain collect:[:send | send apply: self]);\r		initExprs: (node initExprs collect: [ :ie | ie apply: self ])\r)"),
				new MM("classNode:", false, "public classNode: aNode = (\r	^ClassDeclarationAST new\r		header: (aNode header apply: self);\r		instanceSide: (aNode instanceSide apply: self);\r		classSide: (aNode classSide apply: self);\r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart; \r		concreteEnd: aNode concreteEnd\r)"),
				new MM("classPrefix:", false, "public classPrefix: node <ClassPrefixNode> = (\r	^ClassPrefixAST\r		name: (node name apply: self) \r		constructor: (node constructor apply: self) \r		superclassName: (node superclassName apply: self)  \r		superclassCall: (node superclassCall apply: self)      \r		superConstructorCall: (node superConstructorCall apply: self) 		\r)"),
				new MM("codeBodyNode:", false, "public codeBodyNode: aNode = (\r 	^CodeBodyAST new\r		parameters: (aNode parameters collect:[:p | p apply: self])\r		temporaries: (aNode temporaries collect:[:t | t apply: self])\r		statements:(aNode statements collect:[:s | s apply: self]);\r		isSeq: aNode isSeq;\r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart; \r		concreteEnd: aNode concreteEnd\r)"),
				new MM("genericInvocationNode:", false, "public genericInvocationNode: aNode = (\r	^ParameterizedTypeAST new\r		generic: (aNode generic apply: self);\r		arguments: (aNode arguments collect:[:a | a apply: self]);\r		start: aNode start; end: aNode end;\r		concreteStart: aNode concreteStart; \r		concreteEnd: aNode concreteEnd\r)"),
				new MM("messageNode:", false, "public messageNode: aNode  <MessageAST> ^  <MessageAST> = (\r	^MessageAST new\r		send: aNode selector with: (aNode arguments collect: [:a | a apply: self]);\r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart; \r		concreteEnd: aNode concreteEnd\r)"),
				new MM("messagePatternNode:", false, "public messagePatternNode: aNode  <MessagePatternAST> ^ <MessagePatternAST> = (\r	^MessagePatternAST new\r		selector: aNode selector\r		parameters: (aNode parameters collect: [:p | p apply: self])\r		returnType: (aNode returnType isNil ifTrue: [nil] ifFalse: [aNode returnType apply: self])\r		typePattern: (aNode typePattern isNil ifTrue: [nil] ifFalse: [aNode typePattern apply: self]);\r		start: aNode start; end: aNode end;\r		concreteStart: aNode concreteStart; \r		concreteEnd: aNode concreteEnd\r)"),
				new MM("methodNode:", false, "public methodNode: aNode  <MethodAST> = (\r	^MethodAST new\r		pattern: (aNode pattern apply: self)\r		body: (aNode body apply: self)\r		accessModifier: aNode accessModifier;\r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart; \r		concreteEnd: aNode concreteEnd\r)"),
				new MM("mixinApplication:", false, "public mixinApplication: node <MixinApplicationAST> = (\r	^MixinApplicationAST new\r		mixinExpr: (node mixinExpr apply: self);\r		superclassExpr: (node superclassExpr apply: self);\r		classPrefix: (node classPrefix ifNotNil: [:cp | cp apply: self]); \r		(*check for nil prefix during transition *)\r		start: node start; end: node end; \r		concreteStart: node concreteStart;\r		concreteEnd: node concreteEnd\r)"),
				new MM("mixinApplicationClass:", false, "public mixinApplicationClass: node <MixinApplicationClassAST> = (\r	^(MixinApplicationClassAST \r		named: node name \r		factoryMsg: (node constructor apply: self) \r		inheriting: (node inheritanceChain collect: [:ic | ic apply: self]))\r		start: node start; end: node end; \r		concreteStart: node concreteStart;\r		concreteEnd: node concreteEnd\r)"),
				new MM("mixinClassNode:", false, "public mixinClassNode: aNode = (\r	#Bogus yourself.\r	^aNode class new\r)"),
				new MM("normalSendNode:", false, "public normalSendNode: aNode <NormalSendAST> ^ <NormalSendAST>= (\r	^NormalSendAST new\r		to: (aNode receiver apply: self) send: (aNode message apply: self); \r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart;\r		concreteEnd: aNode concreteEnd\r)"),
				new MM("numberNode:", false, "public numberNode: aNode = (\r 	^NumberAST new\r		value: aNode value;\r		copyPositionFrom: aNode\r)"),
				new MM("returnStatNode:", false, "public returnStatNode: aNode <ReturnStatAST> ^ <ReturnStatAST> = (\r	^ReturnStatAST new\r		expression: (aNode expression apply: self); \r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart;\r		concreteEnd: aNode concreteEnd\r)"),
				new MM("setterSendNode:", false, "public setterSendNode: aNode <SetterSendAST> ^ <SetterSendAST>= (\r	^(SetterSendAST\r		to: (aNode receiver apply: self) send: (aNode message apply: self)\r		start: aNode start end: aNode end)\r		concreteStart: aNode concreteStart;\r		concreteEnd: aNode concreteEnd\r)"),
				new MM("sideNode:", false, "public sideNode: aNode <SideAST> ^ <SideAST> = (\r 	^NSSideAST new \r		variables: (aNode vars collect: [:v | v apply: self])\r            categories:  (aNode categories collect: [:c | c apply: self]);\r		nestedClasses: (aNode nestedClasses collect: [:nc | nc apply: self]);\r            start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart; \r		concreteEnd: aNode concreteEnd\r)"),
				new MM("slotDefNode:", false, "public slotDefNode: aNode = (\r	| slotDefClass |\r	slotDefClass:: aNode isMutable \r						ifTrue: [ MutableSlotDefAST ] \r						ifFalse: [ ImmutableSlotDefAST ].\r	^slotDefClass new\r		slotDecl: (aNode slotDecl apply: self);\r		initializer: (aNode initializer ifNotNil: [aNode initializer apply: self]);\r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart; \r		concreteEnd: aNode concreteEnd\r)"),
				new MM("stringNode:", false, "public stringNode: aNode <StringAST> ^ <StringAST> = (\r	^self literalNode: aNode\r)"),
				new MM("symbolNode:", false, "public symbolNode: aNode = (\r	^self literalNode: aNode\r)"),
				new MM("tupleNode:", false, "public tupleNode: aNode <TupleAST> ^  <TupleAST> = (\r	^TupleAST new\r		elements: (aNode elements collect: [:e | e apply: self]); \r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart;\r		concreteEnd: aNode concreteEnd\r)"),
				new MM("typeIdNode:", false, "public typeIdNode: aNode = (\r	^TypeIdAST new\r		name: aNode name; \r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart;\r		concreteEnd: aNode concreteEnd\r)"),
				new MM("typePatternNode:", false, "public typePatternNode: aNode = (\r	^TypePatternAST new\r		formals: ( aNode formals collect:[:f | f apply: self]); \r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart;\r		concreteEnd: aNode concreteEnd\r)"),
				new MM("unaryTypeOpNode:", false, "public unaryTypeOpNode: aNode = (\r	^UnaryTypeOpAST new\r		operand: (aNode operand apply: self);\r		operator: aNode operator;\r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart; \r		concreteEnd: aNode concreteEnd\r)"),
				new MM("varDeclNode:", false, "public varDeclNode: aNode<VarDeclAST> ^ <VarDeclAST> = (\r	^VarDeclAST\r		name: aNode name\r		type: (aNode type isNil ifTrue: [nil] ifFalse: [aNode type apply: self])\r)"),
				new MM("variableNode:", false, "public variableNode: aNode <VariableAST> ^ <VariableAST> = (\r	^VariableAST new\r		name: aNode name;\r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart;\r		concreteEnd: aNode concreteEnd              \r)"),
				new MM("literalNode:", false, "private literalNode: aNode = (\r	^aNode class new\r		value: aNode value;\r		start: aNode start; end: aNode end; \r		concreteStart: aNode concreteStart;\r		concreteEnd: aNode concreteEnd\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$ASTCopier = (function () {
				var self = this;
				self.$super$NewspeakASTs$ASTCopier$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$ASTCopier();
				return self;
			});
			this.$assignmentNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$to$send$($aNode.$var().$apply$(self), $aNode.$expression().$apply$(self));
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$AssignmentAST().$new());
			});
			this.$binaryTypeOpNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$leftOperand$($aNode.$leftOperand().$apply$(self));
					cascadeReceiver.$operator$($aNode.$operator());
					cascadeReceiver.$rightOperand$($aNode.$rightOperand().$apply$(self));
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$BinaryTypeOpAST().$new());
			});
			this.$blockNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$body$($aNode.$body().$apply$(self));
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$BlockAST().$new());
			});
			this.$blockTypeNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$BlockTypeAST().$formals$return$($aNode.$formals().$collect$((function ($f) {
					return $f.$apply$(self);
				})), $aNode.$return().$ifNotNil$((function ($it) {
					return $it.$apply$(self);
				}))));
			});
			this.$cascadedSendNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$to$cascade$($aNode.$previousSend().$apply$(self), $aNode.$message().$apply$(self));
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$CascadedSendAST().$new());
			});
			this.$categoryNode$ = (function ($node) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$name$($node.$name());
					return cascadeReceiver.$methods$($node.$methods().$collect$((function ($m) {
						return $m.$apply$(self);
					})));
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$CategoryAST().$new());
			});
			this.$charNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$value$($aNode.$value());
					return cascadeReceiver.$copyPositionFrom$($aNode);
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$CharAST().$new());
			});
			this.$classHeaderNode$ = (function ($node) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$name$($node.$name());
					cascadeReceiver.$constructor$($node.$constructor().$apply$(self));
					cascadeReceiver.$superclassName$($node.$superclassName());
					cascadeReceiver.$superclassCall$($node.$superclassCall());
					cascadeReceiver.$superConstructorCall$($node.$superConstructorCall().$apply$(self));
					cascadeReceiver.$slots$($node.$slots().$collect$((function ($slt) {
						return $slt.$apply$(self);
					})));
					cascadeReceiver.$isSeq$($node.$isSeq());
					cascadeReceiver.$classComment$($node.$classComment());
					cascadeReceiver.$category$($node.$category());
					cascadeReceiver.$inheritanceChain$($node.$inheritanceChain().$collect$((function ($send) {
						return $send.$apply$(self);
					})));
					return cascadeReceiver.$initExprs$($node.$initExprs().$collect$((function ($ie) {
						return $ie.$apply$(self);
					})));
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$ClassHeaderAST().$new());
			});
			this.$classNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$header$($aNode.$header().$apply$(self));
					cascadeReceiver.$instanceSide$($aNode.$instanceSide().$apply$(self));
					cascadeReceiver.$classSide$($aNode.$classSide().$apply$(self));
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$ClassDeclarationAST().$new());
			});
			this.$classPrefix$ = (function ($node) {
				var self = this;
				return self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$ClassPrefixAST().$name$constructor$superclassName$superclassCall$superConstructorCall$($node.$name().$apply$(self), $node.$constructor().$apply$(self), $node.$superclassName().$apply$(self), $node.$superclassCall().$apply$(self), $node.$superConstructorCall().$apply$(self));
			});
			this.$codeBodyNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$parameters$temporaries$statements$($aNode.$parameters().$collect$((function ($p) {
						return $p.$apply$(self);
					})), $aNode.$temporaries().$collect$((function ($t) {
						return $t.$apply$(self);
					})), $aNode.$statements().$collect$((function ($s) {
						return $s.$apply$(self);
					})));
					cascadeReceiver.$isSeq$($aNode.$isSeq());
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$CodeBodyAST().$new());
			});
			this.$genericInvocationNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$generic$($aNode.$generic().$apply$(self));
					cascadeReceiver.$arguments$($aNode.$arguments().$collect$((function ($a) {
						return $a.$apply$(self);
					})));
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$ParameterizedTypeAST().$new());
			});
			this.$messageNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$send$with$($aNode.$selector(), $aNode.$arguments().$collect$((function ($a) {
						return $a.$apply$(self);
					})));
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$MessageAST().$new());
			});
			this.$messagePatternNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$selector$parameters$returnType$typePattern$($aNode.$selector(), $aNode.$parameters().$collect$((function ($p) {
						return $p.$apply$(self);
					})), $aNode.$returnType().$isNil().$ifTrue$ifFalse$((function () {
						return nil;
					}), (function () {
						return $aNode.$returnType().$apply$(self);
					})), $aNode.$typePattern().$isNil().$ifTrue$ifFalse$((function () {
						return nil;
					}), (function () {
						return $aNode.$typePattern().$apply$(self);
					})));
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$MessagePatternAST().$new());
			});
			this.$methodNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$pattern$body$accessModifier$($aNode.$pattern().$apply$(self), $aNode.$body().$apply$(self), $aNode.$accessModifier());
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$MethodAST().$new());
			});
			this.$mixinApplication$ = (function ($node) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$mixinExpr$($node.$mixinExpr().$apply$(self));
					cascadeReceiver.$superclassExpr$($node.$superclassExpr().$apply$(self));
					cascadeReceiver.$classPrefix$($node.$classPrefix().$ifNotNil$((function ($cp) {
						return $cp.$apply$(self);
					})));
					cascadeReceiver.$start$($node.$start());
					cascadeReceiver.$end$($node.$end());
					cascadeReceiver.$concreteStart$($node.$concreteStart());
					return cascadeReceiver.$concreteEnd$($node.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$MixinApplicationAST().$new());
			});
			this.$mixinApplicationClass$ = (function ($node) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$start$($node.$start());
					cascadeReceiver.$end$($node.$end());
					cascadeReceiver.$concreteStart$($node.$concreteStart());
					return cascadeReceiver.$concreteEnd$($node.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$MixinApplicationClassAST().$named$factoryMsg$inheriting$($node.$name(), $node.$constructor().$apply$(self), $node.$inheritanceChain().$collect$((function ($ic) {
					return $ic.$apply$(self);
				}))));
			});
			this.$mixinClassNode$ = (function ($aNode) {
				var self = this;
				("Bogus").$yourself();
				return $aNode.$class().$new();
			});
			this.$normalSendNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$to$send$($aNode.$receiver().$apply$(self), $aNode.$message().$apply$(self));
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$NormalSendAST().$new());
			});
			this.$numberNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$value$($aNode.$value());
					return cascadeReceiver.$copyPositionFrom$($aNode);
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$NumberAST().$new());
			});
			this.$returnStatNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$expression$($aNode.$expression().$apply$(self));
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$ReturnStatAST().$new());
			});
			this.$setterSendNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$SetterSendAST().$to$send$start$end$($aNode.$receiver().$apply$(self), $aNode.$message().$apply$(self), $aNode.$start(), $aNode.$end()));
			});
			this.$sideNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$variables$categories$($aNode.$vars().$collect$((function ($v) {
						return $v.$apply$(self);
					})), $aNode.$categories().$collect$((function ($c) {
						return $c.$apply$(self);
					})));
					cascadeReceiver.$nestedClasses$($aNode.$nestedClasses().$collect$((function ($nc) {
						return $nc.$apply$(self);
					})));
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$NSSideAST().$new());
			});
			this.$slotDefNode$ = (function ($aNode) {
				var self = this;
				var $slotDefClass = nil;
				$slotDefClass = $aNode.$isMutable().$ifTrue$ifFalse$((function () {
					return self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$MutableSlotDefAST();
				}), (function () {
					return self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$ImmutableSlotDefAST();
				}));
				return (function (cascadeReceiver) {
					cascadeReceiver.$slotDecl$($aNode.$slotDecl().$apply$(self));
					cascadeReceiver.$initializer$($aNode.$initializer().$ifNotNil$((function () {
						return $aNode.$initializer().$apply$(self);
					})));
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})($slotDefClass.$new());
			});
			this.$stringNode$ = (function ($aNode) {
				var self = this;
				return $1.$literalNode$.call(self, $aNode);
			});
			this.$symbolNode$ = (function ($aNode) {
				var self = this;
				return $1.$literalNode$.call(self, $aNode);
			});
			this.$tupleNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$elements$($aNode.$elements().$collect$((function ($e) {
						return $e.$apply$(self);
					})));
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$TupleAST().$new());
			});
			this.$typeIdNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$name$($aNode.$name());
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$TypeIdAST().$new());
			});
			this.$typePatternNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$formals$($aNode.$formals().$collect$((function ($f) {
						return $f.$apply$(self);
					})));
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self._$TypePatternAST().$new());
			});
			this.$unaryTypeOpNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$operand$($aNode.$operand().$apply$(self));
					cascadeReceiver.$operator$($aNode.$operator());
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$UnaryTypeOpAST().$new());
			});
			this.$varDeclNode$ = (function ($aNode) {
				var self = this;
				return self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$VarDeclAST().$name$type$($aNode.$name(), $aNode.$type().$isNil().$ifTrue$ifFalse$((function () {
					return nil;
				}), (function () {
					return $aNode.$type().$apply$(self);
				})));
			});
			this.$variableNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$name$($aNode.$name());
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})(self.$enclosingObjects$NewspeakASTs$ASTCopier[0]._$VariableAST().$new());
			});
			this.$literalNode$ = (function ($aNode) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$value$($aNode.$value());
					cascadeReceiver.$start$($aNode.$start());
					cascadeReceiver.$end$($aNode.$end());
					cascadeReceiver.$concreteStart$($aNode.$concreteStart());
					return cascadeReceiver.$concreteEnd$($aNode.$concreteEnd());
				})($aNode.$class().$new());
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`ASTCopier";
					this._$superInit$NewspeakASTs$ASTCopier = $.$superInit$NewspeakASTs$ASTCopier;
					this.$superInit$NewspeakASTs$ASTCopier = dnuCatcher("$superInit$NewspeakASTs$ASTCopier");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$assignmentNode$ = this._$assignmentNode$ = $.$assignmentNode$;
					this.$binaryTypeOpNode$ = this._$binaryTypeOpNode$ = $.$binaryTypeOpNode$;
					this.$blockNode$ = this._$blockNode$ = $.$blockNode$;
					this.$blockTypeNode$ = this._$blockTypeNode$ = $.$blockTypeNode$;
					this.$cascadedSendNode$ = this._$cascadedSendNode$ = $.$cascadedSendNode$;
					this.$categoryNode$ = this._$categoryNode$ = $.$categoryNode$;
					this.$charNode$ = this._$charNode$ = $.$charNode$;
					this.$classHeaderNode$ = this._$classHeaderNode$ = $.$classHeaderNode$;
					this.$classNode$ = this._$classNode$ = $.$classNode$;
					this.$classPrefix$ = this._$classPrefix$ = $.$classPrefix$;
					this.$codeBodyNode$ = this._$codeBodyNode$ = $.$codeBodyNode$;
					this.$genericInvocationNode$ = this._$genericInvocationNode$ = $.$genericInvocationNode$;
					this.$messageNode$ = this._$messageNode$ = $.$messageNode$;
					this.$messagePatternNode$ = this._$messagePatternNode$ = $.$messagePatternNode$;
					this.$methodNode$ = this._$methodNode$ = $.$methodNode$;
					this.$mixinApplication$ = this._$mixinApplication$ = $.$mixinApplication$;
					this.$mixinApplicationClass$ = this._$mixinApplicationClass$ = $.$mixinApplicationClass$;
					this.$mixinClassNode$ = this._$mixinClassNode$ = $.$mixinClassNode$;
					this.$normalSendNode$ = this._$normalSendNode$ = $.$normalSendNode$;
					this.$numberNode$ = this._$numberNode$ = $.$numberNode$;
					this.$returnStatNode$ = this._$returnStatNode$ = $.$returnStatNode$;
					this.$setterSendNode$ = this._$setterSendNode$ = $.$setterSendNode$;
					this.$sideNode$ = this._$sideNode$ = $.$sideNode$;
					this.$slotDefNode$ = this._$slotDefNode$ = $.$slotDefNode$;
					this.$stringNode$ = this._$stringNode$ = $.$stringNode$;
					this.$symbolNode$ = this._$symbolNode$ = $.$symbolNode$;
					this.$tupleNode$ = this._$tupleNode$ = $.$tupleNode$;
					this.$typeIdNode$ = this._$typeIdNode$ = $.$typeIdNode$;
					this.$typePatternNode$ = this._$typePatternNode$ = $.$typePatternNode$;
					this.$unaryTypeOpNode$ = this._$unaryTypeOpNode$ = $.$unaryTypeOpNode$;
					this.$varDeclNode$ = this._$varDeclNode$ = $.$varDeclNode$;
					this.$variableNode$ = this._$variableNode$ = $.$variableNode$;
					this.$enclosingObjects$NewspeakASTs$ASTCopier = enclosingObjects;
					this.$super$NewspeakASTs$ASTCopier$slot = runtimeSuperclass;
					this["NewspeakASTs`ASTCopier"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["NewspeakASTs`ASTCopier"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`ASTCopier";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`ASTCopier";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$ASTCopier = enclosingObjects;
						this.$super$NewspeakASTs$ASTCopier = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$ASTTool = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`ASTTool";
			this.name = "NewspeakASTs`ASTTool";
			this.header = "ASTTool = ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`NewspeakASTs`ASTTool", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("blockNode:", false, "public blockNode: aNode <BlockAST> = (\r	self subclassResponsibility\r)"),
				new MM("cascadedSendNode:", false, "public cascadedSendNode: aNode <CascadedSendAST> = (\r	self subclassResponsibility\r)"),
				new MM("charNode:", false, "public charNode: aNode <CharAST> = (\r	self subclassResponsibility\r)"),
				new MM("classNode:", false, "public classNode: aNode <ClassAST> = (\r	self subclassResponsibility\r)"),
				new MM("codeBodyNode:", false, "public codeBodyNode: aNode <CodeBodyAST> = (\r	self subclassResponsibility\r)"),
				new MM("messageNode:", false, "public messageNode: aNode <MessageAST> = (\r	self subclassResponsibility\r)"),
				new MM("messagePatternNode:", false, "public messagePatternNode: aNode <MessagePatternAST> = (\r	self subclassResponsibility\r)"),
				new MM("methodNode:", false, "public methodNode: aNode <MethodAST> = (\r	self subclassResponsibility\r)"),
				new MM("mixinApplication:", false, "public mixinApplication: node <MixinApplicationAST> = (\r	self subclassResponsibility\r)"),
				new MM("mixinApplicationClass:", false, "public mixinApplicationClass: node <MixinApplicationClassAST> = (\r	self subclassResponsibility\r)"),
				new MM("normalSendNode:", false, "public normalSendNode: aNode <NormalSendAST> = (\r	self subclassResponsibility\r)"),
				new MM("numberNode:", false, "public numberNode: aNode <NumberAST> = (\r	self subclassResponsibility\r)"),
				new MM("returnStatNode:", false, "public returnStatNode: aNode <ReturnStatAST> = (\r	self subclassResponsibility\r)"),
				new MM("setterSendNode:", false, "public setterSendNode: aNode <SetterSendAST> = (\r	self subclassResponsibility\r)"),
				new MM("sideNode:", false, "public sideNode: aNode <SideAST> = (\r	self subclassResponsibility\r)"),
				new MM("stringNode:", false, "public stringNode: aNode <StringAST> = (\r	self subclassResponsibility\r)"),
				new MM("symbolNode:", false, "public symbolNode: aNode <SymbolAST> = (\r	self subclassResponsibility\r)"),
				new MM("tupleNode:", false, "public tupleNode: aNode <TupleAST> = (\r	self subclassResponsibility\r)"),
				new MM("varDeclNode:", false, "public varDeclNode: aNode <VarDeclAST> = (\r	self subclassResponsibility\r)"),
				new MM("variableNode:", false, "public variableNode: aNode <VariableAST> = (\r	(* can only be a pseudo variable : self or _here *)\r	self subclassResponsibility\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$ASTTool = (function () {
				var self = this;
				self.$super$NewspeakASTs$ASTTool$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$ASTTool();
				return self;
			});
			this.$blockNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$cascadedSendNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$charNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$classNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$codeBodyNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$messageNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$messagePatternNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$methodNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$mixinApplication$ = (function ($node) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$mixinApplicationClass$ = (function ($node) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$normalSendNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$numberNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$returnStatNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$setterSendNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$sideNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$stringNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$symbolNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$tupleNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$varDeclNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$variableNode$ = (function ($aNode) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`ASTTool";
					this._$superInit$NewspeakASTs$ASTTool = $.$superInit$NewspeakASTs$ASTTool;
					this.$superInit$NewspeakASTs$ASTTool = dnuCatcher("$superInit$NewspeakASTs$ASTTool");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$blockNode$ = this._$blockNode$ = $.$blockNode$;
					this.$cascadedSendNode$ = this._$cascadedSendNode$ = $.$cascadedSendNode$;
					this.$charNode$ = this._$charNode$ = $.$charNode$;
					this.$classNode$ = this._$classNode$ = $.$classNode$;
					this.$codeBodyNode$ = this._$codeBodyNode$ = $.$codeBodyNode$;
					this.$messageNode$ = this._$messageNode$ = $.$messageNode$;
					this.$messagePatternNode$ = this._$messagePatternNode$ = $.$messagePatternNode$;
					this.$methodNode$ = this._$methodNode$ = $.$methodNode$;
					this.$mixinApplication$ = this._$mixinApplication$ = $.$mixinApplication$;
					this.$mixinApplicationClass$ = this._$mixinApplicationClass$ = $.$mixinApplicationClass$;
					this.$normalSendNode$ = this._$normalSendNode$ = $.$normalSendNode$;
					this.$numberNode$ = this._$numberNode$ = $.$numberNode$;
					this.$returnStatNode$ = this._$returnStatNode$ = $.$returnStatNode$;
					this.$setterSendNode$ = this._$setterSendNode$ = $.$setterSendNode$;
					this.$sideNode$ = this._$sideNode$ = $.$sideNode$;
					this.$stringNode$ = this._$stringNode$ = $.$stringNode$;
					this.$symbolNode$ = this._$symbolNode$ = $.$symbolNode$;
					this.$tupleNode$ = this._$tupleNode$ = $.$tupleNode$;
					this.$varDeclNode$ = this._$varDeclNode$ = $.$varDeclNode$;
					this.$variableNode$ = this._$variableNode$ = $.$variableNode$;
					this.$enclosingObjects$NewspeakASTs$ASTTool = enclosingObjects;
					this.$super$NewspeakASTs$ASTTool$slot = runtimeSuperclass;
					this["NewspeakASTs`ASTTool"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["NewspeakASTs`ASTTool"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`ASTTool";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`ASTTool";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$ASTTool = enclosingObjects;
						this.$super$NewspeakASTs$ASTTool = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$ASTTraverser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`ASTTraverser";
			this.name = "NewspeakASTs`ASTTraverser";
			this.header = "ASTTraverser = ASTTool ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`NewspeakASTs`ASTTraverser", true, "ASTTool"),
				new MM("instance`initializer", true, "ASTTool"),
				new MM("blockNode:", false, "public blockNode: node <BlockAST> = (\r	node body apply: self\r)"),
				new MM("cascadedSendNode:", false, "public cascadedSendNode: node <CascadedSendAST> = (\r	node previousSend apply: self.\r	node message apply: self.\r)"),
				new MM("charNode:", false, "public charNode: node <CharAST> = (\r	(* Leaf *)\r)"),
				new MM("keywordPatternNode:", false, "public keywordPatternNode: aNode <KeywordPatternAST> = (\r	#BOGUS yourself.\r	(* Leaf? *)\r)"),
				new MM("literalPatternNode:", false, "public literalPatternNode: node <LiteralPatternAST> = (\r	node literal apply: self\r)"),
				new MM("messageNode:", false, "public messageNode: node <MessageAST> = (\r	node arguments do: [:each | each apply: self].\r)"),
				new MM("mixinClassNode:", false, "public mixinClassNode: node <MixinClassNode> = (\r	(* Leaf? *)\r)"),
				new MM("normalSendNode:", false, "public normalSendNode: node <NormalSendAST> = (\r	node receiver apply: self.\r	node message apply: self.\r)"),
				new MM("numberNode:", false, "public numberNode: node <NumberAST> = (\r	(* Leaf *)\r)"),
				new MM("returnStatNode:", false, "public returnStatNode: node <ReturnStatAST> = (\r	node expression apply: self.\r)"),
				new MM("setterSendNode:", false, "public setterSendNode: node <SetterSendAST> = (\r	node receiver apply: self.\r	node message apply: self.\r)"),
				new MM("stringNode:", false, "public stringNode: node <StringAST> = (\r	(* Leaf *)\r)"),
				new MM("symbolNode:", false, "public symbolNode: node <SymbolAST> = (\r	(* Leaf *)\r)"),
				new MM("tupleNode:", false, "public tupleNode: node <TupleAST> = (\r	node elements do: [:each | each apply: self]\r)"),
				new MM("variablePatternNode:", false, "public variablePatternNode: node <VariablePatternAST> = (\r	#BOGUS yourself.\r	(* Leaf? *)\r)"),
				new MM("wildcardPatternNode:", false, "public wildcardPatternNode: aNode <WildcardPatternAST> = (\r	(* Leaf *)\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$ASTTraverser = (function () {
				var self = this;
				self.$super$NewspeakASTs$ASTTraverser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$ASTTraverser();
				return self;
			});
			this.$blockNode$ = (function ($node) {
				var self = this;
				$node.$body().$apply$(self);
				return self;
			});
			this.$cascadedSendNode$ = (function ($node) {
				var self = this;
				$node.$previousSend().$apply$(self);
				$node.$message().$apply$(self);
				return self;
			});
			this.$charNode$ = (function ($node) {
				var self = this;
				return self;
			});
			this.$keywordPatternNode$ = (function ($aNode) {
				var self = this;
				("BOGUS").$yourself();
				return self;
			});
			this.$literalPatternNode$ = (function ($node) {
				var self = this;
				$node.$literal().$apply$(self);
				return self;
			});
			this.$messageNode$ = (function ($node) {
				var self = this;
				$node.$arguments().$do$((function ($each) {
					return $each.$apply$(self);
				}));
				return self;
			});
			this.$mixinClassNode$ = (function ($node) {
				var self = this;
				return self;
			});
			this.$normalSendNode$ = (function ($node) {
				var self = this;
				$node.$receiver().$apply$(self);
				$node.$message().$apply$(self);
				return self;
			});
			this.$numberNode$ = (function ($node) {
				var self = this;
				return self;
			});
			this.$returnStatNode$ = (function ($node) {
				var self = this;
				$node.$expression().$apply$(self);
				return self;
			});
			this.$setterSendNode$ = (function ($node) {
				var self = this;
				$node.$receiver().$apply$(self);
				$node.$message().$apply$(self);
				return self;
			});
			this.$stringNode$ = (function ($node) {
				var self = this;
				return self;
			});
			this.$symbolNode$ = (function ($node) {
				var self = this;
				return self;
			});
			this.$tupleNode$ = (function ($node) {
				var self = this;
				$node.$elements().$do$((function ($each) {
					return $each.$apply$(self);
				}));
				return self;
			});
			this.$variablePatternNode$ = (function ($node) {
				var self = this;
				("BOGUS").$yourself();
				return self;
			});
			this.$wildcardPatternNode$ = (function ($aNode) {
				var self = this;
				return self;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`ASTTraverser";
					this._$superInit$NewspeakASTs$ASTTraverser = $.$superInit$NewspeakASTs$ASTTraverser;
					this.$superInit$NewspeakASTs$ASTTraverser = dnuCatcher("$superInit$NewspeakASTs$ASTTraverser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$blockNode$ = this._$blockNode$ = $.$blockNode$;
					this.$cascadedSendNode$ = this._$cascadedSendNode$ = $.$cascadedSendNode$;
					this.$charNode$ = this._$charNode$ = $.$charNode$;
					this.$keywordPatternNode$ = this._$keywordPatternNode$ = $.$keywordPatternNode$;
					this.$literalPatternNode$ = this._$literalPatternNode$ = $.$literalPatternNode$;
					this.$messageNode$ = this._$messageNode$ = $.$messageNode$;
					this.$mixinClassNode$ = this._$mixinClassNode$ = $.$mixinClassNode$;
					this.$normalSendNode$ = this._$normalSendNode$ = $.$normalSendNode$;
					this.$numberNode$ = this._$numberNode$ = $.$numberNode$;
					this.$returnStatNode$ = this._$returnStatNode$ = $.$returnStatNode$;
					this.$setterSendNode$ = this._$setterSendNode$ = $.$setterSendNode$;
					this.$stringNode$ = this._$stringNode$ = $.$stringNode$;
					this.$symbolNode$ = this._$symbolNode$ = $.$symbolNode$;
					this.$tupleNode$ = this._$tupleNode$ = $.$tupleNode$;
					this.$variablePatternNode$ = this._$variablePatternNode$ = $.$variablePatternNode$;
					this.$wildcardPatternNode$ = this._$wildcardPatternNode$ = $.$wildcardPatternNode$;
					this.$enclosingObjects$NewspeakASTs$ASTTraverser = enclosingObjects;
					this.$super$NewspeakASTs$ASTTraverser$slot = runtimeSuperclass;
					this["NewspeakASTs`ASTTraverser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["NewspeakASTs`ASTTraverser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`ASTTraverser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`ASTTraverser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$ASTTraverser = enclosingObjects;
						this.$super$NewspeakASTs$ASTTraverser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$AssignmentAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`AssignmentAST";
			this.name = "NewspeakASTs`AssignmentAST";
			this.header = "AssignmentAST = AST (|\r	public variable <VariableAST>\r	public expression <AST>\r|)";
			this.slots = [
				new SM("variable", true, false),
				new SM("expression", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`AssignmentAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("to:assign:", false, "public to: aVar <VariableAST> assign: anExpr <AST> = (\r  self assert:[aVar isVariableNode].\r  self assert:[anExpr isExpressionNode].\r  self variable: aVar; expression: anExpr.\r  start: var start.\r  end: anExpr end.\r)"),
				new MM("isAssignmentNode", false, "public isAssignmentNode = (^true)"),
				new MM("isExpressionNode", false, "public isExpressionNode = (^true)"),
				new MM("apply:", false, "public apply: aTool = (\r	^aTool assignmentNode: self\r)"),
				new MM("variable", true, null),
				new MM("variable:", true, null),
				new MM("expression", true, null),
				new MM("expression:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$AssignmentAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$AssignmentAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$AssignmentAST();
				return self;
			});
			this.$to$assign$ = (function ($aVar, $anExpr) {
				var self = this;
				self._$assert$((function () {
					return $aVar.$isVariableNode();
				}));
				self._$assert$((function () {
					return $anExpr.$isExpressionNode();
				}));
				(function (cascadeReceiver) {
					cascadeReceiver.$variable$($aVar);
					return cascadeReceiver.$expression$($anExpr);
				})(self);
				self._$start$(self._$var().$start());
				self._$end$($anExpr.$end());
				return self;
			});
			this.$isAssignmentNode = (function () {
				var self = this;
				return true;
			});
			this.$isExpressionNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$assignmentNode$(self);
			});
			this.$variable = (function () {
				return this.$variable$slot;
			});
			this.$variable$ = (function (v) {
				this.$variable$slot = v;
				return this;
			});
			this.$expression = (function () {
				return this.$expression$slot;
			});
			this.$expression$ = (function (v) {
				this.$expression$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`AssignmentAST";
					this._$superInit$NewspeakASTs$AssignmentAST = $.$superInit$NewspeakASTs$AssignmentAST;
					this.$superInit$NewspeakASTs$AssignmentAST = dnuCatcher("$superInit$NewspeakASTs$AssignmentAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$to$assign$ = this._$to$assign$ = $.$to$assign$;
					this.$isAssignmentNode = this._$isAssignmentNode = $.$isAssignmentNode;
					this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$variable = this._$variable = $.$variable;
					this.$variable$ = this._$variable$ = $.$variable$;
					this.$expression = this._$expression = $.$expression;
					this.$expression$ = this._$expression$ = $.$expression$;
					this.$enclosingObjects$NewspeakASTs$AssignmentAST = enclosingObjects;
					this.$super$NewspeakASTs$AssignmentAST$slot = runtimeSuperclass;
					this["NewspeakASTs`AssignmentAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$variable$slot = nil;
						this.$expression$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`AssignmentAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`AssignmentAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`AssignmentAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$AssignmentAST = enclosingObjects;
						this.$super$NewspeakASTs$AssignmentAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$BinaryTypeOpAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`BinaryTypeOpAST";
			this.name = "NewspeakASTs`BinaryTypeOpAST";
			this.header = "BinaryTypeOpAST = AST (|\r	public leftOperand <TypeAST>\r	public rightOperand <TypeAST>\r	public operator <Symbol>\r|)";
			this.slots = [
				new SM("leftOperand", true, false),
				new SM("rightOperand", true, false),
				new SM("operator", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`BinaryTypeOpAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("apply:", false, "public apply: aTool <ASTVisitor>  = (\r	^aTool binaryTypeOpNode: self\r)"),
				new MM("leftOperand", true, null),
				new MM("leftOperand:", true, null),
				new MM("rightOperand", true, null),
				new MM("rightOperand:", true, null),
				new MM("operator", true, null),
				new MM("operator:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$BinaryTypeOpAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$BinaryTypeOpAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$BinaryTypeOpAST();
				return self;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$binaryTypeOpNode$(self);
			});
			this.$leftOperand = (function () {
				return this.$leftOperand$slot;
			});
			this.$leftOperand$ = (function (v) {
				this.$leftOperand$slot = v;
				return this;
			});
			this.$rightOperand = (function () {
				return this.$rightOperand$slot;
			});
			this.$rightOperand$ = (function (v) {
				this.$rightOperand$slot = v;
				return this;
			});
			this.$operator = (function () {
				return this.$operator$slot;
			});
			this.$operator$ = (function (v) {
				this.$operator$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`BinaryTypeOpAST";
					this._$superInit$NewspeakASTs$BinaryTypeOpAST = $.$superInit$NewspeakASTs$BinaryTypeOpAST;
					this.$superInit$NewspeakASTs$BinaryTypeOpAST = dnuCatcher("$superInit$NewspeakASTs$BinaryTypeOpAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$leftOperand = this._$leftOperand = $.$leftOperand;
					this.$leftOperand$ = this._$leftOperand$ = $.$leftOperand$;
					this.$rightOperand = this._$rightOperand = $.$rightOperand;
					this.$rightOperand$ = this._$rightOperand$ = $.$rightOperand$;
					this.$operator = this._$operator = $.$operator;
					this.$operator$ = this._$operator$ = $.$operator$;
					this.$enclosingObjects$NewspeakASTs$BinaryTypeOpAST = enclosingObjects;
					this.$super$NewspeakASTs$BinaryTypeOpAST$slot = runtimeSuperclass;
					this["NewspeakASTs`BinaryTypeOpAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$leftOperand$slot = nil;
						this.$rightOperand$slot = nil;
						this.$operator$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`BinaryTypeOpAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`BinaryTypeOpAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`BinaryTypeOpAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$BinaryTypeOpAST = enclosingObjects;
						this.$super$NewspeakASTs$BinaryTypeOpAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$BlockAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`BlockAST";
			this.name = "NewspeakASTs`BlockAST";
			this.header = "BlockAST = AST (|\r	public body <CodeBodyAST>\r|)";
			this.slots = [new SM("body", true, false)];
			this.methods = [
				new MM("superInit`NewspeakASTs`BlockAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("parameters", false, "public parameters ^ <List[ParameterAST]> = (\r	^body parameters\r)"),
				new MM("isBlockNode", false, "public isBlockNode = ( ^true)"),
				new MM("isExpressionNode", false, "public isExpressionNode = (^true)"),
				new MM("apply:", false, "public apply: aTool = (\r	^aTool blockNode: self.\r)"),
				new MM("body", true, null),
				new MM("body:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$BlockAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$BlockAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$BlockAST();
				return self;
			});
			this.$parameters = (function () {
				var self = this;
				return self._$body().$parameters();
			});
			this.$isBlockNode = (function () {
				var self = this;
				return true;
			});
			this.$isExpressionNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$blockNode$(self);
			});
			this.$body = (function () {
				return this.$body$slot;
			});
			this.$body$ = (function (v) {
				this.$body$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`BlockAST";
					this._$superInit$NewspeakASTs$BlockAST = $.$superInit$NewspeakASTs$BlockAST;
					this.$superInit$NewspeakASTs$BlockAST = dnuCatcher("$superInit$NewspeakASTs$BlockAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$parameters = this._$parameters = $.$parameters;
					this.$isBlockNode = this._$isBlockNode = $.$isBlockNode;
					this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$body = this._$body = $.$body;
					this.$body$ = this._$body$ = $.$body$;
					this.$enclosingObjects$NewspeakASTs$BlockAST = enclosingObjects;
					this.$super$NewspeakASTs$BlockAST$slot = runtimeSuperclass;
					this["NewspeakASTs`BlockAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$body$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`BlockAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`BlockAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`BlockAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$BlockAST = enclosingObjects;
						this.$super$NewspeakASTs$BlockAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$BlockTypeAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`BlockTypeAST";
			this.name = "NewspeakASTs`BlockTypeAST";
			this.header = "BlockTypeAST formals: f return: r = AST (|\r	public formals = f.\r	public return = r.\r|)";
			this.slots = [
				new SM("formals", false, false),
				new SM("return", false, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`BlockTypeAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("apply:", false, "public apply: aTool = (\r	^aTool blockTypeNode: self\r)"),
				new MM("isTypeNode", false, "public isTypeNode ^<Boolean> = (\r	^true\r)"),
				new MM("formals", true, null),
				new MM("setOnce`formals:", true, null),
				new MM("return", true, null),
				new MM("setOnce`return:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$BlockTypeAST = (function ($f, $r) {
				var self = this;
				self.$super$NewspeakASTs$BlockTypeAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($f, $r) {
				var self = this;
				self._$superInit$NewspeakASTs$BlockTypeAST($f, $r);
				self._$setOnce$formals$($f);
				self._$setOnce$return$($r);
				return self;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$blockTypeNode$(self);
			});
			this.$isTypeNode = (function () {
				var self = this;
				return true;
			});
			this.$formals = (function () {
				return this.$formals$slot;
			});
			this.$setOnce$formals$ = (function (v) {
				this.$formals$slot = v;
				return this;
			});
			this.$return = (function () {
				return this.$return$slot;
			});
			this.$setOnce$return$ = (function (v) {
				this.$return$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`BlockTypeAST";
					this._$superInit$NewspeakASTs$BlockTypeAST = $.$superInit$NewspeakASTs$BlockTypeAST;
					this.$superInit$NewspeakASTs$BlockTypeAST = dnuCatcher("$superInit$NewspeakASTs$BlockTypeAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$isTypeNode = this._$isTypeNode = $.$isTypeNode;
					this.$formals = this._$formals = $.$formals;
					this.$setOnce$formals$ = this._$setOnce$formals$ = $.$setOnce$formals$;
					this.$return = this._$return = $.$return;
					this.$setOnce$return$ = this._$setOnce$return$ = $.$setOnce$return$;
					this.$enclosingObjects$NewspeakASTs$BlockTypeAST = enclosingObjects;
					this.$super$NewspeakASTs$BlockTypeAST$slot = runtimeSuperclass;
					this["NewspeakASTs`BlockTypeAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$formals$slot = nil;
						this.$return$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`BlockTypeAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`BlockTypeAST";
				this.slots = [];
				this.methods = [new MM("formals:return:", true, null)];
				this.nestedClasses = [];
				this.$formals$return$ = (function ($f, $r) {
					return (new this.nonMeta.basicNew()).$instance$initializer($f, $r);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`BlockTypeAST";
						this.$formals$return$ = this._$formals$return$ = $.$formals$return$;
						this.$enclosingObjects$NewspeakASTs$BlockTypeAST = enclosingObjects;
						this.$super$NewspeakASTs$BlockTypeAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$CascadedSendAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`CascadedSendAST";
			this.name = "NewspeakASTs`CascadedSendAST";
			this.header = "CascadedSendAST = SendAST (|\r	public previousSend <SendAST>\r|)";
			this.slots = [new SM("previousSend", true, false)];
			this.methods = [
				new MM("superInit`NewspeakASTs`CascadedSendAST", true, "SendAST"),
				new MM("instance`initializer", true, "SendAST"),
				new MM("receiver", false, "public receiver ^ <ExpressionAST> = (\r	^self previousSend receiver\r)"),
				new MM("end", false, "public end = (\r	(* Currently the parser doesn't set start or end positions for\r	cascades, so compute from the receiver's elements.  But\r	if the parser ever does set the position, take it directly. *)\r	^super end = 0\r		ifFalse: [super end]\r		ifTrue: [message end]\r)"),
				new MM("start", false, "public start = (\r	(* Currently the parser doesn't set start or end positions for\r	cascades, so compute from the receiver's elements.  But\r	if the parser ever does set the position, take it directly. *)\r	^super start = 0\r		ifFalse: [super start]\r		ifTrue: [previousSend start]\r)"),
				new MM("to:cascade:", false, "public to: aSend <SendAST> cascade: aMessage <MessageAST>  = (\r  self assert:[aSend isSendNode].\r  self assert:[aMessage isMessageNode].\r  self previousSend: aSend; message: aMessage\r)"),
				new MM("isCascadedSendNode", false, "public isCascadedSendNode = (^true)"),
				new MM("apply:", false, "public apply: aTool = (\r	^aTool cascadedSendNode: self.\r)"),
				new MM("previousSend", true, null),
				new MM("previousSend:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$CascadedSendAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$CascadedSendAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$CascadedSendAST();
				return self;
			});
			this.$receiver = (function () {
				var self = this;
				return self._$previousSend().$receiver();
			});
			this.$end = (function () {
				var self = this;
				return self.$super$NewspeakASTs$CascadedSendAST$slot._$end.call(self).$$equal(0).$ifFalse$ifTrue$((function () {
					return self.$super$NewspeakASTs$CascadedSendAST$slot._$end.call(self);
				}), (function () {
					return self._$message().$end();
				}));
			});
			this.$start = (function () {
				var self = this;
				return self.$super$NewspeakASTs$CascadedSendAST$slot._$start.call(self).$$equal(0).$ifFalse$ifTrue$((function () {
					return self.$super$NewspeakASTs$CascadedSendAST$slot._$start.call(self);
				}), (function () {
					return self._$previousSend().$start();
				}));
			});
			this.$to$cascade$ = (function ($aSend, $aMessage) {
				var self = this;
				self._$assert$((function () {
					return $aSend.$isSendNode();
				}));
				self._$assert$((function () {
					return $aMessage.$isMessageNode();
				}));
				(function (cascadeReceiver) {
					cascadeReceiver.$previousSend$($aSend);
					return cascadeReceiver.$message$($aMessage);
				})(self);
				return self;
			});
			this.$isCascadedSendNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$cascadedSendNode$(self);
			});
			this.$previousSend = (function () {
				return this.$previousSend$slot;
			});
			this.$previousSend$ = (function (v) {
				this.$previousSend$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`CascadedSendAST";
					this._$superInit$NewspeakASTs$CascadedSendAST = $.$superInit$NewspeakASTs$CascadedSendAST;
					this.$superInit$NewspeakASTs$CascadedSendAST = dnuCatcher("$superInit$NewspeakASTs$CascadedSendAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$receiver = this._$receiver = $.$receiver;
					this.$end = this._$end = $.$end;
					this.$start = this._$start = $.$start;
					this.$to$cascade$ = this._$to$cascade$ = $.$to$cascade$;
					this.$isCascadedSendNode = this._$isCascadedSendNode = $.$isCascadedSendNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$previousSend = this._$previousSend = $.$previousSend;
					this.$previousSend$ = this._$previousSend$ = $.$previousSend$;
					this.$enclosingObjects$NewspeakASTs$CascadedSendAST = enclosingObjects;
					this.$super$NewspeakASTs$CascadedSendAST$slot = runtimeSuperclass;
					this["NewspeakASTs`CascadedSendAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$previousSend$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`CascadedSendAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`CascadedSendAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`CascadedSendAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$CascadedSendAST = enclosingObjects;
						this.$super$NewspeakASTs$CascadedSendAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$CategoryAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`CategoryAST";
			this.name = "NewspeakASTs`CategoryAST";
			this.header = "CategoryAST = AST (|\r	public name <String>\r	public methods <List[MethodAST]>\r|)";
			this.slots = [
				new SM("name", true, false),
				new SM("methods", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`CategoryAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("apply:", false, "public apply: aTool <ASTTool> = (\r	^aTool categoryNode: self\r)"),
				new MM("name", true, null),
				new MM("name:", true, null),
				new MM("methods", true, null),
				new MM("methods:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$CategoryAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$CategoryAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$CategoryAST();
				return self;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$categoryNode$(self);
			});
			this.$name = (function () {
				return this.$name$slot;
			});
			this.$name$ = (function (v) {
				this.$name$slot = v;
				return this;
			});
			this.$methods = (function () {
				return this.$methods$slot;
			});
			this.$methods$ = (function (v) {
				this.$methods$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`CategoryAST";
					this._$superInit$NewspeakASTs$CategoryAST = $.$superInit$NewspeakASTs$CategoryAST;
					this.$superInit$NewspeakASTs$CategoryAST = dnuCatcher("$superInit$NewspeakASTs$CategoryAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$name = this._$name = $.$name;
					this.$name$ = this._$name$ = $.$name$;
					this.$methods = this._$methods = $.$methods;
					this.$methods$ = this._$methods$ = $.$methods$;
					this.$enclosingObjects$NewspeakASTs$CategoryAST = enclosingObjects;
					this.$super$NewspeakASTs$CategoryAST$slot = runtimeSuperclass;
					this["NewspeakASTs`CategoryAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$name$slot = nil;
						this.$methods$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`CategoryAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`CategoryAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`CategoryAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$CategoryAST = enclosingObjects;
						this.$super$NewspeakASTs$CategoryAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$CharAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`CharAST";
			this.name = "NewspeakASTs`CharAST";
			this.header = "CharAST = LiteralAST ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`NewspeakASTs`CharAST", true, "LiteralAST"),
				new MM("instance`initializer", true, "LiteralAST"),
				new MM("isCharNode", false, "public isCharNode = (^true)"),
				new MM("apply:", false, "public apply: tool = (\r	^tool charNode: self\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$CharAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$CharAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$CharAST();
				return self;
			});
			this.$isCharNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($tool) {
				var self = this;
				return $tool.$charNode$(self);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`CharAST";
					this._$superInit$NewspeakASTs$CharAST = $.$superInit$NewspeakASTs$CharAST;
					this.$superInit$NewspeakASTs$CharAST = dnuCatcher("$superInit$NewspeakASTs$CharAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isCharNode = this._$isCharNode = $.$isCharNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$enclosingObjects$NewspeakASTs$CharAST = enclosingObjects;
					this.$super$NewspeakASTs$CharAST$slot = runtimeSuperclass;
					this["NewspeakASTs`CharAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["NewspeakASTs`CharAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`CharAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`CharAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$CharAST = enclosingObjects;
						this.$super$NewspeakASTs$CharAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$ClassBodyAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`ClassBodyAST";
			this.name = "NewspeakASTs`ClassBodyAST";
			this.header = "ClassBodyAST initializer: init <InitializerAST> instanceSide: iSide <SideAST> classSide: cSide <SideAST> = AST (\r(* AST for a class body. *)|\r	public instanceInitializer <InitializerAST> = init.\r	public instanceSide <SideAST> = iSide.\r	public classSide <SideAST> = cSide.\r|start:: instanceInitializer start.\rend:: classSide end max: instanceSide end)";
			this.slots = [
				new SM("instanceInitializer", false, false),
				new SM("instanceSide", false, false),
				new SM("classSide", false, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`ClassBodyAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("instanceInitializer", true, null),
				new MM("setOnce`instanceInitializer:", true, null),
				new MM("instanceSide", true, null),
				new MM("setOnce`instanceSide:", true, null),
				new MM("classSide", true, null),
				new MM("setOnce`classSide:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$ClassBodyAST = (function ($init, $iSide, $cSide) {
				var self = this;
				self.$super$NewspeakASTs$ClassBodyAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($init, $iSide, $cSide) {
				var self = this;
				self._$superInit$NewspeakASTs$ClassBodyAST($init, $iSide, $cSide);
				self._$setOnce$instanceInitializer$($init);
				self._$setOnce$instanceSide$($iSide);
				self._$setOnce$classSide$($cSide);
				self._$start$(self._$instanceInitializer().$start());
				self._$end$(self._$classSide().$end().$max$(self._$instanceSide().$end()));
				return self;
			});
			this.$instanceInitializer = (function () {
				return this.$instanceInitializer$slot;
			});
			this.$setOnce$instanceInitializer$ = (function (v) {
				this.$instanceInitializer$slot = v;
				return this;
			});
			this.$instanceSide = (function () {
				return this.$instanceSide$slot;
			});
			this.$setOnce$instanceSide$ = (function (v) {
				this.$instanceSide$slot = v;
				return this;
			});
			this.$classSide = (function () {
				return this.$classSide$slot;
			});
			this.$setOnce$classSide$ = (function (v) {
				this.$classSide$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`ClassBodyAST";
					this._$superInit$NewspeakASTs$ClassBodyAST = $.$superInit$NewspeakASTs$ClassBodyAST;
					this.$superInit$NewspeakASTs$ClassBodyAST = dnuCatcher("$superInit$NewspeakASTs$ClassBodyAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$instanceInitializer = this._$instanceInitializer = $.$instanceInitializer;
					this.$setOnce$instanceInitializer$ = this._$setOnce$instanceInitializer$ = $.$setOnce$instanceInitializer$;
					this.$instanceSide = this._$instanceSide = $.$instanceSide;
					this.$setOnce$instanceSide$ = this._$setOnce$instanceSide$ = $.$setOnce$instanceSide$;
					this.$classSide = this._$classSide = $.$classSide;
					this.$setOnce$classSide$ = this._$setOnce$classSide$ = $.$setOnce$classSide$;
					this.$enclosingObjects$NewspeakASTs$ClassBodyAST = enclosingObjects;
					this.$super$NewspeakASTs$ClassBodyAST$slot = runtimeSuperclass;
					this["NewspeakASTs`ClassBodyAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$instanceInitializer$slot = nil;
						this.$instanceSide$slot = nil;
						this.$classSide$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`ClassBodyAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`ClassBodyAST";
				this.slots = [];
				this.methods = [new MM("initializer:instanceSide:classSide:", true, null)];
				this.nestedClasses = [];
				this.$initializer$instanceSide$classSide$ = (function ($init, $iSide, $cSide) {
					return (new this.nonMeta.basicNew()).$instance$initializer($init, $iSide, $cSide);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`ClassBodyAST";
						this.$initializer$instanceSide$classSide$ = this._$initializer$instanceSide$classSide$ = $.$initializer$instanceSide$classSide$;
						this.$enclosingObjects$NewspeakASTs$ClassBodyAST = enclosingObjects;
						this.$super$NewspeakASTs$ClassBodyAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$ClassDeclarationAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`ClassDeclarationAST";
			this.name = "NewspeakASTs`ClassDeclarationAST";
			this.header = "ClassDeclarationAST = AST (|\r	public accessModifier <Symbol>\r	public header <ClassHeaderAST>\r	public instanceSide <SideAST>\r	public classSide <SideAST>\r|)";
			this.slots = [
				new SM("accessModifier", true, false),
				new SM("header", true, false),
				new SM("instanceSide", true, false),
				new SM("classSide", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`ClassDeclarationAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("apply:", false, "public apply: aTool  <ASTTool >  = (\r	^aTool classNode: self\r)"),
				new MM("category:", false, "public category: cat  <CategoryAST> = (\r	header category: cat\r)"),
				new MM("isClassDeclarationNode", false, "public isClassDeclarationNode ^<Boolean> = (\r	^true\r)"),
				new MM("category", false, "public category ^ <CategoryAST> = (\r	^header category\r)"),
				new MM("classComment", false, "public classComment ^ <String> = (\r	^header classComment\r)"),
				new MM("name", false, "public name ^ <Symbol> = (\r	^header name\r)"),
				new MM("superclassName", false, "public superclassName ^ <Symbol> = (\r	^header superclassName\r)"),
				new MM("accessModifier", true, null),
				new MM("accessModifier:", true, null),
				new MM("header", true, null),
				new MM("header:", true, null),
				new MM("instanceSide", true, null),
				new MM("instanceSide:", true, null),
				new MM("classSide", true, null),
				new MM("classSide:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$ClassDeclarationAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$ClassDeclarationAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$ClassDeclarationAST();
				return self;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$classNode$(self);
			});
			this.$category$ = (function ($cat) {
				var self = this;
				self._$header().$category$($cat);
				return self;
			});
			this.$isClassDeclarationNode = (function () {
				var self = this;
				return true;
			});
			this.$category = (function () {
				var self = this;
				return self._$header().$category();
			});
			this.$classComment = (function () {
				var self = this;
				return self._$header().$classComment();
			});
			this.$name = (function () {
				var self = this;
				return self._$header().$name();
			});
			this.$superclassName = (function () {
				var self = this;
				return self._$header().$superclassName();
			});
			this.$accessModifier = (function () {
				return this.$accessModifier$slot;
			});
			this.$accessModifier$ = (function (v) {
				this.$accessModifier$slot = v;
				return this;
			});
			this.$header = (function () {
				return this.$header$slot;
			});
			this.$header$ = (function (v) {
				this.$header$slot = v;
				return this;
			});
			this.$instanceSide = (function () {
				return this.$instanceSide$slot;
			});
			this.$instanceSide$ = (function (v) {
				this.$instanceSide$slot = v;
				return this;
			});
			this.$classSide = (function () {
				return this.$classSide$slot;
			});
			this.$classSide$ = (function (v) {
				this.$classSide$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`ClassDeclarationAST";
					this._$superInit$NewspeakASTs$ClassDeclarationAST = $.$superInit$NewspeakASTs$ClassDeclarationAST;
					this.$superInit$NewspeakASTs$ClassDeclarationAST = dnuCatcher("$superInit$NewspeakASTs$ClassDeclarationAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$category$ = this._$category$ = $.$category$;
					this.$isClassDeclarationNode = this._$isClassDeclarationNode = $.$isClassDeclarationNode;
					this.$category = this._$category = $.$category;
					this.$classComment = this._$classComment = $.$classComment;
					this.$name = this._$name = $.$name;
					this.$superclassName = this._$superclassName = $.$superclassName;
					this.$accessModifier = this._$accessModifier = $.$accessModifier;
					this.$accessModifier$ = this._$accessModifier$ = $.$accessModifier$;
					this.$header = this._$header = $.$header;
					this.$header$ = this._$header$ = $.$header$;
					this.$instanceSide = this._$instanceSide = $.$instanceSide;
					this.$instanceSide$ = this._$instanceSide$ = $.$instanceSide$;
					this.$classSide = this._$classSide = $.$classSide;
					this.$classSide$ = this._$classSide$ = $.$classSide$;
					this.$enclosingObjects$NewspeakASTs$ClassDeclarationAST = enclosingObjects;
					this.$super$NewspeakASTs$ClassDeclarationAST$slot = runtimeSuperclass;
					this["NewspeakASTs`ClassDeclarationAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$accessModifier$slot = nil;
						this.$header$slot = nil;
						this.$instanceSide$slot = nil;
						this.$classSide$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`ClassDeclarationAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`ClassDeclarationAST";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("makeMixinNamed:factoryMsg:inheriting:body:", false, "public makeMixinNamed: klassName <Token> factoryMsg: cons <MessagePatternAST> inheriting: iList <List[SendAST]> body: body <ClassBodyAST> \r	^ <ClassDeclarationAST> = (\r(* adaptor factory method for transition. Using this method, we can create an AST compatible with the unmodified compiler based on the revised parser. *)\r	| \r	superCall <SendAST> = iList first. \r	instanceInitializer <InitializerAST> = body instanceInitializer.\r	header = ClassHeaderAST new \r				name: klassName token; \r				constructor: cons;\r				superclassName: superCall receiver message selector;\r				superclassCall: superCall receiver;\r				superConstructorCall: superCall message;\r				slots: instanceInitializer slots; \r				isSeq: instanceInitializer isSeq; \r				initExprs: instanceInitializer initializationExpressions; \r				inheritanceChain: iList;\r				classComment: body instanceInitializer classComment;\r				start: klassName start; end: instanceInitializer end.\r	|\r	^new \r		header: header;\r		instanceSide: body instanceSide;\r		classSide: body classSide\r)"),
					new MM("named:factoryMsg:inheriting:body:", false, "public named: klassName <Token> factoryMsg: cons <MessagePatternAST> inheriting: iList <List[SendAST]> body: body <ClassBodyAST> \r	^ <ClassDeclarationAST> = (\r	^body isNil\r		ifTrue:[MixinApplicationClassAST named: klassName token factoryMsg: cons inheriting: iList]\r		ifFalse:[makeMixinNamed: klassName factoryMsg: cons inheriting: iList body: body]\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$makeMixinNamed$factoryMsg$inheriting$body$ = (function ($klassName, $cons, $iList, $body) {
					var self = this;
					var $superCall = nil;
					var $instanceInitializer = nil;
					var $header = nil;
					$superCall = $iList.$first();
					$instanceInitializer = $body.$instanceInitializer();
					$header = (function (cascadeReceiver) {
						cascadeReceiver.$name$($klassName.$token());
						cascadeReceiver.$constructor$($cons);
						cascadeReceiver.$superclassName$($superCall.$receiver().$message().$selector());
						cascadeReceiver.$superclassCall$($superCall.$receiver());
						cascadeReceiver.$superConstructorCall$($superCall.$message());
						cascadeReceiver.$slots$($instanceInitializer.$slots());
						cascadeReceiver.$isSeq$($instanceInitializer.$isSeq());
						cascadeReceiver.$initExprs$($instanceInitializer.$initializationExpressions());
						cascadeReceiver.$inheritanceChain$($iList);
						cascadeReceiver.$classComment$($body.$instanceInitializer().$classComment());
						cascadeReceiver.$start$($klassName.$start());
						return cascadeReceiver.$end$($instanceInitializer.$end());
					})(self.$enclosingObjects$NewspeakASTs$ClassDeclarationAST[0]._$ClassHeaderAST().$new());
					return (function (cascadeReceiver) {
						cascadeReceiver.$header$($header);
						cascadeReceiver.$instanceSide$($body.$instanceSide());
						return cascadeReceiver.$classSide$($body.$classSide());
					})(self._$new());
				});
				this.$named$factoryMsg$inheriting$body$ = (function ($klassName, $cons, $iList, $body) {
					var self = this;
					return $body.$isNil().$ifTrue$ifFalse$((function () {
						return self.$enclosingObjects$NewspeakASTs$ClassDeclarationAST[0]._$MixinApplicationClassAST().$named$factoryMsg$inheriting$($klassName.$token(), $cons, $iList);
					}), (function () {
						return self._$makeMixinNamed$factoryMsg$inheriting$body$($klassName, $cons, $iList, $body);
					}));
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`ClassDeclarationAST";
						this.$new = this._$new = $.$new;
						this.$makeMixinNamed$factoryMsg$inheriting$body$ = this._$makeMixinNamed$factoryMsg$inheriting$body$ = $.$makeMixinNamed$factoryMsg$inheriting$body$;
						this.$named$factoryMsg$inheriting$body$ = this._$named$factoryMsg$inheriting$body$ = $.$named$factoryMsg$inheriting$body$;
						this.$enclosingObjects$NewspeakASTs$ClassDeclarationAST = enclosingObjects;
						this.$super$NewspeakASTs$ClassDeclarationAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$ClassHeaderAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`ClassHeaderAST";
			this.name = "NewspeakASTs`ClassHeaderAST";
			this.header = "ClassHeaderAST = AST (| \r	public name <Symbol>\r	public constructor <MessagePatternAST>\r	public superclassName <Symbol>\r	public superclassCall <NormalSendAST>\r	public superConstructorCall <MessageAST>\r	public slots <List[SlotDefAST]>\r	public isSeq <Boolean>\r	public classComment <String>\r	public category <CategoryAST>\r	public initExprs <List[ExpressionAST]>\r	public inheritanceChain <List[SendAST]>\r |)";
			this.slots = [
				new SM("name", true, false),
				new SM("constructor", true, false),
				new SM("superclassName", true, false),
				new SM("superclassCall", true, false),
				new SM("superConstructorCall", true, false),
				new SM("slots", true, false),
				new SM("isSeq", true, false),
				new SM("classComment", true, false),
				new SM("category", true, false),
				new SM("initExprs", true, false),
				new SM("inheritanceChain", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`ClassHeaderAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("superCall", false, "public superCall ^ <SendAST> = (\r	^inheritanceChain first\r)"),
				new MM("apply:", false, "public apply: visitor = (^visitor classHeaderNode: self)"),
				new MM("name", true, null),
				new MM("name:", true, null),
				new MM("constructor", true, null),
				new MM("constructor:", true, null),
				new MM("superclassName", true, null),
				new MM("superclassName:", true, null),
				new MM("superclassCall", true, null),
				new MM("superclassCall:", true, null),
				new MM("superConstructorCall", true, null),
				new MM("superConstructorCall:", true, null),
				new MM("slots", true, null),
				new MM("slots:", true, null),
				new MM("isSeq", true, null),
				new MM("isSeq:", true, null),
				new MM("classComment", true, null),
				new MM("classComment:", true, null),
				new MM("category", true, null),
				new MM("category:", true, null),
				new MM("initExprs", true, null),
				new MM("initExprs:", true, null),
				new MM("inheritanceChain", true, null),
				new MM("inheritanceChain:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$ClassHeaderAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$ClassHeaderAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$ClassHeaderAST();
				return self;
			});
			this.$superCall = (function () {
				var self = this;
				return self._$inheritanceChain().$first();
			});
			this.$apply$ = (function ($visitor) {
				var self = this;
				return $visitor.$classHeaderNode$(self);
			});
			this.$name = (function () {
				return this.$name$slot;
			});
			this.$name$ = (function (v) {
				this.$name$slot = v;
				return this;
			});
			this.$constructor = (function () {
				return this.$constructor$slot;
			});
			this.$constructor$ = (function (v) {
				this.$constructor$slot = v;
				return this;
			});
			this.$superclassName = (function () {
				return this.$superclassName$slot;
			});
			this.$superclassName$ = (function (v) {
				this.$superclassName$slot = v;
				return this;
			});
			this.$superclassCall = (function () {
				return this.$superclassCall$slot;
			});
			this.$superclassCall$ = (function (v) {
				this.$superclassCall$slot = v;
				return this;
			});
			this.$superConstructorCall = (function () {
				return this.$superConstructorCall$slot;
			});
			this.$superConstructorCall$ = (function (v) {
				this.$superConstructorCall$slot = v;
				return this;
			});
			this.$slots = (function () {
				return this.$slots$slot;
			});
			this.$slots$ = (function (v) {
				this.$slots$slot = v;
				return this;
			});
			this.$isSeq = (function () {
				return this.$isSeq$slot;
			});
			this.$isSeq$ = (function (v) {
				this.$isSeq$slot = v;
				return this;
			});
			this.$classComment = (function () {
				return this.$classComment$slot;
			});
			this.$classComment$ = (function (v) {
				this.$classComment$slot = v;
				return this;
			});
			this.$category = (function () {
				return this.$category$slot;
			});
			this.$category$ = (function (v) {
				this.$category$slot = v;
				return this;
			});
			this.$initExprs = (function () {
				return this.$initExprs$slot;
			});
			this.$initExprs$ = (function (v) {
				this.$initExprs$slot = v;
				return this;
			});
			this.$inheritanceChain = (function () {
				return this.$inheritanceChain$slot;
			});
			this.$inheritanceChain$ = (function (v) {
				this.$inheritanceChain$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`ClassHeaderAST";
					this._$superInit$NewspeakASTs$ClassHeaderAST = $.$superInit$NewspeakASTs$ClassHeaderAST;
					this.$superInit$NewspeakASTs$ClassHeaderAST = dnuCatcher("$superInit$NewspeakASTs$ClassHeaderAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$superCall = this._$superCall = $.$superCall;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$name = this._$name = $.$name;
					this.$name$ = this._$name$ = $.$name$;
					this.$constructor = this._$constructor = $.$constructor;
					this.$constructor$ = this._$constructor$ = $.$constructor$;
					this.$superclassName = this._$superclassName = $.$superclassName;
					this.$superclassName$ = this._$superclassName$ = $.$superclassName$;
					this.$superclassCall = this._$superclassCall = $.$superclassCall;
					this.$superclassCall$ = this._$superclassCall$ = $.$superclassCall$;
					this.$superConstructorCall = this._$superConstructorCall = $.$superConstructorCall;
					this.$superConstructorCall$ = this._$superConstructorCall$ = $.$superConstructorCall$;
					this.$slots = this._$slots = $.$slots;
					this.$slots$ = this._$slots$ = $.$slots$;
					this.$isSeq = this._$isSeq = $.$isSeq;
					this.$isSeq$ = this._$isSeq$ = $.$isSeq$;
					this.$classComment = this._$classComment = $.$classComment;
					this.$classComment$ = this._$classComment$ = $.$classComment$;
					this.$category = this._$category = $.$category;
					this.$category$ = this._$category$ = $.$category$;
					this.$initExprs = this._$initExprs = $.$initExprs;
					this.$initExprs$ = this._$initExprs$ = $.$initExprs$;
					this.$inheritanceChain = this._$inheritanceChain = $.$inheritanceChain;
					this.$inheritanceChain$ = this._$inheritanceChain$ = $.$inheritanceChain$;
					this.$enclosingObjects$NewspeakASTs$ClassHeaderAST = enclosingObjects;
					this.$super$NewspeakASTs$ClassHeaderAST$slot = runtimeSuperclass;
					this["NewspeakASTs`ClassHeaderAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$name$slot = nil;
						this.$constructor$slot = nil;
						this.$superclassName$slot = nil;
						this.$superclassCall$slot = nil;
						this.$superConstructorCall$slot = nil;
						this.$slots$slot = nil;
						this.$isSeq$slot = nil;
						this.$classComment$slot = nil;
						this.$category$slot = nil;
						this.$initExprs$slot = nil;
						this.$inheritanceChain$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`ClassHeaderAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`ClassHeaderAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`ClassHeaderAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$ClassHeaderAST = enclosingObjects;
						this.$super$NewspeakASTs$ClassHeaderAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$ClassPrefixAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`ClassPrefixAST";
			this.name = "NewspeakASTs`ClassPrefixAST";
			this.header = "ClassPrefixAST name: n \r	constructor: k\r	superclassName: sn \r	superclassCall: scc 					                         	\r	superConstructorCall: sk = AST ((* A class prefix defines everything about a class except for its mixin. \rIt is intended to serve as a common component between ordinary class declarations and mixin applications.\r\rFor Squeak compatibility, we maintain a category as well (ugh).\r*)|\r	public name <Symbol> = n.\r	public constructor <MessagePatternAST> = k.\r	public superclassName <Symbol> = sn.\r	public superclassCall <NormalSendAST> = scc.\r	public superConstructorCall <MessageAST> = sk.\r	public category <CategoryAST>\r|)";
			this.slots = [
				new SM("name", false, false),
				new SM("constructor", false, false),
				new SM("superclassName", false, false),
				new SM("superclassCall", false, false),
				new SM("superConstructorCall", false, false),
				new SM("category", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`ClassPrefixAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("apply:", false, "public apply: visitor = (\r	^visitor classPrefix: self\r)"),
				new MM("name", true, null),
				new MM("setOnce`name:", true, null),
				new MM("constructor", true, null),
				new MM("setOnce`constructor:", true, null),
				new MM("superclassName", true, null),
				new MM("setOnce`superclassName:", true, null),
				new MM("superclassCall", true, null),
				new MM("setOnce`superclassCall:", true, null),
				new MM("superConstructorCall", true, null),
				new MM("setOnce`superConstructorCall:", true, null),
				new MM("category", true, null),
				new MM("category:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$ClassPrefixAST = (function ($n, $k, $sn, $scc, $sk) {
				var self = this;
				self.$super$NewspeakASTs$ClassPrefixAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($n, $k, $sn, $scc, $sk) {
				var self = this;
				self._$superInit$NewspeakASTs$ClassPrefixAST($n, $k, $sn, $scc, $sk);
				self._$setOnce$name$($n);
				self._$setOnce$constructor$($k);
				self._$setOnce$superclassName$($sn);
				self._$setOnce$superclassCall$($scc);
				self._$setOnce$superConstructorCall$($sk);
				return self;
			});
			this.$apply$ = (function ($visitor) {
				var self = this;
				return $visitor.$classPrefix$(self);
			});
			this.$name = (function () {
				return this.$name$slot;
			});
			this.$setOnce$name$ = (function (v) {
				this.$name$slot = v;
				return this;
			});
			this.$constructor = (function () {
				return this.$constructor$slot;
			});
			this.$setOnce$constructor$ = (function (v) {
				this.$constructor$slot = v;
				return this;
			});
			this.$superclassName = (function () {
				return this.$superclassName$slot;
			});
			this.$setOnce$superclassName$ = (function (v) {
				this.$superclassName$slot = v;
				return this;
			});
			this.$superclassCall = (function () {
				return this.$superclassCall$slot;
			});
			this.$setOnce$superclassCall$ = (function (v) {
				this.$superclassCall$slot = v;
				return this;
			});
			this.$superConstructorCall = (function () {
				return this.$superConstructorCall$slot;
			});
			this.$setOnce$superConstructorCall$ = (function (v) {
				this.$superConstructorCall$slot = v;
				return this;
			});
			this.$category = (function () {
				return this.$category$slot;
			});
			this.$category$ = (function (v) {
				this.$category$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`ClassPrefixAST";
					this._$superInit$NewspeakASTs$ClassPrefixAST = $.$superInit$NewspeakASTs$ClassPrefixAST;
					this.$superInit$NewspeakASTs$ClassPrefixAST = dnuCatcher("$superInit$NewspeakASTs$ClassPrefixAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$name = this._$name = $.$name;
					this.$setOnce$name$ = this._$setOnce$name$ = $.$setOnce$name$;
					this.$constructor = this._$constructor = $.$constructor;
					this.$setOnce$constructor$ = this._$setOnce$constructor$ = $.$setOnce$constructor$;
					this.$superclassName = this._$superclassName = $.$superclassName;
					this.$setOnce$superclassName$ = this._$setOnce$superclassName$ = $.$setOnce$superclassName$;
					this.$superclassCall = this._$superclassCall = $.$superclassCall;
					this.$setOnce$superclassCall$ = this._$setOnce$superclassCall$ = $.$setOnce$superclassCall$;
					this.$superConstructorCall = this._$superConstructorCall = $.$superConstructorCall;
					this.$setOnce$superConstructorCall$ = this._$setOnce$superConstructorCall$ = $.$setOnce$superConstructorCall$;
					this.$category = this._$category = $.$category;
					this.$category$ = this._$category$ = $.$category$;
					this.$enclosingObjects$NewspeakASTs$ClassPrefixAST = enclosingObjects;
					this.$super$NewspeakASTs$ClassPrefixAST$slot = runtimeSuperclass;
					this["NewspeakASTs`ClassPrefixAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$name$slot = nil;
						this.$constructor$slot = nil;
						this.$superclassName$slot = nil;
						this.$superclassCall$slot = nil;
						this.$superConstructorCall$slot = nil;
						this.$category$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`ClassPrefixAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`ClassPrefixAST";
				this.slots = [];
				this.methods = [new MM("name:constructor:superclassName:superclassCall:superConstructorCall:", true, null)];
				this.nestedClasses = [];
				this.$name$constructor$superclassName$superclassCall$superConstructorCall$ = (function ($n, $k, $sn, $scc, $sk) {
					return (new this.nonMeta.basicNew()).$instance$initializer($n, $k, $sn, $scc, $sk);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`ClassPrefixAST";
						this.$name$constructor$superclassName$superclassCall$superConstructorCall$ = this._$name$constructor$superclassName$superclassCall$superConstructorCall$ = $.$name$constructor$superclassName$superclassCall$superConstructorCall$;
						this.$enclosingObjects$NewspeakASTs$ClassPrefixAST = enclosingObjects;
						this.$super$NewspeakASTs$ClassPrefixAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$CodeBodyAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`CodeBodyAST";
			this.name = "NewspeakASTs`CodeBodyAST";
			this.header = "CodeBodyAST = AST (|\r	public parameters <List[ParameterAST]>\r	public temporaries <List[TemporaryAST]>\r	public statements <List[StatementAST]>\r	public isSeq <Boolean> ::=true.\r	public literalMessages <List[MessageAST]>\r|)";
			this.slots = [
				new SM("parameters", true, false),
				new SM("temporaries", true, false),
				new SM("statements", true, false),
				new SM("isSeq", true, false),
				new SM("literalMessages", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`CodeBodyAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("isExpressionNode", false, "public isExpressionNode = (\r	#BOGUS. (* Added for expansion of setter::exp to (t:=exp. setter:exp. t).  This might not play well with expectations in the rest of the compiler?  --Ryan *)\r	^true\r)"),
				new MM("parameters:temporaries:statements:", false, "public parameters: pars <List[ParameterAST]> temporaries: temps <List[TemporaryAST]> statements: stats <List[StatementAST]> = ( \r	self parameters: pars; temporaries: temps; statements: stats\r)"),
				new MM("temporaries:statements:", false, "public temporaries: temps <List[TemporaryAST]> statements: stats <List[StatementAST]> = (\r	self parameters: OrderedCollection new; temporaries: temps; statements: stats\r)"),
				new MM("isCodeBodyNode", false, "public isCodeBodyNode = (^true)"),
				new MM("apply:", false, "public apply: aTool = (\r	^aTool codeBodyNode: self.\r)"),
				new MM("parameters", true, null),
				new MM("parameters:", true, null),
				new MM("temporaries", true, null),
				new MM("temporaries:", true, null),
				new MM("statements", true, null),
				new MM("statements:", true, null),
				new MM("isSeq", true, null),
				new MM("isSeq:", true, null),
				new MM("literalMessages", true, null),
				new MM("literalMessages:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$CodeBodyAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$CodeBodyAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$CodeBodyAST();
				self._$isSeq$(true);
				return self;
			});
			this.$isExpressionNode = (function () {
				var self = this;
				"BOGUS";
				return true;
			});
			this.$parameters$temporaries$statements$ = (function ($pars, $temps, $stats) {
				var self = this;
				(function (cascadeReceiver) {
					cascadeReceiver.$parameters$($pars);
					cascadeReceiver.$temporaries$($temps);
					return cascadeReceiver.$statements$($stats);
				})(self);
				return self;
			});
			this.$temporaries$statements$ = (function ($temps, $stats) {
				var self = this;
				(function (cascadeReceiver) {
					cascadeReceiver.$parameters$($0.$OrderedCollection.call(self.$enclosingObjects$NewspeakASTs$CodeBodyAST[0]).$new());
					cascadeReceiver.$temporaries$($temps);
					return cascadeReceiver.$statements$($stats);
				})(self);
				return self;
			});
			this.$isCodeBodyNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$codeBodyNode$(self);
			});
			this.$parameters = (function () {
				return this.$parameters$slot;
			});
			this.$parameters$ = (function (v) {
				this.$parameters$slot = v;
				return this;
			});
			this.$temporaries = (function () {
				return this.$temporaries$slot;
			});
			this.$temporaries$ = (function (v) {
				this.$temporaries$slot = v;
				return this;
			});
			this.$statements = (function () {
				return this.$statements$slot;
			});
			this.$statements$ = (function (v) {
				this.$statements$slot = v;
				return this;
			});
			this.$isSeq = (function () {
				return this.$isSeq$slot;
			});
			this.$isSeq$ = (function (v) {
				this.$isSeq$slot = v;
				return this;
			});
			this.$literalMessages = (function () {
				return this.$literalMessages$slot;
			});
			this.$literalMessages$ = (function (v) {
				this.$literalMessages$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`CodeBodyAST";
					this._$superInit$NewspeakASTs$CodeBodyAST = $.$superInit$NewspeakASTs$CodeBodyAST;
					this.$superInit$NewspeakASTs$CodeBodyAST = dnuCatcher("$superInit$NewspeakASTs$CodeBodyAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
					this.$parameters$temporaries$statements$ = this._$parameters$temporaries$statements$ = $.$parameters$temporaries$statements$;
					this.$temporaries$statements$ = this._$temporaries$statements$ = $.$temporaries$statements$;
					this.$isCodeBodyNode = this._$isCodeBodyNode = $.$isCodeBodyNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$parameters = this._$parameters = $.$parameters;
					this.$parameters$ = this._$parameters$ = $.$parameters$;
					this.$temporaries = this._$temporaries = $.$temporaries;
					this.$temporaries$ = this._$temporaries$ = $.$temporaries$;
					this.$statements = this._$statements = $.$statements;
					this.$statements$ = this._$statements$ = $.$statements$;
					this.$isSeq = this._$isSeq = $.$isSeq;
					this.$isSeq$ = this._$isSeq$ = $.$isSeq$;
					this.$literalMessages = this._$literalMessages = $.$literalMessages;
					this.$literalMessages$ = this._$literalMessages$ = $.$literalMessages$;
					this.$enclosingObjects$NewspeakASTs$CodeBodyAST = enclosingObjects;
					this.$super$NewspeakASTs$CodeBodyAST$slot = runtimeSuperclass;
					this["NewspeakASTs`CodeBodyAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$parameters$slot = nil;
						this.$temporaries$slot = nil;
						this.$statements$slot = nil;
						this.$isSeq$slot = nil;
						this.$literalMessages$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`CodeBodyAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`CodeBodyAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`CodeBodyAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$CodeBodyAST = enclosingObjects;
						this.$super$NewspeakASTs$CodeBodyAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$ImmutableSlotDefAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`ImmutableSlotDefAST";
			this.name = "NewspeakASTs`ImmutableSlotDefAST";
			this.header = "ImmutableSlotDefAST = SlotDefAST ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`NewspeakASTs`ImmutableSlotDefAST", true, "SlotDefAST"),
				new MM("instance`initializer", true, "SlotDefAST"),
				new MM("isMutable", false, "public isMutable ^<Boolean> = (\r	^false\r)"),
				new MM("isMutableSlot", false, "public isMutableSlot ^<Boolean> = (\r	^false\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$ImmutableSlotDefAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$ImmutableSlotDefAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$ImmutableSlotDefAST();
				return self;
			});
			this.$isMutable = (function () {
				var self = this;
				return false;
			});
			this.$isMutableSlot = (function () {
				var self = this;
				return false;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`ImmutableSlotDefAST";
					this._$superInit$NewspeakASTs$ImmutableSlotDefAST = $.$superInit$NewspeakASTs$ImmutableSlotDefAST;
					this.$superInit$NewspeakASTs$ImmutableSlotDefAST = dnuCatcher("$superInit$NewspeakASTs$ImmutableSlotDefAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isMutable = this._$isMutable = $.$isMutable;
					this.$isMutableSlot = this._$isMutableSlot = $.$isMutableSlot;
					this.$enclosingObjects$NewspeakASTs$ImmutableSlotDefAST = enclosingObjects;
					this.$super$NewspeakASTs$ImmutableSlotDefAST$slot = runtimeSuperclass;
					this["NewspeakASTs`ImmutableSlotDefAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["NewspeakASTs`ImmutableSlotDefAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`ImmutableSlotDefAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`ImmutableSlotDefAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$ImmutableSlotDefAST = enclosingObjects;
						this.$super$NewspeakASTs$ImmutableSlotDefAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$InitializerAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`InitializerAST";
			this.name = "NewspeakASTs`InitializerAST";
			this.header = "InitializerAST slots: s initializerExpressions: es comment: c slotsAreSequential: seq = AST (\r(* AST for  an instance initializer clause. *)|\r	public slots = s.\r	public initializationExpressions <List[ExpressionAST]> = es.\r	public classComment = c.\r	public isSeq <Boolean> = seq.\r|)";
			this.slots = [
				new SM("slots", false, false),
				new SM("initializationExpressions", false, false),
				new SM("classComment", false, false),
				new SM("isSeq", false, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`InitializerAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("slots", true, null),
				new MM("setOnce`slots:", true, null),
				new MM("initializationExpressions", true, null),
				new MM("setOnce`initializationExpressions:", true, null),
				new MM("classComment", true, null),
				new MM("setOnce`classComment:", true, null),
				new MM("isSeq", true, null),
				new MM("setOnce`isSeq:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$InitializerAST = (function ($s, $es, $c, $seq) {
				var self = this;
				self.$super$NewspeakASTs$InitializerAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($s, $es, $c, $seq) {
				var self = this;
				self._$superInit$NewspeakASTs$InitializerAST($s, $es, $c, $seq);
				self._$setOnce$slots$($s);
				self._$setOnce$initializationExpressions$($es);
				self._$setOnce$classComment$($c);
				self._$setOnce$isSeq$($seq);
				return self;
			});
			this.$slots = (function () {
				return this.$slots$slot;
			});
			this.$setOnce$slots$ = (function (v) {
				this.$slots$slot = v;
				return this;
			});
			this.$initializationExpressions = (function () {
				return this.$initializationExpressions$slot;
			});
			this.$setOnce$initializationExpressions$ = (function (v) {
				this.$initializationExpressions$slot = v;
				return this;
			});
			this.$classComment = (function () {
				return this.$classComment$slot;
			});
			this.$setOnce$classComment$ = (function (v) {
				this.$classComment$slot = v;
				return this;
			});
			this.$isSeq = (function () {
				return this.$isSeq$slot;
			});
			this.$setOnce$isSeq$ = (function (v) {
				this.$isSeq$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`InitializerAST";
					this._$superInit$NewspeakASTs$InitializerAST = $.$superInit$NewspeakASTs$InitializerAST;
					this.$superInit$NewspeakASTs$InitializerAST = dnuCatcher("$superInit$NewspeakASTs$InitializerAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$slots = this._$slots = $.$slots;
					this.$setOnce$slots$ = this._$setOnce$slots$ = $.$setOnce$slots$;
					this.$initializationExpressions = this._$initializationExpressions = $.$initializationExpressions;
					this.$setOnce$initializationExpressions$ = this._$setOnce$initializationExpressions$ = $.$setOnce$initializationExpressions$;
					this.$classComment = this._$classComment = $.$classComment;
					this.$setOnce$classComment$ = this._$setOnce$classComment$ = $.$setOnce$classComment$;
					this.$isSeq = this._$isSeq = $.$isSeq;
					this.$setOnce$isSeq$ = this._$setOnce$isSeq$ = $.$setOnce$isSeq$;
					this.$enclosingObjects$NewspeakASTs$InitializerAST = enclosingObjects;
					this.$super$NewspeakASTs$InitializerAST$slot = runtimeSuperclass;
					this["NewspeakASTs`InitializerAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$slots$slot = nil;
						this.$initializationExpressions$slot = nil;
						this.$classComment$slot = nil;
						this.$isSeq$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`InitializerAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`InitializerAST";
				this.slots = [];
				this.methods = [new MM("slots:initializerExpressions:comment:slotsAreSequential:", true, null)];
				this.nestedClasses = [];
				this.$slots$initializerExpressions$comment$slotsAreSequential$ = (function ($s, $es, $c, $seq) {
					return (new this.nonMeta.basicNew()).$instance$initializer($s, $es, $c, $seq);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`InitializerAST";
						this.$slots$initializerExpressions$comment$slotsAreSequential$ = this._$slots$initializerExpressions$comment$slotsAreSequential$ = $.$slots$initializerExpressions$comment$slotsAreSequential$;
						this.$enclosingObjects$NewspeakASTs$InitializerAST = enclosingObjects;
						this.$super$NewspeakASTs$InitializerAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$KeywordPatternAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`KeywordPatternAST";
			this.name = "NewspeakASTs`KeywordPatternAST";
			this.header = "KeywordPatternAST = PatternAST (|\r	public keywords <TupleAST>\r	public patterns <TupleAST>\r|)";
			this.slots = [
				new SM("keywords", true, false),
				new SM("patterns", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`KeywordPatternAST", true, "PatternAST"),
				new MM("instance`initializer", true, "PatternAST"),
				new MM("apply:", false, "public apply: tool = (\r	^tool keywordPatternNode: self.\r)"),
				new MM("isKeywordPatternNode", false, "public isKeywordPatternNode = (\r	^ true\r)"),
				new MM("keywords", true, null),
				new MM("keywords:", true, null),
				new MM("patterns", true, null),
				new MM("patterns:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$KeywordPatternAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$KeywordPatternAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$KeywordPatternAST();
				return self;
			});
			this.$apply$ = (function ($tool) {
				var self = this;
				return $tool.$keywordPatternNode$(self);
			});
			this.$isKeywordPatternNode = (function () {
				var self = this;
				return true;
			});
			this.$keywords = (function () {
				return this.$keywords$slot;
			});
			this.$keywords$ = (function (v) {
				this.$keywords$slot = v;
				return this;
			});
			this.$patterns = (function () {
				return this.$patterns$slot;
			});
			this.$patterns$ = (function (v) {
				this.$patterns$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`KeywordPatternAST";
					this._$superInit$NewspeakASTs$KeywordPatternAST = $.$superInit$NewspeakASTs$KeywordPatternAST;
					this.$superInit$NewspeakASTs$KeywordPatternAST = dnuCatcher("$superInit$NewspeakASTs$KeywordPatternAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$isKeywordPatternNode = this._$isKeywordPatternNode = $.$isKeywordPatternNode;
					this.$keywords = this._$keywords = $.$keywords;
					this.$keywords$ = this._$keywords$ = $.$keywords$;
					this.$patterns = this._$patterns = $.$patterns;
					this.$patterns$ = this._$patterns$ = $.$patterns$;
					this.$enclosingObjects$NewspeakASTs$KeywordPatternAST = enclosingObjects;
					this.$super$NewspeakASTs$KeywordPatternAST$slot = runtimeSuperclass;
					this["NewspeakASTs`KeywordPatternAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$keywords$slot = nil;
						this.$patterns$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`KeywordPatternAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`KeywordPatternAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`KeywordPatternAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$KeywordPatternAST = enclosingObjects;
						this.$super$NewspeakASTs$KeywordPatternAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$KeywordPatternPairAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`KeywordPatternPairAST";
			this.name = "NewspeakASTs`KeywordPatternPairAST";
			this.header = "KeywordPatternPairAST = AST (|\r	keyword <Symbol>\r	pattern\r|)";
			this.slots = [
				new SM("keyword", true, false),
				new SM("pattern", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`KeywordPatternPairAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("isKeywordPatternPairNode", false, "isKeywordPatternPairNode = (\r	^ true\r)"),
				new MM("keyword", true, null),
				new MM("keyword:", true, null),
				new MM("pattern", true, null),
				new MM("pattern:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$KeywordPatternPairAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$KeywordPatternPairAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$KeywordPatternPairAST();
				return self;
			});
			this.$isKeywordPatternPairNode = (function () {
				var self = this;
				return true;
			});
			this.$keyword = (function () {
				return this.$keyword$slot;
			});
			this.$keyword$ = (function (v) {
				this.$keyword$slot = v;
				return this;
			});
			this.$pattern = (function () {
				return this.$pattern$slot;
			});
			this.$pattern$ = (function (v) {
				this.$pattern$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`KeywordPatternPairAST";
					this._$superInit$NewspeakASTs$KeywordPatternPairAST = $.$superInit$NewspeakASTs$KeywordPatternPairAST;
					this.$superInit$NewspeakASTs$KeywordPatternPairAST = dnuCatcher("$superInit$NewspeakASTs$KeywordPatternPairAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$isKeywordPatternPairNode = $.$isKeywordPatternPairNode;
					this.$isKeywordPatternPairNode = dnuCatcher("$isKeywordPatternPairNode");
					this._$keyword = $.$keyword;
					this.$keyword = dnuCatcher("$keyword");
					this._$keyword$ = $.$keyword$;
					this.$keyword$ = dnuCatcher("$keyword$");
					this._$pattern = $.$pattern;
					this.$pattern = dnuCatcher("$pattern");
					this._$pattern$ = $.$pattern$;
					this.$pattern$ = dnuCatcher("$pattern$");
					this.$enclosingObjects$NewspeakASTs$KeywordPatternPairAST = enclosingObjects;
					this.$super$NewspeakASTs$KeywordPatternPairAST$slot = runtimeSuperclass;
					this["NewspeakASTs`KeywordPatternPairAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$keyword$slot = nil;
						this.$pattern$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`KeywordPatternPairAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`KeywordPatternPairAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`KeywordPatternPairAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$KeywordPatternPairAST = enclosingObjects;
						this.$super$NewspeakASTs$KeywordPatternPairAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$LiteralAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`LiteralAST";
			this.name = "NewspeakASTs`LiteralAST";
			this.header = "LiteralAST = AST (|\r	public value <Object>\r|)";
			this.slots = [new SM("value", true, false)];
			this.methods = [
				new MM("superInit`NewspeakASTs`LiteralAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("isExpressionNode", false, "public isExpressionNode = (^true)"),
				new MM("isLiteralNode", false, "public isLiteralNode = (^true)"),
				new MM("value", true, null),
				new MM("value:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$LiteralAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$LiteralAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$LiteralAST();
				return self;
			});
			this.$isExpressionNode = (function () {
				var self = this;
				return true;
			});
			this.$isLiteralNode = (function () {
				var self = this;
				return true;
			});
			this.$value = (function () {
				return this.$value$slot;
			});
			this.$value$ = (function (v) {
				this.$value$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`LiteralAST";
					this._$superInit$NewspeakASTs$LiteralAST = $.$superInit$NewspeakASTs$LiteralAST;
					this.$superInit$NewspeakASTs$LiteralAST = dnuCatcher("$superInit$NewspeakASTs$LiteralAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
					this.$isLiteralNode = this._$isLiteralNode = $.$isLiteralNode;
					this.$value = this._$value = $.$value;
					this.$value$ = this._$value$ = $.$value$;
					this.$enclosingObjects$NewspeakASTs$LiteralAST = enclosingObjects;
					this.$super$NewspeakASTs$LiteralAST$slot = runtimeSuperclass;
					this["NewspeakASTs`LiteralAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$value$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`LiteralAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`LiteralAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`LiteralAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$LiteralAST = enclosingObjects;
						this.$super$NewspeakASTs$LiteralAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$LiteralPatternAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`LiteralPatternAST";
			this.name = "NewspeakASTs`LiteralPatternAST";
			this.header = "LiteralPatternAST = PatternAST (|\r	public literal <LiteralAST>\r|)";
			this.slots = [new SM("literal", true, false)];
			this.methods = [
				new MM("superInit`NewspeakASTs`LiteralPatternAST", true, "PatternAST"),
				new MM("instance`initializer", true, "PatternAST"),
				new MM("apply:", false, "public apply: tool = (\r	^ tool literalPatternNode: self.\r)"),
				new MM("isLiteralPatternNode", false, "public isLiteralPatternNode = (\r	^ true\r)"),
				new MM("literal", true, null),
				new MM("literal:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$LiteralPatternAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$LiteralPatternAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$LiteralPatternAST();
				return self;
			});
			this.$apply$ = (function ($tool) {
				var self = this;
				return $tool.$literalPatternNode$(self);
			});
			this.$isLiteralPatternNode = (function () {
				var self = this;
				return true;
			});
			this.$literal = (function () {
				return this.$literal$slot;
			});
			this.$literal$ = (function (v) {
				this.$literal$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`LiteralPatternAST";
					this._$superInit$NewspeakASTs$LiteralPatternAST = $.$superInit$NewspeakASTs$LiteralPatternAST;
					this.$superInit$NewspeakASTs$LiteralPatternAST = dnuCatcher("$superInit$NewspeakASTs$LiteralPatternAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$isLiteralPatternNode = this._$isLiteralPatternNode = $.$isLiteralPatternNode;
					this.$literal = this._$literal = $.$literal;
					this.$literal$ = this._$literal$ = $.$literal$;
					this.$enclosingObjects$NewspeakASTs$LiteralPatternAST = enclosingObjects;
					this.$super$NewspeakASTs$LiteralPatternAST$slot = runtimeSuperclass;
					this["NewspeakASTs`LiteralPatternAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$literal$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`LiteralPatternAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`LiteralPatternAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`LiteralPatternAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$LiteralPatternAST = enclosingObjects;
						this.$super$NewspeakASTs$LiteralPatternAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$MessageAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`MessageAST";
			this.name = "NewspeakASTs`MessageAST";
			this.header = "MessageAST = AST (| \r	public selector <Symbol>\r	public arguments <List[ExpressionAST]>\r	public isEventual <Boolean> ::= false.\r|)";
			this.slots = [
				new SM("selector", true, false),
				new SM("arguments", true, false),
				new SM("isEventual", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`MessageAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("send:with:", false, "public send: sel <Symbol> with: args <List[ExpressionAST]> = (\r    self selector: sel; arguments: args\r)"),
				new MM("isMessageNode", false, "public isMessageNode = (^true)"),
				new MM("apply:", false, "public apply: aTool = (\r	^aTool messageNode: self.\r)"),
				new MM("selector", true, null),
				new MM("selector:", true, null),
				new MM("arguments", true, null),
				new MM("arguments:", true, null),
				new MM("isEventual", true, null),
				new MM("isEventual:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$MessageAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$MessageAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$MessageAST();
				self._$isEventual$(false);
				return self;
			});
			this.$send$with$ = (function ($sel, $args) {
				var self = this;
				(function (cascadeReceiver) {
					cascadeReceiver.$selector$($sel);
					return cascadeReceiver.$arguments$($args);
				})(self);
				return self;
			});
			this.$isMessageNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$messageNode$(self);
			});
			this.$selector = (function () {
				return this.$selector$slot;
			});
			this.$selector$ = (function (v) {
				this.$selector$slot = v;
				return this;
			});
			this.$arguments = (function () {
				return this.$arguments$slot;
			});
			this.$arguments$ = (function (v) {
				this.$arguments$slot = v;
				return this;
			});
			this.$isEventual = (function () {
				return this.$isEventual$slot;
			});
			this.$isEventual$ = (function (v) {
				this.$isEventual$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`MessageAST";
					this._$superInit$NewspeakASTs$MessageAST = $.$superInit$NewspeakASTs$MessageAST;
					this.$superInit$NewspeakASTs$MessageAST = dnuCatcher("$superInit$NewspeakASTs$MessageAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$send$with$ = this._$send$with$ = $.$send$with$;
					this.$isMessageNode = this._$isMessageNode = $.$isMessageNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$selector = this._$selector = $.$selector;
					this.$selector$ = this._$selector$ = $.$selector$;
					this.$arguments = this._$arguments = $.$arguments;
					this.$arguments$ = this._$arguments$ = $.$arguments$;
					this.$isEventual = this._$isEventual = $.$isEventual;
					this.$isEventual$ = this._$isEventual$ = $.$isEventual$;
					this.$enclosingObjects$NewspeakASTs$MessageAST = enclosingObjects;
					this.$super$NewspeakASTs$MessageAST$slot = runtimeSuperclass;
					this["NewspeakASTs`MessageAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$selector$slot = nil;
						this.$arguments$slot = nil;
						this.$isEventual$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`MessageAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`MessageAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`MessageAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$MessageAST = enclosingObjects;
						this.$super$NewspeakASTs$MessageAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$MessagePatternAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`MessagePatternAST";
			this.name = "NewspeakASTs`MessagePatternAST";
			this.header = "MessagePatternAST = AST (| \r	public selector <Symbol>\r	public parameters <List[ParameterAST]>\r	public returnType <TypeAST>\r	public typePattern <TypePatternAST>\r	public accessModifier\r|)";
			this.slots = [
				new SM("selector", true, false),
				new SM("parameters", true, false),
				new SM("returnType", true, false),
				new SM("typePattern", true, false),
				new SM("accessModifier", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`MessagePatternAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("selector:parameters:", false, "public selector: s <Symbol> parameters: p <List[ParameterAST]> = (\r  self selector: s; parameters: p\r)"),
				new MM("selector:parameters:returnType:", false, "public selector: s <Symbol> parameters: p <List[ParameterAST]> returnType: t <TypeAST> = (\r  self selector: s; parameters: p; returnType: t\r)"),
				new MM("selector:parameters:returnType:typePattern:", false, "public selector: s <Symbol> parameters: p <List[ParameterAST]> returnType: t  <TypeAST> typePattern: tp <TypePatternAST> = (\r  self selector: s; parameters: p; returnType: t; typePattern: tp\r)"),
				new MM("selector:returnType:", false, "public selector: s <Symbol> returnType: t <TypeAST> = (\r  self selector: s; returnType: t\r)"),
				new MM("concreteEnd", false, "public concreteEnd = (\r     self typePattern isNil ifFalse: [^self typePattern concreteEnd].\r     self returnType isNil ifFalse: [^self returnType concreteEnd].\r     self parameters isEmpty ifFalse: [^self parameters last concreteEnd].\r     ^super concreteEnd\r)"),
				new MM("isMessagePatternNode", false, "public isMessagePatternNode = (^true)"),
				new MM("apply:", false, "public apply: aTool = (\r	^aTool messagePatternNode: self.\r)"),
				new MM("selector", true, null),
				new MM("selector:", true, null),
				new MM("parameters", true, null),
				new MM("parameters:", true, null),
				new MM("returnType", true, null),
				new MM("returnType:", true, null),
				new MM("typePattern", true, null),
				new MM("typePattern:", true, null),
				new MM("accessModifier", true, null),
				new MM("accessModifier:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$MessagePatternAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$MessagePatternAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$MessagePatternAST();
				return self;
			});
			this.$selector$parameters$ = (function ($s, $p) {
				var self = this;
				(function (cascadeReceiver) {
					cascadeReceiver.$selector$($s);
					return cascadeReceiver.$parameters$($p);
				})(self);
				return self;
			});
			this.$selector$parameters$returnType$ = (function ($s, $p, $t) {
				var self = this;
				(function (cascadeReceiver) {
					cascadeReceiver.$selector$($s);
					cascadeReceiver.$parameters$($p);
					return cascadeReceiver.$returnType$($t);
				})(self);
				return self;
			});
			this.$selector$parameters$returnType$typePattern$ = (function ($s, $p, $t, $tp) {
				var self = this;
				(function (cascadeReceiver) {
					cascadeReceiver.$selector$($s);
					cascadeReceiver.$parameters$($p);
					cascadeReceiver.$returnType$($t);
					return cascadeReceiver.$typePattern$($tp);
				})(self);
				return self;
			});
			this.$selector$returnType$ = (function ($s, $t) {
				var self = this;
				(function (cascadeReceiver) {
					cascadeReceiver.$selector$($s);
					return cascadeReceiver.$returnType$($t);
				})(self);
				return self;
			});
			this.$concreteEnd = (function () {
				var self = this;
				if (!self._$typePattern().$isNil()) {
					return self._$typePattern().$concreteEnd();
				} else {
					nil;
				};
				if (!self._$returnType().$isNil()) {
					return self._$returnType().$concreteEnd();
				} else {
					nil;
				};
				if (!self._$parameters().$isEmpty()) {
					return self._$parameters().$last().$concreteEnd();
				} else {
					nil;
				};
				return self.$super$NewspeakASTs$MessagePatternAST$slot._$concreteEnd.call(self);
			});
			this.$isMessagePatternNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$messagePatternNode$(self);
			});
			this.$selector = (function () {
				return this.$selector$slot;
			});
			this.$selector$ = (function (v) {
				this.$selector$slot = v;
				return this;
			});
			this.$parameters = (function () {
				return this.$parameters$slot;
			});
			this.$parameters$ = (function (v) {
				this.$parameters$slot = v;
				return this;
			});
			this.$returnType = (function () {
				return this.$returnType$slot;
			});
			this.$returnType$ = (function (v) {
				this.$returnType$slot = v;
				return this;
			});
			this.$typePattern = (function () {
				return this.$typePattern$slot;
			});
			this.$typePattern$ = (function (v) {
				this.$typePattern$slot = v;
				return this;
			});
			this.$accessModifier = (function () {
				return this.$accessModifier$slot;
			});
			this.$accessModifier$ = (function (v) {
				this.$accessModifier$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`MessagePatternAST";
					this._$superInit$NewspeakASTs$MessagePatternAST = $.$superInit$NewspeakASTs$MessagePatternAST;
					this.$superInit$NewspeakASTs$MessagePatternAST = dnuCatcher("$superInit$NewspeakASTs$MessagePatternAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$selector$parameters$ = this._$selector$parameters$ = $.$selector$parameters$;
					this.$selector$parameters$returnType$ = this._$selector$parameters$returnType$ = $.$selector$parameters$returnType$;
					this.$selector$parameters$returnType$typePattern$ = this._$selector$parameters$returnType$typePattern$ = $.$selector$parameters$returnType$typePattern$;
					this.$selector$returnType$ = this._$selector$returnType$ = $.$selector$returnType$;
					this.$concreteEnd = this._$concreteEnd = $.$concreteEnd;
					this.$isMessagePatternNode = this._$isMessagePatternNode = $.$isMessagePatternNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$selector = this._$selector = $.$selector;
					this.$selector$ = this._$selector$ = $.$selector$;
					this.$parameters = this._$parameters = $.$parameters;
					this.$parameters$ = this._$parameters$ = $.$parameters$;
					this.$returnType = this._$returnType = $.$returnType;
					this.$returnType$ = this._$returnType$ = $.$returnType$;
					this.$typePattern = this._$typePattern = $.$typePattern;
					this.$typePattern$ = this._$typePattern$ = $.$typePattern$;
					this.$accessModifier = this._$accessModifier = $.$accessModifier;
					this.$accessModifier$ = this._$accessModifier$ = $.$accessModifier$;
					this.$enclosingObjects$NewspeakASTs$MessagePatternAST = enclosingObjects;
					this.$super$NewspeakASTs$MessagePatternAST$slot = runtimeSuperclass;
					this["NewspeakASTs`MessagePatternAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$selector$slot = nil;
						this.$parameters$slot = nil;
						this.$returnType$slot = nil;
						this.$typePattern$slot = nil;
						this.$accessModifier$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`MessagePatternAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`MessagePatternAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`MessagePatternAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$MessagePatternAST = enclosingObjects;
						this.$super$NewspeakASTs$MessagePatternAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$MethodAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`MethodAST";
			this.name = "NewspeakASTs`MethodAST";
			this.header = "MethodAST = AST (| \r	public pattern <MessagePatternAST>\r	public body <CodeBodyAST>\r|)";
			this.slots = [
				new SM("pattern", true, false),
				new SM("body", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`MethodAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("selector", false, "public selector ^<Symbol> = (\r	^pattern selector\r)"),
				new MM("accessModifier", false, "public accessModifier ^<Symbol> = (\r	^pattern accessModifier\r)"),
				new MM("accessModifier:", false, "public accessModifier: am <Symbol> = (\r	pattern accessModifier: am\r)"),
				new MM("pattern:body:accessModifier:", false, "public pattern: p <MessagePatternAST> body: b <CodeBodyAST> accessModifier: am <Symbol> = (\r  self assert:[p isMessagePatternNode].\r  self assert:[b isCodeBodyNode].\r  self pattern: p; body: b.\r  pattern accessModifier: am\r)"),
				new MM("isMethodNode", false, "public isMethodNode = (^true)"),
				new MM("apply:", false, "public apply: aTool = (\r    ^aTool methodNode: self.\r)"),
				new MM("pattern", true, null),
				new MM("pattern:", true, null),
				new MM("body", true, null),
				new MM("body:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$MethodAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$MethodAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$MethodAST();
				return self;
			});
			this.$selector = (function () {
				var self = this;
				return self._$pattern().$selector();
			});
			this.$accessModifier = (function () {
				var self = this;
				return self._$pattern().$accessModifier();
			});
			this.$accessModifier$ = (function ($am) {
				var self = this;
				self._$pattern().$accessModifier$($am);
				return self;
			});
			this.$pattern$body$accessModifier$ = (function ($p, $b, $am) {
				var self = this;
				self._$assert$((function () {
					return $p.$isMessagePatternNode();
				}));
				self._$assert$((function () {
					return $b.$isCodeBodyNode();
				}));
				(function (cascadeReceiver) {
					cascadeReceiver.$pattern$($p);
					return cascadeReceiver.$body$($b);
				})(self);
				self._$pattern().$accessModifier$($am);
				return self;
			});
			this.$isMethodNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$methodNode$(self);
			});
			this.$pattern = (function () {
				return this.$pattern$slot;
			});
			this.$pattern$ = (function (v) {
				this.$pattern$slot = v;
				return this;
			});
			this.$body = (function () {
				return this.$body$slot;
			});
			this.$body$ = (function (v) {
				this.$body$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`MethodAST";
					this._$superInit$NewspeakASTs$MethodAST = $.$superInit$NewspeakASTs$MethodAST;
					this.$superInit$NewspeakASTs$MethodAST = dnuCatcher("$superInit$NewspeakASTs$MethodAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$selector = this._$selector = $.$selector;
					this.$accessModifier = this._$accessModifier = $.$accessModifier;
					this.$accessModifier$ = this._$accessModifier$ = $.$accessModifier$;
					this.$pattern$body$accessModifier$ = this._$pattern$body$accessModifier$ = $.$pattern$body$accessModifier$;
					this.$isMethodNode = this._$isMethodNode = $.$isMethodNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$pattern = this._$pattern = $.$pattern;
					this.$pattern$ = this._$pattern$ = $.$pattern$;
					this.$body = this._$body = $.$body;
					this.$body$ = this._$body$ = $.$body$;
					this.$enclosingObjects$NewspeakASTs$MethodAST = enclosingObjects;
					this.$super$NewspeakASTs$MethodAST$slot = runtimeSuperclass;
					this["NewspeakASTs`MethodAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$pattern$slot = nil;
						this.$body$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`MethodAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`MethodAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`MethodAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$MethodAST = enclosingObjects;
						this.$super$NewspeakASTs$MethodAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$MixinApplicationAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`MixinApplicationAST";
			this.name = "NewspeakASTs`MixinApplicationAST";
			this.header = "MixinApplicationAST = AST ((* Represents a literal mixin application. *)| \r	public mixinExpression <NormalSendAST> \r	public superclassExpression <NormalSendAST> (* should eventually go away *)\r	public classPrefix <ClassPrefixAST>\r |)";
			this.slots = [
				new SM("mixinExpression", true, false),
				new SM("superclassExpression", true, false),
				new SM("classPrefix", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`MixinApplicationAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("isExpressionNode", false, "public isExpressionNode = (^true)"),
				new MM("apply:", false, "public apply: visitor = (\r	^visitor mixinApplication: self\r)"),
				new MM("mixinExpression", true, null),
				new MM("mixinExpression:", true, null),
				new MM("superclassExpression", true, null),
				new MM("superclassExpression:", true, null),
				new MM("classPrefix", true, null),
				new MM("classPrefix:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$MixinApplicationAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$MixinApplicationAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$MixinApplicationAST();
				return self;
			});
			this.$isExpressionNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($visitor) {
				var self = this;
				return $visitor.$mixinApplication$(self);
			});
			this.$mixinExpression = (function () {
				return this.$mixinExpression$slot;
			});
			this.$mixinExpression$ = (function (v) {
				this.$mixinExpression$slot = v;
				return this;
			});
			this.$superclassExpression = (function () {
				return this.$superclassExpression$slot;
			});
			this.$superclassExpression$ = (function (v) {
				this.$superclassExpression$slot = v;
				return this;
			});
			this.$classPrefix = (function () {
				return this.$classPrefix$slot;
			});
			this.$classPrefix$ = (function (v) {
				this.$classPrefix$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`MixinApplicationAST";
					this._$superInit$NewspeakASTs$MixinApplicationAST = $.$superInit$NewspeakASTs$MixinApplicationAST;
					this.$superInit$NewspeakASTs$MixinApplicationAST = dnuCatcher("$superInit$NewspeakASTs$MixinApplicationAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$mixinExpression = this._$mixinExpression = $.$mixinExpression;
					this.$mixinExpression$ = this._$mixinExpression$ = $.$mixinExpression$;
					this.$superclassExpression = this._$superclassExpression = $.$superclassExpression;
					this.$superclassExpression$ = this._$superclassExpression$ = $.$superclassExpression$;
					this.$classPrefix = this._$classPrefix = $.$classPrefix;
					this.$classPrefix$ = this._$classPrefix$ = $.$classPrefix$;
					this.$enclosingObjects$NewspeakASTs$MixinApplicationAST = enclosingObjects;
					this.$super$NewspeakASTs$MixinApplicationAST$slot = runtimeSuperclass;
					this["NewspeakASTs`MixinApplicationAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$mixinExpression$slot = nil;
						this.$superclassExpression$slot = nil;
						this.$classPrefix$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`MixinApplicationAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`MixinApplicationAST";
				this.slots = [];
				this.methods = [
					new MM("new", true, null),
					new MM("prefix:mixin:", false, "public prefix: cp mixin: me = (\r(* ultimately should be a primary factory *)\r	^new classPrefix: cp; mixinExpr: me; superclassExpr: cp superclassCall; yourself\r)")
				];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.$prefix$mixin$ = (function ($cp, $me) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$classPrefix$($cp);
						cascadeReceiver.$mixinExpr$($me);
						cascadeReceiver.$superclassExpr$($cp.$superclassCall());
						return cascadeReceiver.$yourself();
					})(self._$new());
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`MixinApplicationAST";
						this.$new = this._$new = $.$new;
						this.$prefix$mixin$ = this._$prefix$mixin$ = $.$prefix$mixin$;
						this.$enclosingObjects$NewspeakASTs$MixinApplicationAST = enclosingObjects;
						this.$super$NewspeakASTs$MixinApplicationAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$MixinApplicationClassAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`MixinApplicationClassAST";
			this.name = "NewspeakASTs`MixinApplicationClassAST";
			this.header = "MixinApplicationClassAST named: klassName factoryMsg: cons inheriting: iList = AST (\r(* This class represents a class defined via a mixin application - that is, a class that does not provide a class body. *)|\r	public accessModifier <Symbol>\r	public name <Symbol> = klassName asSymbol.\r	public constructor <MessagePatternAST> = cons.\r	public inheritanceChain <List[SendAST]> = iList.\r	public category  <CategoryAST>\r|)";
			this.slots = [
				new SM("accessModifier", true, false),
				new SM("name", false, false),
				new SM("constructor", false, false),
				new SM("inheritanceChain", false, false),
				new SM("category", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`MixinApplicationClassAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("apply:", false, "public apply: visitor = (\r	^visitor mixinApplicationClass: self\r)"),
				new MM("isMixinApplicationClassAST", false, "public isMixinApplicationClassAST = (\r	^true\r)"),
				new MM("accessModifier", true, null),
				new MM("accessModifier:", true, null),
				new MM("name", true, null),
				new MM("setOnce`name:", true, null),
				new MM("constructor", true, null),
				new MM("setOnce`constructor:", true, null),
				new MM("inheritanceChain", true, null),
				new MM("setOnce`inheritanceChain:", true, null),
				new MM("category", true, null),
				new MM("category:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$MixinApplicationClassAST = (function ($klassName, $cons, $iList) {
				var self = this;
				self.$super$NewspeakASTs$MixinApplicationClassAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($klassName, $cons, $iList) {
				var self = this;
				self._$superInit$NewspeakASTs$MixinApplicationClassAST($klassName, $cons, $iList);
				self._$setOnce$name$($klassName.$asSymbol());
				self._$setOnce$constructor$($cons);
				self._$setOnce$inheritanceChain$($iList);
				return self;
			});
			this.$apply$ = (function ($visitor) {
				var self = this;
				return $visitor.$mixinApplicationClass$(self);
			});
			this.$isMixinApplicationClassAST = (function () {
				var self = this;
				return true;
			});
			this.$accessModifier = (function () {
				return this.$accessModifier$slot;
			});
			this.$accessModifier$ = (function (v) {
				this.$accessModifier$slot = v;
				return this;
			});
			this.$name = (function () {
				return this.$name$slot;
			});
			this.$setOnce$name$ = (function (v) {
				this.$name$slot = v;
				return this;
			});
			this.$constructor = (function () {
				return this.$constructor$slot;
			});
			this.$setOnce$constructor$ = (function (v) {
				this.$constructor$slot = v;
				return this;
			});
			this.$inheritanceChain = (function () {
				return this.$inheritanceChain$slot;
			});
			this.$setOnce$inheritanceChain$ = (function (v) {
				this.$inheritanceChain$slot = v;
				return this;
			});
			this.$category = (function () {
				return this.$category$slot;
			});
			this.$category$ = (function (v) {
				this.$category$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`MixinApplicationClassAST";
					this._$superInit$NewspeakASTs$MixinApplicationClassAST = $.$superInit$NewspeakASTs$MixinApplicationClassAST;
					this.$superInit$NewspeakASTs$MixinApplicationClassAST = dnuCatcher("$superInit$NewspeakASTs$MixinApplicationClassAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$isMixinApplicationClassAST = this._$isMixinApplicationClassAST = $.$isMixinApplicationClassAST;
					this.$accessModifier = this._$accessModifier = $.$accessModifier;
					this.$accessModifier$ = this._$accessModifier$ = $.$accessModifier$;
					this.$name = this._$name = $.$name;
					this.$setOnce$name$ = this._$setOnce$name$ = $.$setOnce$name$;
					this.$constructor = this._$constructor = $.$constructor;
					this.$setOnce$constructor$ = this._$setOnce$constructor$ = $.$setOnce$constructor$;
					this.$inheritanceChain = this._$inheritanceChain = $.$inheritanceChain;
					this.$setOnce$inheritanceChain$ = this._$setOnce$inheritanceChain$ = $.$setOnce$inheritanceChain$;
					this.$category = this._$category = $.$category;
					this.$category$ = this._$category$ = $.$category$;
					this.$enclosingObjects$NewspeakASTs$MixinApplicationClassAST = enclosingObjects;
					this.$super$NewspeakASTs$MixinApplicationClassAST$slot = runtimeSuperclass;
					this["NewspeakASTs`MixinApplicationClassAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$accessModifier$slot = nil;
						this.$name$slot = nil;
						this.$constructor$slot = nil;
						this.$inheritanceChain$slot = nil;
						this.$category$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`MixinApplicationClassAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`MixinApplicationClassAST";
				this.slots = [];
				this.methods = [new MM("named:factoryMsg:inheriting:", true, null)];
				this.nestedClasses = [];
				this.$named$factoryMsg$inheriting$ = (function ($klassName, $cons, $iList) {
					return (new this.nonMeta.basicNew()).$instance$initializer($klassName, $cons, $iList);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`MixinApplicationClassAST";
						this.$named$factoryMsg$inheriting$ = this._$named$factoryMsg$inheriting$ = $.$named$factoryMsg$inheriting$;
						this.$enclosingObjects$NewspeakASTs$MixinApplicationClassAST = enclosingObjects;
						this.$super$NewspeakASTs$MixinApplicationClassAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$MutableSlotDefAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`MutableSlotDefAST";
			this.name = "NewspeakASTs`MutableSlotDefAST";
			this.header = "MutableSlotDefAST = SlotDefAST ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`NewspeakASTs`MutableSlotDefAST", true, "SlotDefAST"),
				new MM("instance`initializer", true, "SlotDefAST"),
				new MM("isMutable", false, "public isMutable ^ <Boolean> = (^true)"),
				new MM("isMutableSlot", false, "public isMutableSlot ^ <Boolean> = (^true)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$MutableSlotDefAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$MutableSlotDefAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$MutableSlotDefAST();
				return self;
			});
			this.$isMutable = (function () {
				var self = this;
				return true;
			});
			this.$isMutableSlot = (function () {
				var self = this;
				return true;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`MutableSlotDefAST";
					this._$superInit$NewspeakASTs$MutableSlotDefAST = $.$superInit$NewspeakASTs$MutableSlotDefAST;
					this.$superInit$NewspeakASTs$MutableSlotDefAST = dnuCatcher("$superInit$NewspeakASTs$MutableSlotDefAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isMutable = this._$isMutable = $.$isMutable;
					this.$isMutableSlot = this._$isMutableSlot = $.$isMutableSlot;
					this.$enclosingObjects$NewspeakASTs$MutableSlotDefAST = enclosingObjects;
					this.$super$NewspeakASTs$MutableSlotDefAST$slot = runtimeSuperclass;
					this["NewspeakASTs`MutableSlotDefAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["NewspeakASTs`MutableSlotDefAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`MutableSlotDefAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`MutableSlotDefAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$MutableSlotDefAST = enclosingObjects;
						this.$super$NewspeakASTs$MutableSlotDefAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$NSSideAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`NSSideAST";
			this.name = "NewspeakASTs`NSSideAST";
			this.header = "NSSideAST = SideAST (| \r	public nestedClasses <List[ClassDeclarationAST]>\r|)";
			this.slots = [new SM("nestedClasses", true, false)];
			this.methods = [
				new MM("superInit`NewspeakASTs`NSSideAST", true, "SideAST"),
				new MM("instance`initializer", true, "SideAST"),
				new MM("nestedClasses", true, null),
				new MM("nestedClasses:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$NSSideAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$NSSideAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$NSSideAST();
				return self;
			});
			this.$nestedClasses = (function () {
				return this.$nestedClasses$slot;
			});
			this.$nestedClasses$ = (function (v) {
				this.$nestedClasses$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`NSSideAST";
					this._$superInit$NewspeakASTs$NSSideAST = $.$superInit$NewspeakASTs$NSSideAST;
					this.$superInit$NewspeakASTs$NSSideAST = dnuCatcher("$superInit$NewspeakASTs$NSSideAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$nestedClasses = this._$nestedClasses = $.$nestedClasses;
					this.$nestedClasses$ = this._$nestedClasses$ = $.$nestedClasses$;
					this.$enclosingObjects$NewspeakASTs$NSSideAST = enclosingObjects;
					this.$super$NewspeakASTs$NSSideAST$slot = runtimeSuperclass;
					this["NewspeakASTs`NSSideAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$nestedClasses$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`NSSideAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`NSSideAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`NSSideAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$NSSideAST = enclosingObjects;
						this.$super$NewspeakASTs$NSSideAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$NormalSendAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`NormalSendAST";
			this.name = "NewspeakASTs`NormalSendAST";
			this.header = "NormalSendAST = SendAST (\r	(* Should be renamed UnresolvedSend *)|\r	public receiver <ExpressionAST>\r|)";
			this.slots = [new SM("receiver", true, false)];
			this.methods = [
				new MM("superInit`NewspeakASTs`NormalSendAST", true, "SendAST"),
				new MM("instance`initializer", true, "SendAST"),
				new MM("to:send:with:", false, "public to: receiver send: selector with: arguments = (\r	to: receiver send: (MessageAST new send: selector with: arguments)\r)"),
				new MM("to:send:", false, "public to: anExpression <ExpressionAST> send: aMessage <MessageAST>= (\r	self receiver: anExpression; message: aMessage\r)"),
				new MM("isNormalSendNode", false, "public isNormalSendNode = (^true)"),
				new MM("apply:", false, "public apply: aTool = (\r	^aTool normalSendNode: self\r)"),
				new MM("receiver", true, null),
				new MM("receiver:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$NormalSendAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$NormalSendAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$NormalSendAST();
				return self;
			});
			this.$to$send$with$ = (function ($receiver, $selector, $arguments) {
				var self = this;
				self._$to$send$($receiver, self.$enclosingObjects$NewspeakASTs$NormalSendAST[0]._$MessageAST().$new().$send$with$($selector, $arguments));
				return self;
			});
			this.$to$send$ = (function ($anExpression, $aMessage) {
				var self = this;
				(function (cascadeReceiver) {
					cascadeReceiver.$receiver$($anExpression);
					return cascadeReceiver.$message$($aMessage);
				})(self);
				return self;
			});
			this.$isNormalSendNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$normalSendNode$(self);
			});
			this.$receiver = (function () {
				return this.$receiver$slot;
			});
			this.$receiver$ = (function (v) {
				this.$receiver$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`NormalSendAST";
					this._$superInit$NewspeakASTs$NormalSendAST = $.$superInit$NewspeakASTs$NormalSendAST;
					this.$superInit$NewspeakASTs$NormalSendAST = dnuCatcher("$superInit$NewspeakASTs$NormalSendAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$to$send$with$ = this._$to$send$with$ = $.$to$send$with$;
					this.$to$send$ = this._$to$send$ = $.$to$send$;
					this.$isNormalSendNode = this._$isNormalSendNode = $.$isNormalSendNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$receiver = this._$receiver = $.$receiver;
					this.$receiver$ = this._$receiver$ = $.$receiver$;
					this.$enclosingObjects$NewspeakASTs$NormalSendAST = enclosingObjects;
					this.$super$NewspeakASTs$NormalSendAST$slot = runtimeSuperclass;
					this["NewspeakASTs`NormalSendAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$receiver$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`NormalSendAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`NormalSendAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`NormalSendAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$NormalSendAST = enclosingObjects;
						this.$super$NewspeakASTs$NormalSendAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$NumberAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`NumberAST";
			this.name = "NewspeakASTs`NumberAST";
			this.header = "NumberAST = LiteralAST ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`NewspeakASTs`NumberAST", true, "LiteralAST"),
				new MM("instance`initializer", true, "LiteralAST"),
				new MM("isNumberNode", false, "public isNumberNode = (^true)"),
				new MM("apply:", false, "public apply: aTool = (\r    ^ aTool numberNode: self\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$NumberAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$NumberAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$NumberAST();
				return self;
			});
			this.$isNumberNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$numberNode$(self);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`NumberAST";
					this._$superInit$NewspeakASTs$NumberAST = $.$superInit$NewspeakASTs$NumberAST;
					this.$superInit$NewspeakASTs$NumberAST = dnuCatcher("$superInit$NewspeakASTs$NumberAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isNumberNode = this._$isNumberNode = $.$isNumberNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$enclosingObjects$NewspeakASTs$NumberAST = enclosingObjects;
					this.$super$NewspeakASTs$NumberAST$slot = runtimeSuperclass;
					this["NewspeakASTs`NumberAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["NewspeakASTs`NumberAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`NumberAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`NumberAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$NumberAST = enclosingObjects;
						this.$super$NewspeakASTs$NumberAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$ParameterizedTypeAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`ParameterizedTypeAST";
			this.name = "NewspeakASTs`ParameterizedTypeAST";
			this.header = "ParameterizedTypeAST = AST (|\r	public generic <TypeIdAST>\r	public arguments <List[TypeAST]>\r|)";
			this.slots = [
				new SM("generic", true, false),
				new SM("arguments", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`ParameterizedTypeAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("apply:", false, "public apply: aTool  = (\r	^aTool genericInvocationNode: self\r)"),
				new MM("isTypeNode", false, "public isTypeNode = (\r	^ true\r)"),
				new MM("generic", true, null),
				new MM("generic:", true, null),
				new MM("arguments", true, null),
				new MM("arguments:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$ParameterizedTypeAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$ParameterizedTypeAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$ParameterizedTypeAST();
				return self;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$genericInvocationNode$(self);
			});
			this.$isTypeNode = (function () {
				var self = this;
				return true;
			});
			this.$generic = (function () {
				return this.$generic$slot;
			});
			this.$generic$ = (function (v) {
				this.$generic$slot = v;
				return this;
			});
			this.$arguments = (function () {
				return this.$arguments$slot;
			});
			this.$arguments$ = (function (v) {
				this.$arguments$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`ParameterizedTypeAST";
					this._$superInit$NewspeakASTs$ParameterizedTypeAST = $.$superInit$NewspeakASTs$ParameterizedTypeAST;
					this.$superInit$NewspeakASTs$ParameterizedTypeAST = dnuCatcher("$superInit$NewspeakASTs$ParameterizedTypeAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$isTypeNode = this._$isTypeNode = $.$isTypeNode;
					this.$generic = this._$generic = $.$generic;
					this.$generic$ = this._$generic$ = $.$generic$;
					this.$arguments = this._$arguments = $.$arguments;
					this.$arguments$ = this._$arguments$ = $.$arguments$;
					this.$enclosingObjects$NewspeakASTs$ParameterizedTypeAST = enclosingObjects;
					this.$super$NewspeakASTs$ParameterizedTypeAST$slot = runtimeSuperclass;
					this["NewspeakASTs`ParameterizedTypeAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$generic$slot = nil;
						this.$arguments$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`ParameterizedTypeAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`ParameterizedTypeAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`ParameterizedTypeAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$ParameterizedTypeAST = enclosingObjects;
						this.$super$NewspeakASTs$ParameterizedTypeAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$PatternAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`PatternAST";
			this.name = "NewspeakASTs`PatternAST";
			this.header = "PatternAST = LiteralAST (|\r|)";
			this.slots = [];
			this.methods = [
				new MM("superInit`NewspeakASTs`PatternAST", true, "LiteralAST"),
				new MM("instance`initializer", true, "LiteralAST"),
				new MM("isPatternNode", false, "public isPatternNode = (\r	^ true\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$PatternAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$PatternAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$PatternAST();
				return self;
			});
			this.$isPatternNode = (function () {
				var self = this;
				return true;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`PatternAST";
					this._$superInit$NewspeakASTs$PatternAST = $.$superInit$NewspeakASTs$PatternAST;
					this.$superInit$NewspeakASTs$PatternAST = dnuCatcher("$superInit$NewspeakASTs$PatternAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isPatternNode = this._$isPatternNode = $.$isPatternNode;
					this.$enclosingObjects$NewspeakASTs$PatternAST = enclosingObjects;
					this.$super$NewspeakASTs$PatternAST$slot = runtimeSuperclass;
					this["NewspeakASTs`PatternAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["NewspeakASTs`PatternAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`PatternAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`PatternAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$PatternAST = enclosingObjects;
						this.$super$NewspeakASTs$PatternAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$ReturnStatAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`ReturnStatAST";
			this.name = "NewspeakASTs`ReturnStatAST";
			this.header = "ReturnStatAST = AST (|\r	public expression <ExpressionAST>\r|)";
			this.slots = [new SM("expression", true, false)];
			this.methods = [
				new MM("superInit`NewspeakASTs`ReturnStatAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("isReturnStatNode", false, "public isReturnStatNode = (^true)"),
				new MM("apply:", false, "public apply: aTool = (\r	^aTool returnStatNode: self.\r)"),
				new MM("expression", true, null),
				new MM("expression:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$ReturnStatAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$ReturnStatAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$ReturnStatAST();
				return self;
			});
			this.$isReturnStatNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$returnStatNode$(self);
			});
			this.$expression = (function () {
				return this.$expression$slot;
			});
			this.$expression$ = (function (v) {
				this.$expression$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`ReturnStatAST";
					this._$superInit$NewspeakASTs$ReturnStatAST = $.$superInit$NewspeakASTs$ReturnStatAST;
					this.$superInit$NewspeakASTs$ReturnStatAST = dnuCatcher("$superInit$NewspeakASTs$ReturnStatAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isReturnStatNode = this._$isReturnStatNode = $.$isReturnStatNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$expression = this._$expression = $.$expression;
					this.$expression$ = this._$expression$ = $.$expression$;
					this.$enclosingObjects$NewspeakASTs$ReturnStatAST = enclosingObjects;
					this.$super$NewspeakASTs$ReturnStatAST$slot = runtimeSuperclass;
					this["NewspeakASTs`ReturnStatAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$expression$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`ReturnStatAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`ReturnStatAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`ReturnStatAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$ReturnStatAST = enclosingObjects;
						this.$super$NewspeakASTs$ReturnStatAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$SendAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`SendAST";
			this.name = "NewspeakASTs`SendAST";
			this.header = "SendAST send: aMsg = AST (|\r	public message <MessageAST> ::= aMsg.\r|)";
			this.slots = [new SM("message", true, false)];
			this.methods = [
				new MM("superInit`NewspeakASTs`SendAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("receiver", false, "public receiver = (\r	^self subclassResponsibility\r)"),
				new MM("isExpressionNode", false, "public isExpressionNode = (^true)"),
				new MM("isSendNode", false, "public isSendNode = (^true)"),
				new MM("message", true, null),
				new MM("message:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$SendAST = (function ($aMsg) {
				var self = this;
				self.$super$NewspeakASTs$SendAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($aMsg) {
				var self = this;
				self._$superInit$NewspeakASTs$SendAST($aMsg);
				self._$message$($aMsg);
				return self;
			});
			this.$receiver = (function () {
				var self = this;
				return self._$subclassResponsibility();
			});
			this.$isExpressionNode = (function () {
				var self = this;
				return true;
			});
			this.$isSendNode = (function () {
				var self = this;
				return true;
			});
			this.$message = (function () {
				return this.$message$slot;
			});
			this.$message$ = (function (v) {
				this.$message$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`SendAST";
					this._$superInit$NewspeakASTs$SendAST = $.$superInit$NewspeakASTs$SendAST;
					this.$superInit$NewspeakASTs$SendAST = dnuCatcher("$superInit$NewspeakASTs$SendAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$receiver = this._$receiver = $.$receiver;
					this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
					this.$isSendNode = this._$isSendNode = $.$isSendNode;
					this.$message = this._$message = $.$message;
					this.$message$ = this._$message$ = $.$message$;
					this.$enclosingObjects$NewspeakASTs$SendAST = enclosingObjects;
					this.$super$NewspeakASTs$SendAST$slot = runtimeSuperclass;
					this["NewspeakASTs`SendAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$message$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`SendAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`SendAST";
				this.slots = [];
				this.methods = [new MM("send:", true, null)];
				this.nestedClasses = [];
				this.$send$ = (function ($aMsg) {
					return (new this.nonMeta.basicNew()).$instance$initializer($aMsg);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`SendAST";
						this.$send$ = this._$send$ = $.$send$;
						this.$enclosingObjects$NewspeakASTs$SendAST = enclosingObjects;
						this.$super$NewspeakASTs$SendAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$SetterSendAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`SetterSendAST";
			this.name = "NewspeakASTs`SetterSendAST";
			this.header = "SetterSendAST to: r <ExpressionAST> send: m <MessageAST> start: s <integer> end: e <Integer> = SendAST send: m (|\r	public receiver  <ExpressionAST> ::= r.\r|assert:[r isExpressionNode] \r  message: 'Receiver of setter send should be an expression' .\r  start: s.\r  end: e)";
			this.slots = [new SM("receiver", true, false)];
			this.methods = [
				new MM("superInit`NewspeakASTs`SetterSendAST", true, "send: m"),
				new MM("instance`initializer", true, "send: m"),
				new MM("apply:", false, "public apply: aTool = (\r	^aTool setterSendNode: self.\r)"),
				new MM("isSetterSendNode", false, "public isSetterSendNode = (^true)"),
				new MM("receiver", true, null),
				new MM("receiver:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$SetterSendAST = (function ($r, $m, $s, $e) {
				var self = this;
				self.$super$NewspeakASTs$SetterSendAST$slot._$instance$initializer.call(self, $m);
				return self;
			});
			this.$instance$initializer = (function ($r, $m, $s, $e) {
				var self = this;
				self._$superInit$NewspeakASTs$SetterSendAST($r, $m, $s, $e);
				self._$receiver$($r);
				self._$assert$message$((function () {
					return $r.$isExpressionNode();
				}), "Receiver of setter send should be an expression");
				self._$start$($s);
				self._$end$($e);
				return self;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$setterSendNode$(self);
			});
			this.$isSetterSendNode = (function () {
				var self = this;
				return true;
			});
			this.$receiver = (function () {
				return this.$receiver$slot;
			});
			this.$receiver$ = (function (v) {
				this.$receiver$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`SetterSendAST";
					this._$superInit$NewspeakASTs$SetterSendAST = $.$superInit$NewspeakASTs$SetterSendAST;
					this.$superInit$NewspeakASTs$SetterSendAST = dnuCatcher("$superInit$NewspeakASTs$SetterSendAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$isSetterSendNode = this._$isSetterSendNode = $.$isSetterSendNode;
					this.$receiver = this._$receiver = $.$receiver;
					this.$receiver$ = this._$receiver$ = $.$receiver$;
					this.$enclosingObjects$NewspeakASTs$SetterSendAST = enclosingObjects;
					this.$super$NewspeakASTs$SetterSendAST$slot = runtimeSuperclass;
					this["NewspeakASTs`SetterSendAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$receiver$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`SetterSendAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`SetterSendAST";
				this.slots = [];
				this.methods = [new MM("to:send:start:end:", true, null)];
				this.nestedClasses = [];
				this.$to$send$start$end$ = (function ($r, $m, $s, $e) {
					return (new this.nonMeta.basicNew()).$instance$initializer($r, $m, $s, $e);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`SetterSendAST";
						this.$to$send$start$end$ = this._$to$send$start$end$ = $.$to$send$start$end$;
						this.$enclosingObjects$NewspeakASTs$SetterSendAST = enclosingObjects;
						this.$super$NewspeakASTs$SetterSendAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$SideAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`SideAST";
			this.name = "NewspeakASTs`SideAST";
			this.header = "SideAST = AST ((* An AST for one side of a class *)|\r	public variables <Collection[Symbol]>\r	public categories <Collection[String]>\r	public classComment <String>\r|)";
			this.slots = [
				new SM("variables", true, false),
				new SM("categories", true, false),
				new SM("classComment", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`SideAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("nestedClasses", false, "public nestedClasses ^ <Collection[ClassDeclarationAST]> = (\r	(* Answer the nested classes for this AST.  This default answers an\r	 empty set since it serves for languages without nested classes. *)\r	^{}\r)"),
				new MM("variables:categories:", false, "public variables: vs <Collection[Symbol]> categories: cs <Collection[String]> = (\r	self variables: vs; categories: cs\r)"),
				new MM("isSideNode", false, "public isSideNode = (^true)"),
				new MM("apply:", false, "public apply: aTool = (\r	^aTool sideNode: self.\r)"),
				new MM("variables", true, null),
				new MM("variables:", true, null),
				new MM("categories", true, null),
				new MM("categories:", true, null),
				new MM("classComment", true, null),
				new MM("classComment:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$SideAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$SideAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$SideAST();
				return self;
			});
			this.$nestedClasses = (function () {
				var self = this;
				return [];
			});
			this.$variables$categories$ = (function ($vs, $cs) {
				var self = this;
				(function (cascadeReceiver) {
					cascadeReceiver.$variables$($vs);
					return cascadeReceiver.$categories$($cs);
				})(self);
				return self;
			});
			this.$isSideNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$sideNode$(self);
			});
			this.$variables = (function () {
				return this.$variables$slot;
			});
			this.$variables$ = (function (v) {
				this.$variables$slot = v;
				return this;
			});
			this.$categories = (function () {
				return this.$categories$slot;
			});
			this.$categories$ = (function (v) {
				this.$categories$slot = v;
				return this;
			});
			this.$classComment = (function () {
				return this.$classComment$slot;
			});
			this.$classComment$ = (function (v) {
				this.$classComment$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`SideAST";
					this._$superInit$NewspeakASTs$SideAST = $.$superInit$NewspeakASTs$SideAST;
					this.$superInit$NewspeakASTs$SideAST = dnuCatcher("$superInit$NewspeakASTs$SideAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$nestedClasses = this._$nestedClasses = $.$nestedClasses;
					this.$variables$categories$ = this._$variables$categories$ = $.$variables$categories$;
					this.$isSideNode = this._$isSideNode = $.$isSideNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$variables = this._$variables = $.$variables;
					this.$variables$ = this._$variables$ = $.$variables$;
					this.$categories = this._$categories = $.$categories;
					this.$categories$ = this._$categories$ = $.$categories$;
					this.$classComment = this._$classComment = $.$classComment;
					this.$classComment$ = this._$classComment$ = $.$classComment$;
					this.$enclosingObjects$NewspeakASTs$SideAST = enclosingObjects;
					this.$super$NewspeakASTs$SideAST$slot = runtimeSuperclass;
					this["NewspeakASTs`SideAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$variables$slot = nil;
						this.$categories$slot = nil;
						this.$classComment$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`SideAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`SideAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`SideAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$SideAST = enclosingObjects;
						this.$super$NewspeakASTs$SideAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$SlotDefAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`SlotDefAST";
			this.name = "NewspeakASTs`SlotDefAST";
			this.header = "SlotDefAST = AST (| \r	public slotDecl <SlotDeclarationAST>\r	public initializer <ExpressionAST>\r	public accessModifier\r|)";
			this.slots = [
				new SM("slotDecl", true, false),
				new SM("initializer", true, false),
				new SM("accessModifier", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`SlotDefAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("isMutable", false, "public isMutable ^ <Boolean> = (self subclassResponsibility)"),
				new MM("isMutableSlot", false, "public isMutableSlot ^ <Boolean> = (self subclassResponsibility)"),
				new MM("name", false, "public name ^ <Symbol> = (\r	^slotDecl name\r)"),
				new MM("isSlotDefNode", false, "public isSlotDefNode = ( ^ true )"),
				new MM("type", false, "public type ^ <TypeAST> = (\r	^slotDecl type\r)"),
				new MM("apply:", false, "public apply: visitor = (^visitor slotDefNode: self)"),
				new MM("slotDecl", true, null),
				new MM("slotDecl:", true, null),
				new MM("initializer", true, null),
				new MM("initializer:", true, null),
				new MM("accessModifier", true, null),
				new MM("accessModifier:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$SlotDefAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$SlotDefAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$SlotDefAST();
				return self;
			});
			this.$isMutable = (function () {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$isMutableSlot = (function () {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$name = (function () {
				var self = this;
				return self._$slotDecl().$name();
			});
			this.$isSlotDefNode = (function () {
				var self = this;
				return true;
			});
			this.$type = (function () {
				var self = this;
				return self._$slotDecl().$type();
			});
			this.$apply$ = (function ($visitor) {
				var self = this;
				return $visitor.$slotDefNode$(self);
			});
			this.$slotDecl = (function () {
				return this.$slotDecl$slot;
			});
			this.$slotDecl$ = (function (v) {
				this.$slotDecl$slot = v;
				return this;
			});
			this.$initializer = (function () {
				return this.$initializer$slot;
			});
			this.$initializer$ = (function (v) {
				this.$initializer$slot = v;
				return this;
			});
			this.$accessModifier = (function () {
				return this.$accessModifier$slot;
			});
			this.$accessModifier$ = (function (v) {
				this.$accessModifier$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`SlotDefAST";
					this._$superInit$NewspeakASTs$SlotDefAST = $.$superInit$NewspeakASTs$SlotDefAST;
					this.$superInit$NewspeakASTs$SlotDefAST = dnuCatcher("$superInit$NewspeakASTs$SlotDefAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isMutable = this._$isMutable = $.$isMutable;
					this.$isMutableSlot = this._$isMutableSlot = $.$isMutableSlot;
					this.$name = this._$name = $.$name;
					this.$isSlotDefNode = this._$isSlotDefNode = $.$isSlotDefNode;
					this.$type = this._$type = $.$type;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$slotDecl = this._$slotDecl = $.$slotDecl;
					this.$slotDecl$ = this._$slotDecl$ = $.$slotDecl$;
					this.$initializer = this._$initializer = $.$initializer;
					this.$initializer$ = this._$initializer$ = $.$initializer$;
					this.$accessModifier = this._$accessModifier = $.$accessModifier;
					this.$accessModifier$ = this._$accessModifier$ = $.$accessModifier$;
					this.$enclosingObjects$NewspeakASTs$SlotDefAST = enclosingObjects;
					this.$super$NewspeakASTs$SlotDefAST$slot = runtimeSuperclass;
					this["NewspeakASTs`SlotDefAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$slotDecl$slot = nil;
						this.$initializer$slot = nil;
						this.$accessModifier$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`SlotDefAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`SlotDefAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`SlotDefAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$SlotDefAST = enclosingObjects;
						this.$super$NewspeakASTs$SlotDefAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$StringAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`StringAST";
			this.name = "NewspeakASTs`StringAST";
			this.header = "StringAST = LiteralAST ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`NewspeakASTs`StringAST", true, "LiteralAST"),
				new MM("instance`initializer", true, "LiteralAST"),
				new MM("isStringNode", false, "public isStringNode = (^true)"),
				new MM("apply:", false, "public apply: aTool = (^aTool stringNode: self\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$StringAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$StringAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$StringAST();
				return self;
			});
			this.$isStringNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$stringNode$(self);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`StringAST";
					this._$superInit$NewspeakASTs$StringAST = $.$superInit$NewspeakASTs$StringAST;
					this.$superInit$NewspeakASTs$StringAST = dnuCatcher("$superInit$NewspeakASTs$StringAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isStringNode = this._$isStringNode = $.$isStringNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$enclosingObjects$NewspeakASTs$StringAST = enclosingObjects;
					this.$super$NewspeakASTs$StringAST$slot = runtimeSuperclass;
					this["NewspeakASTs`StringAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["NewspeakASTs`StringAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`StringAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`StringAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$StringAST = enclosingObjects;
						this.$super$NewspeakASTs$StringAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$SymbolAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`SymbolAST";
			this.name = "NewspeakASTs`SymbolAST";
			this.header = "SymbolAST = LiteralAST ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`NewspeakASTs`SymbolAST", true, "LiteralAST"),
				new MM("instance`initializer", true, "LiteralAST"),
				new MM("isSymbolNode", false, "public isSymbolNode = (^true)"),
				new MM("apply:", false, "public apply: aTool = (^aTool symbolNode: self)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$SymbolAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$SymbolAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$SymbolAST();
				return self;
			});
			this.$isSymbolNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$symbolNode$(self);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`SymbolAST";
					this._$superInit$NewspeakASTs$SymbolAST = $.$superInit$NewspeakASTs$SymbolAST;
					this.$superInit$NewspeakASTs$SymbolAST = dnuCatcher("$superInit$NewspeakASTs$SymbolAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isSymbolNode = this._$isSymbolNode = $.$isSymbolNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$enclosingObjects$NewspeakASTs$SymbolAST = enclosingObjects;
					this.$super$NewspeakASTs$SymbolAST$slot = runtimeSuperclass;
					this["NewspeakASTs`SymbolAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["NewspeakASTs`SymbolAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`SymbolAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`SymbolAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$SymbolAST = enclosingObjects;
						this.$super$NewspeakASTs$SymbolAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$TupleAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`TupleAST";
			this.name = "NewspeakASTs`TupleAST";
			this.header = "TupleAST = AST (| \r	public elements <List[ExpressionAST]>\r|)";
			this.slots = [new SM("elements", true, false)];
			this.methods = [
				new MM("superInit`NewspeakASTs`TupleAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("isExpressionNode", false, "public isExpressionNode = (^true)"),
				new MM("isArrayNode", false, "public isArrayNode = (^false)"),
				new MM("isTupleNode", false, "public isTupleNode = ( ^ true)"),
				new MM("apply:", false, "public apply: aTool = (^aTool tupleNode: self)"),
				new MM("elements", true, null),
				new MM("elements:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$TupleAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$TupleAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$TupleAST();
				return self;
			});
			this.$isExpressionNode = (function () {
				var self = this;
				return true;
			});
			this.$isArrayNode = (function () {
				var self = this;
				return false;
			});
			this.$isTupleNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$tupleNode$(self);
			});
			this.$elements = (function () {
				return this.$elements$slot;
			});
			this.$elements$ = (function (v) {
				this.$elements$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`TupleAST";
					this._$superInit$NewspeakASTs$TupleAST = $.$superInit$NewspeakASTs$TupleAST;
					this.$superInit$NewspeakASTs$TupleAST = dnuCatcher("$superInit$NewspeakASTs$TupleAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
					this.$isArrayNode = this._$isArrayNode = $.$isArrayNode;
					this.$isTupleNode = this._$isTupleNode = $.$isTupleNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$elements = this._$elements = $.$elements;
					this.$elements$ = this._$elements$ = $.$elements$;
					this.$enclosingObjects$NewspeakASTs$TupleAST = enclosingObjects;
					this.$super$NewspeakASTs$TupleAST$slot = runtimeSuperclass;
					this["NewspeakASTs`TupleAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$elements$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`TupleAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`TupleAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`TupleAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$TupleAST = enclosingObjects;
						this.$super$NewspeakASTs$TupleAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$TypeIdAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`TypeIdAST";
			this.name = "NewspeakASTs`TypeIdAST";
			this.header = "TypeIdAST = AST (|\r	public name <Symbol>\r|)";
			this.slots = [new SM("name", true, false)];
			this.methods = [
				new MM("superInit`NewspeakASTs`TypeIdAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("isTypeNode", false, "public isTypeNode = (\r	^ true\r)"),
				new MM("apply:", false, "public apply: visitor = (\r	^visitor typeIdNode: self\r)"),
				new MM("name", true, null),
				new MM("name:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$TypeIdAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$TypeIdAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$TypeIdAST();
				return self;
			});
			this.$isTypeNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($visitor) {
				var self = this;
				return $visitor.$typeIdNode$(self);
			});
			this.$name = (function () {
				return this.$name$slot;
			});
			this.$name$ = (function (v) {
				this.$name$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`TypeIdAST";
					this._$superInit$NewspeakASTs$TypeIdAST = $.$superInit$NewspeakASTs$TypeIdAST;
					this.$superInit$NewspeakASTs$TypeIdAST = dnuCatcher("$superInit$NewspeakASTs$TypeIdAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isTypeNode = this._$isTypeNode = $.$isTypeNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$name = this._$name = $.$name;
					this.$name$ = this._$name$ = $.$name$;
					this.$enclosingObjects$NewspeakASTs$TypeIdAST = enclosingObjects;
					this.$super$NewspeakASTs$TypeIdAST$slot = runtimeSuperclass;
					this["NewspeakASTs`TypeIdAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$name$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`TypeIdAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`TypeIdAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`TypeIdAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$TypeIdAST = enclosingObjects;
						this.$super$NewspeakASTs$TypeIdAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$UnaryTypeOpAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`UnaryTypeOpAST";
			this.name = "NewspeakASTs`UnaryTypeOpAST";
			this.header = "UnaryTypeOpAST = AST (| operand <TypeAST> operator <Symbol>  |)";
			this.slots = [
				new SM("operand", true, false),
				new SM("operator", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`UnaryTypeOpAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("apply:", false, "public apply: aTool  = (\r	^aTool unaryTypeOpNode: self\r)"),
				new MM("operand", true, null),
				new MM("operand:", true, null),
				new MM("operator", true, null),
				new MM("operator:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$UnaryTypeOpAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$UnaryTypeOpAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$UnaryTypeOpAST();
				return self;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$unaryTypeOpNode$(self);
			});
			this.$operand = (function () {
				return this.$operand$slot;
			});
			this.$operand$ = (function (v) {
				this.$operand$slot = v;
				return this;
			});
			this.$operator = (function () {
				return this.$operator$slot;
			});
			this.$operator$ = (function (v) {
				this.$operator$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`UnaryTypeOpAST";
					this._$superInit$NewspeakASTs$UnaryTypeOpAST = $.$superInit$NewspeakASTs$UnaryTypeOpAST;
					this.$superInit$NewspeakASTs$UnaryTypeOpAST = dnuCatcher("$superInit$NewspeakASTs$UnaryTypeOpAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$apply$ = this._$apply$ = $.$apply$;
					this._$operand = $.$operand;
					this.$operand = dnuCatcher("$operand");
					this._$operand$ = $.$operand$;
					this.$operand$ = dnuCatcher("$operand$");
					this._$operator = $.$operator;
					this.$operator = dnuCatcher("$operator");
					this._$operator$ = $.$operator$;
					this.$operator$ = dnuCatcher("$operator$");
					this.$enclosingObjects$NewspeakASTs$UnaryTypeOpAST = enclosingObjects;
					this.$super$NewspeakASTs$UnaryTypeOpAST$slot = runtimeSuperclass;
					this["NewspeakASTs`UnaryTypeOpAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$operand$slot = nil;
						this.$operator$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`UnaryTypeOpAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`UnaryTypeOpAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`UnaryTypeOpAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$UnaryTypeOpAST = enclosingObjects;
						this.$super$NewspeakASTs$UnaryTypeOpAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$VarDeclAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`VarDeclAST";
			this.name = "NewspeakASTs`VarDeclAST";
			this.header = "VarDeclAST name: aName type: aType = AST (| \r	public name  <Symbol> = aName.\r	public type <TypeAST> = aType.\r|)";
			this.slots = [
				new SM("name", false, false),
				new SM("type", false, false)
			];
			this.methods = [
				new MM("superInit`NewspeakASTs`VarDeclAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("isTemporaryAST", false, "public isTemporaryAST ^ <Boolean> = (\r	^false\r)"),
				new MM("concreteEnd", false, "public concreteEnd ^ <Integer> = (\r  self type isNil ifFalse:[^self type concreteEnd].\r  ^super concreteEnd.\r)"),
				new MM("isVarDeclNode", false, "public isVarDeclNode = (^true)"),
				new MM("apply:", false, "public apply: aTool = (\r	^aTool varDeclNode: self\r)"),
				new MM("name", true, null),
				new MM("setOnce`name:", true, null),
				new MM("type", true, null),
				new MM("setOnce`type:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$VarDeclAST = (function ($aName, $aType) {
				var self = this;
				self.$super$NewspeakASTs$VarDeclAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($aName, $aType) {
				var self = this;
				self._$superInit$NewspeakASTs$VarDeclAST($aName, $aType);
				self._$setOnce$name$($aName);
				self._$setOnce$type$($aType);
				return self;
			});
			this.$isTemporaryAST = (function () {
				var self = this;
				return false;
			});
			this.$concreteEnd = (function () {
				var self = this;
				if (!self._$type().$isNil()) {
					return self._$type().$concreteEnd();
				} else {
					nil;
				};
				return self.$super$NewspeakASTs$VarDeclAST$slot._$concreteEnd.call(self);
			});
			this.$isVarDeclNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$varDeclNode$(self);
			});
			this.$name = (function () {
				return this.$name$slot;
			});
			this.$setOnce$name$ = (function (v) {
				this.$name$slot = v;
				return this;
			});
			this.$type = (function () {
				return this.$type$slot;
			});
			this.$setOnce$type$ = (function (v) {
				this.$type$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`VarDeclAST";
					this._$superInit$NewspeakASTs$VarDeclAST = $.$superInit$NewspeakASTs$VarDeclAST;
					this.$superInit$NewspeakASTs$VarDeclAST = dnuCatcher("$superInit$NewspeakASTs$VarDeclAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isTemporaryAST = this._$isTemporaryAST = $.$isTemporaryAST;
					this.$concreteEnd = this._$concreteEnd = $.$concreteEnd;
					this.$isVarDeclNode = this._$isVarDeclNode = $.$isVarDeclNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$name = this._$name = $.$name;
					this.$setOnce$name$ = this._$setOnce$name$ = $.$setOnce$name$;
					this.$type = this._$type = $.$type;
					this.$setOnce$type$ = this._$setOnce$type$ = $.$setOnce$type$;
					this.$enclosingObjects$NewspeakASTs$VarDeclAST = enclosingObjects;
					this.$super$NewspeakASTs$VarDeclAST$slot = runtimeSuperclass;
					this["NewspeakASTs`VarDeclAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$name$slot = nil;
						this.$type$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`VarDeclAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`VarDeclAST";
				this.slots = [];
				this.methods = [new MM("name:type:", true, null)];
				this.nestedClasses = [];
				this.$name$type$ = (function ($aName, $aType) {
					return (new this.nonMeta.basicNew()).$instance$initializer($aName, $aType);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`VarDeclAST";
						this.$name$type$ = this._$name$type$ = $.$name$type$;
						this.$enclosingObjects$NewspeakASTs$VarDeclAST = enclosingObjects;
						this.$super$NewspeakASTs$VarDeclAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$VariableAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`VariableAST";
			this.name = "NewspeakASTs`VariableAST";
			this.header = "VariableAST = AST (| \r	public name <Symbol>\r|)";
			this.slots = [new SM("name", true, false)];
			this.methods = [
				new MM("superInit`NewspeakASTs`VariableAST", true, "AST"),
				new MM("instance`initializer", true, "AST"),
				new MM("isExpressionNode", false, "public isExpressionNode = (^true)"),
				new MM("isVariableNode", false, "public isVariableNode = (^true)"),
				new MM("apply:", false, "public apply: aTool = (\r	^aTool variableNode: self.\r)"),
				new MM("name", true, null),
				new MM("name:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$VariableAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$VariableAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$VariableAST();
				return self;
			});
			this.$isExpressionNode = (function () {
				var self = this;
				return true;
			});
			this.$isVariableNode = (function () {
				var self = this;
				return true;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$variableNode$(self);
			});
			this.$name = (function () {
				return this.$name$slot;
			});
			this.$name$ = (function (v) {
				this.$name$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`VariableAST";
					this._$superInit$NewspeakASTs$VariableAST = $.$superInit$NewspeakASTs$VariableAST;
					this.$superInit$NewspeakASTs$VariableAST = dnuCatcher("$superInit$NewspeakASTs$VariableAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
					this.$isVariableNode = this._$isVariableNode = $.$isVariableNode;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$name = this._$name = $.$name;
					this.$name$ = this._$name$ = $.$name$;
					this.$enclosingObjects$NewspeakASTs$VariableAST = enclosingObjects;
					this.$super$NewspeakASTs$VariableAST$slot = runtimeSuperclass;
					this["NewspeakASTs`VariableAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$name$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`VariableAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`VariableAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`VariableAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$VariableAST = enclosingObjects;
						this.$super$NewspeakASTs$VariableAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$VariablePatternAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`VariablePatternAST";
			this.name = "NewspeakASTs`VariablePatternAST";
			this.header = "VariablePatternAST = PatternAST (|\r	variableName <Symbol>\r|)";
			this.slots = [new SM("variableName", true, false)];
			this.methods = [
				new MM("superInit`NewspeakASTs`VariablePatternAST", true, "PatternAST"),
				new MM("instance`initializer", true, "PatternAST"),
				new MM("apply:", false, "public apply: aTool = (\r	^ aTool variablePatternNode: self.\r)"),
				new MM("isVariablePatternNode", false, "public isVariablePatternNode = (\r	^ true\r)"),
				new MM("variableName", true, null),
				new MM("variableName:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$VariablePatternAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$VariablePatternAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$VariablePatternAST();
				return self;
			});
			this.$apply$ = (function ($aTool) {
				var self = this;
				return $aTool.$variablePatternNode$(self);
			});
			this.$isVariablePatternNode = (function () {
				var self = this;
				return true;
			});
			this.$variableName = (function () {
				return this.$variableName$slot;
			});
			this.$variableName$ = (function (v) {
				this.$variableName$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`VariablePatternAST";
					this._$superInit$NewspeakASTs$VariablePatternAST = $.$superInit$NewspeakASTs$VariablePatternAST;
					this.$superInit$NewspeakASTs$VariablePatternAST = dnuCatcher("$superInit$NewspeakASTs$VariablePatternAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$isVariablePatternNode = this._$isVariablePatternNode = $.$isVariablePatternNode;
					this._$variableName = $.$variableName;
					this.$variableName = dnuCatcher("$variableName");
					this._$variableName$ = $.$variableName$;
					this.$variableName$ = dnuCatcher("$variableName$");
					this.$enclosingObjects$NewspeakASTs$VariablePatternAST = enclosingObjects;
					this.$super$NewspeakASTs$VariablePatternAST$slot = runtimeSuperclass;
					this["NewspeakASTs`VariablePatternAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$variableName$slot = nil;
					});
					this.basicNew = this["NewspeakASTs`VariablePatternAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`VariablePatternAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`VariablePatternAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$VariablePatternAST = enclosingObjects;
						this.$super$NewspeakASTs$VariablePatternAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$WildcardPatternAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakASTs`WildcardPatternAST";
			this.name = "NewspeakASTs`WildcardPatternAST";
			this.header = "WildcardPatternAST = PatternAST (|\r|)";
			this.slots = [];
			this.methods = [
				new MM("superInit`NewspeakASTs`WildcardPatternAST", true, "PatternAST"),
				new MM("instance`initializer", true, "PatternAST"),
				new MM("apply:", false, "public apply: tool = (\r	^ tool wildcardPatternNode: self\r)"),
				new MM("isWildcardPatternNode", false, "public isWildcardPatternNode = (\r	^ true\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakASTs$WildcardPatternAST = (function () {
				var self = this;
				self.$super$NewspeakASTs$WildcardPatternAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakASTs$WildcardPatternAST();
				return self;
			});
			this.$apply$ = (function ($tool) {
				var self = this;
				return $tool.$wildcardPatternNode$(self);
			});
			this.$isWildcardPatternNode = (function () {
				var self = this;
				return true;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakASTs`WildcardPatternAST";
					this._$superInit$NewspeakASTs$WildcardPatternAST = $.$superInit$NewspeakASTs$WildcardPatternAST;
					this.$superInit$NewspeakASTs$WildcardPatternAST = dnuCatcher("$superInit$NewspeakASTs$WildcardPatternAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$isWildcardPatternNode = this._$isWildcardPatternNode = $.$isWildcardPatternNode;
					this.$enclosingObjects$NewspeakASTs$WildcardPatternAST = enclosingObjects;
					this.$super$NewspeakASTs$WildcardPatternAST$slot = runtimeSuperclass;
					this["NewspeakASTs`WildcardPatternAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["NewspeakASTs`WildcardPatternAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakASTs`WildcardPatternAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakASTs`WildcardPatternAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakASTs$WildcardPatternAST = enclosingObjects;
						this.$super$NewspeakASTs$WildcardPatternAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakASTs$AST.enclosingMixin = this;
		this.$NewspeakASTs$ASTCopier.enclosingMixin = this;
		this.$NewspeakASTs$ASTTool.enclosingMixin = this;
		this.$NewspeakASTs$ASTTraverser.enclosingMixin = this;
		this.$NewspeakASTs$AssignmentAST.enclosingMixin = this;
		this.$NewspeakASTs$BinaryTypeOpAST.enclosingMixin = this;
		this.$NewspeakASTs$BlockAST.enclosingMixin = this;
		this.$NewspeakASTs$BlockTypeAST.enclosingMixin = this;
		this.$NewspeakASTs$CascadedSendAST.enclosingMixin = this;
		this.$NewspeakASTs$CategoryAST.enclosingMixin = this;
		this.$NewspeakASTs$CharAST.enclosingMixin = this;
		this.$NewspeakASTs$ClassBodyAST.enclosingMixin = this;
		this.$NewspeakASTs$ClassDeclarationAST.enclosingMixin = this;
		this.$NewspeakASTs$ClassHeaderAST.enclosingMixin = this;
		this.$NewspeakASTs$ClassPrefixAST.enclosingMixin = this;
		this.$NewspeakASTs$CodeBodyAST.enclosingMixin = this;
		this.$NewspeakASTs$ImmutableSlotDefAST.enclosingMixin = this;
		this.$NewspeakASTs$InitializerAST.enclosingMixin = this;
		this.$NewspeakASTs$KeywordPatternAST.enclosingMixin = this;
		this.$NewspeakASTs$KeywordPatternPairAST.enclosingMixin = this;
		this.$NewspeakASTs$LiteralAST.enclosingMixin = this;
		this.$NewspeakASTs$LiteralPatternAST.enclosingMixin = this;
		this.$NewspeakASTs$MessageAST.enclosingMixin = this;
		this.$NewspeakASTs$MessagePatternAST.enclosingMixin = this;
		this.$NewspeakASTs$MethodAST.enclosingMixin = this;
		this.$NewspeakASTs$MixinApplicationAST.enclosingMixin = this;
		this.$NewspeakASTs$MixinApplicationClassAST.enclosingMixin = this;
		this.$NewspeakASTs$MutableSlotDefAST.enclosingMixin = this;
		this.$NewspeakASTs$NSSideAST.enclosingMixin = this;
		this.$NewspeakASTs$NormalSendAST.enclosingMixin = this;
		this.$NewspeakASTs$NumberAST.enclosingMixin = this;
		this.$NewspeakASTs$ParameterizedTypeAST.enclosingMixin = this;
		this.$NewspeakASTs$PatternAST.enclosingMixin = this;
		this.$NewspeakASTs$ReturnStatAST.enclosingMixin = this;
		this.$NewspeakASTs$SendAST.enclosingMixin = this;
		this.$NewspeakASTs$SetterSendAST.enclosingMixin = this;
		this.$NewspeakASTs$SideAST.enclosingMixin = this;
		this.$NewspeakASTs$SlotDefAST.enclosingMixin = this;
		this.$NewspeakASTs$StringAST.enclosingMixin = this;
		this.$NewspeakASTs$SymbolAST.enclosingMixin = this;
		this.$NewspeakASTs$TupleAST.enclosingMixin = this;
		this.$NewspeakASTs$TypeIdAST.enclosingMixin = this;
		this.$NewspeakASTs$UnaryTypeOpAST.enclosingMixin = this;
		this.$NewspeakASTs$VarDeclAST.enclosingMixin = this;
		this.$NewspeakASTs$VariableAST.enclosingMixin = this;
		this.$NewspeakASTs$VariablePatternAST.enclosingMixin = this;
		this.$NewspeakASTs$WildcardPatternAST.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for NewspeakASTs";
				this._$superInit$NewspeakASTs = $.$superInit$NewspeakASTs;
				this.$superInit$NewspeakASTs = dnuCatcher("$superInit$NewspeakASTs");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this.$AST = this._$AST = $.$AST;
				this.$ASTCopier = this._$ASTCopier = $.$ASTCopier;
				this.$ASTTool = this._$ASTTool = $.$ASTTool;
				this.$ASTTraverser = this._$ASTTraverser = $.$ASTTraverser;
				this.$AssignmentAST = this._$AssignmentAST = $.$AssignmentAST;
				this.$BinaryTypeOpAST = this._$BinaryTypeOpAST = $.$BinaryTypeOpAST;
				this.$BlockAST = this._$BlockAST = $.$BlockAST;
				this.$BlockTypeAST = this._$BlockTypeAST = $.$BlockTypeAST;
				this.$CascadedSendAST = this._$CascadedSendAST = $.$CascadedSendAST;
				this.$CategoryAST = this._$CategoryAST = $.$CategoryAST;
				this.$CharAST = this._$CharAST = $.$CharAST;
				this.$ClassBodyAST = this._$ClassBodyAST = $.$ClassBodyAST;
				this.$ClassDeclarationAST = this._$ClassDeclarationAST = $.$ClassDeclarationAST;
				this.$ClassHeaderAST = this._$ClassHeaderAST = $.$ClassHeaderAST;
				this.$ClassPrefixAST = this._$ClassPrefixAST = $.$ClassPrefixAST;
				this.$CodeBodyAST = this._$CodeBodyAST = $.$CodeBodyAST;
				this.$ImmutableSlotDefAST = this._$ImmutableSlotDefAST = $.$ImmutableSlotDefAST;
				this.$InitializerAST = this._$InitializerAST = $.$InitializerAST;
				this.$KeywordPatternAST = this._$KeywordPatternAST = $.$KeywordPatternAST;
				this.$KeywordPatternPairAST = this._$KeywordPatternPairAST = $.$KeywordPatternPairAST;
				this.$LiteralAST = this._$LiteralAST = $.$LiteralAST;
				this.$LiteralPatternAST = this._$LiteralPatternAST = $.$LiteralPatternAST;
				this.$MessageAST = this._$MessageAST = $.$MessageAST;
				this.$MessagePatternAST = this._$MessagePatternAST = $.$MessagePatternAST;
				this.$MethodAST = this._$MethodAST = $.$MethodAST;
				this.$MixinApplicationAST = this._$MixinApplicationAST = $.$MixinApplicationAST;
				this.$MixinApplicationClassAST = this._$MixinApplicationClassAST = $.$MixinApplicationClassAST;
				this.$MutableSlotDefAST = this._$MutableSlotDefAST = $.$MutableSlotDefAST;
				this.$NSSideAST = this._$NSSideAST = $.$NSSideAST;
				this.$NormalSendAST = this._$NormalSendAST = $.$NormalSendAST;
				this.$NumberAST = this._$NumberAST = $.$NumberAST;
				this.$ParameterizedTypeAST = this._$ParameterizedTypeAST = $.$ParameterizedTypeAST;
				this.$PatternAST = this._$PatternAST = $.$PatternAST;
				this.$ReturnStatAST = this._$ReturnStatAST = $.$ReturnStatAST;
				this.$SendAST = this._$SendAST = $.$SendAST;
				this.$SetterSendAST = this._$SetterSendAST = $.$SetterSendAST;
				this.$SideAST = this._$SideAST = $.$SideAST;
				this.$SlotDefAST = this._$SlotDefAST = $.$SlotDefAST;
				this.$StringAST = this._$StringAST = $.$StringAST;
				this.$SymbolAST = this._$SymbolAST = $.$SymbolAST;
				this.$TupleAST = this._$TupleAST = $.$TupleAST;
				this.$TypeIdAST = this._$TypeIdAST = $.$TypeIdAST;
				this.$UnaryTypeOpAST = this._$UnaryTypeOpAST = $.$UnaryTypeOpAST;
				this.$VarDeclAST = this._$VarDeclAST = $.$VarDeclAST;
				this.$VariableAST = this._$VariableAST = $.$VariableAST;
				this.$VariablePatternAST = this._$VariablePatternAST = $.$VariablePatternAST;
				this.$WildcardPatternAST = this._$WildcardPatternAST = $.$WildcardPatternAST;
				this.$NewspeakASTs$AST = this._$NewspeakASTs$AST = $.$NewspeakASTs$AST;
				this.$NewspeakASTs$AST$ = this._$NewspeakASTs$AST$ = $.$NewspeakASTs$AST$;
				this.$NewspeakASTs$ASTCopier = this._$NewspeakASTs$ASTCopier = $.$NewspeakASTs$ASTCopier;
				this.$NewspeakASTs$ASTCopier$ = this._$NewspeakASTs$ASTCopier$ = $.$NewspeakASTs$ASTCopier$;
				this.$NewspeakASTs$ASTTool = this._$NewspeakASTs$ASTTool = $.$NewspeakASTs$ASTTool;
				this.$NewspeakASTs$ASTTool$ = this._$NewspeakASTs$ASTTool$ = $.$NewspeakASTs$ASTTool$;
				this.$NewspeakASTs$ASTTraverser = this._$NewspeakASTs$ASTTraverser = $.$NewspeakASTs$ASTTraverser;
				this.$NewspeakASTs$ASTTraverser$ = this._$NewspeakASTs$ASTTraverser$ = $.$NewspeakASTs$ASTTraverser$;
				this.$NewspeakASTs$AssignmentAST = this._$NewspeakASTs$AssignmentAST = $.$NewspeakASTs$AssignmentAST;
				this.$NewspeakASTs$AssignmentAST$ = this._$NewspeakASTs$AssignmentAST$ = $.$NewspeakASTs$AssignmentAST$;
				this.$NewspeakASTs$BinaryTypeOpAST = this._$NewspeakASTs$BinaryTypeOpAST = $.$NewspeakASTs$BinaryTypeOpAST;
				this.$NewspeakASTs$BinaryTypeOpAST$ = this._$NewspeakASTs$BinaryTypeOpAST$ = $.$NewspeakASTs$BinaryTypeOpAST$;
				this.$NewspeakASTs$BlockAST = this._$NewspeakASTs$BlockAST = $.$NewspeakASTs$BlockAST;
				this.$NewspeakASTs$BlockAST$ = this._$NewspeakASTs$BlockAST$ = $.$NewspeakASTs$BlockAST$;
				this.$NewspeakASTs$BlockTypeAST = this._$NewspeakASTs$BlockTypeAST = $.$NewspeakASTs$BlockTypeAST;
				this.$NewspeakASTs$BlockTypeAST$ = this._$NewspeakASTs$BlockTypeAST$ = $.$NewspeakASTs$BlockTypeAST$;
				this.$NewspeakASTs$CascadedSendAST = this._$NewspeakASTs$CascadedSendAST = $.$NewspeakASTs$CascadedSendAST;
				this.$NewspeakASTs$CascadedSendAST$ = this._$NewspeakASTs$CascadedSendAST$ = $.$NewspeakASTs$CascadedSendAST$;
				this.$NewspeakASTs$CategoryAST = this._$NewspeakASTs$CategoryAST = $.$NewspeakASTs$CategoryAST;
				this.$NewspeakASTs$CategoryAST$ = this._$NewspeakASTs$CategoryAST$ = $.$NewspeakASTs$CategoryAST$;
				this.$NewspeakASTs$CharAST = this._$NewspeakASTs$CharAST = $.$NewspeakASTs$CharAST;
				this.$NewspeakASTs$CharAST$ = this._$NewspeakASTs$CharAST$ = $.$NewspeakASTs$CharAST$;
				this.$NewspeakASTs$ClassBodyAST = this._$NewspeakASTs$ClassBodyAST = $.$NewspeakASTs$ClassBodyAST;
				this.$NewspeakASTs$ClassBodyAST$ = this._$NewspeakASTs$ClassBodyAST$ = $.$NewspeakASTs$ClassBodyAST$;
				this.$NewspeakASTs$ClassDeclarationAST = this._$NewspeakASTs$ClassDeclarationAST = $.$NewspeakASTs$ClassDeclarationAST;
				this.$NewspeakASTs$ClassDeclarationAST$ = this._$NewspeakASTs$ClassDeclarationAST$ = $.$NewspeakASTs$ClassDeclarationAST$;
				this.$NewspeakASTs$ClassHeaderAST = this._$NewspeakASTs$ClassHeaderAST = $.$NewspeakASTs$ClassHeaderAST;
				this.$NewspeakASTs$ClassHeaderAST$ = this._$NewspeakASTs$ClassHeaderAST$ = $.$NewspeakASTs$ClassHeaderAST$;
				this.$NewspeakASTs$ClassPrefixAST = this._$NewspeakASTs$ClassPrefixAST = $.$NewspeakASTs$ClassPrefixAST;
				this.$NewspeakASTs$ClassPrefixAST$ = this._$NewspeakASTs$ClassPrefixAST$ = $.$NewspeakASTs$ClassPrefixAST$;
				this.$NewspeakASTs$CodeBodyAST = this._$NewspeakASTs$CodeBodyAST = $.$NewspeakASTs$CodeBodyAST;
				this.$NewspeakASTs$CodeBodyAST$ = this._$NewspeakASTs$CodeBodyAST$ = $.$NewspeakASTs$CodeBodyAST$;
				this.$NewspeakASTs$ImmutableSlotDefAST = this._$NewspeakASTs$ImmutableSlotDefAST = $.$NewspeakASTs$ImmutableSlotDefAST;
				this.$NewspeakASTs$ImmutableSlotDefAST$ = this._$NewspeakASTs$ImmutableSlotDefAST$ = $.$NewspeakASTs$ImmutableSlotDefAST$;
				this.$NewspeakASTs$InitializerAST = this._$NewspeakASTs$InitializerAST = $.$NewspeakASTs$InitializerAST;
				this.$NewspeakASTs$InitializerAST$ = this._$NewspeakASTs$InitializerAST$ = $.$NewspeakASTs$InitializerAST$;
				this.$NewspeakASTs$KeywordPatternAST = this._$NewspeakASTs$KeywordPatternAST = $.$NewspeakASTs$KeywordPatternAST;
				this.$NewspeakASTs$KeywordPatternAST$ = this._$NewspeakASTs$KeywordPatternAST$ = $.$NewspeakASTs$KeywordPatternAST$;
				this.$NewspeakASTs$KeywordPatternPairAST = this._$NewspeakASTs$KeywordPatternPairAST = $.$NewspeakASTs$KeywordPatternPairAST;
				this.$NewspeakASTs$KeywordPatternPairAST$ = this._$NewspeakASTs$KeywordPatternPairAST$ = $.$NewspeakASTs$KeywordPatternPairAST$;
				this.$NewspeakASTs$LiteralAST = this._$NewspeakASTs$LiteralAST = $.$NewspeakASTs$LiteralAST;
				this.$NewspeakASTs$LiteralAST$ = this._$NewspeakASTs$LiteralAST$ = $.$NewspeakASTs$LiteralAST$;
				this.$NewspeakASTs$LiteralPatternAST = this._$NewspeakASTs$LiteralPatternAST = $.$NewspeakASTs$LiteralPatternAST;
				this.$NewspeakASTs$LiteralPatternAST$ = this._$NewspeakASTs$LiteralPatternAST$ = $.$NewspeakASTs$LiteralPatternAST$;
				this.$NewspeakASTs$MessageAST = this._$NewspeakASTs$MessageAST = $.$NewspeakASTs$MessageAST;
				this.$NewspeakASTs$MessageAST$ = this._$NewspeakASTs$MessageAST$ = $.$NewspeakASTs$MessageAST$;
				this.$NewspeakASTs$MessagePatternAST = this._$NewspeakASTs$MessagePatternAST = $.$NewspeakASTs$MessagePatternAST;
				this.$NewspeakASTs$MessagePatternAST$ = this._$NewspeakASTs$MessagePatternAST$ = $.$NewspeakASTs$MessagePatternAST$;
				this.$NewspeakASTs$MethodAST = this._$NewspeakASTs$MethodAST = $.$NewspeakASTs$MethodAST;
				this.$NewspeakASTs$MethodAST$ = this._$NewspeakASTs$MethodAST$ = $.$NewspeakASTs$MethodAST$;
				this.$NewspeakASTs$MixinApplicationAST = this._$NewspeakASTs$MixinApplicationAST = $.$NewspeakASTs$MixinApplicationAST;
				this.$NewspeakASTs$MixinApplicationAST$ = this._$NewspeakASTs$MixinApplicationAST$ = $.$NewspeakASTs$MixinApplicationAST$;
				this.$NewspeakASTs$MixinApplicationClassAST = this._$NewspeakASTs$MixinApplicationClassAST = $.$NewspeakASTs$MixinApplicationClassAST;
				this.$NewspeakASTs$MixinApplicationClassAST$ = this._$NewspeakASTs$MixinApplicationClassAST$ = $.$NewspeakASTs$MixinApplicationClassAST$;
				this.$NewspeakASTs$MutableSlotDefAST = this._$NewspeakASTs$MutableSlotDefAST = $.$NewspeakASTs$MutableSlotDefAST;
				this.$NewspeakASTs$MutableSlotDefAST$ = this._$NewspeakASTs$MutableSlotDefAST$ = $.$NewspeakASTs$MutableSlotDefAST$;
				this.$NewspeakASTs$NSSideAST = this._$NewspeakASTs$NSSideAST = $.$NewspeakASTs$NSSideAST;
				this.$NewspeakASTs$NSSideAST$ = this._$NewspeakASTs$NSSideAST$ = $.$NewspeakASTs$NSSideAST$;
				this.$NewspeakASTs$NormalSendAST = this._$NewspeakASTs$NormalSendAST = $.$NewspeakASTs$NormalSendAST;
				this.$NewspeakASTs$NormalSendAST$ = this._$NewspeakASTs$NormalSendAST$ = $.$NewspeakASTs$NormalSendAST$;
				this.$NewspeakASTs$NumberAST = this._$NewspeakASTs$NumberAST = $.$NewspeakASTs$NumberAST;
				this.$NewspeakASTs$NumberAST$ = this._$NewspeakASTs$NumberAST$ = $.$NewspeakASTs$NumberAST$;
				this.$NewspeakASTs$ParameterizedTypeAST = this._$NewspeakASTs$ParameterizedTypeAST = $.$NewspeakASTs$ParameterizedTypeAST;
				this.$NewspeakASTs$ParameterizedTypeAST$ = this._$NewspeakASTs$ParameterizedTypeAST$ = $.$NewspeakASTs$ParameterizedTypeAST$;
				this.$NewspeakASTs$PatternAST = this._$NewspeakASTs$PatternAST = $.$NewspeakASTs$PatternAST;
				this.$NewspeakASTs$PatternAST$ = this._$NewspeakASTs$PatternAST$ = $.$NewspeakASTs$PatternAST$;
				this.$NewspeakASTs$ReturnStatAST = this._$NewspeakASTs$ReturnStatAST = $.$NewspeakASTs$ReturnStatAST;
				this.$NewspeakASTs$ReturnStatAST$ = this._$NewspeakASTs$ReturnStatAST$ = $.$NewspeakASTs$ReturnStatAST$;
				this.$NewspeakASTs$SendAST = this._$NewspeakASTs$SendAST = $.$NewspeakASTs$SendAST;
				this.$NewspeakASTs$SendAST$ = this._$NewspeakASTs$SendAST$ = $.$NewspeakASTs$SendAST$;
				this.$NewspeakASTs$SetterSendAST = this._$NewspeakASTs$SetterSendAST = $.$NewspeakASTs$SetterSendAST;
				this.$NewspeakASTs$SetterSendAST$ = this._$NewspeakASTs$SetterSendAST$ = $.$NewspeakASTs$SetterSendAST$;
				this.$NewspeakASTs$SideAST = this._$NewspeakASTs$SideAST = $.$NewspeakASTs$SideAST;
				this.$NewspeakASTs$SideAST$ = this._$NewspeakASTs$SideAST$ = $.$NewspeakASTs$SideAST$;
				this.$NewspeakASTs$SlotDefAST = this._$NewspeakASTs$SlotDefAST = $.$NewspeakASTs$SlotDefAST;
				this.$NewspeakASTs$SlotDefAST$ = this._$NewspeakASTs$SlotDefAST$ = $.$NewspeakASTs$SlotDefAST$;
				this.$NewspeakASTs$StringAST = this._$NewspeakASTs$StringAST = $.$NewspeakASTs$StringAST;
				this.$NewspeakASTs$StringAST$ = this._$NewspeakASTs$StringAST$ = $.$NewspeakASTs$StringAST$;
				this.$NewspeakASTs$SymbolAST = this._$NewspeakASTs$SymbolAST = $.$NewspeakASTs$SymbolAST;
				this.$NewspeakASTs$SymbolAST$ = this._$NewspeakASTs$SymbolAST$ = $.$NewspeakASTs$SymbolAST$;
				this.$NewspeakASTs$TupleAST = this._$NewspeakASTs$TupleAST = $.$NewspeakASTs$TupleAST;
				this.$NewspeakASTs$TupleAST$ = this._$NewspeakASTs$TupleAST$ = $.$NewspeakASTs$TupleAST$;
				this.$NewspeakASTs$TypeIdAST = this._$NewspeakASTs$TypeIdAST = $.$NewspeakASTs$TypeIdAST;
				this.$NewspeakASTs$TypeIdAST$ = this._$NewspeakASTs$TypeIdAST$ = $.$NewspeakASTs$TypeIdAST$;
				this.$NewspeakASTs$UnaryTypeOpAST = this._$NewspeakASTs$UnaryTypeOpAST = $.$NewspeakASTs$UnaryTypeOpAST;
				this.$NewspeakASTs$UnaryTypeOpAST$ = this._$NewspeakASTs$UnaryTypeOpAST$ = $.$NewspeakASTs$UnaryTypeOpAST$;
				this.$NewspeakASTs$VarDeclAST = this._$NewspeakASTs$VarDeclAST = $.$NewspeakASTs$VarDeclAST;
				this.$NewspeakASTs$VarDeclAST$ = this._$NewspeakASTs$VarDeclAST$ = $.$NewspeakASTs$VarDeclAST$;
				this.$NewspeakASTs$VariableAST = this._$NewspeakASTs$VariableAST = $.$NewspeakASTs$VariableAST;
				this.$NewspeakASTs$VariableAST$ = this._$NewspeakASTs$VariableAST$ = $.$NewspeakASTs$VariableAST$;
				this.$NewspeakASTs$VariablePatternAST = this._$NewspeakASTs$VariablePatternAST = $.$NewspeakASTs$VariablePatternAST;
				this.$NewspeakASTs$VariablePatternAST$ = this._$NewspeakASTs$VariablePatternAST$ = $.$NewspeakASTs$VariablePatternAST$;
				this.$NewspeakASTs$WildcardPatternAST = this._$NewspeakASTs$WildcardPatternAST = $.$NewspeakASTs$WildcardPatternAST;
				this.$NewspeakASTs$WildcardPatternAST$ = this._$NewspeakASTs$WildcardPatternAST$ = $.$NewspeakASTs$WildcardPatternAST$;
				this.$enclosingObjects$NewspeakASTs = enclosingObjects;
				this.$super$NewspeakASTs$slot = runtimeSuperclass;
				this.NewspeakASTs = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$OrderedCollection$slot = nil;
					this.$NewspeakASTs$AST$slot = nil;
					this.$NewspeakASTs$ASTCopier$slot = nil;
					this.$NewspeakASTs$ASTTool$slot = nil;
					this.$NewspeakASTs$ASTTraverser$slot = nil;
					this.$NewspeakASTs$AssignmentAST$slot = nil;
					this.$NewspeakASTs$BinaryTypeOpAST$slot = nil;
					this.$NewspeakASTs$BlockAST$slot = nil;
					this.$NewspeakASTs$BlockTypeAST$slot = nil;
					this.$NewspeakASTs$CascadedSendAST$slot = nil;
					this.$NewspeakASTs$CategoryAST$slot = nil;
					this.$NewspeakASTs$CharAST$slot = nil;
					this.$NewspeakASTs$ClassBodyAST$slot = nil;
					this.$NewspeakASTs$ClassDeclarationAST$slot = nil;
					this.$NewspeakASTs$ClassHeaderAST$slot = nil;
					this.$NewspeakASTs$ClassPrefixAST$slot = nil;
					this.$NewspeakASTs$CodeBodyAST$slot = nil;
					this.$NewspeakASTs$ImmutableSlotDefAST$slot = nil;
					this.$NewspeakASTs$InitializerAST$slot = nil;
					this.$NewspeakASTs$KeywordPatternAST$slot = nil;
					this.$NewspeakASTs$KeywordPatternPairAST$slot = nil;
					this.$NewspeakASTs$LiteralAST$slot = nil;
					this.$NewspeakASTs$LiteralPatternAST$slot = nil;
					this.$NewspeakASTs$MessageAST$slot = nil;
					this.$NewspeakASTs$MessagePatternAST$slot = nil;
					this.$NewspeakASTs$MethodAST$slot = nil;
					this.$NewspeakASTs$MixinApplicationAST$slot = nil;
					this.$NewspeakASTs$MixinApplicationClassAST$slot = nil;
					this.$NewspeakASTs$MutableSlotDefAST$slot = nil;
					this.$NewspeakASTs$NSSideAST$slot = nil;
					this.$NewspeakASTs$NormalSendAST$slot = nil;
					this.$NewspeakASTs$NumberAST$slot = nil;
					this.$NewspeakASTs$ParameterizedTypeAST$slot = nil;
					this.$NewspeakASTs$PatternAST$slot = nil;
					this.$NewspeakASTs$ReturnStatAST$slot = nil;
					this.$NewspeakASTs$SendAST$slot = nil;
					this.$NewspeakASTs$SetterSendAST$slot = nil;
					this.$NewspeakASTs$SideAST$slot = nil;
					this.$NewspeakASTs$SlotDefAST$slot = nil;
					this.$NewspeakASTs$StringAST$slot = nil;
					this.$NewspeakASTs$SymbolAST$slot = nil;
					this.$NewspeakASTs$TupleAST$slot = nil;
					this.$NewspeakASTs$TypeIdAST$slot = nil;
					this.$NewspeakASTs$UnaryTypeOpAST$slot = nil;
					this.$NewspeakASTs$VarDeclAST$slot = nil;
					this.$NewspeakASTs$VariableAST$slot = nil;
					this.$NewspeakASTs$VariablePatternAST$slot = nil;
					this.$NewspeakASTs$WildcardPatternAST$slot = nil;
				});
				this.basicNew = this.NewspeakASTs;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for NewspeakASTs";
			this.slots = [];
			this.methods = [new MM("usingLib:", true, null)];
			this.nestedClasses = [];
			this.$usingLib$ = (function ($platform) {
				return (new this.nonMeta.basicNew()).$instance$initializer($platform);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for NewspeakASTs";
					this.$usingLib$ = this._$usingLib$ = $.$usingLib$;
					this.$enclosingObjects$NewspeakASTs = enclosingObjects;
					this.$super$NewspeakASTs = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$NewspeakParsing = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for NewspeakParsing";
		this.name = "NewspeakParsing";
		this.header = "NewspeakParsing usingPlatform: platform grammar: grammar asts: asts = ((* The Newspeak parser.\r\rCopyright 2008 Cadence Design Systems, Inc.\rCopyright 2010 Felix Geller and Ryan Macnak\r   \rLicensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)|\r	OrderedCollection = platform collections OrderedCollection.\r\r	TypedGrammar = grammar TypedNS3Grammar. (* so we get rid of line above *)\r	ParserError = grammar ParserError.\r	\r	public ASTModule = asts. (* Used by compilation *)\r	BinaryTypeOpAST = asts BinaryTypeOpAST.\r	BlockAST = asts BlockAST.\r	BlockTypeAST = asts BlockTypeAST.\r	CascadedSendAST = asts CascadedSendAST.\r	CategoryAST = asts CategoryAST.\r	CharAST = asts CharAST.\r	ClassBodyAST = asts ClassBodyAST.\r	ClassDeclarationAST = asts ClassDeclarationAST.\r	ClassHeaderAST = asts ClassHeaderAST.\r	ClassPrefixAST = asts ClassPrefixAST.\r	CodeBodyAST = asts CodeBodyAST.\r	ImmutableSlotDefAST = asts ImmutableSlotDefAST.\r	InitializerAST = asts InitializerAST.\r	ParameterizedTypeAST = asts ParameterizedTypeAST.\r	MessageAST = asts MessageAST.\r	MessagePatternAST = asts MessagePatternAST.\r	MethodAST = asts MethodAST.\r      MixinApplicationClassAST = asts MixinApplicationClassAST.\r	MutableSlotDefAST = asts MutableSlotDefAST.\r	NormalSendAST = asts NormalSendAST.\r	NSSideAST = asts NSSideAST.\r	NumberAST = asts NumberAST.\r	ReturnStatAST = asts ReturnStatAST.\r	SetterSendAST = asts SetterSendAST.\r	SideAST = asts SideAST.\r	StringAST = asts StringAST.\r	SymbolAST = asts SymbolAST.\r	TupleAST = asts TupleAST.\r	TypeIdAST = asts TypeIdAST.\r	UnaryTypeOpAST = asts UnaryTypeOpAST.\r	VarDeclAST = asts VarDeclAST.\r	VariableAST = asts VariableAST.\r\r	protected MixinApplicationAST = asts MixinApplicationAST.\r\r	(* patterns *)\r	protected KeywordPatternAST = asts KeywordPatternAST.\r	protected KeywordPatternPairAST = asts KeywordPatternPairAST.\r	protected WildcardPatternAST = asts WildcardPatternAST.\r	protected LiteralPatternAST = asts LiteralPatternAST.\r	protected VariablePatternAST = asts VariablePatternAST.\r|)";
		this.slots = [
			new SM("OrderedCollection", false, false),
			new SM("TypedGrammar", false, false),
			new SM("ParserError", false, false),
			new SM("ASTModule", false, false),
			new SM("BinaryTypeOpAST", false, false),
			new SM("BlockAST", false, false),
			new SM("BlockTypeAST", false, false),
			new SM("CascadedSendAST", false, false),
			new SM("CategoryAST", false, false),
			new SM("CharAST", false, false),
			new SM("ClassBodyAST", false, false),
			new SM("ClassDeclarationAST", false, false),
			new SM("ClassHeaderAST", false, false),
			new SM("ClassPrefixAST", false, false),
			new SM("CodeBodyAST", false, false),
			new SM("ImmutableSlotDefAST", false, false),
			new SM("InitializerAST", false, false),
			new SM("ParameterizedTypeAST", false, false),
			new SM("MessageAST", false, false),
			new SM("MessagePatternAST", false, false),
			new SM("MethodAST", false, false),
			new SM("MixinApplicationClassAST", false, false),
			new SM("MutableSlotDefAST", false, false),
			new SM("NormalSendAST", false, false),
			new SM("NSSideAST", false, false),
			new SM("NumberAST", false, false),
			new SM("ReturnStatAST", false, false),
			new SM("SetterSendAST", false, false),
			new SM("SideAST", false, false),
			new SM("StringAST", false, false),
			new SM("SymbolAST", false, false),
			new SM("TupleAST", false, false),
			new SM("TypeIdAST", false, false),
			new SM("UnaryTypeOpAST", false, false),
			new SM("VarDeclAST", false, false),
			new SM("VariableAST", false, false),
			new SM("MixinApplicationAST", false, false),
			new SM("KeywordPatternAST", false, false),
			new SM("KeywordPatternPairAST", false, false),
			new SM("WildcardPatternAST", false, false),
			new SM("LiteralPatternAST", false, false),
			new SM("VariablePatternAST", false, false),
			new SM("NewspeakParsing`InternalParser", true, true),
			new SM("NewspeakParsing`Parser", true, true)
		];
		this.methods = [
			new MM("superInit`NewspeakParsing", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("language", false, "public language = (\r	^'Newspeak'\r)"),
			new MM("InternalParser", true, null),
			new MM("Parser", true, null),
			new MM("OrderedCollection", true, null),
			new MM("setOnce`OrderedCollection:", true, null),
			new MM("TypedGrammar", true, null),
			new MM("setOnce`TypedGrammar:", true, null),
			new MM("ParserError", true, null),
			new MM("setOnce`ParserError:", true, null),
			new MM("ASTModule", true, null),
			new MM("setOnce`ASTModule:", true, null),
			new MM("BinaryTypeOpAST", true, null),
			new MM("setOnce`BinaryTypeOpAST:", true, null),
			new MM("BlockAST", true, null),
			new MM("setOnce`BlockAST:", true, null),
			new MM("BlockTypeAST", true, null),
			new MM("setOnce`BlockTypeAST:", true, null),
			new MM("CascadedSendAST", true, null),
			new MM("setOnce`CascadedSendAST:", true, null),
			new MM("CategoryAST", true, null),
			new MM("setOnce`CategoryAST:", true, null),
			new MM("CharAST", true, null),
			new MM("setOnce`CharAST:", true, null),
			new MM("ClassBodyAST", true, null),
			new MM("setOnce`ClassBodyAST:", true, null),
			new MM("ClassDeclarationAST", true, null),
			new MM("setOnce`ClassDeclarationAST:", true, null),
			new MM("ClassHeaderAST", true, null),
			new MM("setOnce`ClassHeaderAST:", true, null),
			new MM("ClassPrefixAST", true, null),
			new MM("setOnce`ClassPrefixAST:", true, null),
			new MM("CodeBodyAST", true, null),
			new MM("setOnce`CodeBodyAST:", true, null),
			new MM("ImmutableSlotDefAST", true, null),
			new MM("setOnce`ImmutableSlotDefAST:", true, null),
			new MM("InitializerAST", true, null),
			new MM("setOnce`InitializerAST:", true, null),
			new MM("ParameterizedTypeAST", true, null),
			new MM("setOnce`ParameterizedTypeAST:", true, null),
			new MM("MessageAST", true, null),
			new MM("setOnce`MessageAST:", true, null),
			new MM("MessagePatternAST", true, null),
			new MM("setOnce`MessagePatternAST:", true, null),
			new MM("MethodAST", true, null),
			new MM("setOnce`MethodAST:", true, null),
			new MM("MixinApplicationClassAST", true, null),
			new MM("setOnce`MixinApplicationClassAST:", true, null),
			new MM("MutableSlotDefAST", true, null),
			new MM("setOnce`MutableSlotDefAST:", true, null),
			new MM("NormalSendAST", true, null),
			new MM("setOnce`NormalSendAST:", true, null),
			new MM("NSSideAST", true, null),
			new MM("setOnce`NSSideAST:", true, null),
			new MM("NumberAST", true, null),
			new MM("setOnce`NumberAST:", true, null),
			new MM("ReturnStatAST", true, null),
			new MM("setOnce`ReturnStatAST:", true, null),
			new MM("SetterSendAST", true, null),
			new MM("setOnce`SetterSendAST:", true, null),
			new MM("SideAST", true, null),
			new MM("setOnce`SideAST:", true, null),
			new MM("StringAST", true, null),
			new MM("setOnce`StringAST:", true, null),
			new MM("SymbolAST", true, null),
			new MM("setOnce`SymbolAST:", true, null),
			new MM("TupleAST", true, null),
			new MM("setOnce`TupleAST:", true, null),
			new MM("TypeIdAST", true, null),
			new MM("setOnce`TypeIdAST:", true, null),
			new MM("UnaryTypeOpAST", true, null),
			new MM("setOnce`UnaryTypeOpAST:", true, null),
			new MM("VarDeclAST", true, null),
			new MM("setOnce`VarDeclAST:", true, null),
			new MM("VariableAST", true, null),
			new MM("setOnce`VariableAST:", true, null),
			new MM("MixinApplicationAST", true, null),
			new MM("setOnce`MixinApplicationAST:", true, null),
			new MM("KeywordPatternAST", true, null),
			new MM("setOnce`KeywordPatternAST:", true, null),
			new MM("KeywordPatternPairAST", true, null),
			new MM("setOnce`KeywordPatternPairAST:", true, null),
			new MM("WildcardPatternAST", true, null),
			new MM("setOnce`WildcardPatternAST:", true, null),
			new MM("LiteralPatternAST", true, null),
			new MM("setOnce`LiteralPatternAST:", true, null),
			new MM("VariablePatternAST", true, null),
			new MM("setOnce`VariablePatternAST:", true, null),
			new MM("NewspeakParsing`InternalParser", true, null),
			new MM("NewspeakParsing`InternalParser:", true, null),
			new MM("NewspeakParsing`Parser", true, null),
			new MM("NewspeakParsing`Parser:", true, null)
		];
		this.nestedClasses = [
			"NewspeakParsing`InternalParser",
			"NewspeakParsing`Parser"
		];
		this.applications = [];
		this.$superInit$NewspeakParsing = (function ($platform, $grammar, $asts) {
			var self = this;
			self.$super$NewspeakParsing$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($platform, $grammar, $asts) {
			var self = this;
			self._$superInit$NewspeakParsing($platform, $grammar, $asts);
			self._$setOnce$OrderedCollection$($platform.$collections().$OrderedCollection());
			self._$setOnce$TypedGrammar$($grammar.$TypedNS3Grammar());
			self._$setOnce$ParserError$($grammar.$ParserError());
			self._$setOnce$ASTModule$($asts);
			self._$setOnce$BinaryTypeOpAST$($asts.$BinaryTypeOpAST());
			self._$setOnce$BlockAST$($asts.$BlockAST());
			self._$setOnce$BlockTypeAST$($asts.$BlockTypeAST());
			self._$setOnce$CascadedSendAST$($asts.$CascadedSendAST());
			self._$setOnce$CategoryAST$($asts.$CategoryAST());
			self._$setOnce$CharAST$($asts.$CharAST());
			self._$setOnce$ClassBodyAST$($asts.$ClassBodyAST());
			self._$setOnce$ClassDeclarationAST$($asts.$ClassDeclarationAST());
			self._$setOnce$ClassHeaderAST$($asts.$ClassHeaderAST());
			self._$setOnce$ClassPrefixAST$($asts.$ClassPrefixAST());
			self._$setOnce$CodeBodyAST$($asts.$CodeBodyAST());
			self._$setOnce$ImmutableSlotDefAST$($asts.$ImmutableSlotDefAST());
			self._$setOnce$InitializerAST$($asts.$InitializerAST());
			self._$setOnce$ParameterizedTypeAST$($asts.$ParameterizedTypeAST());
			self._$setOnce$MessageAST$($asts.$MessageAST());
			self._$setOnce$MessagePatternAST$($asts.$MessagePatternAST());
			self._$setOnce$MethodAST$($asts.$MethodAST());
			self._$setOnce$MixinApplicationClassAST$($asts.$MixinApplicationClassAST());
			self._$setOnce$MutableSlotDefAST$($asts.$MutableSlotDefAST());
			self._$setOnce$NormalSendAST$($asts.$NormalSendAST());
			self._$setOnce$NSSideAST$($asts.$NSSideAST());
			self._$setOnce$NumberAST$($asts.$NumberAST());
			self._$setOnce$ReturnStatAST$($asts.$ReturnStatAST());
			self._$setOnce$SetterSendAST$($asts.$SetterSendAST());
			self._$setOnce$SideAST$($asts.$SideAST());
			self._$setOnce$StringAST$($asts.$StringAST());
			self._$setOnce$SymbolAST$($asts.$SymbolAST());
			self._$setOnce$TupleAST$($asts.$TupleAST());
			self._$setOnce$TypeIdAST$($asts.$TypeIdAST());
			self._$setOnce$UnaryTypeOpAST$($asts.$UnaryTypeOpAST());
			self._$setOnce$VarDeclAST$($asts.$VarDeclAST());
			self._$setOnce$VariableAST$($asts.$VariableAST());
			self._$setOnce$MixinApplicationAST$($asts.$MixinApplicationAST());
			self._$setOnce$KeywordPatternAST$($asts.$KeywordPatternAST());
			self._$setOnce$KeywordPatternPairAST$($asts.$KeywordPatternPairAST());
			self._$setOnce$WildcardPatternAST$($asts.$WildcardPatternAST());
			self._$setOnce$LiteralPatternAST$($asts.$LiteralPatternAST());
			self._$setOnce$VariablePatternAST$($asts.$VariablePatternAST());
			return self;
		});
		this.$language = (function () {
			var self = this;
			return "Newspeak";
		});
		this.$InternalParser = (function () {
			if (nil === this.$NewspeakParsing$InternalParser$slot) {
				var self = this;
				var superclass = self._$Parser();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakParsing);
				var mixin = $.$NewspeakParsing$InternalParser;
				this.$NewspeakParsing$InternalParser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakParsing$InternalParser$slot;
		});
		this.$Parser = (function () {
			if (nil === this.$NewspeakParsing$Parser$slot) {
				var self = this;
				var superclass = self._$TypedGrammar();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakParsing);
				var mixin = $.$NewspeakParsing$Parser;
				this.$NewspeakParsing$Parser$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakParsing$Parser$slot;
		});
		this.$OrderedCollection = (function () {
			return this.$OrderedCollection$slot;
		});
		this.$setOnce$OrderedCollection$ = (function (v) {
			this.$OrderedCollection$slot = v;
			return this;
		});
		this.$TypedGrammar = (function () {
			return this.$TypedGrammar$slot;
		});
		this.$setOnce$TypedGrammar$ = (function (v) {
			this.$TypedGrammar$slot = v;
			return this;
		});
		this.$ParserError = (function () {
			return this.$ParserError$slot;
		});
		this.$setOnce$ParserError$ = (function (v) {
			this.$ParserError$slot = v;
			return this;
		});
		this.$ASTModule = (function () {
			return this.$ASTModule$slot;
		});
		this.$setOnce$ASTModule$ = (function (v) {
			this.$ASTModule$slot = v;
			return this;
		});
		this.$BinaryTypeOpAST = (function () {
			return this.$BinaryTypeOpAST$slot;
		});
		this.$setOnce$BinaryTypeOpAST$ = (function (v) {
			this.$BinaryTypeOpAST$slot = v;
			return this;
		});
		this.$BlockAST = (function () {
			return this.$BlockAST$slot;
		});
		this.$setOnce$BlockAST$ = (function (v) {
			this.$BlockAST$slot = v;
			return this;
		});
		this.$BlockTypeAST = (function () {
			return this.$BlockTypeAST$slot;
		});
		this.$setOnce$BlockTypeAST$ = (function (v) {
			this.$BlockTypeAST$slot = v;
			return this;
		});
		this.$CascadedSendAST = (function () {
			return this.$CascadedSendAST$slot;
		});
		this.$setOnce$CascadedSendAST$ = (function (v) {
			this.$CascadedSendAST$slot = v;
			return this;
		});
		this.$CategoryAST = (function () {
			return this.$CategoryAST$slot;
		});
		this.$setOnce$CategoryAST$ = (function (v) {
			this.$CategoryAST$slot = v;
			return this;
		});
		this.$CharAST = (function () {
			return this.$CharAST$slot;
		});
		this.$setOnce$CharAST$ = (function (v) {
			this.$CharAST$slot = v;
			return this;
		});
		this.$ClassBodyAST = (function () {
			return this.$ClassBodyAST$slot;
		});
		this.$setOnce$ClassBodyAST$ = (function (v) {
			this.$ClassBodyAST$slot = v;
			return this;
		});
		this.$ClassDeclarationAST = (function () {
			return this.$ClassDeclarationAST$slot;
		});
		this.$setOnce$ClassDeclarationAST$ = (function (v) {
			this.$ClassDeclarationAST$slot = v;
			return this;
		});
		this.$ClassHeaderAST = (function () {
			return this.$ClassHeaderAST$slot;
		});
		this.$setOnce$ClassHeaderAST$ = (function (v) {
			this.$ClassHeaderAST$slot = v;
			return this;
		});
		this.$ClassPrefixAST = (function () {
			return this.$ClassPrefixAST$slot;
		});
		this.$setOnce$ClassPrefixAST$ = (function (v) {
			this.$ClassPrefixAST$slot = v;
			return this;
		});
		this.$CodeBodyAST = (function () {
			return this.$CodeBodyAST$slot;
		});
		this.$setOnce$CodeBodyAST$ = (function (v) {
			this.$CodeBodyAST$slot = v;
			return this;
		});
		this.$ImmutableSlotDefAST = (function () {
			return this.$ImmutableSlotDefAST$slot;
		});
		this.$setOnce$ImmutableSlotDefAST$ = (function (v) {
			this.$ImmutableSlotDefAST$slot = v;
			return this;
		});
		this.$InitializerAST = (function () {
			return this.$InitializerAST$slot;
		});
		this.$setOnce$InitializerAST$ = (function (v) {
			this.$InitializerAST$slot = v;
			return this;
		});
		this.$ParameterizedTypeAST = (function () {
			return this.$ParameterizedTypeAST$slot;
		});
		this.$setOnce$ParameterizedTypeAST$ = (function (v) {
			this.$ParameterizedTypeAST$slot = v;
			return this;
		});
		this.$MessageAST = (function () {
			return this.$MessageAST$slot;
		});
		this.$setOnce$MessageAST$ = (function (v) {
			this.$MessageAST$slot = v;
			return this;
		});
		this.$MessagePatternAST = (function () {
			return this.$MessagePatternAST$slot;
		});
		this.$setOnce$MessagePatternAST$ = (function (v) {
			this.$MessagePatternAST$slot = v;
			return this;
		});
		this.$MethodAST = (function () {
			return this.$MethodAST$slot;
		});
		this.$setOnce$MethodAST$ = (function (v) {
			this.$MethodAST$slot = v;
			return this;
		});
		this.$MixinApplicationClassAST = (function () {
			return this.$MixinApplicationClassAST$slot;
		});
		this.$setOnce$MixinApplicationClassAST$ = (function (v) {
			this.$MixinApplicationClassAST$slot = v;
			return this;
		});
		this.$MutableSlotDefAST = (function () {
			return this.$MutableSlotDefAST$slot;
		});
		this.$setOnce$MutableSlotDefAST$ = (function (v) {
			this.$MutableSlotDefAST$slot = v;
			return this;
		});
		this.$NormalSendAST = (function () {
			return this.$NormalSendAST$slot;
		});
		this.$setOnce$NormalSendAST$ = (function (v) {
			this.$NormalSendAST$slot = v;
			return this;
		});
		this.$NSSideAST = (function () {
			return this.$NSSideAST$slot;
		});
		this.$setOnce$NSSideAST$ = (function (v) {
			this.$NSSideAST$slot = v;
			return this;
		});
		this.$NumberAST = (function () {
			return this.$NumberAST$slot;
		});
		this.$setOnce$NumberAST$ = (function (v) {
			this.$NumberAST$slot = v;
			return this;
		});
		this.$ReturnStatAST = (function () {
			return this.$ReturnStatAST$slot;
		});
		this.$setOnce$ReturnStatAST$ = (function (v) {
			this.$ReturnStatAST$slot = v;
			return this;
		});
		this.$SetterSendAST = (function () {
			return this.$SetterSendAST$slot;
		});
		this.$setOnce$SetterSendAST$ = (function (v) {
			this.$SetterSendAST$slot = v;
			return this;
		});
		this.$SideAST = (function () {
			return this.$SideAST$slot;
		});
		this.$setOnce$SideAST$ = (function (v) {
			this.$SideAST$slot = v;
			return this;
		});
		this.$StringAST = (function () {
			return this.$StringAST$slot;
		});
		this.$setOnce$StringAST$ = (function (v) {
			this.$StringAST$slot = v;
			return this;
		});
		this.$SymbolAST = (function () {
			return this.$SymbolAST$slot;
		});
		this.$setOnce$SymbolAST$ = (function (v) {
			this.$SymbolAST$slot = v;
			return this;
		});
		this.$TupleAST = (function () {
			return this.$TupleAST$slot;
		});
		this.$setOnce$TupleAST$ = (function (v) {
			this.$TupleAST$slot = v;
			return this;
		});
		this.$TypeIdAST = (function () {
			return this.$TypeIdAST$slot;
		});
		this.$setOnce$TypeIdAST$ = (function (v) {
			this.$TypeIdAST$slot = v;
			return this;
		});
		this.$UnaryTypeOpAST = (function () {
			return this.$UnaryTypeOpAST$slot;
		});
		this.$setOnce$UnaryTypeOpAST$ = (function (v) {
			this.$UnaryTypeOpAST$slot = v;
			return this;
		});
		this.$VarDeclAST = (function () {
			return this.$VarDeclAST$slot;
		});
		this.$setOnce$VarDeclAST$ = (function (v) {
			this.$VarDeclAST$slot = v;
			return this;
		});
		this.$VariableAST = (function () {
			return this.$VariableAST$slot;
		});
		this.$setOnce$VariableAST$ = (function (v) {
			this.$VariableAST$slot = v;
			return this;
		});
		this.$MixinApplicationAST = (function () {
			return this.$MixinApplicationAST$slot;
		});
		this.$setOnce$MixinApplicationAST$ = (function (v) {
			this.$MixinApplicationAST$slot = v;
			return this;
		});
		this.$KeywordPatternAST = (function () {
			return this.$KeywordPatternAST$slot;
		});
		this.$setOnce$KeywordPatternAST$ = (function (v) {
			this.$KeywordPatternAST$slot = v;
			return this;
		});
		this.$KeywordPatternPairAST = (function () {
			return this.$KeywordPatternPairAST$slot;
		});
		this.$setOnce$KeywordPatternPairAST$ = (function (v) {
			this.$KeywordPatternPairAST$slot = v;
			return this;
		});
		this.$WildcardPatternAST = (function () {
			return this.$WildcardPatternAST$slot;
		});
		this.$setOnce$WildcardPatternAST$ = (function (v) {
			this.$WildcardPatternAST$slot = v;
			return this;
		});
		this.$LiteralPatternAST = (function () {
			return this.$LiteralPatternAST$slot;
		});
		this.$setOnce$LiteralPatternAST$ = (function (v) {
			this.$LiteralPatternAST$slot = v;
			return this;
		});
		this.$VariablePatternAST = (function () {
			return this.$VariablePatternAST$slot;
		});
		this.$setOnce$VariablePatternAST$ = (function (v) {
			this.$VariablePatternAST$slot = v;
			return this;
		});
		this.$NewspeakParsing$InternalParser = (function () {
			return this.$NewspeakParsing$InternalParser$slot;
		});
		this.$NewspeakParsing$InternalParser$ = (function (v) {
			this.$NewspeakParsing$InternalParser$slot = v;
			return this;
		});
		this.$NewspeakParsing$Parser = (function () {
			return this.$NewspeakParsing$Parser$slot;
		});
		this.$NewspeakParsing$Parser$ = (function (v) {
			this.$NewspeakParsing$Parser$slot = v;
			return this;
		});
		this.$NewspeakParsing$InternalParser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakParsing`InternalParser";
			this.name = "NewspeakParsing`InternalParser";
			this.header = "InternalParser = Parser ((* A parser able to handle identifiers involving the backquote character, `. \rSuch identifiers are illegal in regular Newspeak code, and are used as synthetic names in generated code, precisely because they cannot conflict with user code.\r\rSynthetic code that references such identifiers cannot be processed by the usual parser pipeline, and has often been manufactured by tedious and error prone manual AST construction.\r\rThe intent is that instead, such code could be written as source code and parsed using this parser, producing a valid AST that the rest of the compiler can use.\r*)|\r  backTick = char: \"`\".\r  backTickIdentifier = tokenFor:( \r		(letter | _ | backTick),  ((letter | digit | _ | backTick)) star\r                 wrapper:[:fst   :snd  | fst asString, (String withAll: snd)]\r	).\r|)";
			this.slots = [
				new SM("backTick", false, false),
				new SM("backTickIdentifier", false, false)
			];
			this.methods = [
				new MM("superInit`NewspeakParsing`InternalParser", true, "Parser"),
				new MM("instance`initializer", true, "Parser"),
				new MM("identifier", false, "public identifier = (\r  ^backTickIdentifier\r)"),
				new MM("backTick", true, null),
				new MM("setOnce`backTick:", true, null),
				new MM("backTickIdentifier", true, null),
				new MM("setOnce`backTickIdentifier:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakParsing$InternalParser = (function () {
				var self = this;
				self.$super$NewspeakParsing$InternalParser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakParsing$InternalParser();
				self._$setOnce$backTick$(self._$char$("`"));
				self._$setOnce$backTickIdentifier$(self._$tokenFor$(self._$letter().$$pipe(self._$_()).$$pipe(self._$backTick()).$$comma(self._$letter().$$pipe(self._$digit()).$$pipe(self._$_()).$$pipe(self._$backTick()).$star()).$wrapper$((function ($fst, $snd) {
					return $fst.$asString().$$comma(self._$String().$withAll$($snd));
				}))));
				return self;
			});
			this.$identifier = (function () {
				var self = this;
				return self._$backTickIdentifier();
			});
			this.$backTick = (function () {
				return this.$backTick$slot;
			});
			this.$setOnce$backTick$ = (function (v) {
				this.$backTick$slot = v;
				return this;
			});
			this.$backTickIdentifier = (function () {
				return this.$backTickIdentifier$slot;
			});
			this.$setOnce$backTickIdentifier$ = (function (v) {
				this.$backTickIdentifier$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakParsing`InternalParser";
					this._$superInit$NewspeakParsing$InternalParser = $.$superInit$NewspeakParsing$InternalParser;
					this.$superInit$NewspeakParsing$InternalParser = dnuCatcher("$superInit$NewspeakParsing$InternalParser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$identifier = this._$identifier = $.$identifier;
					this._$backTick = $.$backTick;
					this.$backTick = dnuCatcher("$backTick");
					this._$setOnce$backTick$ = $.$setOnce$backTick$;
					this.$setOnce$backTick$ = dnuCatcher("$setOnce$backTick$");
					this._$backTickIdentifier = $.$backTickIdentifier;
					this.$backTickIdentifier = dnuCatcher("$backTickIdentifier");
					this._$setOnce$backTickIdentifier$ = $.$setOnce$backTickIdentifier$;
					this.$setOnce$backTickIdentifier$ = dnuCatcher("$setOnce$backTickIdentifier$");
					this.$enclosingObjects$NewspeakParsing$InternalParser = enclosingObjects;
					this.$super$NewspeakParsing$InternalParser$slot = runtimeSuperclass;
					this["NewspeakParsing`InternalParser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$backTick$slot = nil;
						this.$backTickIdentifier$slot = nil;
					});
					this.basicNew = this["NewspeakParsing`InternalParser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakParsing`InternalParser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakParsing`InternalParser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakParsing$InternalParser = enclosingObjects;
						this.$super$NewspeakParsing$InternalParser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakParsing$Parser = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakParsing`Parser";
			this.name = "NewspeakParsing`Parser";
			this.header = "Parser = TypedGrammar ((* Parser for Newpeak. Produces a Newspeak AST. This tree represents syntax only. No attribution information such as scopes/symbol tables, types etc. is present in the tree. The tree  only gives its structure and the source code positions of the nodes.\r\rThe parser works by overridding the accessors for most grammar productions in its superclasses. The superclass methods deal with the grammar alone; each production defines a parser that will parse the syntax and return the corresponding set of tokens. The methods here process the output of the superclass methods to yield parsers that will construct ASTs. Hence, the typical method for a production foo is something like\r\rfoo\r\r^super foo wrapper:[:w :x :y :z | FooAST new from: x and: y; start: w start; end: z end]\r\rThis example assumes that the semantic content of foo is given by x and y. Typically, x and y will be the results of  productions that have also been overridden, to provide  ASTs that will be subtrees of the Foo node. In contarst, w and z are likely to be tokens used in the concrete syntax to delimit the Foo construct. They may (or may not) be used to extract source code position information, and then discarded. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`NewspeakParsing`Parser", true, "TypedGrammar"),
				new MM("instance`initializer", true, "TypedGrammar"),
				new MM("blockTypeArgList", false, "blockTypeArgList ^ <List[TypeExpr]> = (\r	^super blockTypeArgList\r		wrap:[:bta <TypeExpr | List[TypeExpr]> | \r				bta isNil \r					ifTrue:[{}] (* nullary block type with default return type *)\r					ifFalse:[\r						(bta isKindOfCollection) ifFalse: [{bta}] ifTrue:[bta]\r						]\r				(* nullary block type with non-trivial return type will cause bta to be a type expression. In that case, we package it as a collection *)\r			]\r)"),
				new MM("classBody", false, "classBody ^ <ClassBodyAST> = (\r	^super classBody wrapper: \r		[:instInit <InitializerAST> :instanceSide <SideAST>  :classSide <SideAST> |\r		|\r		klassSide <SideAST> = classSide isNil  \r			ifTrue: [SideAST new variables: OrderedCollection new \r	                                                  categories: OrderedCollection new]\r			ifFalse: [classSide].\r		|\r		ClassBodyAST initializer: instInit instanceSide: instanceSide classSide: klassSide].\r)"),
				new MM("classComment", false, "public classComment = (\r	^super classComment wrapper: [:ws :c | c token]\r)"),
				new MM("classDecl", false, "classDecl ^ <ClassDeclarationAST> = (\r \r^super classDecl \r	wrapper:[ :ckw :klassName <Token> :cons :eq :listAndBody <{List[SendAST]. ClassBodyAST}> |\r		| \r		konstruktor = cons isNil \r			ifTrue:[defaultConstructorPattern start: klassName end + 1; end: klassName end]\r			ifFalse:[cons].\r		bodyOrDot <ClassBodyAST> = listAndBody last.\r		iList <List[SendAST]> = listAndBody first.\r		end <Integer> = bodyOrDot end.\r		|\r		bodyOrDot isAST ifTrue:[\r			(ClassDeclarationAST \r				named: klassName \r				factoryMsg: konstruktor \r				inheriting: iList body: bodyOrDot)\r			start: ckw start;\r			end: end            \r               ]\r	ifFalse:[\r		MixinApplicationClassAST \r			named: klassName token factoryMsg: konstruktor inheriting: iList\r		]\r	].\r)"),
				new MM("classPrefix", false, "classPrefix ^ <ClassHeaderAST> = (\r\r^super classPrefix\r     wrapper:[:klassName :cons :eq :superClause  | \r                |  start  konstruktor superCall  |\r\r                  start:: klassName start.\r                  konstruktor:: cons isNil \r                       ifTrue:[defaultConstructorPattern start: klassName end + 1; end: klassName end]\r                       ifFalse:[cons].\r                  superCall:: superClause isNil \r                                     ifTrue:[defaultSuperCallAt: eq end + 1 ending: eq end] \r                                     ifFalse:[superClause].\r                 \r                  (ClassPrefixAST \r				name: klassName token asSymbol\r                        constructor: konstruktor\r				superclassName: superCall receiver message selector\r				superclassCall: superCall receiver					                         				superConstructorCall: superCall message)\r                        start: start; end: superCall end                   \r                ].\r)"),
				new MM("defaultSuperclassAndBody", false, "defaultSuperclassAndBody ^ <{List[SendAST]. ClassBodyAST}> = (\r	^super defaultSuperclassAndBody\r		wrapper:[:body  <ClassBodyAST> |\r			{{defaultSuperCallAt: body start -1 ending: body start - 1}. body}\r			]\r)"),
				new MM("explicitInheritanceListAndOrBody", false, "explicitInheritanceListAndOrBody ^ <{List[SendAST]. ClassBodyAST}> = (\r	^super explicitInheritanceListAndOrBody\r		wrapper:[:ic <SendAST> :ms <{List[{Token. SendAST}]. ClassBodyAST} | ClassBodyAST> |\r			ms isCollection \r				ifFalse:[{{ic}. ms}]\r				ifTrue:[\r					| iList <List[SendAST]> = (ms first collect:[:p | p last]) addFirst: ic; yourself. |\r					{iList. ms last}\r					]\r			]\r)"),
				new MM("hereSetterSendFromMsg:", false, "hereSetterSendFromMsg: msg = (\r\r	(* Build an implicit here send with the message msg *)\r\r	^SetterSendAST to: self hereNode  \r                          	send: msg\r    	                      	start: msg start\r					end: msg end\r)"),
				new MM("instanceInitializer", false, "instanceInitializer ^ <InitializerAST> = (\r	^super instanceInitializer\r		wrapper:[:lp <Token> :cmnt :instVars :inits <List[ExpressionAST]> :rp <Token> |\r			| vs isSeq |\r			isSeq:: true.\r			vs:: instVars isNil ifTrue:[OrderedCollection new] ifFalse:[isSeq:: instVars first. instVars last].\r			(InitializerAST  slots: vs initializerExpressions: inits comment: cmnt slotsAreSequential: isSeq)\r				start: lp start; end: rp end\r			]\r)"),
				new MM("keywordMessages", false, "keywordMessages ^<Tuple[List[MessageAST], List[MessageAST], MessageAST]> = (\r	^super keywordMessages wrapper:\r		[  :kwMsg <MessageAST> | \r		(* keywordMsg *)\r			{{}. {}. kwMsg}.\r		]\r)"),
				new MM("keywordPattern", false, "keywordPattern ^ <KeywordPatternAST> = (\r^ super keywordPattern\r	wrap: [ :pairs | |kws kwsAST pats patsAST st ed |\r		st:: pairs first start.\r		ed:: pairs last end.\r		\r		kws:: OrderedCollection new.\r		pats:: pairs inject: OrderedCollection new \r					into: [:m :p | |kwAST|\r							kwAST:: SymbolAST new \r										val: p keyword token asSymbol;\r										start: p keyword start;\r										end: p keyword end.\r							kws add: kwAST.\r							m add: p pattern; yourself].\r						\r		kwsAST:: TupleAST new\r					elements: kws;\r					start: st; end: ed.\r		patsAST:: TupleAST new\r					elements: pats;\r					start: st; end: ed.\r\r		KeywordPatternAST new\r			keywords: kwsAST;\r			patterns: patsAST;\r			start: st;\r			end: ed.\r	].\r)"),
				new MM("kwPatternPair", false, "kwPatternPair = (\r^ super kwPatternPair\r	wrapper: [ :keyw  :val |\r		KeywordPatternPairAST new\r			keyword: keyw;\r			pattern: (val isNil \r						ifTrue: [WildcardPatternAST new \r									start: keyw end; end: keyw end] \r						ifFalse: [val]);\r			start: keyw start;\r			end: (val isNil ifTrue: [keyw end] ifFalse: [val end])\r	].\r)"),
				new MM("literalMessage", false, "literalMessage = (\r	^super literalMessage wrap:\r		[:kwsOrMsg |\r		kwsOrMsg isCollection\r			ifTrue:\r				[| sel  args  |\r				args:: OrderedCollection new.\r				sel:: kwsOrMsg inject: '' into:\r						[:s :kwd | \r						args add: (kwd at:2). \r						s, (kwd at:1) token].\r				MessageAST new send: sel asSymbol with: args;\r					start: kwsOrMsg first first concreteStart;\r					end: args last concreteEnd]\r			ifFalse:\r				[kwsOrMsg]]\r)"),
				new MM("literalMessageComment", false, "literalMessageComment = (\r	^super literalMessageComment wrap:\r		[:tokens| (* beginNSComment :literalmessage: wsp literalMessage endNSComment *)\r		tokens at: 5]\r)"),
				new MM("literalPattern", false, "literalPattern ^ <LiteralPatternAST> = (\r^ super literalPattern\r	wrap: [ :litTok | \r		LiteralPatternAST new\r			literal: litTok token;\r			start: litTok start; end: litTok end.\r	].\r)"),
				new MM("nestedPatternLiteral", false, "nestedPatternLiteral = (\r ^ super nestedPatternLiteral wrap: [ :nestedTok | nestedTok token ]	\r)"),
				new MM("newBlockArgType", false, "newBlockArgType = (\r	^super newBlockArgType wrapper: \r		[:c :rt | \r		rt concreteStart: c start.\r		rt].\r)"),
				new MM("newBlockType", false, "newBlockType = (\r	^super newBlockType wrapper: [:lb :tas :rb |\r		(tas isNil ifTrue: [\r			BlockTypeAST\r				formals: {}\r				return: (TypeIdAST new name: #Object)\r		] ifFalse: [\r			| fs r |\r			tas isCollection\r				ifTrue: [fs:: tas. r:: fs removeLast] \r				ifFalse: [fs:: {}. r:: tas].\r			BlockTypeAST\r				formals: fs\r				return: r.\r		])\r		start: lb start;\r		end: rb end\r	].\r)"),
				new MM("newChar", false, "newChar = (\r	^super newChar wrap: [:t | CharAST new value: (t token at: 2); start: t start; end: t end].\r)"),
				new MM("newNonEmptyBlockArgList", false, "newNonEmptyBlockArgList = (\r	^super newNonEmptyBlockArgList wrapper:\r		[:ats :vbarreturnt | \r		| targs |\r		targs:: OrderedCollection new addAll: ats; yourself.\r            vbarreturnt isNil \r			ifTrue:[targs addLast: (TypeIdAST new name: #Object)]\r                  ifFalse:[targs add: (vbarreturnt at: 2)].\r		targs].\r)"),
				new MM("nontrivialBinaryMessages", false, "nontrivialBinaryMessages ^ <Tuple[List[MessageAST], List[MessageAST], MessageAST]> = (\r	^super nontrivialBinaryMessages wrapper:\r		[ :bmsgs <List[MessageAST]> :kwMsg <MessageAST> | \r		(* binaryMessages+ [keywordMsg] *)\r			assert:[bmsgs isEmpty not].\r			{{}. bmsgs. kwMsg}\r		]\r)"),
				new MM("oldChar", false, "oldChar = (\r	^super oldChar wrap: [:t | CharAST new value: t token last; start: t start; end: t end].\r)"),
				new MM("outerReceiver", false, "outerReceiver ^ <NormalSendAST> = (\r\r^super outerReceiver\r    wrapper:[:okw :idn | | osend |\r	osend:: (pseudoVariableNode: okw token asSymbol)\r		start: okw start; end: okw end.\r	NormalSendAST new receiver: osend; message: (MessageAST new send: idn token asSymbol with:{}); \r	                         start: osend start; end: idn end\r	]\r)"),
				new MM("pattern", false, "pattern ^ <PatternAST> = (\r^ super pattern\r	wrapper: [ :del1 :pat :del2 | pat. ]\r)"),
				new MM("sendMessages:to:", false, "sendMessages: msgs <List[MessageAST]> to: receiver <ExpressionAST> ^ <ExpressionAST> = (\r(* if msgs is non-empty, the return type will always be NormalSendAST *)\r	^msgs inject: receiver into:[:r :msg | \r									NormalSendAST new to: r send: msg;\r														left: r; right: msg\r								].\r)"),
				new MM("seqSlotDecls", false, "seqSlotDecls = (\r\r^super seqSlotDecls\r     wrapper:[:vb1 :sds :vb2  | \r                  sds isEmpty ifFalse:[sds first concreteStart: vb1 start.\r                                           sds last concreteEnd: vb2 end.\r                                           ].\r                  {true. sds}\r                ].\r)"),
				new MM("simSlotDecls", false, "simSlotDecls = (\r\r^super simSlotDecls\r     wrapper:[:vb1 :vb2 :sds :vb3 :vb4  | \r                  sds isEmpty ifFalse:[sds first concreteStart: vb1 start.\r                                           sds last concreteEnd: vb4 end.\r                                           ].\r                  {false. sds}\r                ].\r)"),
				new MM("superclassPrefix", false, "superclassPrefix  = (\r	^super superclassPrefix\r		wrapper:[:p |  | sp |\r			sp:: p isNormalSendNode \r				ifTrue:[p] (* an outer receiver *)\r				ifFalse:[(pseudoVariableNode: p token asSymbol) \r					start: p start; end: p end (* a #self or #super token *)\r					].\r			sp.\r			]\r)"),
				new MM("tupleType", false, "tupleType = (\r\r\r^super tupleType\r   wrapper:[:lc :es :rc | \r               ParameterizedTypeAST new generic: (TypeIdAST new name: #Tuple); \r                                               arguments:  es;\r                                               start: lc start;\r                                               end: rc end\r              ].\r)"),
				new MM("unaryMsg", false, "unaryMsg ^ <MessageAST> = (\r	^super unaryMsg wrapper:\r		[:esend :u  | \r		MessageAST new\r			send: u token asSymbol with: OrderedCollection new;\r			isEventual: esend notNil;\r			start: u start;\r			end: u end].\r)"),
				new MM("variablePattern", false, "variablePattern ^ <VariablePatternAST> = (\r^ super variablePattern\r	wrapper: [ :varTok | VariablePatternAST new\r					variableName: (varTok token at: 2); \r					start: varTok start; end: varTok end ].\r)"),
				new MM("wildcardPattern", false, "wildcardPattern ^ <WildcardPatternAST> = (\r^ super wildcardPattern\r	wrap: [ :wcTok | WildcardPatternAST new\r					start: wcTok start; end: wcTok end ].\r)"),
				new MM("binaryExpression", false, "binaryExpression = (\r	^super binaryExpression wrapper:\r		[:ue :bmsgs | (* unaryExpression binaryMsg* *)\r		bmsgs inject: ue into:\r			[:receiverExpr :b <MessageAST> |\r				NormalSendAST new\r					to: receiverExpr send: b;\r					left: receiverExpr; right: b]]\r)"),
				new MM("binaryMsg", false, "binaryMsg ^ <MessageAST> = (\r	^super binaryMsg wrapper:\r		[:esend :b :e |\r		| args = OrderedCollection with: e. |\r		MessageAST new \r			send: b token with: args;\r			isEventual: esend notNil;\r			start: b start;\r			right: e].\r)"),
				new MM("binaryMsgPattern", false, "binaryMsgPattern = (\r\r^super binaryMsgPattern\r    wrapper:[:sel :p  |\r                | params |\r                 params:: OrderedCollection new add:p; yourself.\r                 MessagePatternAST new selector: sel token parameters: params ;\r                                              start: sel start; right: p            \r               ].\r)"),
				new MM("block", false, "block = (\r\r^super block\r          wrapper:[:lb :params :cb :rb  |\r                      | ps |\r                                                                                                                                           \r                       ps::  params isNil ifTrue:[OrderedCollection new] ifFalse:[params].\r                       cb parameters: ps.\r                       BlockAST new body: cb;\r                                        start: lb start; end: rb end\r                     ].\r)"),
				new MM("blockParameter", false, "blockParameter = (\r\r^super blockParameter\r    wrapper:[:c :v  | \r                v concreteStart: c start.\r                v\r               ].\r                                \r)"),
				new MM("blockParameters", false, "blockParameters = (\r\r^super blockParameters\r          wrapper:[:params :vb  | \r                      self assert:[params isEmpty not] message: 'Assert failed'.\r                      params last concreteEnd: vb end. (* dubious *)\r                      params\r                     ].\r)"),
				new MM("cascadeMsg", false, "cascadeMsg = (\r\r^super cascadeMsg\r    wrapper:[:sm :msg  | msg].\r                                \r                         \r)"),
				new MM("cascadedMessageExpression", false, "cascadedMessageExpression ^ <CascadedSendAST> = (\r\r^super cascadedMessageExpression\r          wrapper:[:p <ExpressionAST> \r				:msgs <Tuple[Tuple[List[MessageAST], List[MessageAST], MessageAST], List[MessageAST]]>  |\r				| \r				se <SendAST> \r				unaries <List[MessageAST]> \r				binaries <List[MessageAST]> \r				kwMsg <MessageAST> \r				cascade  <List[MessageAST]> \r				unarySend <ExpressionAST>  \r				binarySend <ExpressionST> \r				|\r				(* primary [msgCascade] *)\r				msgs isNil \r					ifTrue:[p]\r					ifFalse:[\r							unaries:: msgs first first.\r							binaries:: msgs first at: 2.\r							kwMsg:: msgs first last.\r							cascade:: msgs last.\r							unarySend:: sendMessages: unaries to: p.\r							binarySend:: sendMessages: binaries to: unarySend.\r							se:: kwMsg isNil \r								ifTrue:[binarySend] \r								ifFalse:[sendMessages: {kwMsg} to: binarySend].\r                       				cascade inject: se into:[:e  <SendAST> :m  <MessageASAT> |\r                                                     CascadedSendAST new to: e cascade: m;\r													left: e;  right: m                \r                                                    ]  \r							]\r]      \r                     \r)"),
				new MM("category", false, "category = (\r\r^super category\r          wrapper:[:cn :ms  |\r                      | end |\r                       end:: ms isEmpty ifTrue:[cn end] ifFalse:[ms last end].\r                       CategoryAST new name: cn value asSymbol; methods: ms;\r                                            start: cn start; end: end\r                     ].\r)"),
				new MM("classDeclaration", false, "classDeclaration ^ <ClassDeclarationAST> = (\r	^super classDeclaration wrapper:\r		[:ckw :hdr :instSide :classSide |\r		| klassSide kat |\r		klassSide:: classSide isNil\r			ifTrue:\r				[SideAST new \r					variables: OrderedCollection new\r					categories: OrderedCollection new]\r			ifFalse: [classSide].\r		ClassDeclarationAST new\r			(*	#protected is the default.\r				However the accessModifier is mostly overwritten by nestedClassDecl or toplevelClass*)\r			accessModifier: #protected;\r			header: hdr;\r			instanceSide: instSide;\r			classSide: klassSide;\r			start: ckw start;\r			end: (classSide isNil ifTrue: [instSide end] ifFalse: [classSide end])]\r)"),
				new MM("classDefinition", false, "classDefinition = (\r \r(* %Cleanup when NS1 and NS0  are gone *)\r(* Retained for compatibility with older Newsqueak versions. We renamed classDefinition to ClassDeclaration in the grammar, but there is code that needs to use older parsers, and hence uses the old protocol *)\r^compilationUnit\r)"),
				new MM("classHeader", false, "classHeader ^ <ClassHeaderAST> = (\r\r^super classHeader\r     wrapper:[:klassName :cons :eq :superClause :lp :cmnt :instVars :inits :rp  | \r                | vs kat start  konstruktor superCall isSeq |\r			isSeq:: true.\r                  kat:: nil. start:: klassName start.\r                  konstruktor:: cons isNil \r                       ifTrue:[defaultConstructorPattern start: klassName end + 1; end: klassName end]\r                       ifFalse:[cons].\r                  superCall:: superClause isNil \r                                     ifTrue:[defaultSuperCallAt: eq end + 1 ending: eq end] \r                                     ifFalse:[superClause].\r                  vs:: instVars isNil ifTrue:[OrderedCollection new] ifFalse:[isSeq:: instVars first. instVars last].\r                  ClassHeaderAST new name: klassName token asSymbol; \r                                                    constructor: konstruktor;\r                                                    superclassName: superCall receiver message selector;\r                                                    superclassCall: superCall receiver;\r                                                    superConstructorCall: superCall message;\r                                                    slots: vs; isSeq: isSeq; initExprs: inits; category: kat ;\r                                                    classComment: cmnt;\r								    inheritanceChain: {superCall};\r                                                    start: start; end: rp end                   \r                ].\r)"),
				new MM("classSideDecl", false, "classSideDecl ^ <SideAST> = (\r	^super classSideDecl wrapper:\r		[:cn :lp :cats :rp  | \r		SideAST new\r			variables: OrderedCollection new\r			categories: cats;\r			start: cn start; end: rp end]\r)"),
				new MM("codeBody", false, "codeBody ^ <CodeBodyAST> = (\r\r^super codeBody\r          wrapper:[:litMsgs :tmps :stmts |\r                      | ts ss start end  cstart cend isSeq | \r				isSeq:: true.\r                       end:: nil.\r                       start:: end.\r                       ts:: tmps isNil ifTrue:[OrderedCollection new] ifFalse:[isSeq:: tmps first. tmps last].      \r                       ss:: stmts isNil ifTrue:[OrderedCollection new]  ifFalse:[stmts]. \r                       ts isEmpty \r				ifFalse:[cstart:: ts first concreteStart. start:: ts first start.\r					cend::  ts last concreteEnd. end::  ts last end.\r					].       \r                       ss isEmpty ifFalse:[start isNil \r								ifTrue:[start:: ss first start]. \r								end:: ss last end. \r								cend:: ss last concreteEnd\r							].\r                       CodeBodyAST new temporaries: ts\r                                            statements: ss;\r							  literalMessages: (litMsgs select: [:e | e isMessageNode]);\r							  isSeq: isSeq;\r                                            start: start;\r                                            end: end;\r					    		  concreteStart:  cstart;\r                                            concreteEnd: cend\r                     ].\r)"),
				new MM("compilationUnit", false, "public compilationUnit = (\r	^super compilationUnit wrapper: [:lid :u :e | u] (* throw out end-of-input indicator *) \r)"),
				new MM("doItExpression", false, "public doItExpression = (\r	(* throw out end-of-input indicator *) \r	^super doItExpression wrapper: [:cb :end | cb]\r)"),
				new MM("expression", false, "expression = (\r	^super expression wrapper:[:setters :msg  |\r		| e setSend args setSelector |\r		e:: msg.\r		setters isNil ifFalse:[  \r			setters reverseDo: [:setter |\r				args:: OrderedCollection new add: e; yourself.\r				setSelector:: setter token asString.\r				setSend:: MessageAST new\r					send: (setSelector copyFrom: 1 to: setSelector size -1) asSymbol with: args;\r					start: setter start; end: setter end;\r					right: e.\r				e:: self hereSetterSendFromMsg: setSend.\r			].\r		].\r		e      \r	].\r)"),
				new MM("furtherStatements", false, "furtherStatements = (\r\r^super furtherStatements\r     wrapper:[:d :stmts  | stmts].\r)"),
				new MM("keywordExpression", false, "keywordExpression ^ <NormalSendAST> = (\r\r^super keywordExpression\r     wrapper:[:bo :msg <MessageAST> |\r                  msg isNil \r                       ifTrue:[bo]\r                       ifFalse:[NormalSendAST new to: bo send: msg; left: bo; right: msg]\r                ].\r)"),
				new MM("keywordHereSend", false, "keywordHereSend = (\r\r^super keywordHereSend\r          wrap:[:msg  |\r                  self hereSendFromMsg: msg                               \r                 ].\r)"),
				new MM("keywordMsg", false, "keywordMsg ^ <MessageAST> = (\r	^super keywordMsg wrapper:\r		[:esend :kws  |\r		| sel <String> args <List[Expression]> |\r		args:: OrderedCollection new.\r		sel:: kws inject: '' into:\r			[:s <String> :kwd | \r			args add: (kwd at:2). \r			s, (kwd at:1) token].\r		MessageAST new\r			send: sel asSymbol with: args;\r			isEventual: esend notNil;\r			start: kws first first start;\r			right: args last].\r)"),
				new MM("keywordMsgPattern", false, "keywordMsgPattern ^ <MessagePatternAST> = (\r\r^super keywordMsgPattern\r     wrap:[:kws  |\r             | sel  params |\r              params:: OrderedCollection new.\r              self assert:[kws isEmpty not] message: 'Assert failed'.\r              sel:: kws inject: '' into:[:s  :kwp | \r                                           params add: kwp last.\r                                           s, kwp first token\r                                          ].\r              MessagePatternAST new selector: sel asSymbol parameters: params  ;\r                                          start: kws first first start;\r                                          right: params last\r            ].\r)"),
				new MM("messagePattern", false, "messagePattern ^ <MessagePattern> = (\r\r^super messagePattern\r    wrapper:[:pt :rt :tp  |\r                tp isNil ifTrue:[rt isNil ifFalse:[pt end: rt concreteEnd]]\r                         ifFalse:[pt end: tp concreteEnd].\r                                 \r                pt returnType: rt; typePattern: tp                    \r               ].\r)"),
				new MM("method", false, "method ^ <MethodAST> = (\r\r^super method\r     wrapper:[:msg :cb :ei  |\r                   cb parameters: msg parameters.\r                   MethodAST new pattern: msg \r                                      body: cb\r                                      accessModifier: #public;\r                                      start: msg start;\r                                      right: cb                             \r                ].\r)"),
				new MM("methodDecl", false, "public methodDecl ^ <MethodAST> = (\r\r^super methodDecl\r     wrapper:[:am :msg :eq :lp :cb :rp  |\r                   cb parameters: msg parameters.\r                   MethodAST new pattern: msg \r                                      body: cb\r                                      accessModifier: (am = nil\r							ifTrue: [#protected]\r							ifFalse: [am first token]);\r                                      start: (am = nil\r							ifTrue: [msg start]\r							ifFalse: [am first start]);\r                                      end: rp end                                                \r                ].\r)"),
				new MM("mixinApplication", false, "mixinApplication ^ <MixinApplicationAST> = (\r\r	^super mixinApplication wrapper:\r		[:cp <ClassPrefixAST> :mixinOp <Token> :me <Expression> |\r				(MixinApplicationAST prefix: cp mixin: me) left:  cp; right: me\r		]\r)"),
				new MM("moduleBody", false, "moduleBody = (\r\r (* ^super moduleBody \r     wrapper:[:lp :sds :cds :rp |\r	             ModuleBodyAST new vars: sds; classes: cds; start: lp start; end: rp end\r                  ]. *)\r)"),
				new MM("moduleDeclaration", false, "moduleDeclaration = (\r\r(* ^super moduleDeclaration\r       wrapper:[:lid :mdkw :n :patt :eq :mb :el |\r	               ModuleAST new name: n; constructor: patt; body: mb; exports: el;\r	                                       start: mdkw start; end: el last end\r                    ] *)\r)"),
				new MM("nestedClassDecl", false, "nestedClassDecl = (\r\r^super nestedClassDecl \r   wrapper:[:accessModifier  :classDeclaration  |\r	accessModifier ifNil: [\r			(* According to the language spec the accessModifier is #protected if not otherwise specified. *)\r			classDeclaration accessModifier: #protected\r		] ifNotNil: [\r			classDeclaration accessModifier: accessModifier first token ].\r	classDeclaration ]\r)"),
				new MM("parenthesizedExpression", false, "parenthesizedExpression = (\r\r^super parenthesizedExpression\r    wrapper:[:l :e :r  | \r                e concreteStart: l start; concreteEnd: r end.\r                e\r               ].\r)"),
				new MM("returnStatement", false, "returnStatement ^ <ReturnStatAST> = (\r	^super returnStatement wrapper:\r		[:r :e :od |\r		OrderedCollection new\r			add: (ReturnStatAST new expression: e; start: r start; right: e); yourself]\r)"),
				new MM("sideDecl", false, "sideDecl ^ <SideAST> = (\r	^super sideDecl wrapper:\r		[:lp :classes :categories :rp |\r		NSSideAST new\r			variables: OrderedCollection new\r			categories: categories;\r			nestedClasses: classes;\r			start: lp start; end: rp end]\r)"),
				new MM("slotDecl", false, "slotDecl ^ <VarDeclAST> = (\r\r^super slotDecl\r    wrapper:[:n :t  | \r                | end |\r                end:: t isNil ifTrue:[n end] ifFalse:[t concreteEnd].\r                (VarDeclAST name: n token asSymbol type: t)\r                                   start: n start; end: end \r               ].\r)"),
				new MM("slotDef", false, "slotDef = (\r\r^super slotDef \r    wrapper:[:am :sd :init  |   \r                | start end slotClass expr msg | \r			start:: am = nil\r				ifTrue: [sd start]\r				ifFalse: [am first start].\r                 init isNil ifTrue:[ end:: sd end. \r							slotClass:: MutableSlotDefAST. \r							(*msg:: MessageAST new send: #nil\r                                                                        with: OrderedCollection new;\r                                                                        start: sd start; end: sd end.\r                                 		expr:: hereSendFromMsg: msg.  *)\r							]\r                              ifFalse:[end:: init last concreteEnd. \r	                                     expr:: init at: 2. \r	                                     slotClass:: (init at: 1) token = #'::=' ifTrue:[MutableSlotDefAST] \r	                                                                                                 ifFalse:[ImmutableSlotDefAST]\r	                                   ].\r\r		slotClass new\r			accessModifier: (am = nil ifTrue: [ #protected ] ifFalse: [am first token]);\r			slotDecl: sd; \r			initializer: expr;\r			start: start;\r			end: end \r               ].\r)"),
				new MM("slotName", false, "slotName = (\r\r\r^super slotName (* change to create a here send *)\r          wrap:[:n   | | msg sn |\r	             sn:: n token asSymbol.\r	             (sn = #self or: [sn = #super or:[ sn = #outer or:[sn = #thisContext]]])  (* thisContext will have to go at some point *)\r	               ifTrue:[(pseudoVariableNode: sn) start: n start; end: n end]\r	               ifFalse:[\r                                 msg:: MessageAST new send: sn\r                                                                        with: OrderedCollection new;\r                                                                        start: n start; end: n end.\r                                 hereSendFromMsg: msg.   \r                                 ]     \r                 ].\r)"),
				new MM("statementSequence", false, "statementSequence = (\r\r^super statementSequence\r     wrapper:[:e :rst  |\r                  rst isNil\r                    ifTrue:[OrderedCollection new add:e; yourself]\r                    ifFalse:[OrderedCollection new add:e; addAll: rst; yourself]                \r                ].\r)"),
				new MM("superclassClause", false, "superclassClause = (\r\r^super superclassClause\r    wrapper:[:sp :sn :msg |  | constructorCall  sc |\r	sc:: sp isNil \r		ifTrue:[hereSendFromMsg: sn] \r	      ifFalse:[\r			NormalSendAST new receiver: sp; \r				message: (MessageAST new send: sn selector with: {}); \r	                         start: sp start; end: sn end.\r		].\r	constructorCall:: msg isNil (* default constructor is 'new' *)\r	                            ifTrue:[defaultConstructorCall start: sn start; end: sn end]\r	                            ifFalse:[msg].\r	NormalSendAST new receiver: sc; message: constructorCall; \r	                         start: sc start; end: constructorCall end\r	]\r)"),
				new MM("symbolConstant", false, "symbolConstant = (\r\r^super symbolConstant\r     wrapper:[:h :s  | s start: h start].\r)"),
				new MM("toplevelClass", false, "toplevelClass = (\r\r^super toplevelClass\r   wrapper:[:cat  :cd  |\r	| kat |\r	cat isNil ifFalse:[ cd header category: cat value.\r		cd start: cat start.\r		].\r	cd accessModifier: #public. (* top level classes are considered public *)\r	cd\r	]\r)"),
				new MM("tuple", false, "tuple = (\r\r^super tuple\r   wrapper:[:lc :es :rc | \r               TupleAST new elements: es; start: lc start; end: rc end\r              ].\r)"),
				new MM("unaryExpression", false, "unaryExpression ^ <ExpressionAST> = (\r\r^super unaryExpression\r     wrapper:[:o <ExpressionAST>  :s <List[MessageAST]> |\r                 self assert:[s isNil not] message: 'Assert failed'.\r                 s inject: o into:[:e <ExpressionAST> :umsg <MessageAST> |\r                                    NormalSendAST new to: e \r                                                            send: umsg;\r                                                            start: e start;\r                                                            end: umsg end\r                                   ]                \r                ].\r)"),
				new MM("unaryMsgPattern", false, "unaryMsgPattern ^ <MessagePatternAST> = (\r\r^super unaryMsgPattern\r          wrap:[:sel   <Symbol> |\r                   MessagePatternAST new selector: sel token asSymbol parameters: OrderedCollection new;\r                                               start: sel start; end: sel end\r                 ].\r)"),
				new MM("decimalNum", false, "decimalNum ^ <Number> = (\r\r \r^super decimalNum wrapper:[:sgn :ip <List[Character]> :fp <Number> :ep <Integer> | \r	|  sum <Number> exp <Integer> f <Number>  | \r	f:: fp isNil ifTrue:[0] ifFalse:[fp].\r	sum:: (computeDigits: ip) + f.\r	sgn isNil ifFalse:[sum::  -1 * sum].\r	exp:: ep isNil ifTrue:[0] ifFalse:[ep].\r	sum* (10** exp).\r	]\r)"),
				new MM("exponent", false, "exponent ^ <Integer> = (\r\r| exp <Integer> |\r \r^super exponent wrapper:[:e :sgn :ds <List[Character]> | \r	exp:: computeDigits: ds.\r	sgn isNil ifTrue:[exp] ifFalse:[-1*exp]\r	].\r)"),
				new MM("extendedFraction", false, "extendedFraction ^ <List[Character]> = ( \r	^super extendedFraction wrapper:[:period  :ds  | ds]\r)"),
				new MM("fraction", false, "fraction ^ <Number> = ( \r	^super fraction wrapper:[:period  :ds  | computeFraction: ds]\r)"),
				new MM("number", false, "number = (\r	^super number wrap: [:t | NumberAST new value: t token; start: t start; end: t end].\r)"),
				new MM("radix", false, "radix ^ <Integer> = (\r\r| exp <Integer> |\r \r^super radix wrapper:[:ds  :r  | computeDigits: ds]\r)"),
				new MM("radixNum", false, "radixNum = (\r^super radixNum\r  wrapper:[:r <Integer> :sgn :ip <List[Character]> :fp <List[Character]> :ep <Integer> | \r	|  sum <Number> power <Integer>  exp <Integer> fs <List[Character]> | \r	assert:[ip isEmpty not] message:'internal error: integer part is empty'.\r	fs:: fp isNil ifTrue:[OrderedCollection new] ifFalse:[fp].\r	power:: ip size.\r	sum:: (ip , fs) inject: 0 into:[:s <Number> :c <Character> | | d0 <Integer> d <Integer> |\r		d0:: c charCode.\r		(d0 > 47 and:[d0  < 58]) \r			ifTrue:[d:: d0 - 48] (* c is a numeric digit *)\r			ifFalse:[\r				(d0 > 64 and:[d0 < 71]) \r					ifTrue:[d:: d0 -55] (* c is upper case *)\r					ifFalse:[\r						assert:[d0 > 96 and:[d0 < 123]] \r						message: 'Internal error - illegal character in radix number'.\r						d:: d0 - 87.\r						]. (* c is lower case *)\r				].	(* c is a letter *)\r		assert:[d < r] message: 'Malformed number: digit exceeds radix'.\r		power:: power - 1.  \r		d * (r ** power) + s.			\r		].\r	sgn isNil ifFalse:[sum::  -1 * sum].\r	exp:: ep isNil ifTrue:[0] ifFalse:[ep].\r	sum* (10** exp).\r	]\r)"),
				new MM("string", false, "string = (\r	^super string wrap: [:t | StringAST new value: t token; start: t start; end: t end]. \r)"),
				new MM("symbol", false, "symbol = (\r	^super symbol wrap: [:t | SymbolAST new value: t token asSymbol; start: t start; end: t end].\r)"),
				new MM("parse:inContext:ifError:", false, "public parse: input inContext: context ifError: blk = (\r \r	[ super parse: input inContext: context ifError: blk ]\r		on: ParserError\r		do: [ :ex | ^blk value: ex message with: ex position ]\r)"),
				new MM("charsToString:", false, "charsToString: cs <List[Character]> ^ <String> = (\r\r\r^cs inject: '' into:[:s <String>  :c <Character>  | s, c asString].\r)"),
				new MM("computeDigits:", false, "computeDigits: ds <List[Character]> ^ <Integer>= (\r\r| power <Integer> |\r\rpower:: ds size. \r^ds inject: 0 into:[:s <Integer> :c <Character> | \r		power:: power - 1.  \r		s + ((c charCode - 48) * (10 ** power))\r		].\r)"),
				new MM("computeFraction:", false, "computeFraction: ds <List[Character]> ^ <Number>= (\r\r| power <Integer> |\r\rpower:: 0. \r^ds inject: 0 into:[:s <Integer>  :c <Character> | \r		power:: power - 1.  \r		s + ((c charCode - 48) * (10 ** power))\r		].\r)"),
				new MM("defaultConstructorCall", false, "defaultConstructorCall ^ <MessageAST> = (\r\r(* default constructor is 'new' *)\r^MessageAST new send: defaultConstructorSelector with: {}\r)"),
				new MM("defaultConstructorPattern", false, "defaultConstructorPattern ^ <MessagePatternAST> = (\r\r(* default constructor is 'new' *)\r^MessagePatternAST new selector: defaultConstructorSelector parameters: {}\r)"),
				new MM("defaultConstructorSelector", false, "defaultConstructorSelector ^ <Symbol> = (\r\r(* default constructor is 'new' *)\r^#new\r)"),
				new MM("defaultSuperCallAt:ending:", false, "defaultSuperCallAt: start <Integer> ending: end  <Integer> ^ <NormalSendAST> = (\r\r\r| objId |\r\robjId:: hereSendFromMsg: (MessageAST new send: #Object with:{}; start: start; end: end).\r^NormalSendAST new receiver: objId; message: (defaultConstructorCall start: start; end: end)\r)"),
				new MM("hereNode", false, "hereNode ^<VariableAST> = (\r	(* Generates an AST representing the implicit receiver. We use a string so that we can represent a name that is not a legal identier *)\r	\r	^VariableAST new name: #'@here'; start: 0; end: 0.\r)"),
				new MM("hereSendFromMsg:", false, "hereSendFromMsg: msg = (\r\r(* Build an implicit here send with the message msg *)\r\r^NormalSendAST new to: hereNode  \r                          send: msg;\r                          start: msg start; end: msg end\r)"),
				new MM("pseudoVariableNode:", false, "pseudoVariableNode: psvName = (\r\r(* generate a an AST representing self; used for implicit self sends *)\rself assert:[{#self. #super. #outer. #thisContext} includes: psvName] message: 'Assert failed'. (* thisContext will have to go at some point *)\r^VariableAST new name: psvName asSymbol; start: 0; end: 0.\r)"),
				new MM("blockReturnType", false, "blockReturnType = (\r\r\r^super blockReturnType\r   wrapper:[:h :rt | rt].\r)"),
				new MM("blockType", false, "blockType = (\r\r	(* BlockTypeAST formals:return: *)\r	^super blockType wrapper:\r		[:lb :tas :rb | \r			(tas isEmpty ifTrue: [\r				(BlockTypeAST\r					formals: {}\r					return: nil)\r			] ifFalse: [\r				(BlockTypeAST\r					formals: (tas asArray allButLast: 1)\r					return: tas last)\r			])\r			start: lb start;\r			end: rb end\r		(* GenericInvocationAST new \r			generic: (TypeIdAST new name: #Block); \r			arguments:  tas;\r			start: lb start;\r			end: rb end *)]\r)"),
				new MM("newBlockTypeArgList", false, "newBlockTypeArgList = (\r\r\r^super newBlockTypeArgList\r   wrapper:[:tas :rt | \r               | targs |\r                 targs:: tas collect:[:p | p last].\r                 rt isNil ifTrue:[targs addLast: (TypeIdAST new name: #Object)]\r                          ifFalse:[targs add: rt].\r                 targs\r\r              ].\r)"),
				new MM("nonEmptyBlockTypeArgList", false, "nonEmptyBlockTypeArgList = (\r\r\r^super nonEmptyBlockTypeArgList\r   wrapper:[:tas :rt | \r               | targs |\r                 targs:: OrderedCollection new addAll:tas; yourself.\r                 rt isNil ifTrue:[targs addLast: (TypeIdAST new name: #Object)]\r                          ifFalse:[targs add: rt last].\r                 targs\r\r              ].\r)"),
				new MM("parenthesizedTypeExpression", false, "parenthesizedTypeExpression = (\r\r\r^super parenthesizedTypeExpression\r   wrapper:[:lp :te :rp | \r               te concreteStart: lp start; concreteEnd: rp end.\r               te\r               ].\r)"),
				new MM("returnType", false, "returnType = (\r\r^super returnType \r   wrapper:[:h :rt | \r               rt concreteStart: h start.\r               rt\r              ].\r)"),
				new MM("type", false, "type = (\r\r\r^super type \r   wrapper:[:lb :te :rb |\r               te concreteStart: lb start; concreteEnd: rb end.\r               te\r              ]\r)"),
				new MM("typeArguments", false, "typeArguments ^  <{List[TypeExpr]. Token}> = (\r\r\r^super typeArguments \r   wrapper:[:lb <Token>  :tas <List[TypeExpr]> :rb <Token>  |   \r                 {tas. rb}\r              ]\r)"),
				new MM("typeExpr", false, "typeExpr = (\r\r\r^super typeExpr \r   wrapper:[:lOperand :msg | \r               | operator rOperand |\r                 msg isNil ifTrue:[ lOperand] \r                            ifFalse:[BinaryTypeOpAST new leftOperand: lOperand; \r                                                                 operator: msg first token; \r                                                                 rightOperand: msg last ;\r                                                                 start: lOperand start;\r                                                                 end: msg last end\r                                     ]\r              ]\r)"),
				new MM("typePrimary", false, "typePrimary ^ <TypeIdAST | GenericInvocationAST> = (\r\r\r^super typePrimary\r   wrapper:[:g <Token> :tas <{List[TypeExpr]. Token}>  | \r               | tid <TypeIdAST>  |\r                tid:: TypeIdAST new name: g token; start: g start; end: g end.\r                tas isNil ifTrue:[tid]\r                          ifFalse:[ParameterizedTypeAST new generic: tid; \r                                                                   arguments: tas first; \r                                                                   start: g start;\r                                                                   end: tas last end\r                                   ]\r             ]\r         \r)"),
				new MM("typeTerm", false, "typeTerm ^ <TypeExpression> = (\r\r\r^super typeTerm \r   wrapper:[:operand :operators | \r               operators inject: operand into:[:te <TypeExpression> :op | \r                                                    UnaryTypeOpAST new operand: te; operator: op token;\r                                                                               start: te start; end: op end\r                                                  ] \r              ]\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakParsing$Parser = (function () {
				var self = this;
				self.$super$NewspeakParsing$Parser$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakParsing$Parser();
				return self;
			});
			this.$blockTypeArgList = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$blockTypeArgList.call(self).$wrap$((function ($bta) {
					return $bta.$isNil().$ifTrue$ifFalse$((function () {
						return [];
					}), (function () {
						return $bta.$isKindOfCollection().$ifFalse$ifTrue$((function () {
							return [$bta];
						}), (function () {
							return $bta;
						}));
					}));
				}));
			});
			this.$classBody = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$classBody.call(self).$wrapper$((function ($instInit, $instanceSide, $classSide) {
					var $klassSide = nil;
					$klassSide = $classSide.$isNil().$ifTrue$ifFalse$((function () {
						return self.$enclosingObjects$NewspeakParsing$Parser[0]._$SideAST().$new().$variables$categories$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new(), self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
					}), (function () {
						return $classSide;
					}));
					return self.$enclosingObjects$NewspeakParsing$Parser[0]._$ClassBodyAST().$initializer$instanceSide$classSide$($instInit, $instanceSide, $klassSide);
				}));
			});
			this.$classComment = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$classComment.call(self).$wrapper$((function ($ws, $c) {
					return $c.$token();
				}));
			});
			this.$classDecl = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$classDecl.call(self).$wrapper$((function ($ckw, $klassName, $cons, $eq, $listAndBody) {
					var $konstruktor = nil;
					var $bodyOrDot = nil;
					var $iList = nil;
					var $end = nil;
					$konstruktor = $cons.$isNil().$ifTrue$ifFalse$((function () {
						return (function (cascadeReceiver) {
							cascadeReceiver.$start$($klassName.$end() + 1);
							return cascadeReceiver.$end$($klassName.$end());
						})(self._$defaultConstructorPattern());
					}), (function () {
						return $cons;
					}));
					$bodyOrDot = $listAndBody.$last();
					$iList = $listAndBody.$first();
					$end = $bodyOrDot.$end();
					return $bodyOrDot.$isAST().$ifTrue$ifFalse$((function () {
						return (function (cascadeReceiver) {
							cascadeReceiver.$start$($ckw.$start());
							return cascadeReceiver.$end$($end);
						})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$ClassDeclarationAST().$named$factoryMsg$inheriting$body$($klassName, $konstruktor, $iList, $bodyOrDot));
					}), (function () {
						return self.$enclosingObjects$NewspeakParsing$Parser[0]._$MixinApplicationClassAST().$named$factoryMsg$inheriting$($klassName.$token(), $konstruktor, $iList);
					}));
				}));
			});
			this.$classPrefix = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$classPrefix.call(self).$wrapper$((function ($klassName, $cons, $eq, $superClause) {
					var $start = nil;
					var $konstruktor = nil;
					var $superCall = nil;
					$start = $klassName.$start();
					$konstruktor = $cons.$isNil().$ifTrue$ifFalse$((function () {
						return (function (cascadeReceiver) {
							cascadeReceiver.$start$($klassName.$end() + 1);
							return cascadeReceiver.$end$($klassName.$end());
						})(self._$defaultConstructorPattern());
					}), (function () {
						return $cons;
					}));
					$superCall = $superClause.$isNil().$ifTrue$ifFalse$((function () {
						return self._$defaultSuperCallAt$ending$($eq.$end() + 1, $eq.$end());
					}), (function () {
						return $superClause;
					}));
					return (function (cascadeReceiver) {
						cascadeReceiver.$start$($start);
						return cascadeReceiver.$end$($superCall.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$ClassPrefixAST().$name$constructor$superclassName$superclassCall$superConstructorCall$($klassName.$token().$asSymbol(), $konstruktor, $superCall.$receiver().$message().$selector(), $superCall.$receiver(), $superCall.$message()));
				}));
			});
			this.$defaultSuperclassAndBody = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$defaultSuperclassAndBody.call(self).$wrapper$((function ($body) {
					return [
						[self._$defaultSuperCallAt$ending$($body.$start() - 1, $body.$start() - 1)],
						$body
					];
				}));
			});
			this.$explicitInheritanceListAndOrBody = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$explicitInheritanceListAndOrBody.call(self).$wrapper$((function ($ic, $ms) {
					return $ms.$isCollection().$ifFalse$ifTrue$((function () {
						return [
							[$ic],
							$ms
						];
					}), (function () {
						var $iList = nil;
						$iList = (function (cascadeReceiver) {
							cascadeReceiver.$addFirst$($ic);
							return cascadeReceiver.$yourself();
						})($ms.$first().$collect$((function ($p) {
							return $p.$last();
						})));
						return [
							$iList,
							$ms.$last()
						];
					}));
				}));
			});
			this.$hereSetterSendFromMsg$ = (function ($msg) {
				var self = this;
				return self.$enclosingObjects$NewspeakParsing$Parser[0]._$SetterSendAST().$to$send$start$end$(self._$hereNode(), $msg, $msg.$start(), $msg.$end());
			});
			this.$instanceInitializer = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$instanceInitializer.call(self).$wrapper$((function ($lp, $cmnt, $instVars, $inits, $rp) {
					var $vs = nil;
					var $isSeq = nil;
					$isSeq = true;
					$vs = $instVars.$isNil().$ifTrue$ifFalse$((function () {
						return self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
					}), (function () {
						$isSeq = $instVars.$first();
						return $instVars.$last();
					}));
					return (function (cascadeReceiver) {
						cascadeReceiver.$start$($lp.$start());
						return cascadeReceiver.$end$($rp.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$InitializerAST().$slots$initializerExpressions$comment$slotsAreSequential$($vs, $inits, $cmnt, $isSeq));
				}));
			});
			this.$keywordMessages = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$keywordMessages.call(self).$wrapper$((function ($kwMsg) {
					return [
						[],
						[],
						$kwMsg
					];
				}));
			});
			this.$keywordPattern = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$keywordPattern.call(self).$wrap$((function ($pairs) {
					var $kws = nil;
					var $kwsAST = nil;
					var $pats = nil;
					var $patsAST = nil;
					var $st = nil;
					var $ed = nil;
					$st = $pairs.$first().$start();
					$ed = $pairs.$last().$end();
					$kws = self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
					$pats = $pairs.$inject$into$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new(), (function ($m, $p) {
						var $kwAST = nil;
						$kwAST = (function (cascadeReceiver) {
							cascadeReceiver.$val$($p.$keyword().$token().$asSymbol());
							cascadeReceiver.$start$($p.$keyword().$start());
							return cascadeReceiver.$end$($p.$keyword().$end());
						})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$SymbolAST().$new());
						$kws.$add$($kwAST);
						return (function (cascadeReceiver) {
							cascadeReceiver.$add$($p.$pattern());
							return cascadeReceiver.$yourself();
						})($m);
					}));
					$kwsAST = (function (cascadeReceiver) {
						cascadeReceiver.$elements$($kws);
						cascadeReceiver.$start$($st);
						return cascadeReceiver.$end$($ed);
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$TupleAST().$new());
					$patsAST = (function (cascadeReceiver) {
						cascadeReceiver.$elements$($pats);
						cascadeReceiver.$start$($st);
						return cascadeReceiver.$end$($ed);
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$TupleAST().$new());
					return (function (cascadeReceiver) {
						cascadeReceiver.$keywords$($kwsAST);
						cascadeReceiver.$patterns$($patsAST);
						cascadeReceiver.$start$($st);
						return cascadeReceiver.$end$($ed);
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$KeywordPatternAST().$new());
				}));
			});
			this.$kwPatternPair = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$kwPatternPair.call(self).$wrapper$((function ($keyw, $val) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$keyword$($keyw);
						cascadeReceiver.$pattern$($val.$isNil().$ifTrue$ifFalse$((function () {
							return (function (cascadeReceiver) {
								cascadeReceiver.$start$($keyw.$end());
								return cascadeReceiver.$end$($keyw.$end());
							})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$WildcardPatternAST().$new());
						}), (function () {
							return $val;
						})));
						cascadeReceiver.$start$($keyw.$start());
						return cascadeReceiver.$end$($val.$isNil().$ifTrue$ifFalse$((function () {
							return $keyw.$end();
						}), (function () {
							return $val.$end();
						})));
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$KeywordPatternPairAST().$new());
				}));
			});
			this.$literalMessage = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$literalMessage.call(self).$wrap$((function ($kwsOrMsg) {
					return $kwsOrMsg.$isCollection().$ifTrue$ifFalse$((function () {
						var $sel = nil;
						var $args = nil;
						$args = self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
						$sel = $kwsOrMsg.$inject$into$("", (function ($s, $kwd) {
							$args.$add$($kwd.$at$(2));
							return $s.$$comma($kwd.$at$(1).$token());
						}));
						return (function (cascadeReceiver) {
							cascadeReceiver.$send$with$($sel.$asSymbol(), $args);
							cascadeReceiver.$start$($kwsOrMsg.$first().$first().$concreteStart());
							return cascadeReceiver.$end$($args.$last().$concreteEnd());
						})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new());
					}), (function () {
						return $kwsOrMsg;
					}));
				}));
			});
			this.$literalMessageComment = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$literalMessageComment.call(self).$wrap$((function ($tokens) {
					return $tokens.$at$(5);
				}));
			});
			this.$literalPattern = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$literalPattern.call(self).$wrap$((function ($litTok) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$literal$($litTok.$token());
						cascadeReceiver.$start$($litTok.$start());
						return cascadeReceiver.$end$($litTok.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$LiteralPatternAST().$new());
				}));
			});
			this.$nestedPatternLiteral = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$nestedPatternLiteral.call(self).$wrap$((function ($nestedTok) {
					return $nestedTok.$token();
				}));
			});
			this.$newBlockArgType = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$newBlockArgType.call(self).$wrapper$((function ($c, $rt) {
					$rt.$concreteStart$($c.$start());
					return $rt;
				}));
			});
			this.$newBlockType = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$newBlockType.call(self).$wrapper$((function ($lb, $tas, $rb) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$start$($lb.$start());
						return cascadeReceiver.$end$($rb.$end());
					})($tas.$isNil().$ifTrue$ifFalse$((function () {
						return self.$enclosingObjects$NewspeakParsing$Parser[0]._$BlockTypeAST().$formals$return$([], self.$enclosingObjects$NewspeakParsing$Parser[0]._$TypeIdAST().$new().$name$("Object"));
					}), (function () {
						var $fs = nil;
						var $r = nil;
						if ($tas.$isCollection()) {
							$fs = $tas;
							$r = $fs.$removeLast();
						} else {
							$fs = [];
							$r = $tas;
						};
						return self.$enclosingObjects$NewspeakParsing$Parser[0]._$BlockTypeAST().$formals$return$($fs, $r);
					})));
				}));
			});
			this.$newChar = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$newChar.call(self).$wrap$((function ($t) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$value$($t.$token().$at$(2));
						cascadeReceiver.$start$($t.$start());
						return cascadeReceiver.$end$($t.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$CharAST().$new());
				}));
			});
			this.$newNonEmptyBlockArgList = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$newNonEmptyBlockArgList.call(self).$wrapper$((function ($ats, $vbarreturnt) {
					var $targs = nil;
					$targs = (function (cascadeReceiver) {
						cascadeReceiver.$addAll$($ats);
						return cascadeReceiver.$yourself();
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
					if ($vbarreturnt.$isNil()) {
						$targs.$addLast$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$TypeIdAST().$new().$name$("Object"));
					} else {
						$targs.$add$($vbarreturnt.$at$(2));
					};
					return $targs;
				}));
			});
			this.$nontrivialBinaryMessages = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$nontrivialBinaryMessages.call(self).$wrapper$((function ($bmsgs, $kwMsg) {
					self._$assert$((function () {
						return $bmsgs.$isEmpty().$not();
					}));
					return [
						[],
						$bmsgs,
						$kwMsg
					];
				}));
			});
			this.$oldChar = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$oldChar.call(self).$wrap$((function ($t) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$value$($t.$token().$last());
						cascadeReceiver.$start$($t.$start());
						return cascadeReceiver.$end$($t.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$CharAST().$new());
				}));
			});
			this.$outerReceiver = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$outerReceiver.call(self).$wrapper$((function ($okw, $idn) {
					var $osend = nil;
					$osend = (function (cascadeReceiver) {
						cascadeReceiver.$start$($okw.$start());
						return cascadeReceiver.$end$($okw.$end());
					})(self._$pseudoVariableNode$($okw.$token().$asSymbol()));
					return (function (cascadeReceiver) {
						cascadeReceiver.$receiver$($osend);
						cascadeReceiver.$message$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new().$send$with$($idn.$token().$asSymbol(), []));
						cascadeReceiver.$start$($osend.$start());
						return cascadeReceiver.$end$($idn.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
				}));
			});
			this.$pattern = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$pattern.call(self).$wrapper$((function ($del1, $pat, $del2) {
					return $pat;
				}));
			});
			this.$sendMessages$to$ = (function ($msgs, $receiver) {
				var self = this;
				return $msgs.$inject$into$($receiver, (function ($r, $msg) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$to$send$($r, $msg);
						cascadeReceiver.$left$($r);
						return cascadeReceiver.$right$($msg);
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
				}));
			});
			this.$seqSlotDecls = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$seqSlotDecls.call(self).$wrapper$((function ($vb1, $sds, $vb2) {
					if (!$sds.$isEmpty()) {
						$sds.$first().$concreteStart$($vb1.$start());
						$sds.$last().$concreteEnd$($vb2.$end());
					} else {
						nil;
					};
					return [
						true,
						$sds
					];
				}));
			});
			this.$simSlotDecls = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$simSlotDecls.call(self).$wrapper$((function ($vb1, $vb2, $sds, $vb3, $vb4) {
					if (!$sds.$isEmpty()) {
						$sds.$first().$concreteStart$($vb1.$start());
						$sds.$last().$concreteEnd$($vb4.$end());
					} else {
						nil;
					};
					return [
						false,
						$sds
					];
				}));
			});
			this.$superclassPrefix = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$superclassPrefix.call(self).$wrapper$((function ($p) {
					var $sp = nil;
					$sp = $p.$isNormalSendNode().$ifTrue$ifFalse$((function () {
						return $p;
					}), (function () {
						return (function (cascadeReceiver) {
							cascadeReceiver.$start$($p.$start());
							return cascadeReceiver.$end$($p.$end());
						})(self._$pseudoVariableNode$($p.$token().$asSymbol()));
					}));
					return $sp;
				}));
			});
			this.$tupleType = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$tupleType.call(self).$wrapper$((function ($lc, $es, $rc) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$generic$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$TypeIdAST().$new().$name$("Tuple"));
						cascadeReceiver.$arguments$($es);
						cascadeReceiver.$start$($lc.$start());
						return cascadeReceiver.$end$($rc.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$ParameterizedTypeAST().$new());
				}));
			});
			this.$unaryMsg = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$unaryMsg.call(self).$wrapper$((function ($esend, $u) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$send$with$($u.$token().$asSymbol(), self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
						cascadeReceiver.$isEventual$($esend.$notNil());
						cascadeReceiver.$start$($u.$start());
						return cascadeReceiver.$end$($u.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new());
				}));
			});
			this.$variablePattern = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$variablePattern.call(self).$wrapper$((function ($varTok) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$variableName$($varTok.$token().$at$(2));
						cascadeReceiver.$start$($varTok.$start());
						return cascadeReceiver.$end$($varTok.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$VariablePatternAST().$new());
				}));
			});
			this.$wildcardPattern = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$wildcardPattern.call(self).$wrap$((function ($wcTok) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$start$($wcTok.$start());
						return cascadeReceiver.$end$($wcTok.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$WildcardPatternAST().$new());
				}));
			});
			this.$binaryExpression = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$binaryExpression.call(self).$wrapper$((function ($ue, $bmsgs) {
					return $bmsgs.$inject$into$($ue, (function ($receiverExpr, $b) {
						return (function (cascadeReceiver) {
							cascadeReceiver.$to$send$($receiverExpr, $b);
							cascadeReceiver.$left$($receiverExpr);
							return cascadeReceiver.$right$($b);
						})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
					}));
				}));
			});
			this.$binaryMsg = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$binaryMsg.call(self).$wrapper$((function ($esend, $b, $e) {
					var $args = nil;
					$args = self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$with$($e);
					return (function (cascadeReceiver) {
						cascadeReceiver.$send$with$($b.$token(), $args);
						cascadeReceiver.$isEventual$($esend.$notNil());
						cascadeReceiver.$start$($b.$start());
						return cascadeReceiver.$right$($e);
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new());
				}));
			});
			this.$binaryMsgPattern = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$binaryMsgPattern.call(self).$wrapper$((function ($sel, $p) {
					var $params = nil;
					$params = (function (cascadeReceiver) {
						cascadeReceiver.$add$($p);
						return cascadeReceiver.$yourself();
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
					return (function (cascadeReceiver) {
						cascadeReceiver.$selector$parameters$($sel.$token(), $params);
						cascadeReceiver.$start$($sel.$start());
						return cascadeReceiver.$right$($p);
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessagePatternAST().$new());
				}));
			});
			this.$block = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$block.call(self).$wrapper$((function ($lb, $params, $cb, $rb) {
					var $ps = nil;
					$ps = $params.$isNil().$ifTrue$ifFalse$((function () {
						return self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
					}), (function () {
						return $params;
					}));
					$cb.$parameters$($ps);
					return (function (cascadeReceiver) {
						cascadeReceiver.$body$($cb);
						cascadeReceiver.$start$($lb.$start());
						return cascadeReceiver.$end$($rb.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$BlockAST().$new());
				}));
			});
			this.$blockParameter = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$blockParameter.call(self).$wrapper$((function ($c, $v) {
					$v.$concreteStart$($c.$start());
					return $v;
				}));
			});
			this.$blockParameters = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$blockParameters.call(self).$wrapper$((function ($params, $vb) {
					self._$assert$message$((function () {
						return $params.$isEmpty().$not();
					}), "Assert failed");
					$params.$last().$concreteEnd$($vb.$end());
					return $params;
				}));
			});
			this.$cascadeMsg = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$cascadeMsg.call(self).$wrapper$((function ($sm, $msg) {
					return $msg;
				}));
			});
			this.$cascadedMessageExpression = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$cascadedMessageExpression.call(self).$wrapper$((function ($p, $msgs) {
					var $se = nil;
					var $unaries = nil;
					var $binaries = nil;
					var $kwMsg = nil;
					var $cascade = nil;
					var $unarySend = nil;
					var $binarySend = nil;
					return $msgs.$isNil().$ifTrue$ifFalse$((function () {
						return $p;
					}), (function () {
						$unaries = $msgs.$first().$first();
						$binaries = $msgs.$first().$at$(2);
						$kwMsg = $msgs.$first().$last();
						$cascade = $msgs.$last();
						$unarySend = self._$sendMessages$to$($unaries, $p);
						$binarySend = self._$sendMessages$to$($binaries, $unarySend);
						$se = $kwMsg.$isNil().$ifTrue$ifFalse$((function () {
							return $binarySend;
						}), (function () {
							return self._$sendMessages$to$([$kwMsg], $binarySend);
						}));
						return $cascade.$inject$into$($se, (function ($e, $m) {
							return (function (cascadeReceiver) {
								cascadeReceiver.$to$cascade$($e, $m);
								cascadeReceiver.$left$($e);
								return cascadeReceiver.$right$($m);
							})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$CascadedSendAST().$new());
						}));
					}));
				}));
			});
			this.$category = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$category.call(self).$wrapper$((function ($cn, $ms) {
					var $end = nil;
					$end = $ms.$isEmpty().$ifTrue$ifFalse$((function () {
						return $cn.$end();
					}), (function () {
						return $ms.$last().$end();
					}));
					return (function (cascadeReceiver) {
						cascadeReceiver.$name$($cn.$value().$asSymbol());
						cascadeReceiver.$methods$($ms);
						cascadeReceiver.$start$($cn.$start());
						return cascadeReceiver.$end$($end);
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$CategoryAST().$new());
				}));
			});
			this.$classDeclaration = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$classDeclaration.call(self).$wrapper$((function ($ckw, $hdr, $instSide, $classSide) {
					var $klassSide = nil;
					var $kat = nil;
					$klassSide = $classSide.$isNil().$ifTrue$ifFalse$((function () {
						return self.$enclosingObjects$NewspeakParsing$Parser[0]._$SideAST().$new().$variables$categories$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new(), self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
					}), (function () {
						return $classSide;
					}));
					return (function (cascadeReceiver) {
						cascadeReceiver.$accessModifier$("protected");
						cascadeReceiver.$header$($hdr);
						cascadeReceiver.$instanceSide$($instSide);
						cascadeReceiver.$classSide$($klassSide);
						cascadeReceiver.$start$($ckw.$start());
						return cascadeReceiver.$end$($classSide.$isNil().$ifTrue$ifFalse$((function () {
							return $instSide.$end();
						}), (function () {
							return $classSide.$end();
						})));
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$ClassDeclarationAST().$new());
				}));
			});
			this.$classDefinition = (function () {
				var self = this;
				return self._$compilationUnit();
			});
			this.$classHeader = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$classHeader.call(self).$wrapper$((function ($klassName, $cons, $eq, $superClause, $lp, $cmnt, $instVars, $inits, $rp) {
					var $vs = nil;
					var $kat = nil;
					var $start = nil;
					var $konstruktor = nil;
					var $superCall = nil;
					var $isSeq = nil;
					$isSeq = true;
					$kat = nil;
					$start = $klassName.$start();
					$konstruktor = $cons.$isNil().$ifTrue$ifFalse$((function () {
						return (function (cascadeReceiver) {
							cascadeReceiver.$start$($klassName.$end() + 1);
							return cascadeReceiver.$end$($klassName.$end());
						})(self._$defaultConstructorPattern());
					}), (function () {
						return $cons;
					}));
					$superCall = $superClause.$isNil().$ifTrue$ifFalse$((function () {
						return self._$defaultSuperCallAt$ending$($eq.$end() + 1, $eq.$end());
					}), (function () {
						return $superClause;
					}));
					$vs = $instVars.$isNil().$ifTrue$ifFalse$((function () {
						return self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
					}), (function () {
						$isSeq = $instVars.$first();
						return $instVars.$last();
					}));
					return (function (cascadeReceiver) {
						cascadeReceiver.$name$($klassName.$token().$asSymbol());
						cascadeReceiver.$constructor$($konstruktor);
						cascadeReceiver.$superclassName$($superCall.$receiver().$message().$selector());
						cascadeReceiver.$superclassCall$($superCall.$receiver());
						cascadeReceiver.$superConstructorCall$($superCall.$message());
						cascadeReceiver.$slots$($vs);
						cascadeReceiver.$isSeq$($isSeq);
						cascadeReceiver.$initExprs$($inits);
						cascadeReceiver.$category$($kat);
						cascadeReceiver.$classComment$($cmnt);
						cascadeReceiver.$inheritanceChain$([$superCall]);
						cascadeReceiver.$start$($start);
						return cascadeReceiver.$end$($rp.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$ClassHeaderAST().$new());
				}));
			});
			this.$classSideDecl = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$classSideDecl.call(self).$wrapper$((function ($cn, $lp, $cats, $rp) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$variables$categories$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new(), $cats);
						cascadeReceiver.$start$($cn.$start());
						return cascadeReceiver.$end$($rp.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$SideAST().$new());
				}));
			});
			this.$codeBody = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$codeBody.call(self).$wrapper$((function ($litMsgs, $tmps, $stmts) {
					var $ts = nil;
					var $ss = nil;
					var $start = nil;
					var $end = nil;
					var $cstart = nil;
					var $cend = nil;
					var $isSeq = nil;
					$isSeq = true;
					$end = nil;
					$start = $end;
					$ts = $tmps.$isNil().$ifTrue$ifFalse$((function () {
						return self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
					}), (function () {
						$isSeq = $tmps.$first();
						return $tmps.$last();
					}));
					$ss = $stmts.$isNil().$ifTrue$ifFalse$((function () {
						return self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
					}), (function () {
						return $stmts;
					}));
					if (!$ts.$isEmpty()) {
						$cstart = $ts.$first().$concreteStart();
						$start = $ts.$first().$start();
						$cend = $ts.$last().$concreteEnd();
						$end = $ts.$last().$end();
					} else {
						nil;
					};
					if (!$ss.$isEmpty()) {
						if ($start.$isNil()) {
							$start = $ss.$first().$start();
						} else {
							nil;
						};
						$end = $ss.$last().$end();
						$cend = $ss.$last().$concreteEnd();
					} else {
						nil;
					};
					return (function (cascadeReceiver) {
						cascadeReceiver.$temporaries$statements$($ts, $ss);
						cascadeReceiver.$literalMessages$($litMsgs.$select$((function ($e) {
							return $e.$isMessageNode();
						})));
						cascadeReceiver.$isSeq$($isSeq);
						cascadeReceiver.$start$($start);
						cascadeReceiver.$end$($end);
						cascadeReceiver.$concreteStart$($cstart);
						return cascadeReceiver.$concreteEnd$($cend);
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$CodeBodyAST().$new());
				}));
			});
			this.$compilationUnit = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$compilationUnit.call(self).$wrapper$((function ($lid, $u, $e) {
					return $u;
				}));
			});
			this.$doItExpression = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$doItExpression.call(self).$wrapper$((function ($cb, $end) {
					return $cb;
				}));
			});
			this.$expression = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$expression.call(self).$wrapper$((function ($setters, $msg) {
					var $e = nil;
					var $setSend = nil;
					var $args = nil;
					var $setSelector = nil;
					$e = $msg;
					if (!$setters.$isNil()) {
						$setters.$reverseDo$((function ($setter) {
							$args = (function (cascadeReceiver) {
								cascadeReceiver.$add$($e);
								return cascadeReceiver.$yourself();
							})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
							$setSelector = $setter.$token().$asString();
							$setSend = (function (cascadeReceiver) {
								cascadeReceiver.$send$with$($setSelector.$copyFrom$to$(1, $setSelector.$size() - 1).$asSymbol(), $args);
								cascadeReceiver.$start$($setter.$start());
								cascadeReceiver.$end$($setter.$end());
								return cascadeReceiver.$right$($e);
							})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new());
							return $e = self._$hereSetterSendFromMsg$($setSend);
						}));
					} else {
						nil;
					};
					return $e;
				}));
			});
			this.$furtherStatements = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$furtherStatements.call(self).$wrapper$((function ($d, $stmts) {
					return $stmts;
				}));
			});
			this.$keywordExpression = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$keywordExpression.call(self).$wrapper$((function ($bo, $msg) {
					return $msg.$isNil().$ifTrue$ifFalse$((function () {
						return $bo;
					}), (function () {
						return (function (cascadeReceiver) {
							cascadeReceiver.$to$send$($bo, $msg);
							cascadeReceiver.$left$($bo);
							return cascadeReceiver.$right$($msg);
						})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
					}));
				}));
			});
			this.$keywordHereSend = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$keywordHereSend.call(self).$wrap$((function ($msg) {
					return self._$hereSendFromMsg$($msg);
				}));
			});
			this.$keywordMsg = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$keywordMsg.call(self).$wrapper$((function ($esend, $kws) {
					var $sel = nil;
					var $args = nil;
					$args = self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
					$sel = $kws.$inject$into$("", (function ($s, $kwd) {
						$args.$add$($kwd.$at$(2));
						return $s.$$comma($kwd.$at$(1).$token());
					}));
					return (function (cascadeReceiver) {
						cascadeReceiver.$send$with$($sel.$asSymbol(), $args);
						cascadeReceiver.$isEventual$($esend.$notNil());
						cascadeReceiver.$start$($kws.$first().$first().$start());
						return cascadeReceiver.$right$($args.$last());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new());
				}));
			});
			this.$keywordMsgPattern = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$keywordMsgPattern.call(self).$wrap$((function ($kws) {
					var $sel = nil;
					var $params = nil;
					$params = self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
					self._$assert$message$((function () {
						return $kws.$isEmpty().$not();
					}), "Assert failed");
					$sel = $kws.$inject$into$("", (function ($s, $kwp) {
						$params.$add$($kwp.$last());
						return $s.$$comma($kwp.$first().$token());
					}));
					return (function (cascadeReceiver) {
						cascadeReceiver.$selector$parameters$($sel.$asSymbol(), $params);
						cascadeReceiver.$start$($kws.$first().$first().$start());
						return cascadeReceiver.$right$($params.$last());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessagePatternAST().$new());
				}));
			});
			this.$messagePattern = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$messagePattern.call(self).$wrapper$((function ($pt, $rt, $tp) {
					if ($tp.$isNil()) {
						if (!$rt.$isNil()) {
							$pt.$end$($rt.$concreteEnd());
						} else {
							nil;
						};
					} else {
						$pt.$end$($tp.$concreteEnd());
					};
					return (function (cascadeReceiver) {
						cascadeReceiver.$returnType$($rt);
						return cascadeReceiver.$typePattern$($tp);
					})($pt);
				}));
			});
			this.$method = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$method.call(self).$wrapper$((function ($msg, $cb, $ei) {
					$cb.$parameters$($msg.$parameters());
					return (function (cascadeReceiver) {
						cascadeReceiver.$pattern$body$accessModifier$($msg, $cb, "public");
						cascadeReceiver.$start$($msg.$start());
						return cascadeReceiver.$right$($cb);
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MethodAST().$new());
				}));
			});
			this.$methodDecl = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$methodDecl.call(self).$wrapper$((function ($am, $msg, $eq, $lp, $cb, $rp) {
					$cb.$parameters$($msg.$parameters());
					return (function (cascadeReceiver) {
						cascadeReceiver.$pattern$body$accessModifier$($msg, $cb, $am.$$equal(nil).$ifTrue$ifFalse$((function () {
							return "protected";
						}), (function () {
							return $am.$first().$token();
						})));
						cascadeReceiver.$start$($am.$$equal(nil).$ifTrue$ifFalse$((function () {
							return $msg.$start();
						}), (function () {
							return $am.$first().$start();
						})));
						return cascadeReceiver.$end$($rp.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MethodAST().$new());
				}));
			});
			this.$mixinApplication = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$mixinApplication.call(self).$wrapper$((function ($cp, $mixinOp, $me) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$left$($cp);
						return cascadeReceiver.$right$($me);
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MixinApplicationAST().$prefix$mixin$($cp, $me));
				}));
			});
			this.$moduleBody = (function () {
				var self = this;
				return self;
			});
			this.$moduleDeclaration = (function () {
				var self = this;
				return self;
			});
			this.$nestedClassDecl = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$nestedClassDecl.call(self).$wrapper$((function ($accessModifier, $classDeclaration) {
					$accessModifier.$ifNil$ifNotNil$((function () {
						return $classDeclaration.$accessModifier$("protected");
					}), (function () {
						return $classDeclaration.$accessModifier$($accessModifier.$first().$token());
					}));
					return $classDeclaration;
				}));
			});
			this.$parenthesizedExpression = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$parenthesizedExpression.call(self).$wrapper$((function ($l, $e, $r) {
					(function (cascadeReceiver) {
						cascadeReceiver.$concreteStart$($l.$start());
						return cascadeReceiver.$concreteEnd$($r.$end());
					})($e);
					return $e;
				}));
			});
			this.$returnStatement = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$returnStatement.call(self).$wrapper$((function ($r, $e, $od) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$add$((function (cascadeReceiver) {
							cascadeReceiver.$expression$($e);
							cascadeReceiver.$start$($r.$start());
							return cascadeReceiver.$right$($e);
						})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$ReturnStatAST().$new()));
						return cascadeReceiver.$yourself();
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
				}));
			});
			this.$sideDecl = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$sideDecl.call(self).$wrapper$((function ($lp, $classes, $categories, $rp) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$variables$categories$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new(), $categories);
						cascadeReceiver.$nestedClasses$($classes);
						cascadeReceiver.$start$($lp.$start());
						return cascadeReceiver.$end$($rp.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NSSideAST().$new());
				}));
			});
			this.$slotDecl = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$slotDecl.call(self).$wrapper$((function ($n, $t) {
					var $end = nil;
					$end = $t.$isNil().$ifTrue$ifFalse$((function () {
						return $n.$end();
					}), (function () {
						return $t.$concreteEnd();
					}));
					return (function (cascadeReceiver) {
						cascadeReceiver.$start$($n.$start());
						return cascadeReceiver.$end$($end);
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$VarDeclAST().$name$type$($n.$token().$asSymbol(), $t));
				}));
			});
			this.$slotDef = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$slotDef.call(self).$wrapper$((function ($am, $sd, $init) {
					var $start = nil;
					var $end = nil;
					var $slotClass = nil;
					var $expr = nil;
					var $msg = nil;
					$start = $am.$$equal(nil).$ifTrue$ifFalse$((function () {
						return $sd.$start();
					}), (function () {
						return $am.$first().$start();
					}));
					if ($init.$isNil()) {
						$end = $sd.$end();
						$slotClass = self.$enclosingObjects$NewspeakParsing$Parser[0]._$MutableSlotDefAST();
					} else {
						$end = $init.$last().$concreteEnd();
						$expr = $init.$at$(2);
						$slotClass = $init.$at$(1).$token().$$equal("::=").$ifTrue$ifFalse$((function () {
							return self.$enclosingObjects$NewspeakParsing$Parser[0]._$MutableSlotDefAST();
						}), (function () {
							return self.$enclosingObjects$NewspeakParsing$Parser[0]._$ImmutableSlotDefAST();
						}));
					};
					return (function (cascadeReceiver) {
						cascadeReceiver.$accessModifier$($am.$$equal(nil).$ifTrue$ifFalse$((function () {
							return "protected";
						}), (function () {
							return $am.$first().$token();
						})));
						cascadeReceiver.$slotDecl$($sd);
						cascadeReceiver.$initializer$($expr);
						cascadeReceiver.$start$($start);
						return cascadeReceiver.$end$($end);
					})($slotClass.$new());
				}));
			});
			this.$slotName = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$slotName.call(self).$wrap$((function ($n) {
					var $msg = nil;
					var $sn = nil;
					$sn = $n.$token().$asSymbol();
					return ($sn.$$equal("self") || ($sn.$$equal("super") || ($sn.$$equal("outer") || $sn.$$equal("thisContext")))).$ifTrue$ifFalse$((function () {
						return (function (cascadeReceiver) {
							cascadeReceiver.$start$($n.$start());
							return cascadeReceiver.$end$($n.$end());
						})(self._$pseudoVariableNode$($sn));
					}), (function () {
						$msg = (function (cascadeReceiver) {
							cascadeReceiver.$send$with$($sn, self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
							cascadeReceiver.$start$($n.$start());
							return cascadeReceiver.$end$($n.$end());
						})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new());
						return self._$hereSendFromMsg$($msg);
					}));
				}));
			});
			this.$statementSequence = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$statementSequence.call(self).$wrapper$((function ($e, $rst) {
					return $rst.$isNil().$ifTrue$ifFalse$((function () {
						return (function (cascadeReceiver) {
							cascadeReceiver.$add$($e);
							return cascadeReceiver.$yourself();
						})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
					}), (function () {
						return (function (cascadeReceiver) {
							cascadeReceiver.$add$($e);
							cascadeReceiver.$addAll$($rst);
							return cascadeReceiver.$yourself();
						})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
					}));
				}));
			});
			this.$superclassClause = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$superclassClause.call(self).$wrapper$((function ($sp, $sn, $msg) {
					var $constructorCall = nil;
					var $sc = nil;
					$sc = $sp.$isNil().$ifTrue$ifFalse$((function () {
						return self._$hereSendFromMsg$($sn);
					}), (function () {
						return (function (cascadeReceiver) {
							cascadeReceiver.$receiver$($sp);
							cascadeReceiver.$message$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new().$send$with$($sn.$selector(), []));
							cascadeReceiver.$start$($sp.$start());
							return cascadeReceiver.$end$($sn.$end());
						})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
					}));
					$constructorCall = $msg.$isNil().$ifTrue$ifFalse$((function () {
						return (function (cascadeReceiver) {
							cascadeReceiver.$start$($sn.$start());
							return cascadeReceiver.$end$($sn.$end());
						})(self._$defaultConstructorCall());
					}), (function () {
						return $msg;
					}));
					return (function (cascadeReceiver) {
						cascadeReceiver.$receiver$($sc);
						cascadeReceiver.$message$($constructorCall);
						cascadeReceiver.$start$($sc.$start());
						return cascadeReceiver.$end$($constructorCall.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
				}));
			});
			this.$symbolConstant = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$symbolConstant.call(self).$wrapper$((function ($h, $s) {
					return $s.$start$($h.$start());
				}));
			});
			this.$toplevelClass = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$toplevelClass.call(self).$wrapper$((function ($cat, $cd) {
					var $kat = nil;
					if (!$cat.$isNil()) {
						$cd.$header().$category$($cat.$value());
						$cd.$start$($cat.$start());
					} else {
						nil;
					};
					$cd.$accessModifier$("public");
					return $cd;
				}));
			});
			this.$tuple = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$tuple.call(self).$wrapper$((function ($lc, $es, $rc) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$elements$($es);
						cascadeReceiver.$start$($lc.$start());
						return cascadeReceiver.$end$($rc.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$TupleAST().$new());
				}));
			});
			this.$unaryExpression = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$unaryExpression.call(self).$wrapper$((function ($o, $s) {
					self._$assert$message$((function () {
						return $s.$isNil().$not();
					}), "Assert failed");
					return $s.$inject$into$($o, (function ($e, $umsg) {
						return (function (cascadeReceiver) {
							cascadeReceiver.$to$send$($e, $umsg);
							cascadeReceiver.$start$($e.$start());
							return cascadeReceiver.$end$($umsg.$end());
						})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
					}));
				}));
			});
			this.$unaryMsgPattern = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$unaryMsgPattern.call(self).$wrap$((function ($sel) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$selector$parameters$($sel.$token().$asSymbol(), self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
						cascadeReceiver.$start$($sel.$start());
						return cascadeReceiver.$end$($sel.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessagePatternAST().$new());
				}));
			});
			this.$decimalNum = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$decimalNum.call(self).$wrapper$((function ($sgn, $ip, $fp, $ep) {
					var $sum = nil;
					var $exp = nil;
					var $f = nil;
					$f = $fp.$isNil().$ifTrue$ifFalse$((function () {
						return 0;
					}), (function () {
						return $fp;
					}));
					$sum = self._$computeDigits$($ip) + $f;
					if (!$sgn.$isNil()) {
						$sum = -1 * $sum;
					} else {
						nil;
					};
					$exp = $ep.$isNil().$ifTrue$ifFalse$((function () {
						return 0;
					}), (function () {
						return $ep;
					}));
					return $sum * (10).$$times$times($exp);
				}));
			});
			this.$exponent = (function () {
				var self = this;
				var $exp = nil;
				return self.$super$NewspeakParsing$Parser$slot._$exponent.call(self).$wrapper$((function ($e, $sgn, $ds) {
					$exp = self._$computeDigits$($ds);
					return $sgn.$isNil().$ifTrue$ifFalse$((function () {
						return $exp;
					}), (function () {
						return -1 * $exp;
					}));
				}));
			});
			this.$extendedFraction = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$extendedFraction.call(self).$wrapper$((function ($period, $ds) {
					return $ds;
				}));
			});
			this.$fraction = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$fraction.call(self).$wrapper$((function ($period, $ds) {
					return self._$computeFraction$($ds);
				}));
			});
			this.$number = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$number.call(self).$wrap$((function ($t) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$value$($t.$token());
						cascadeReceiver.$start$($t.$start());
						return cascadeReceiver.$end$($t.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NumberAST().$new());
				}));
			});
			this.$radix = (function () {
				var self = this;
				var $exp = nil;
				return self.$super$NewspeakParsing$Parser$slot._$radix.call(self).$wrapper$((function ($ds, $r) {
					return self._$computeDigits$($ds);
				}));
			});
			this.$radixNum = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$radixNum.call(self).$wrapper$((function ($r, $sgn, $ip, $fp, $ep) {
					var $sum = nil;
					var $power = nil;
					var $exp = nil;
					var $fs = nil;
					self._$assert$message$((function () {
						return $ip.$isEmpty().$not();
					}), "internal error: integer part is empty");
					$fs = $fp.$isNil().$ifTrue$ifFalse$((function () {
						return self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new();
					}), (function () {
						return $fp;
					}));
					$power = $ip.$size();
					$sum = $ip.$$comma($fs).$inject$into$(0, (function ($s, $c) {
						var $d0 = nil;
						var $d = nil;
						$d0 = $c.$charCode();
						if (($d0 > 47) && ($d0 < 58)) {
							$d = $d0 - 48;
						} else {
							if (($d0 > 64) && ($d0 < 71)) {
								$d = $d0 - 55;
							} else {
								self._$assert$message$((function () {
									return ($d0 > 96) && ($d0 < 123);
								}), "Internal error - illegal character in radix number");
								$d = $d0 - 87;
							};
						};
						self._$assert$message$((function () {
							return $d.$$less($r);
						}), "Malformed number: digit exceeds radix");
						$power = $power - 1;
						return ($d * $r.$$times$times($power)) + $s;
					}));
					if (!$sgn.$isNil()) {
						$sum = -1 * $sum;
					} else {
						nil;
					};
					$exp = $ep.$isNil().$ifTrue$ifFalse$((function () {
						return 0;
					}), (function () {
						return $ep;
					}));
					return $sum * (10).$$times$times($exp);
				}));
			});
			this.$string = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$string.call(self).$wrap$((function ($t) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$value$($t.$token());
						cascadeReceiver.$start$($t.$start());
						return cascadeReceiver.$end$($t.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$StringAST().$new());
				}));
			});
			this.$symbol = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$symbol.call(self).$wrap$((function ($t) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$value$($t.$token().$asSymbol());
						cascadeReceiver.$start$($t.$start());
						return cascadeReceiver.$end$($t.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$SymbolAST().$new());
				}));
			});
			this.$parse$inContext$ifError$ = (function ($input, $context, $blk) {
				var self = this;
				var NLR = new Object();
				try {
					((function () {
						return self.$super$NewspeakParsing$Parser$slot._$parse$inContext$ifError$.call(self, $input, $context, $blk);
					})).$on$do$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$ParserError(), (function ($ex) {
						{
							NLR.value = $blk.$value$with$($ex.$message(), $ex.$position());
							throw NLR;
						};
					}));
					return self;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$charsToString$ = (function ($cs) {
				var self = this;
				return $cs.$inject$into$("", (function ($s, $c) {
					return $s.$$comma($c.$asString());
				}));
			});
			this.$computeDigits$ = (function ($ds) {
				var self = this;
				var $power = nil;
				$power = $ds.$size();
				return $ds.$inject$into$(0, (function ($s, $c) {
					$power = $power - 1;
					return $s + (($c.$charCode() - 48) * (10).$$times$times($power));
				}));
			});
			this.$computeFraction$ = (function ($ds) {
				var self = this;
				var $power = nil;
				$power = 0;
				return $ds.$inject$into$(0, (function ($s, $c) {
					$power = $power - 1;
					return $s + (($c.$charCode() - 48) * (10).$$times$times($power));
				}));
			});
			this.$defaultConstructorCall = (function () {
				var self = this;
				return self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new().$send$with$(self._$defaultConstructorSelector(), []);
			});
			this.$defaultConstructorPattern = (function () {
				var self = this;
				return self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessagePatternAST().$new().$selector$parameters$(self._$defaultConstructorSelector(), []);
			});
			this.$defaultConstructorSelector = (function () {
				var self = this;
				return "new";
			});
			this.$defaultSuperCallAt$ending$ = (function ($start, $end) {
				var self = this;
				var $objId = nil;
				$objId = self._$hereSendFromMsg$((function (cascadeReceiver) {
					cascadeReceiver.$send$with$("Object", []);
					cascadeReceiver.$start$($start);
					return cascadeReceiver.$end$($end);
				})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$MessageAST().$new()));
				return (function (cascadeReceiver) {
					cascadeReceiver.$receiver$($objId);
					return cascadeReceiver.$message$((function (cascadeReceiver) {
						cascadeReceiver.$start$($start);
						return cascadeReceiver.$end$($end);
					})(self._$defaultConstructorCall()));
				})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
			});
			this.$hereNode = (function () {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$name$("@here");
					cascadeReceiver.$start$(0);
					return cascadeReceiver.$end$(0);
				})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$VariableAST().$new());
			});
			this.$hereSendFromMsg$ = (function ($msg) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$to$send$(self._$hereNode(), $msg);
					cascadeReceiver.$start$($msg.$start());
					return cascadeReceiver.$end$($msg.$end());
				})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$NormalSendAST().$new());
			});
			this.$pseudoVariableNode$ = (function ($psvName) {
				var self = this;
				self._$assert$message$((function () {
					return ([
						"self",
						"super",
						"outer",
						"thisContext"
					]).$includes$($psvName);
				}), "Assert failed");
				return (function (cascadeReceiver) {
					cascadeReceiver.$name$($psvName.$asSymbol());
					cascadeReceiver.$start$(0);
					return cascadeReceiver.$end$(0);
				})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$VariableAST().$new());
			});
			this.$blockReturnType = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$blockReturnType.call(self).$wrapper$((function ($h, $rt) {
					return $rt;
				}));
			});
			this.$blockType = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$blockType.call(self).$wrapper$((function ($lb, $tas, $rb) {
					return (function (cascadeReceiver) {
						cascadeReceiver.$start$($lb.$start());
						return cascadeReceiver.$end$($rb.$end());
					})($tas.$isEmpty().$ifTrue$ifFalse$((function () {
						return self.$enclosingObjects$NewspeakParsing$Parser[0]._$BlockTypeAST().$formals$return$([], nil);
					}), (function () {
						return self.$enclosingObjects$NewspeakParsing$Parser[0]._$BlockTypeAST().$formals$return$($tas.$asArray().$allButLast$(1), $tas.$last());
					})));
				}));
			});
			this.$newBlockTypeArgList = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$newBlockTypeArgList.call(self).$wrapper$((function ($tas, $rt) {
					var $targs = nil;
					$targs = $tas.$collect$((function ($p) {
						return $p.$last();
					}));
					if ($rt.$isNil()) {
						$targs.$addLast$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$TypeIdAST().$new().$name$("Object"));
					} else {
						$targs.$add$($rt);
					};
					return $targs;
				}));
			});
			this.$nonEmptyBlockTypeArgList = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$nonEmptyBlockTypeArgList.call(self).$wrapper$((function ($tas, $rt) {
					var $targs = nil;
					$targs = (function (cascadeReceiver) {
						cascadeReceiver.$addAll$($tas);
						return cascadeReceiver.$yourself();
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$OrderedCollection().$new());
					if ($rt.$isNil()) {
						$targs.$addLast$(self.$enclosingObjects$NewspeakParsing$Parser[0]._$TypeIdAST().$new().$name$("Object"));
					} else {
						$targs.$add$($rt.$last());
					};
					return $targs;
				}));
			});
			this.$parenthesizedTypeExpression = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$parenthesizedTypeExpression.call(self).$wrapper$((function ($lp, $te, $rp) {
					(function (cascadeReceiver) {
						cascadeReceiver.$concreteStart$($lp.$start());
						return cascadeReceiver.$concreteEnd$($rp.$end());
					})($te);
					return $te;
				}));
			});
			this.$returnType = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$returnType.call(self).$wrapper$((function ($h, $rt) {
					$rt.$concreteStart$($h.$start());
					return $rt;
				}));
			});
			this.$type = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$type.call(self).$wrapper$((function ($lb, $te, $rb) {
					(function (cascadeReceiver) {
						cascadeReceiver.$concreteStart$($lb.$start());
						return cascadeReceiver.$concreteEnd$($rb.$end());
					})($te);
					return $te;
				}));
			});
			this.$typeArguments = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$typeArguments.call(self).$wrapper$((function ($lb, $tas, $rb) {
					return [
						$tas,
						$rb
					];
				}));
			});
			this.$typeExpr = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$typeExpr.call(self).$wrapper$((function ($lOperand, $msg) {
					var $operator = nil;
					var $rOperand = nil;
					return $msg.$isNil().$ifTrue$ifFalse$((function () {
						return $lOperand;
					}), (function () {
						return (function (cascadeReceiver) {
							cascadeReceiver.$leftOperand$($lOperand);
							cascadeReceiver.$operator$($msg.$first().$token());
							cascadeReceiver.$rightOperand$($msg.$last());
							cascadeReceiver.$start$($lOperand.$start());
							return cascadeReceiver.$end$($msg.$last().$end());
						})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$BinaryTypeOpAST().$new());
					}));
				}));
			});
			this.$typePrimary = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$typePrimary.call(self).$wrapper$((function ($g, $tas) {
					var $tid = nil;
					$tid = (function (cascadeReceiver) {
						cascadeReceiver.$name$($g.$token());
						cascadeReceiver.$start$($g.$start());
						return cascadeReceiver.$end$($g.$end());
					})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$TypeIdAST().$new());
					return $tas.$isNil().$ifTrue$ifFalse$((function () {
						return $tid;
					}), (function () {
						return (function (cascadeReceiver) {
							cascadeReceiver.$generic$($tid);
							cascadeReceiver.$arguments$($tas.$first());
							cascadeReceiver.$start$($g.$start());
							return cascadeReceiver.$end$($tas.$last().$end());
						})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$ParameterizedTypeAST().$new());
					}));
				}));
			});
			this.$typeTerm = (function () {
				var self = this;
				return self.$super$NewspeakParsing$Parser$slot._$typeTerm.call(self).$wrapper$((function ($operand, $operators) {
					return $operators.$inject$into$($operand, (function ($te, $op) {
						return (function (cascadeReceiver) {
							cascadeReceiver.$operand$($te);
							cascadeReceiver.$operator$($op.$token());
							cascadeReceiver.$start$($te.$start());
							return cascadeReceiver.$end$($op.$end());
						})(self.$enclosingObjects$NewspeakParsing$Parser[0]._$UnaryTypeOpAST().$new());
					}));
				}));
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakParsing`Parser";
					this._$superInit$NewspeakParsing$Parser = $.$superInit$NewspeakParsing$Parser;
					this.$superInit$NewspeakParsing$Parser = dnuCatcher("$superInit$NewspeakParsing$Parser");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$blockTypeArgList = $.$blockTypeArgList;
					this.$blockTypeArgList = dnuCatcher("$blockTypeArgList");
					this._$classBody = $.$classBody;
					this.$classBody = dnuCatcher("$classBody");
					this.$classComment = this._$classComment = $.$classComment;
					this._$classDecl = $.$classDecl;
					this.$classDecl = dnuCatcher("$classDecl");
					this._$classPrefix = $.$classPrefix;
					this.$classPrefix = dnuCatcher("$classPrefix");
					this._$defaultSuperclassAndBody = $.$defaultSuperclassAndBody;
					this.$defaultSuperclassAndBody = dnuCatcher("$defaultSuperclassAndBody");
					this._$explicitInheritanceListAndOrBody = $.$explicitInheritanceListAndOrBody;
					this.$explicitInheritanceListAndOrBody = dnuCatcher("$explicitInheritanceListAndOrBody");
					this._$hereSetterSendFromMsg$ = $.$hereSetterSendFromMsg$;
					this.$hereSetterSendFromMsg$ = dnuCatcher("$hereSetterSendFromMsg$");
					this._$instanceInitializer = $.$instanceInitializer;
					this.$instanceInitializer = dnuCatcher("$instanceInitializer");
					this._$keywordMessages = $.$keywordMessages;
					this.$keywordMessages = dnuCatcher("$keywordMessages");
					this._$keywordPattern = $.$keywordPattern;
					this.$keywordPattern = dnuCatcher("$keywordPattern");
					this._$kwPatternPair = $.$kwPatternPair;
					this.$kwPatternPair = dnuCatcher("$kwPatternPair");
					this._$literalMessage = $.$literalMessage;
					this.$literalMessage = dnuCatcher("$literalMessage");
					this._$literalMessageComment = $.$literalMessageComment;
					this.$literalMessageComment = dnuCatcher("$literalMessageComment");
					this._$literalPattern = $.$literalPattern;
					this.$literalPattern = dnuCatcher("$literalPattern");
					this._$nestedPatternLiteral = $.$nestedPatternLiteral;
					this.$nestedPatternLiteral = dnuCatcher("$nestedPatternLiteral");
					this._$newBlockArgType = $.$newBlockArgType;
					this.$newBlockArgType = dnuCatcher("$newBlockArgType");
					this._$newBlockType = $.$newBlockType;
					this.$newBlockType = dnuCatcher("$newBlockType");
					this._$newChar = $.$newChar;
					this.$newChar = dnuCatcher("$newChar");
					this._$newNonEmptyBlockArgList = $.$newNonEmptyBlockArgList;
					this.$newNonEmptyBlockArgList = dnuCatcher("$newNonEmptyBlockArgList");
					this._$nontrivialBinaryMessages = $.$nontrivialBinaryMessages;
					this.$nontrivialBinaryMessages = dnuCatcher("$nontrivialBinaryMessages");
					this._$oldChar = $.$oldChar;
					this.$oldChar = dnuCatcher("$oldChar");
					this._$outerReceiver = $.$outerReceiver;
					this.$outerReceiver = dnuCatcher("$outerReceiver");
					this._$pattern = $.$pattern;
					this.$pattern = dnuCatcher("$pattern");
					this._$sendMessages$to$ = $.$sendMessages$to$;
					this.$sendMessages$to$ = dnuCatcher("$sendMessages$to$");
					this._$seqSlotDecls = $.$seqSlotDecls;
					this.$seqSlotDecls = dnuCatcher("$seqSlotDecls");
					this._$simSlotDecls = $.$simSlotDecls;
					this.$simSlotDecls = dnuCatcher("$simSlotDecls");
					this._$superclassPrefix = $.$superclassPrefix;
					this.$superclassPrefix = dnuCatcher("$superclassPrefix");
					this._$tupleType = $.$tupleType;
					this.$tupleType = dnuCatcher("$tupleType");
					this._$unaryMsg = $.$unaryMsg;
					this.$unaryMsg = dnuCatcher("$unaryMsg");
					this._$variablePattern = $.$variablePattern;
					this.$variablePattern = dnuCatcher("$variablePattern");
					this._$wildcardPattern = $.$wildcardPattern;
					this.$wildcardPattern = dnuCatcher("$wildcardPattern");
					this._$binaryExpression = $.$binaryExpression;
					this.$binaryExpression = dnuCatcher("$binaryExpression");
					this._$binaryMsg = $.$binaryMsg;
					this.$binaryMsg = dnuCatcher("$binaryMsg");
					this._$binaryMsgPattern = $.$binaryMsgPattern;
					this.$binaryMsgPattern = dnuCatcher("$binaryMsgPattern");
					this._$block = $.$block;
					this.$block = dnuCatcher("$block");
					this._$blockParameter = $.$blockParameter;
					this.$blockParameter = dnuCatcher("$blockParameter");
					this._$blockParameters = $.$blockParameters;
					this.$blockParameters = dnuCatcher("$blockParameters");
					this._$cascadeMsg = $.$cascadeMsg;
					this.$cascadeMsg = dnuCatcher("$cascadeMsg");
					this._$cascadedMessageExpression = $.$cascadedMessageExpression;
					this.$cascadedMessageExpression = dnuCatcher("$cascadedMessageExpression");
					this._$category = $.$category;
					this.$category = dnuCatcher("$category");
					this._$classDeclaration = $.$classDeclaration;
					this.$classDeclaration = dnuCatcher("$classDeclaration");
					this._$classDefinition = $.$classDefinition;
					this.$classDefinition = dnuCatcher("$classDefinition");
					this._$classHeader = $.$classHeader;
					this.$classHeader = dnuCatcher("$classHeader");
					this._$classSideDecl = $.$classSideDecl;
					this.$classSideDecl = dnuCatcher("$classSideDecl");
					this._$codeBody = $.$codeBody;
					this.$codeBody = dnuCatcher("$codeBody");
					this.$compilationUnit = this._$compilationUnit = $.$compilationUnit;
					this.$doItExpression = this._$doItExpression = $.$doItExpression;
					this._$expression = $.$expression;
					this.$expression = dnuCatcher("$expression");
					this._$furtherStatements = $.$furtherStatements;
					this.$furtherStatements = dnuCatcher("$furtherStatements");
					this._$keywordExpression = $.$keywordExpression;
					this.$keywordExpression = dnuCatcher("$keywordExpression");
					this._$keywordHereSend = $.$keywordHereSend;
					this.$keywordHereSend = dnuCatcher("$keywordHereSend");
					this._$keywordMsg = $.$keywordMsg;
					this.$keywordMsg = dnuCatcher("$keywordMsg");
					this._$keywordMsgPattern = $.$keywordMsgPattern;
					this.$keywordMsgPattern = dnuCatcher("$keywordMsgPattern");
					this._$messagePattern = $.$messagePattern;
					this.$messagePattern = dnuCatcher("$messagePattern");
					this._$method = $.$method;
					this.$method = dnuCatcher("$method");
					this.$methodDecl = this._$methodDecl = $.$methodDecl;
					this._$mixinApplication = $.$mixinApplication;
					this.$mixinApplication = dnuCatcher("$mixinApplication");
					this._$moduleBody = $.$moduleBody;
					this.$moduleBody = dnuCatcher("$moduleBody");
					this._$moduleDeclaration = $.$moduleDeclaration;
					this.$moduleDeclaration = dnuCatcher("$moduleDeclaration");
					this._$nestedClassDecl = $.$nestedClassDecl;
					this.$nestedClassDecl = dnuCatcher("$nestedClassDecl");
					this._$parenthesizedExpression = $.$parenthesizedExpression;
					this.$parenthesizedExpression = dnuCatcher("$parenthesizedExpression");
					this._$returnStatement = $.$returnStatement;
					this.$returnStatement = dnuCatcher("$returnStatement");
					this._$sideDecl = $.$sideDecl;
					this.$sideDecl = dnuCatcher("$sideDecl");
					this._$slotDecl = $.$slotDecl;
					this.$slotDecl = dnuCatcher("$slotDecl");
					this._$slotDef = $.$slotDef;
					this.$slotDef = dnuCatcher("$slotDef");
					this._$slotName = $.$slotName;
					this.$slotName = dnuCatcher("$slotName");
					this._$statementSequence = $.$statementSequence;
					this.$statementSequence = dnuCatcher("$statementSequence");
					this._$superclassClause = $.$superclassClause;
					this.$superclassClause = dnuCatcher("$superclassClause");
					this._$symbolConstant = $.$symbolConstant;
					this.$symbolConstant = dnuCatcher("$symbolConstant");
					this._$toplevelClass = $.$toplevelClass;
					this.$toplevelClass = dnuCatcher("$toplevelClass");
					this._$tuple = $.$tuple;
					this.$tuple = dnuCatcher("$tuple");
					this._$unaryExpression = $.$unaryExpression;
					this.$unaryExpression = dnuCatcher("$unaryExpression");
					this._$unaryMsgPattern = $.$unaryMsgPattern;
					this.$unaryMsgPattern = dnuCatcher("$unaryMsgPattern");
					this._$decimalNum = $.$decimalNum;
					this.$decimalNum = dnuCatcher("$decimalNum");
					this._$exponent = $.$exponent;
					this.$exponent = dnuCatcher("$exponent");
					this._$extendedFraction = $.$extendedFraction;
					this.$extendedFraction = dnuCatcher("$extendedFraction");
					this._$fraction = $.$fraction;
					this.$fraction = dnuCatcher("$fraction");
					this._$number = $.$number;
					this.$number = dnuCatcher("$number");
					this._$radix = $.$radix;
					this.$radix = dnuCatcher("$radix");
					this._$radixNum = $.$radixNum;
					this.$radixNum = dnuCatcher("$radixNum");
					this._$string = $.$string;
					this.$string = dnuCatcher("$string");
					this._$symbol = $.$symbol;
					this.$symbol = dnuCatcher("$symbol");
					this.$parse$inContext$ifError$ = this._$parse$inContext$ifError$ = $.$parse$inContext$ifError$;
					this._$charsToString$ = $.$charsToString$;
					this.$charsToString$ = dnuCatcher("$charsToString$");
					this._$computeDigits$ = $.$computeDigits$;
					this.$computeDigits$ = dnuCatcher("$computeDigits$");
					this._$computeFraction$ = $.$computeFraction$;
					this.$computeFraction$ = dnuCatcher("$computeFraction$");
					this._$defaultConstructorCall = $.$defaultConstructorCall;
					this.$defaultConstructorCall = dnuCatcher("$defaultConstructorCall");
					this._$defaultConstructorPattern = $.$defaultConstructorPattern;
					this.$defaultConstructorPattern = dnuCatcher("$defaultConstructorPattern");
					this._$defaultConstructorSelector = $.$defaultConstructorSelector;
					this.$defaultConstructorSelector = dnuCatcher("$defaultConstructorSelector");
					this._$defaultSuperCallAt$ending$ = $.$defaultSuperCallAt$ending$;
					this.$defaultSuperCallAt$ending$ = dnuCatcher("$defaultSuperCallAt$ending$");
					this._$hereNode = $.$hereNode;
					this.$hereNode = dnuCatcher("$hereNode");
					this._$hereSendFromMsg$ = $.$hereSendFromMsg$;
					this.$hereSendFromMsg$ = dnuCatcher("$hereSendFromMsg$");
					this._$pseudoVariableNode$ = $.$pseudoVariableNode$;
					this.$pseudoVariableNode$ = dnuCatcher("$pseudoVariableNode$");
					this._$blockReturnType = $.$blockReturnType;
					this.$blockReturnType = dnuCatcher("$blockReturnType");
					this._$blockType = $.$blockType;
					this.$blockType = dnuCatcher("$blockType");
					this._$newBlockTypeArgList = $.$newBlockTypeArgList;
					this.$newBlockTypeArgList = dnuCatcher("$newBlockTypeArgList");
					this._$nonEmptyBlockTypeArgList = $.$nonEmptyBlockTypeArgList;
					this.$nonEmptyBlockTypeArgList = dnuCatcher("$nonEmptyBlockTypeArgList");
					this._$parenthesizedTypeExpression = $.$parenthesizedTypeExpression;
					this.$parenthesizedTypeExpression = dnuCatcher("$parenthesizedTypeExpression");
					this._$returnType = $.$returnType;
					this.$returnType = dnuCatcher("$returnType");
					this._$type = $.$type;
					this.$type = dnuCatcher("$type");
					this._$typeArguments = $.$typeArguments;
					this.$typeArguments = dnuCatcher("$typeArguments");
					this._$typeExpr = $.$typeExpr;
					this.$typeExpr = dnuCatcher("$typeExpr");
					this._$typePrimary = $.$typePrimary;
					this.$typePrimary = dnuCatcher("$typePrimary");
					this._$typeTerm = $.$typeTerm;
					this.$typeTerm = dnuCatcher("$typeTerm");
					this.$enclosingObjects$NewspeakParsing$Parser = enclosingObjects;
					this.$super$NewspeakParsing$Parser$slot = runtimeSuperclass;
					this["NewspeakParsing`Parser"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["NewspeakParsing`Parser"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakParsing`Parser";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakParsing`Parser";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakParsing$Parser = enclosingObjects;
						this.$super$NewspeakParsing$Parser = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakParsing$InternalParser.enclosingMixin = this;
		this.$NewspeakParsing$Parser.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for NewspeakParsing";
				this._$superInit$NewspeakParsing = $.$superInit$NewspeakParsing;
				this.$superInit$NewspeakParsing = dnuCatcher("$superInit$NewspeakParsing");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this.$language = this._$language = $.$language;
				this.$InternalParser = this._$InternalParser = $.$InternalParser;
				this.$Parser = this._$Parser = $.$Parser;
				this._$OrderedCollection = $.$OrderedCollection;
				this.$OrderedCollection = dnuCatcher("$OrderedCollection");
				this._$setOnce$OrderedCollection$ = $.$setOnce$OrderedCollection$;
				this.$setOnce$OrderedCollection$ = dnuCatcher("$setOnce$OrderedCollection$");
				this._$TypedGrammar = $.$TypedGrammar;
				this.$TypedGrammar = dnuCatcher("$TypedGrammar");
				this._$setOnce$TypedGrammar$ = $.$setOnce$TypedGrammar$;
				this.$setOnce$TypedGrammar$ = dnuCatcher("$setOnce$TypedGrammar$");
				this._$ParserError = $.$ParserError;
				this.$ParserError = dnuCatcher("$ParserError");
				this._$setOnce$ParserError$ = $.$setOnce$ParserError$;
				this.$setOnce$ParserError$ = dnuCatcher("$setOnce$ParserError$");
				this.$ASTModule = this._$ASTModule = $.$ASTModule;
				this.$setOnce$ASTModule$ = this._$setOnce$ASTModule$ = $.$setOnce$ASTModule$;
				this._$BinaryTypeOpAST = $.$BinaryTypeOpAST;
				this.$BinaryTypeOpAST = dnuCatcher("$BinaryTypeOpAST");
				this._$setOnce$BinaryTypeOpAST$ = $.$setOnce$BinaryTypeOpAST$;
				this.$setOnce$BinaryTypeOpAST$ = dnuCatcher("$setOnce$BinaryTypeOpAST$");
				this._$BlockAST = $.$BlockAST;
				this.$BlockAST = dnuCatcher("$BlockAST");
				this._$setOnce$BlockAST$ = $.$setOnce$BlockAST$;
				this.$setOnce$BlockAST$ = dnuCatcher("$setOnce$BlockAST$");
				this._$BlockTypeAST = $.$BlockTypeAST;
				this.$BlockTypeAST = dnuCatcher("$BlockTypeAST");
				this._$setOnce$BlockTypeAST$ = $.$setOnce$BlockTypeAST$;
				this.$setOnce$BlockTypeAST$ = dnuCatcher("$setOnce$BlockTypeAST$");
				this._$CascadedSendAST = $.$CascadedSendAST;
				this.$CascadedSendAST = dnuCatcher("$CascadedSendAST");
				this._$setOnce$CascadedSendAST$ = $.$setOnce$CascadedSendAST$;
				this.$setOnce$CascadedSendAST$ = dnuCatcher("$setOnce$CascadedSendAST$");
				this._$CategoryAST = $.$CategoryAST;
				this.$CategoryAST = dnuCatcher("$CategoryAST");
				this._$setOnce$CategoryAST$ = $.$setOnce$CategoryAST$;
				this.$setOnce$CategoryAST$ = dnuCatcher("$setOnce$CategoryAST$");
				this._$CharAST = $.$CharAST;
				this.$CharAST = dnuCatcher("$CharAST");
				this._$setOnce$CharAST$ = $.$setOnce$CharAST$;
				this.$setOnce$CharAST$ = dnuCatcher("$setOnce$CharAST$");
				this._$ClassBodyAST = $.$ClassBodyAST;
				this.$ClassBodyAST = dnuCatcher("$ClassBodyAST");
				this._$setOnce$ClassBodyAST$ = $.$setOnce$ClassBodyAST$;
				this.$setOnce$ClassBodyAST$ = dnuCatcher("$setOnce$ClassBodyAST$");
				this._$ClassDeclarationAST = $.$ClassDeclarationAST;
				this.$ClassDeclarationAST = dnuCatcher("$ClassDeclarationAST");
				this._$setOnce$ClassDeclarationAST$ = $.$setOnce$ClassDeclarationAST$;
				this.$setOnce$ClassDeclarationAST$ = dnuCatcher("$setOnce$ClassDeclarationAST$");
				this._$ClassHeaderAST = $.$ClassHeaderAST;
				this.$ClassHeaderAST = dnuCatcher("$ClassHeaderAST");
				this._$setOnce$ClassHeaderAST$ = $.$setOnce$ClassHeaderAST$;
				this.$setOnce$ClassHeaderAST$ = dnuCatcher("$setOnce$ClassHeaderAST$");
				this._$ClassPrefixAST = $.$ClassPrefixAST;
				this.$ClassPrefixAST = dnuCatcher("$ClassPrefixAST");
				this._$setOnce$ClassPrefixAST$ = $.$setOnce$ClassPrefixAST$;
				this.$setOnce$ClassPrefixAST$ = dnuCatcher("$setOnce$ClassPrefixAST$");
				this._$CodeBodyAST = $.$CodeBodyAST;
				this.$CodeBodyAST = dnuCatcher("$CodeBodyAST");
				this._$setOnce$CodeBodyAST$ = $.$setOnce$CodeBodyAST$;
				this.$setOnce$CodeBodyAST$ = dnuCatcher("$setOnce$CodeBodyAST$");
				this._$ImmutableSlotDefAST = $.$ImmutableSlotDefAST;
				this.$ImmutableSlotDefAST = dnuCatcher("$ImmutableSlotDefAST");
				this._$setOnce$ImmutableSlotDefAST$ = $.$setOnce$ImmutableSlotDefAST$;
				this.$setOnce$ImmutableSlotDefAST$ = dnuCatcher("$setOnce$ImmutableSlotDefAST$");
				this._$InitializerAST = $.$InitializerAST;
				this.$InitializerAST = dnuCatcher("$InitializerAST");
				this._$setOnce$InitializerAST$ = $.$setOnce$InitializerAST$;
				this.$setOnce$InitializerAST$ = dnuCatcher("$setOnce$InitializerAST$");
				this._$ParameterizedTypeAST = $.$ParameterizedTypeAST;
				this.$ParameterizedTypeAST = dnuCatcher("$ParameterizedTypeAST");
				this._$setOnce$ParameterizedTypeAST$ = $.$setOnce$ParameterizedTypeAST$;
				this.$setOnce$ParameterizedTypeAST$ = dnuCatcher("$setOnce$ParameterizedTypeAST$");
				this._$MessageAST = $.$MessageAST;
				this.$MessageAST = dnuCatcher("$MessageAST");
				this._$setOnce$MessageAST$ = $.$setOnce$MessageAST$;
				this.$setOnce$MessageAST$ = dnuCatcher("$setOnce$MessageAST$");
				this._$MessagePatternAST = $.$MessagePatternAST;
				this.$MessagePatternAST = dnuCatcher("$MessagePatternAST");
				this._$setOnce$MessagePatternAST$ = $.$setOnce$MessagePatternAST$;
				this.$setOnce$MessagePatternAST$ = dnuCatcher("$setOnce$MessagePatternAST$");
				this._$MethodAST = $.$MethodAST;
				this.$MethodAST = dnuCatcher("$MethodAST");
				this._$setOnce$MethodAST$ = $.$setOnce$MethodAST$;
				this.$setOnce$MethodAST$ = dnuCatcher("$setOnce$MethodAST$");
				this._$MixinApplicationClassAST = $.$MixinApplicationClassAST;
				this.$MixinApplicationClassAST = dnuCatcher("$MixinApplicationClassAST");
				this._$setOnce$MixinApplicationClassAST$ = $.$setOnce$MixinApplicationClassAST$;
				this.$setOnce$MixinApplicationClassAST$ = dnuCatcher("$setOnce$MixinApplicationClassAST$");
				this._$MutableSlotDefAST = $.$MutableSlotDefAST;
				this.$MutableSlotDefAST = dnuCatcher("$MutableSlotDefAST");
				this._$setOnce$MutableSlotDefAST$ = $.$setOnce$MutableSlotDefAST$;
				this.$setOnce$MutableSlotDefAST$ = dnuCatcher("$setOnce$MutableSlotDefAST$");
				this._$NormalSendAST = $.$NormalSendAST;
				this.$NormalSendAST = dnuCatcher("$NormalSendAST");
				this._$setOnce$NormalSendAST$ = $.$setOnce$NormalSendAST$;
				this.$setOnce$NormalSendAST$ = dnuCatcher("$setOnce$NormalSendAST$");
				this._$NSSideAST = $.$NSSideAST;
				this.$NSSideAST = dnuCatcher("$NSSideAST");
				this._$setOnce$NSSideAST$ = $.$setOnce$NSSideAST$;
				this.$setOnce$NSSideAST$ = dnuCatcher("$setOnce$NSSideAST$");
				this._$NumberAST = $.$NumberAST;
				this.$NumberAST = dnuCatcher("$NumberAST");
				this._$setOnce$NumberAST$ = $.$setOnce$NumberAST$;
				this.$setOnce$NumberAST$ = dnuCatcher("$setOnce$NumberAST$");
				this._$ReturnStatAST = $.$ReturnStatAST;
				this.$ReturnStatAST = dnuCatcher("$ReturnStatAST");
				this._$setOnce$ReturnStatAST$ = $.$setOnce$ReturnStatAST$;
				this.$setOnce$ReturnStatAST$ = dnuCatcher("$setOnce$ReturnStatAST$");
				this._$SetterSendAST = $.$SetterSendAST;
				this.$SetterSendAST = dnuCatcher("$SetterSendAST");
				this._$setOnce$SetterSendAST$ = $.$setOnce$SetterSendAST$;
				this.$setOnce$SetterSendAST$ = dnuCatcher("$setOnce$SetterSendAST$");
				this._$SideAST = $.$SideAST;
				this.$SideAST = dnuCatcher("$SideAST");
				this._$setOnce$SideAST$ = $.$setOnce$SideAST$;
				this.$setOnce$SideAST$ = dnuCatcher("$setOnce$SideAST$");
				this._$StringAST = $.$StringAST;
				this.$StringAST = dnuCatcher("$StringAST");
				this._$setOnce$StringAST$ = $.$setOnce$StringAST$;
				this.$setOnce$StringAST$ = dnuCatcher("$setOnce$StringAST$");
				this._$SymbolAST = $.$SymbolAST;
				this.$SymbolAST = dnuCatcher("$SymbolAST");
				this._$setOnce$SymbolAST$ = $.$setOnce$SymbolAST$;
				this.$setOnce$SymbolAST$ = dnuCatcher("$setOnce$SymbolAST$");
				this._$TupleAST = $.$TupleAST;
				this.$TupleAST = dnuCatcher("$TupleAST");
				this._$setOnce$TupleAST$ = $.$setOnce$TupleAST$;
				this.$setOnce$TupleAST$ = dnuCatcher("$setOnce$TupleAST$");
				this._$TypeIdAST = $.$TypeIdAST;
				this.$TypeIdAST = dnuCatcher("$TypeIdAST");
				this._$setOnce$TypeIdAST$ = $.$setOnce$TypeIdAST$;
				this.$setOnce$TypeIdAST$ = dnuCatcher("$setOnce$TypeIdAST$");
				this._$UnaryTypeOpAST = $.$UnaryTypeOpAST;
				this.$UnaryTypeOpAST = dnuCatcher("$UnaryTypeOpAST");
				this._$setOnce$UnaryTypeOpAST$ = $.$setOnce$UnaryTypeOpAST$;
				this.$setOnce$UnaryTypeOpAST$ = dnuCatcher("$setOnce$UnaryTypeOpAST$");
				this._$VarDeclAST = $.$VarDeclAST;
				this.$VarDeclAST = dnuCatcher("$VarDeclAST");
				this._$setOnce$VarDeclAST$ = $.$setOnce$VarDeclAST$;
				this.$setOnce$VarDeclAST$ = dnuCatcher("$setOnce$VarDeclAST$");
				this._$VariableAST = $.$VariableAST;
				this.$VariableAST = dnuCatcher("$VariableAST");
				this._$setOnce$VariableAST$ = $.$setOnce$VariableAST$;
				this.$setOnce$VariableAST$ = dnuCatcher("$setOnce$VariableAST$");
				this._$MixinApplicationAST = $.$MixinApplicationAST;
				this.$MixinApplicationAST = dnuCatcher("$MixinApplicationAST");
				this._$setOnce$MixinApplicationAST$ = $.$setOnce$MixinApplicationAST$;
				this.$setOnce$MixinApplicationAST$ = dnuCatcher("$setOnce$MixinApplicationAST$");
				this._$KeywordPatternAST = $.$KeywordPatternAST;
				this.$KeywordPatternAST = dnuCatcher("$KeywordPatternAST");
				this._$setOnce$KeywordPatternAST$ = $.$setOnce$KeywordPatternAST$;
				this.$setOnce$KeywordPatternAST$ = dnuCatcher("$setOnce$KeywordPatternAST$");
				this._$KeywordPatternPairAST = $.$KeywordPatternPairAST;
				this.$KeywordPatternPairAST = dnuCatcher("$KeywordPatternPairAST");
				this._$setOnce$KeywordPatternPairAST$ = $.$setOnce$KeywordPatternPairAST$;
				this.$setOnce$KeywordPatternPairAST$ = dnuCatcher("$setOnce$KeywordPatternPairAST$");
				this._$WildcardPatternAST = $.$WildcardPatternAST;
				this.$WildcardPatternAST = dnuCatcher("$WildcardPatternAST");
				this._$setOnce$WildcardPatternAST$ = $.$setOnce$WildcardPatternAST$;
				this.$setOnce$WildcardPatternAST$ = dnuCatcher("$setOnce$WildcardPatternAST$");
				this._$LiteralPatternAST = $.$LiteralPatternAST;
				this.$LiteralPatternAST = dnuCatcher("$LiteralPatternAST");
				this._$setOnce$LiteralPatternAST$ = $.$setOnce$LiteralPatternAST$;
				this.$setOnce$LiteralPatternAST$ = dnuCatcher("$setOnce$LiteralPatternAST$");
				this._$VariablePatternAST = $.$VariablePatternAST;
				this.$VariablePatternAST = dnuCatcher("$VariablePatternAST");
				this._$setOnce$VariablePatternAST$ = $.$setOnce$VariablePatternAST$;
				this.$setOnce$VariablePatternAST$ = dnuCatcher("$setOnce$VariablePatternAST$");
				this.$NewspeakParsing$InternalParser = this._$NewspeakParsing$InternalParser = $.$NewspeakParsing$InternalParser;
				this.$NewspeakParsing$InternalParser$ = this._$NewspeakParsing$InternalParser$ = $.$NewspeakParsing$InternalParser$;
				this.$NewspeakParsing$Parser = this._$NewspeakParsing$Parser = $.$NewspeakParsing$Parser;
				this.$NewspeakParsing$Parser$ = this._$NewspeakParsing$Parser$ = $.$NewspeakParsing$Parser$;
				this.$enclosingObjects$NewspeakParsing = enclosingObjects;
				this.$super$NewspeakParsing$slot = runtimeSuperclass;
				this.NewspeakParsing = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$OrderedCollection$slot = nil;
					this.$TypedGrammar$slot = nil;
					this.$ParserError$slot = nil;
					this.$ASTModule$slot = nil;
					this.$BinaryTypeOpAST$slot = nil;
					this.$BlockAST$slot = nil;
					this.$BlockTypeAST$slot = nil;
					this.$CascadedSendAST$slot = nil;
					this.$CategoryAST$slot = nil;
					this.$CharAST$slot = nil;
					this.$ClassBodyAST$slot = nil;
					this.$ClassDeclarationAST$slot = nil;
					this.$ClassHeaderAST$slot = nil;
					this.$ClassPrefixAST$slot = nil;
					this.$CodeBodyAST$slot = nil;
					this.$ImmutableSlotDefAST$slot = nil;
					this.$InitializerAST$slot = nil;
					this.$ParameterizedTypeAST$slot = nil;
					this.$MessageAST$slot = nil;
					this.$MessagePatternAST$slot = nil;
					this.$MethodAST$slot = nil;
					this.$MixinApplicationClassAST$slot = nil;
					this.$MutableSlotDefAST$slot = nil;
					this.$NormalSendAST$slot = nil;
					this.$NSSideAST$slot = nil;
					this.$NumberAST$slot = nil;
					this.$ReturnStatAST$slot = nil;
					this.$SetterSendAST$slot = nil;
					this.$SideAST$slot = nil;
					this.$StringAST$slot = nil;
					this.$SymbolAST$slot = nil;
					this.$TupleAST$slot = nil;
					this.$TypeIdAST$slot = nil;
					this.$UnaryTypeOpAST$slot = nil;
					this.$VarDeclAST$slot = nil;
					this.$VariableAST$slot = nil;
					this.$MixinApplicationAST$slot = nil;
					this.$KeywordPatternAST$slot = nil;
					this.$KeywordPatternPairAST$slot = nil;
					this.$WildcardPatternAST$slot = nil;
					this.$LiteralPatternAST$slot = nil;
					this.$VariablePatternAST$slot = nil;
					this.$NewspeakParsing$InternalParser$slot = nil;
					this.$NewspeakParsing$Parser$slot = nil;
				});
				this.basicNew = this.NewspeakParsing;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for NewspeakParsing";
			this.slots = [];
			this.methods = [new MM("usingPlatform:grammar:asts:", true, null)];
			this.nestedClasses = [];
			this.$usingPlatform$grammar$asts$ = (function ($platform, $grammar, $asts) {
				return (new this.nonMeta.basicNew()).$instance$initializer($platform, $grammar, $asts);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for NewspeakParsing";
					this.$usingPlatform$grammar$asts$ = this._$usingPlatform$grammar$asts$ = $.$usingPlatform$grammar$asts$;
					this.$enclosingObjects$NewspeakParsing = enclosingObjects;
					this.$super$NewspeakParsing = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$JavascriptGeneration = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for JavascriptGeneration";
		this.name = "JavascriptGeneration";
		this.header = "JavascriptGeneration usingPlatform: platform = (\r(* Building blocks of Javascript syntax trees and a tree writer. The nodes are intended to represent Javascript code to be generated rather than the result of parsing an arbitrary Javascript program, so there is no provision for some ungood things such as the with statement.\r\rCopyright 2012 SAP AG.\rCopyright 2013 Ryan Macnak\r   \rLicensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0\r*)|\r	private List = platform collections OrderedCollection.\r	private Dictionary = platform collections Dictionary.\r	private WriteStream = platform streams CharacterReadWriteStream.\r\r	syntax = Syntax new.\r	public factory = Factory new.\r|)";
		this.slots = [
			new SM("List", false, false),
			new SM("Dictionary", false, false),
			new SM("WriteStream", false, false),
			new SM("syntax", false, false),
			new SM("factory", false, false),
			new SM("JavascriptGeneration`Factory", true, true),
			new SM("JavascriptGeneration`Syntax", true, true),
			new SM("JavascriptGeneration`Writer", true, true)
		];
		this.methods = [
			new MM("superInit`JavascriptGeneration", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("isLegalIdentifier:", false, "isLegalIdentifier: id <String> ^<Boolean> = (\r	(* This is more conservative than the actual rule. *) \r	id size > 0 ifFalse: [^false].\r	id do: [:char | ('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$_' includes: char) ifFalse: [^false]].\r	^id first isNumber not\r)"),
			new MM("Factory", true, null),
			new MM("Syntax", true, null),
			new MM("Writer", true, null),
			new MM("List", true, null),
			new MM("setOnce`List:", true, null),
			new MM("Dictionary", true, null),
			new MM("setOnce`Dictionary:", true, null),
			new MM("WriteStream", true, null),
			new MM("setOnce`WriteStream:", true, null),
			new MM("syntax", true, null),
			new MM("setOnce`syntax:", true, null),
			new MM("factory", true, null),
			new MM("setOnce`factory:", true, null),
			new MM("JavascriptGeneration`Factory", true, null),
			new MM("JavascriptGeneration`Factory:", true, null),
			new MM("JavascriptGeneration`Syntax", true, null),
			new MM("JavascriptGeneration`Syntax:", true, null),
			new MM("JavascriptGeneration`Writer", true, null),
			new MM("JavascriptGeneration`Writer:", true, null)
		];
		this.nestedClasses = [
			"JavascriptGeneration`Factory",
			"JavascriptGeneration`Syntax",
			"JavascriptGeneration`Writer"
		];
		this.applications = [];
		this.$superInit$JavascriptGeneration = (function ($platform) {
			var self = this;
			self.$super$JavascriptGeneration$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($platform) {
			var self = this;
			self._$superInit$JavascriptGeneration($platform);
			$0.$setOnce$List$.call(self, $platform.$collections().$OrderedCollection());
			$0.$setOnce$Dictionary$.call(self, $platform.$collections().$Dictionary());
			$0.$setOnce$WriteStream$.call(self, $platform.$streams().$CharacterReadWriteStream());
			self._$setOnce$syntax$(self._$Syntax().$new());
			self._$setOnce$factory$(self._$Factory().$new());
			return self;
		});
		this.$isLegalIdentifier$ = (function ($id) {
			var self = this;
			var NLR = new Object();
			try {
				if (!($id.$size() > 0)) {
					return false;
				} else {
					nil;
				};
				$id.$do$((function ($char) {
					return ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$_").$includes$($char).$ifFalse$((function () {
						{
							NLR.value = false;
							throw NLR;
						};
					}));
				}));
				return $id.$first().$isNumber().$not();
			} catch (NLR_exception) {
				if (NLR === NLR_exception) {
					return NLR_exception.value;
				} else {
					throw NLR_exception;
				};
			};
		});
		this.$Factory = (function () {
			if (nil === this.$JavascriptGeneration$Factory$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration);
				var mixin = $.$JavascriptGeneration$Factory;
				this.$JavascriptGeneration$Factory$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$JavascriptGeneration$Factory$slot;
		});
		this.$Syntax = (function () {
			if (nil === this.$JavascriptGeneration$Syntax$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration);
				var mixin = $.$JavascriptGeneration$Syntax;
				this.$JavascriptGeneration$Syntax$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$JavascriptGeneration$Syntax$slot;
		});
		this.$Writer = (function () {
			if (nil === this.$JavascriptGeneration$Writer$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration);
				var mixin = $.$JavascriptGeneration$Writer;
				this.$JavascriptGeneration$Writer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$JavascriptGeneration$Writer$slot;
		});
		this.$List = (function () {
			return this.$List$slot;
		});
		this.$setOnce$List$ = (function (v) {
			this.$List$slot = v;
			return this;
		});
		this.$Dictionary = (function () {
			return this.$Dictionary$slot;
		});
		this.$setOnce$Dictionary$ = (function (v) {
			this.$Dictionary$slot = v;
			return this;
		});
		this.$WriteStream = (function () {
			return this.$WriteStream$slot;
		});
		this.$setOnce$WriteStream$ = (function (v) {
			this.$WriteStream$slot = v;
			return this;
		});
		this.$syntax = (function () {
			return this.$syntax$slot;
		});
		this.$setOnce$syntax$ = (function (v) {
			this.$syntax$slot = v;
			return this;
		});
		this.$factory = (function () {
			return this.$factory$slot;
		});
		this.$setOnce$factory$ = (function (v) {
			this.$factory$slot = v;
			return this;
		});
		this.$JavascriptGeneration$Factory = (function () {
			return this.$JavascriptGeneration$Factory$slot;
		});
		this.$JavascriptGeneration$Factory$ = (function (v) {
			this.$JavascriptGeneration$Factory$slot = v;
			return this;
		});
		this.$JavascriptGeneration$Syntax = (function () {
			return this.$JavascriptGeneration$Syntax$slot;
		});
		this.$JavascriptGeneration$Syntax$ = (function (v) {
			this.$JavascriptGeneration$Syntax$slot = v;
			return this;
		});
		this.$JavascriptGeneration$Writer = (function () {
			return this.$JavascriptGeneration$Writer$slot;
		});
		this.$JavascriptGeneration$Writer$ = (function (v) {
			this.$JavascriptGeneration$Writer$slot = v;
			return this;
		});
		this.$JavascriptGeneration$Factory = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for JavascriptGeneration`Factory";
			this.name = "JavascriptGeneration`Factory";
			this.header = "Factory = ((* Provides a set of methods to build Javascript ASTs by writing expressions more readable than those that instantiate AST classes directly. An instance is held onto by the containing module as the slot named 'factory'. It's convenient to bind that instance in a user module to a slot with a short name such as 'js', to create Javascript ASTs with expressions like\r\rjs block: {js return: (js ident: 'self')} *)|\r|)";
			this.slots = [];
			this.methods = [
				new MM("superInit`JavascriptGeneration`Factory", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("array:", false, "public array: elements <List[Node]> ^<ArrayExpression> = (\r	elements do: [:each | assert: [each isJsNode] message: 'JS node expected'].\r	^syntax ArrayExpression elements: elements\r)"),
				new MM("assign:toBe:", false, "public assign: lhs <Node> toBe: rhs <Node> ^<Node> = (\r	assert: [lhs isJsNode] message: 'JS node expected on left'.\r	assert: [rhs isJsNode] message: 'JS node expected on right'.\r	^syntax AssignmentExpression leftHandSide: lhs rightHandSide: rhs\r)"),
				new MM("block:", false, "public block: statements <List[Node]> ^<Node> = (\r	statements do: [:each | assert: [each isJsNode] message:'Malformed statement tree'].\r	^syntax Block statements: statements\r)"),
				new MM("call:with:", false, "public call: expression <Node> with: arguments <List[Node]> = (\r	^syntax CallExpression function: expression arguments: arguments\r)"),
				new MM("for:in:do:", false, "public for: varName <String> in: expr <Node> do: bodyStmt <Node> = (\r	| canonicalVarName |\r	canonicalVarName:: varName isNil\r		ifTrue: [varName]\r		ifFalse: [varName isString ifTrue: [ident: varName] ifFalse: [varName]].\r	^syntax ForInStatement\r		varName: canonicalVarName\r		expression: expr\r		body: bodyStmt\r)"),
				new MM("for:while:step:do:", false, "public for: initExpr while: testExpr step: incExpr do: bodyStmt = (\r	^syntax ForStatement\r		initExpression: initExpr\r		test: testExpr\r		increment: incExpr\r		body: bodyStmt\r)"),
				new MM("function:of:body:", false, "public function: name <String> of: params body: body <Block> = (\r	| canonicalName canonicalParams |\r	canonicalName:: name isNil\r		ifTrue: [name]\r		ifFalse: [name isString ifTrue: [ident: name] ifFalse: [name]].\r	canonicalParams:: params collect: [:each | each isString ifTrue: [ident: each]  ifFalse: [each]].\r	^syntax FunctionStatement name: canonicalName parameters: canonicalParams body: body\r)"),
				new MM("functionOf:body:", false, "public functionOf: params body: body <Block> = (\r	| paramIds |\r	paramIds:: params collect: [:each | each isString ifTrue: [ident: each]  ifFalse: [each]].\r	^syntax FunctionExpression name: nil parameters: paramIds body: body\r)"),
				new MM("ident:", false, "public ident: name <String> ^<Node> = (\r	assert: [name isString] message: 'name must be a string'.\r	^syntax IdentifierExpression name: name\r)"),
				new MM("if:then:", false, "public if: expression <Node> then: then <Node> ^<Node> = (\r	^syntax IfStatement expression: expression then: then else: nil\r)"),
				new MM("if:then:else:", false, "public if: expression <Node> then: then <Node> else: else <Node> ^<Node> = (\r	^syntax IfStatement expression: expression then: then else: else\r)"),
				new MM("literal:", false, "public literal: value <Boolean | Integer> ^<Node> = (\r	value isString ifTrue: [^syntax StringLiteral value: value].\r	value isNumber ifTrue: [^syntax IntegerLiteral value: value].\r	(true = value or: [false = value]) ifTrue: [^syntax BooleanLiteral value: value].\r	error: 'this value cannot be a Javascript literal'\r)"),
				new MM("new:with:", false, "public new: expression <Node> with: args <List[Node]> ^<Node> = (\r	^syntax NewExpression expression: expression arguments: args\r)"),
				new MM("objectLiteral", false, "public objectLiteral = (\r	^syntax ObjectLiteral new\r)"),
				new MM("objectLiteral:", false, "public objectLiteral: slots <List> = (\r	slots keysAndValuesDo:\r		[:index : element |\r		assert: (index odd\r			ifTrue: [[element isString]]\r			ifFalse: [[element isJsNode]]) message: 'JS node or string expected'].\r	^syntax ObjectLiteral slots: slots\r)"),
				new MM("objectLiteralSlotNames:values:", false, "public objectLiteralSlotNames: names <List[String]> values: values <List[Node]>= (\r	^syntax ObjectLiteral slotNames: names values: values\r)"),
				new MM("operator:with:and:", false, "public operator: name <String> with: left <Node> and: right <Node> = (\r	| canonicalName |\r	canonicalName:: name isNil\r		ifTrue: [name]\r		ifFalse: [name isString ifTrue: [ident: name] ifFalse: [name]].\r	assert: [left isJsNode] message: 'JS node expected on left'.\r	assert: [right isJsNode] message: 'JS node expected on right'.\r	^syntax OperatorExpression operator: canonicalName with: left and: right\r)"),
				new MM("postfixOperator:on:", false, "public postfixOperator: name <String> on: operand <Node> = (\r	| canonicalName |\r	canonicalName:: name isNil\r		ifTrue: [name]\r		ifFalse: [name isString ifTrue: [ident: name] ifFalse: [name]].\r	^syntax UnaryOperatorExpression operator: canonicalName postfix: true on: operand\r)"),
				new MM("prefixOperator:on:", false, "public prefixOperator: name <String> on: operand <Node> = (\r	| canonicalName |\r	canonicalName:: name isNil\r		ifTrue: [name]\r		ifFalse: [name isString ifTrue: [ident: name] ifFalse: [name]].\r	^syntax UnaryOperatorExpression operator: canonicalName postfix: false on: operand\r)"),
				new MM("propertyOf:at:", false, "public propertyOf: expression <Node> at: indexExpr <Node> = (\r	assert: [expression isJsNode] message: 'JS node expected'.\r	assert: [indexExpr isJsNode] message: 'JS node expected for index expression'.\r	^syntax MemberExpression primary: expression property: indexExpr\r)"),
				new MM("propertyOf:atPath:", false, "public propertyOf: expression <Node> atPath: path <List[Node]> = (\r	assert: [expression isJsNode] message: 'JS node expected'.\r	^path isEmpty\r		ifTrue: [expression]\r		ifFalse:\r			[propertyOf: (propertyOf: expression at: path first)\r				atPath: (path copyFrom: 2 to: path size)]\r)"),
				new MM("return", false, "public return = (\r	^syntax ReturnStatement expression: nil\r)"),
				new MM("return:", false, "public return: expression <Node | nil> = (\r	^syntax ReturnStatement expression: expression\r)"),
				new MM("script:", false, "public script: statements <List[Node]> = (\r	^syntax Script statements: statements\r)"),
				new MM("ternaryIf:then:else:", false, "public ternaryIf: condition then: then else: else = (\r	^syntax TernaryOperatorExpression\r		if: condition\r		then: then\r		else: else\r)"),
				new MM("throw:", false, "public throw: expression <Node> ^<Node> = (\r	^syntax ThrowStatement expression: expression\r)"),
				new MM("try:catch:with:", false, "public try: block <Block> catch: varName <String> with: catchBlock <Block> = (\r	| canonicalVarName |\r	canonicalVarName:: varName isNil\r		ifTrue: [varName]\r		ifFalse: [varName isString ifTrue: [ident: varName] ifFalse: [varName]].\r	^syntax TryStatement block: block catch: canonicalVarName with: catchBlock finally: nil\r)"),
				new MM("try:catch:with:finally:", false, "public try: block <Block> catch: varName <String> with: catchBlock <Block> finally: finallyBlock <Block>= (\r	| canonicalVarName |\r	canonicalVarName:: varName isNil\r		ifTrue: [varName]\r		ifFalse: [varName isString ifTrue: [ident: varName] ifFalse: [varName]].\r	^syntax TryStatement block: block catch: canonicalVarName with: catchBlock finally: finallyBlock\r)"),
				new MM("try:finally:", false, "public try: block <Block> finally: finallyBlock <Block>= (\r	^syntax TryStatement block: block catch: nil with: nil finally: finallyBlock\r)"),
				new MM("var:", false, "public var: name <String> ^<VariableStatement> = (\r	| canonicalName |\r	canonicalName:: name isNil\r		ifTrue: [name]\r		ifFalse: [name isString ifTrue: [ident: name] ifFalse: [name]].\r	^syntax VariableStatement name: canonicalName initializer: nil\r)"),
				new MM("var:value:", false, "public var: name <String> value: expr <Node> ^<VariableStatement> = (\r	| canonicalName |\r	canonicalName:: name isNil\r		ifTrue: [name]\r		ifFalse: [name isString ifTrue: [ident: name] ifFalse: [name]].\r	^syntax VariableStatement name: canonicalName initializer: expr\r)"),
				new MM("verbatim:", false, "public verbatim: text <String> = (\r	 assert:[text isString] message: 'String expected'.\r	^syntax VerbatimNode text: text\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$JavascriptGeneration$Factory = (function () {
				var self = this;
				self.$super$JavascriptGeneration$Factory$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$JavascriptGeneration$Factory();
				return self;
			});
			this.$array$ = (function ($elements) {
				var self = this;
				$elements.$do$((function ($each) {
					return self._$assert$message$((function () {
						return $each.$isJsNode();
					}), "JS node expected");
				}));
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ArrayExpression().$elements$($elements);
			});
			this.$assign$toBe$ = (function ($lhs, $rhs) {
				var self = this;
				self._$assert$message$((function () {
					return $lhs.$isJsNode();
				}), "JS node expected on left");
				self._$assert$message$((function () {
					return $rhs.$isJsNode();
				}), "JS node expected on right");
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$AssignmentExpression().$leftHandSide$rightHandSide$($lhs, $rhs);
			});
			this.$block$ = (function ($statements) {
				var self = this;
				$statements.$do$((function ($each) {
					return self._$assert$message$((function () {
						return $each.$isJsNode();
					}), "Malformed statement tree");
				}));
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$Block().$statements$($statements);
			});
			this.$call$with$ = (function ($expression, $arguments) {
				var self = this;
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$CallExpression().$function$arguments$($expression, $arguments);
			});
			this.$for$in$do$ = (function ($varName, $expr, $bodyStmt) {
				var self = this;
				var $canonicalVarName = nil;
				$canonicalVarName = $varName.$isNil().$ifTrue$ifFalse$((function () {
					return $varName;
				}), (function () {
					return $varName.$isString().$ifTrue$ifFalse$((function () {
						return self._$ident$($varName);
					}), (function () {
						return $varName;
					}));
				}));
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ForInStatement().$varName$expression$body$($canonicalVarName, $expr, $bodyStmt);
			});
			this.$for$while$step$do$ = (function ($initExpr, $testExpr, $incExpr, $bodyStmt) {
				var self = this;
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ForStatement().$initExpression$test$increment$body$($initExpr, $testExpr, $incExpr, $bodyStmt);
			});
			this.$function$of$body$ = (function ($name, $params, $body) {
				var self = this;
				var $canonicalName = nil;
				var $canonicalParams = nil;
				$canonicalName = $name.$isNil().$ifTrue$ifFalse$((function () {
					return $name;
				}), (function () {
					return $name.$isString().$ifTrue$ifFalse$((function () {
						return self._$ident$($name);
					}), (function () {
						return $name;
					}));
				}));
				$canonicalParams = $params.$collect$((function ($each) {
					return $each.$isString().$ifTrue$ifFalse$((function () {
						return self._$ident$($each);
					}), (function () {
						return $each;
					}));
				}));
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$FunctionStatement().$name$parameters$body$($canonicalName, $canonicalParams, $body);
			});
			this.$functionOf$body$ = (function ($params, $body) {
				var self = this;
				var $paramIds = nil;
				$paramIds = $params.$collect$((function ($each) {
					return $each.$isString().$ifTrue$ifFalse$((function () {
						return self._$ident$($each);
					}), (function () {
						return $each;
					}));
				}));
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$FunctionExpression().$name$parameters$body$(nil, $paramIds, $body);
			});
			this.$ident$ = (function ($name) {
				var self = this;
				self._$assert$message$((function () {
					return $name.$isString();
				}), "name must be a string");
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$IdentifierExpression().$name$($name);
			});
			this.$if$then$ = (function ($expression, $then) {
				var self = this;
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$IfStatement().$expression$then$else$($expression, $then, nil);
			});
			this.$if$then$else$ = (function ($expression, $then, $else) {
				var self = this;
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$IfStatement().$expression$then$else$($expression, $then, $else);
			});
			this.$literal$ = (function ($value) {
				var self = this;
				if ($value.$isString()) {
					return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$StringLiteral().$value$($value);
				} else {
					nil;
				};
				if ($value.$isNumber()) {
					return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$IntegerLiteral().$value$($value);
				} else {
					nil;
				};
				if ((true).$$equal($value) || (false).$$equal($value)) {
					return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$BooleanLiteral().$value$($value);
				} else {
					nil;
				};
				self._$error$("this value cannot be a Javascript literal");
				return self;
			});
			this.$new$with$ = (function ($expression, $args) {
				var self = this;
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$NewExpression().$expression$arguments$($expression, $args);
			});
			this.$objectLiteral = (function () {
				var self = this;
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ObjectLiteral().$new();
			});
			this.$objectLiteral$ = (function ($slots) {
				var self = this;
				$slots.$keysAndValuesDo$((function ($index, $element) {
					return self._$assert$message$($index.$odd().$ifTrue$ifFalse$((function () {
						return (function () {
							return $element.$isString();
						});
					}), (function () {
						return (function () {
							return $element.$isJsNode();
						});
					})), "JS node or string expected");
				}));
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ObjectLiteral().$slots$($slots);
			});
			this.$objectLiteralSlotNames$values$ = (function ($names, $values) {
				var self = this;
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ObjectLiteral().$slotNames$values$($names, $values);
			});
			this.$operator$with$and$ = (function ($name, $left, $right) {
				var self = this;
				var $canonicalName = nil;
				$canonicalName = $name.$isNil().$ifTrue$ifFalse$((function () {
					return $name;
				}), (function () {
					return $name.$isString().$ifTrue$ifFalse$((function () {
						return self._$ident$($name);
					}), (function () {
						return $name;
					}));
				}));
				self._$assert$message$((function () {
					return $left.$isJsNode();
				}), "JS node expected on left");
				self._$assert$message$((function () {
					return $right.$isJsNode();
				}), "JS node expected on right");
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$OperatorExpression().$operator$with$and$($canonicalName, $left, $right);
			});
			this.$postfixOperator$on$ = (function ($name, $operand) {
				var self = this;
				var $canonicalName = nil;
				$canonicalName = $name.$isNil().$ifTrue$ifFalse$((function () {
					return $name;
				}), (function () {
					return $name.$isString().$ifTrue$ifFalse$((function () {
						return self._$ident$($name);
					}), (function () {
						return $name;
					}));
				}));
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$UnaryOperatorExpression().$operator$postfix$on$($canonicalName, true, $operand);
			});
			this.$prefixOperator$on$ = (function ($name, $operand) {
				var self = this;
				var $canonicalName = nil;
				$canonicalName = $name.$isNil().$ifTrue$ifFalse$((function () {
					return $name;
				}), (function () {
					return $name.$isString().$ifTrue$ifFalse$((function () {
						return self._$ident$($name);
					}), (function () {
						return $name;
					}));
				}));
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$UnaryOperatorExpression().$operator$postfix$on$($canonicalName, false, $operand);
			});
			this.$propertyOf$at$ = (function ($expression, $indexExpr) {
				var self = this;
				self._$assert$message$((function () {
					return $expression.$isJsNode();
				}), "JS node expected");
				self._$assert$message$((function () {
					return $indexExpr.$isJsNode();
				}), "JS node expected for index expression");
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$MemberExpression().$primary$property$($expression, $indexExpr);
			});
			this.$propertyOf$atPath$ = (function ($expression, $path) {
				var self = this;
				self._$assert$message$((function () {
					return $expression.$isJsNode();
				}), "JS node expected");
				return $path.$isEmpty().$ifTrue$ifFalse$((function () {
					return $expression;
				}), (function () {
					return self._$propertyOf$atPath$(self._$propertyOf$at$($expression, $path.$first()), $path.$copyFrom$to$(2, $path.$size()));
				}));
			});
			this.$return = (function () {
				var self = this;
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ReturnStatement().$expression$(nil);
			});
			this.$return$ = (function ($expression) {
				var self = this;
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ReturnStatement().$expression$($expression);
			});
			this.$script$ = (function ($statements) {
				var self = this;
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$Script().$statements$($statements);
			});
			this.$ternaryIf$then$else$ = (function ($condition, $then, $else) {
				var self = this;
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$TernaryOperatorExpression().$if$then$else$($condition, $then, $else);
			});
			this.$throw$ = (function ($expression) {
				var self = this;
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$ThrowStatement().$expression$($expression);
			});
			this.$try$catch$with$ = (function ($block, $varName, $catchBlock) {
				var self = this;
				var $canonicalVarName = nil;
				$canonicalVarName = $varName.$isNil().$ifTrue$ifFalse$((function () {
					return $varName;
				}), (function () {
					return $varName.$isString().$ifTrue$ifFalse$((function () {
						return self._$ident$($varName);
					}), (function () {
						return $varName;
					}));
				}));
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$TryStatement().$block$catch$with$finally$($block, $canonicalVarName, $catchBlock, nil);
			});
			this.$try$catch$with$finally$ = (function ($block, $varName, $catchBlock, $finallyBlock) {
				var self = this;
				var $canonicalVarName = nil;
				$canonicalVarName = $varName.$isNil().$ifTrue$ifFalse$((function () {
					return $varName;
				}), (function () {
					return $varName.$isString().$ifTrue$ifFalse$((function () {
						return self._$ident$($varName);
					}), (function () {
						return $varName;
					}));
				}));
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$TryStatement().$block$catch$with$finally$($block, $canonicalVarName, $catchBlock, $finallyBlock);
			});
			this.$try$finally$ = (function ($block, $finallyBlock) {
				var self = this;
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$TryStatement().$block$catch$with$finally$($block, nil, nil, $finallyBlock);
			});
			this.$var$ = (function ($name) {
				var self = this;
				var $canonicalName = nil;
				$canonicalName = $name.$isNil().$ifTrue$ifFalse$((function () {
					return $name;
				}), (function () {
					return $name.$isString().$ifTrue$ifFalse$((function () {
						return self._$ident$($name);
					}), (function () {
						return $name;
					}));
				}));
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$VariableStatement().$name$initializer$($canonicalName, nil);
			});
			this.$var$value$ = (function ($name, $expr) {
				var self = this;
				var $canonicalName = nil;
				$canonicalName = $name.$isNil().$ifTrue$ifFalse$((function () {
					return $name;
				}), (function () {
					return $name.$isString().$ifTrue$ifFalse$((function () {
						return self._$ident$($name);
					}), (function () {
						return $name;
					}));
				}));
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$VariableStatement().$name$initializer$($canonicalName, $expr);
			});
			this.$verbatim$ = (function ($text) {
				var self = this;
				self._$assert$message$((function () {
					return $text.$isString();
				}), "String expected");
				return self.$enclosingObjects$JavascriptGeneration$Factory[0]._$syntax().$VerbatimNode().$text$($text);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for JavascriptGeneration`Factory";
					this._$superInit$JavascriptGeneration$Factory = $.$superInit$JavascriptGeneration$Factory;
					this.$superInit$JavascriptGeneration$Factory = dnuCatcher("$superInit$JavascriptGeneration$Factory");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$array$ = this._$array$ = $.$array$;
					this.$assign$toBe$ = this._$assign$toBe$ = $.$assign$toBe$;
					this.$block$ = this._$block$ = $.$block$;
					this.$call$with$ = this._$call$with$ = $.$call$with$;
					this.$for$in$do$ = this._$for$in$do$ = $.$for$in$do$;
					this.$for$while$step$do$ = this._$for$while$step$do$ = $.$for$while$step$do$;
					this.$function$of$body$ = this._$function$of$body$ = $.$function$of$body$;
					this.$functionOf$body$ = this._$functionOf$body$ = $.$functionOf$body$;
					this.$ident$ = this._$ident$ = $.$ident$;
					this.$if$then$ = this._$if$then$ = $.$if$then$;
					this.$if$then$else$ = this._$if$then$else$ = $.$if$then$else$;
					this.$literal$ = this._$literal$ = $.$literal$;
					this.$new$with$ = this._$new$with$ = $.$new$with$;
					this.$objectLiteral = this._$objectLiteral = $.$objectLiteral;
					this.$objectLiteral$ = this._$objectLiteral$ = $.$objectLiteral$;
					this.$objectLiteralSlotNames$values$ = this._$objectLiteralSlotNames$values$ = $.$objectLiteralSlotNames$values$;
					this.$operator$with$and$ = this._$operator$with$and$ = $.$operator$with$and$;
					this.$postfixOperator$on$ = this._$postfixOperator$on$ = $.$postfixOperator$on$;
					this.$prefixOperator$on$ = this._$prefixOperator$on$ = $.$prefixOperator$on$;
					this.$propertyOf$at$ = this._$propertyOf$at$ = $.$propertyOf$at$;
					this.$propertyOf$atPath$ = this._$propertyOf$atPath$ = $.$propertyOf$atPath$;
					this.$return = this._$return = $.$return;
					this.$return$ = this._$return$ = $.$return$;
					this.$script$ = this._$script$ = $.$script$;
					this.$ternaryIf$then$else$ = this._$ternaryIf$then$else$ = $.$ternaryIf$then$else$;
					this.$throw$ = this._$throw$ = $.$throw$;
					this.$try$catch$with$ = this._$try$catch$with$ = $.$try$catch$with$;
					this.$try$catch$with$finally$ = this._$try$catch$with$finally$ = $.$try$catch$with$finally$;
					this.$try$finally$ = this._$try$finally$ = $.$try$finally$;
					this.$var$ = this._$var$ = $.$var$;
					this.$var$value$ = this._$var$value$ = $.$var$value$;
					this.$verbatim$ = this._$verbatim$ = $.$verbatim$;
					this.$enclosingObjects$JavascriptGeneration$Factory = enclosingObjects;
					this.$super$JavascriptGeneration$Factory$slot = runtimeSuperclass;
					this["JavascriptGeneration`Factory"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["JavascriptGeneration`Factory"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for JavascriptGeneration`Factory";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for JavascriptGeneration`Factory";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$JavascriptGeneration$Factory = enclosingObjects;
						this.$super$JavascriptGeneration$Factory = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$JavascriptGeneration$Syntax = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for JavascriptGeneration`Syntax";
			this.name = "JavascriptGeneration`Syntax";
			this.header = "Syntax = (\r(* The AST nodes. The preferred way to construct instances is to use the factory object (an instance of Factory, a sibling of this class) held onto by the module. *)| |)";
			this.slots = [
				new SM("JavascriptGeneration`Syntax`ArrayExpression", true, true),
				new SM("JavascriptGeneration`Syntax`AssignmentExpression", true, true),
				new SM("JavascriptGeneration`Syntax`Block", true, true),
				new SM("JavascriptGeneration`Syntax`BooleanLiteral", true, true),
				new SM("JavascriptGeneration`Syntax`CallExpression", true, true),
				new SM("JavascriptGeneration`Syntax`ForInStatement", true, true),
				new SM("JavascriptGeneration`Syntax`ForStatement", true, true),
				new SM("JavascriptGeneration`Syntax`FunctionExpression", true, true),
				new SM("JavascriptGeneration`Syntax`FunctionStatement", true, true),
				new SM("JavascriptGeneration`Syntax`IdentifierExpression", true, true),
				new SM("JavascriptGeneration`Syntax`IfStatement", true, true),
				new SM("JavascriptGeneration`Syntax`IntegerLiteral", true, true),
				new SM("JavascriptGeneration`Syntax`MemberExpression", true, true),
				new SM("JavascriptGeneration`Syntax`NewExpression", true, true),
				new SM("JavascriptGeneration`Syntax`Node", true, true),
				new SM("JavascriptGeneration`Syntax`ObjectLiteral", true, true),
				new SM("JavascriptGeneration`Syntax`OperatorExpression", true, true),
				new SM("JavascriptGeneration`Syntax`ReturnStatement", true, true),
				new SM("JavascriptGeneration`Syntax`Script", true, true),
				new SM("JavascriptGeneration`Syntax`StringLiteral", true, true),
				new SM("JavascriptGeneration`Syntax`TernaryOperatorExpression", true, true),
				new SM("JavascriptGeneration`Syntax`ThrowStatement", true, true),
				new SM("JavascriptGeneration`Syntax`TryStatement", true, true),
				new SM("JavascriptGeneration`Syntax`UnaryOperatorExpression", true, true),
				new SM("JavascriptGeneration`Syntax`VariableStatement", true, true),
				new SM("JavascriptGeneration`Syntax`VerbatimNode", true, true)
			];
			this.methods = [
				new MM("superInit`JavascriptGeneration`Syntax", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("ArrayExpression", true, null),
				new MM("AssignmentExpression", true, null),
				new MM("Block", true, null),
				new MM("BooleanLiteral", true, null),
				new MM("CallExpression", true, null),
				new MM("ForInStatement", true, null),
				new MM("ForStatement", true, null),
				new MM("FunctionExpression", true, null),
				new MM("FunctionStatement", true, null),
				new MM("IdentifierExpression", true, null),
				new MM("IfStatement", true, null),
				new MM("IntegerLiteral", true, null),
				new MM("MemberExpression", true, null),
				new MM("NewExpression", true, null),
				new MM("Node", true, null),
				new MM("ObjectLiteral", true, null),
				new MM("OperatorExpression", true, null),
				new MM("ReturnStatement", true, null),
				new MM("Script", true, null),
				new MM("StringLiteral", true, null),
				new MM("TernaryOperatorExpression", true, null),
				new MM("ThrowStatement", true, null),
				new MM("TryStatement", true, null),
				new MM("UnaryOperatorExpression", true, null),
				new MM("VariableStatement", true, null),
				new MM("VerbatimNode", true, null),
				new MM("JavascriptGeneration`Syntax`ArrayExpression", true, null),
				new MM("JavascriptGeneration`Syntax`ArrayExpression:", true, null),
				new MM("JavascriptGeneration`Syntax`AssignmentExpression", true, null),
				new MM("JavascriptGeneration`Syntax`AssignmentExpression:", true, null),
				new MM("JavascriptGeneration`Syntax`Block", true, null),
				new MM("JavascriptGeneration`Syntax`Block:", true, null),
				new MM("JavascriptGeneration`Syntax`BooleanLiteral", true, null),
				new MM("JavascriptGeneration`Syntax`BooleanLiteral:", true, null),
				new MM("JavascriptGeneration`Syntax`CallExpression", true, null),
				new MM("JavascriptGeneration`Syntax`CallExpression:", true, null),
				new MM("JavascriptGeneration`Syntax`ForInStatement", true, null),
				new MM("JavascriptGeneration`Syntax`ForInStatement:", true, null),
				new MM("JavascriptGeneration`Syntax`ForStatement", true, null),
				new MM("JavascriptGeneration`Syntax`ForStatement:", true, null),
				new MM("JavascriptGeneration`Syntax`FunctionExpression", true, null),
				new MM("JavascriptGeneration`Syntax`FunctionExpression:", true, null),
				new MM("JavascriptGeneration`Syntax`FunctionStatement", true, null),
				new MM("JavascriptGeneration`Syntax`FunctionStatement:", true, null),
				new MM("JavascriptGeneration`Syntax`IdentifierExpression", true, null),
				new MM("JavascriptGeneration`Syntax`IdentifierExpression:", true, null),
				new MM("JavascriptGeneration`Syntax`IfStatement", true, null),
				new MM("JavascriptGeneration`Syntax`IfStatement:", true, null),
				new MM("JavascriptGeneration`Syntax`IntegerLiteral", true, null),
				new MM("JavascriptGeneration`Syntax`IntegerLiteral:", true, null),
				new MM("JavascriptGeneration`Syntax`MemberExpression", true, null),
				new MM("JavascriptGeneration`Syntax`MemberExpression:", true, null),
				new MM("JavascriptGeneration`Syntax`NewExpression", true, null),
				new MM("JavascriptGeneration`Syntax`NewExpression:", true, null),
				new MM("JavascriptGeneration`Syntax`Node", true, null),
				new MM("JavascriptGeneration`Syntax`Node:", true, null),
				new MM("JavascriptGeneration`Syntax`ObjectLiteral", true, null),
				new MM("JavascriptGeneration`Syntax`ObjectLiteral:", true, null),
				new MM("JavascriptGeneration`Syntax`OperatorExpression", true, null),
				new MM("JavascriptGeneration`Syntax`OperatorExpression:", true, null),
				new MM("JavascriptGeneration`Syntax`ReturnStatement", true, null),
				new MM("JavascriptGeneration`Syntax`ReturnStatement:", true, null),
				new MM("JavascriptGeneration`Syntax`Script", true, null),
				new MM("JavascriptGeneration`Syntax`Script:", true, null),
				new MM("JavascriptGeneration`Syntax`StringLiteral", true, null),
				new MM("JavascriptGeneration`Syntax`StringLiteral:", true, null),
				new MM("JavascriptGeneration`Syntax`TernaryOperatorExpression", true, null),
				new MM("JavascriptGeneration`Syntax`TernaryOperatorExpression:", true, null),
				new MM("JavascriptGeneration`Syntax`ThrowStatement", true, null),
				new MM("JavascriptGeneration`Syntax`ThrowStatement:", true, null),
				new MM("JavascriptGeneration`Syntax`TryStatement", true, null),
				new MM("JavascriptGeneration`Syntax`TryStatement:", true, null),
				new MM("JavascriptGeneration`Syntax`UnaryOperatorExpression", true, null),
				new MM("JavascriptGeneration`Syntax`UnaryOperatorExpression:", true, null),
				new MM("JavascriptGeneration`Syntax`VariableStatement", true, null),
				new MM("JavascriptGeneration`Syntax`VariableStatement:", true, null),
				new MM("JavascriptGeneration`Syntax`VerbatimNode", true, null),
				new MM("JavascriptGeneration`Syntax`VerbatimNode:", true, null)
			];
			this.nestedClasses = [
				"JavascriptGeneration`Syntax`ArrayExpression",
				"JavascriptGeneration`Syntax`AssignmentExpression",
				"JavascriptGeneration`Syntax`Block",
				"JavascriptGeneration`Syntax`BooleanLiteral",
				"JavascriptGeneration`Syntax`CallExpression",
				"JavascriptGeneration`Syntax`ForInStatement",
				"JavascriptGeneration`Syntax`ForStatement",
				"JavascriptGeneration`Syntax`FunctionExpression",
				"JavascriptGeneration`Syntax`FunctionStatement",
				"JavascriptGeneration`Syntax`IdentifierExpression",
				"JavascriptGeneration`Syntax`IfStatement",
				"JavascriptGeneration`Syntax`IntegerLiteral",
				"JavascriptGeneration`Syntax`MemberExpression",
				"JavascriptGeneration`Syntax`NewExpression",
				"JavascriptGeneration`Syntax`Node",
				"JavascriptGeneration`Syntax`ObjectLiteral",
				"JavascriptGeneration`Syntax`OperatorExpression",
				"JavascriptGeneration`Syntax`ReturnStatement",
				"JavascriptGeneration`Syntax`Script",
				"JavascriptGeneration`Syntax`StringLiteral",
				"JavascriptGeneration`Syntax`TernaryOperatorExpression",
				"JavascriptGeneration`Syntax`ThrowStatement",
				"JavascriptGeneration`Syntax`TryStatement",
				"JavascriptGeneration`Syntax`UnaryOperatorExpression",
				"JavascriptGeneration`Syntax`VariableStatement",
				"JavascriptGeneration`Syntax`VerbatimNode"
			];
			this.applications = [];
			this.$superInit$JavascriptGeneration$Syntax = (function () {
				var self = this;
				self.$super$JavascriptGeneration$Syntax$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$JavascriptGeneration$Syntax();
				return self;
			});
			this.$ArrayExpression = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$ArrayExpression$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$ArrayExpression;
					this.$JavascriptGeneration$Syntax$ArrayExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$ArrayExpression$slot;
			});
			this.$AssignmentExpression = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$AssignmentExpression$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$AssignmentExpression;
					this.$JavascriptGeneration$Syntax$AssignmentExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$AssignmentExpression$slot;
			});
			this.$Block = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$Block$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$Block;
					this.$JavascriptGeneration$Syntax$Block$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$Block$slot;
			});
			this.$BooleanLiteral = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$BooleanLiteral$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$BooleanLiteral;
					this.$JavascriptGeneration$Syntax$BooleanLiteral$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$BooleanLiteral$slot;
			});
			this.$CallExpression = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$CallExpression$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$CallExpression;
					this.$JavascriptGeneration$Syntax$CallExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$CallExpression$slot;
			});
			this.$ForInStatement = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$ForInStatement$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$ForInStatement;
					this.$JavascriptGeneration$Syntax$ForInStatement$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$ForInStatement$slot;
			});
			this.$ForStatement = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$ForStatement$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$ForStatement;
					this.$JavascriptGeneration$Syntax$ForStatement$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$ForStatement$slot;
			});
			this.$FunctionExpression = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$FunctionExpression$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$FunctionExpression;
					this.$JavascriptGeneration$Syntax$FunctionExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$FunctionExpression$slot;
			});
			this.$FunctionStatement = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$FunctionStatement$slot) {
					var self = this;
					var superclass = self._$FunctionExpression();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$FunctionStatement;
					this.$JavascriptGeneration$Syntax$FunctionStatement$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$FunctionStatement$slot;
			});
			this.$IdentifierExpression = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$IdentifierExpression$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$IdentifierExpression;
					this.$JavascriptGeneration$Syntax$IdentifierExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$IdentifierExpression$slot;
			});
			this.$IfStatement = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$IfStatement$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$IfStatement;
					this.$JavascriptGeneration$Syntax$IfStatement$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$IfStatement$slot;
			});
			this.$IntegerLiteral = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$IntegerLiteral$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$IntegerLiteral;
					this.$JavascriptGeneration$Syntax$IntegerLiteral$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$IntegerLiteral$slot;
			});
			this.$MemberExpression = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$MemberExpression$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$MemberExpression;
					this.$JavascriptGeneration$Syntax$MemberExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$MemberExpression$slot;
			});
			this.$NewExpression = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$NewExpression$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$NewExpression;
					this.$JavascriptGeneration$Syntax$NewExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$NewExpression$slot;
			});
			this.$Node = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$Node$slot) {
					var self = this;
					var superclass = self._$Object();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$Node;
					this.$JavascriptGeneration$Syntax$Node$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$Node$slot;
			});
			this.$ObjectLiteral = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$ObjectLiteral$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$ObjectLiteral;
					this.$JavascriptGeneration$Syntax$ObjectLiteral$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$ObjectLiteral$slot;
			});
			this.$OperatorExpression = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$OperatorExpression$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$OperatorExpression;
					this.$JavascriptGeneration$Syntax$OperatorExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$OperatorExpression$slot;
			});
			this.$ReturnStatement = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$ReturnStatement$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$ReturnStatement;
					this.$JavascriptGeneration$Syntax$ReturnStatement$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$ReturnStatement$slot;
			});
			this.$Script = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$Script$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$Script;
					this.$JavascriptGeneration$Syntax$Script$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$Script$slot;
			});
			this.$StringLiteral = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$StringLiteral$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$StringLiteral;
					this.$JavascriptGeneration$Syntax$StringLiteral$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$StringLiteral$slot;
			});
			this.$TernaryOperatorExpression = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$TernaryOperatorExpression;
					this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot;
			});
			this.$ThrowStatement = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$ThrowStatement$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$ThrowStatement;
					this.$JavascriptGeneration$Syntax$ThrowStatement$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$ThrowStatement$slot;
			});
			this.$TryStatement = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$TryStatement$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$TryStatement;
					this.$JavascriptGeneration$Syntax$TryStatement$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$TryStatement$slot;
			});
			this.$UnaryOperatorExpression = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$UnaryOperatorExpression;
					this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot;
			});
			this.$VariableStatement = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$VariableStatement$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$VariableStatement;
					this.$JavascriptGeneration$Syntax$VariableStatement$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$VariableStatement$slot;
			});
			this.$VerbatimNode = (function () {
				if (nil === this.$JavascriptGeneration$Syntax$VerbatimNode$slot) {
					var self = this;
					var superclass = self._$Node();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$JavascriptGeneration$Syntax);
					var mixin = $.$JavascriptGeneration$Syntax$VerbatimNode;
					this.$JavascriptGeneration$Syntax$VerbatimNode$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$JavascriptGeneration$Syntax$VerbatimNode$slot;
			});
			this.$JavascriptGeneration$Syntax$ArrayExpression = (function () {
				return this.$JavascriptGeneration$Syntax$ArrayExpression$slot;
			});
			this.$JavascriptGeneration$Syntax$ArrayExpression$ = (function (v) {
				this.$JavascriptGeneration$Syntax$ArrayExpression$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$AssignmentExpression = (function () {
				return this.$JavascriptGeneration$Syntax$AssignmentExpression$slot;
			});
			this.$JavascriptGeneration$Syntax$AssignmentExpression$ = (function (v) {
				this.$JavascriptGeneration$Syntax$AssignmentExpression$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$Block = (function () {
				return this.$JavascriptGeneration$Syntax$Block$slot;
			});
			this.$JavascriptGeneration$Syntax$Block$ = (function (v) {
				this.$JavascriptGeneration$Syntax$Block$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$BooleanLiteral = (function () {
				return this.$JavascriptGeneration$Syntax$BooleanLiteral$slot;
			});
			this.$JavascriptGeneration$Syntax$BooleanLiteral$ = (function (v) {
				this.$JavascriptGeneration$Syntax$BooleanLiteral$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$CallExpression = (function () {
				return this.$JavascriptGeneration$Syntax$CallExpression$slot;
			});
			this.$JavascriptGeneration$Syntax$CallExpression$ = (function (v) {
				this.$JavascriptGeneration$Syntax$CallExpression$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$ForInStatement = (function () {
				return this.$JavascriptGeneration$Syntax$ForInStatement$slot;
			});
			this.$JavascriptGeneration$Syntax$ForInStatement$ = (function (v) {
				this.$JavascriptGeneration$Syntax$ForInStatement$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$ForStatement = (function () {
				return this.$JavascriptGeneration$Syntax$ForStatement$slot;
			});
			this.$JavascriptGeneration$Syntax$ForStatement$ = (function (v) {
				this.$JavascriptGeneration$Syntax$ForStatement$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$FunctionExpression = (function () {
				return this.$JavascriptGeneration$Syntax$FunctionExpression$slot;
			});
			this.$JavascriptGeneration$Syntax$FunctionExpression$ = (function (v) {
				this.$JavascriptGeneration$Syntax$FunctionExpression$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$FunctionStatement = (function () {
				return this.$JavascriptGeneration$Syntax$FunctionStatement$slot;
			});
			this.$JavascriptGeneration$Syntax$FunctionStatement$ = (function (v) {
				this.$JavascriptGeneration$Syntax$FunctionStatement$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$IdentifierExpression = (function () {
				return this.$JavascriptGeneration$Syntax$IdentifierExpression$slot;
			});
			this.$JavascriptGeneration$Syntax$IdentifierExpression$ = (function (v) {
				this.$JavascriptGeneration$Syntax$IdentifierExpression$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$IfStatement = (function () {
				return this.$JavascriptGeneration$Syntax$IfStatement$slot;
			});
			this.$JavascriptGeneration$Syntax$IfStatement$ = (function (v) {
				this.$JavascriptGeneration$Syntax$IfStatement$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$IntegerLiteral = (function () {
				return this.$JavascriptGeneration$Syntax$IntegerLiteral$slot;
			});
			this.$JavascriptGeneration$Syntax$IntegerLiteral$ = (function (v) {
				this.$JavascriptGeneration$Syntax$IntegerLiteral$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$MemberExpression = (function () {
				return this.$JavascriptGeneration$Syntax$MemberExpression$slot;
			});
			this.$JavascriptGeneration$Syntax$MemberExpression$ = (function (v) {
				this.$JavascriptGeneration$Syntax$MemberExpression$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$NewExpression = (function () {
				return this.$JavascriptGeneration$Syntax$NewExpression$slot;
			});
			this.$JavascriptGeneration$Syntax$NewExpression$ = (function (v) {
				this.$JavascriptGeneration$Syntax$NewExpression$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$Node = (function () {
				return this.$JavascriptGeneration$Syntax$Node$slot;
			});
			this.$JavascriptGeneration$Syntax$Node$ = (function (v) {
				this.$JavascriptGeneration$Syntax$Node$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$ObjectLiteral = (function () {
				return this.$JavascriptGeneration$Syntax$ObjectLiteral$slot;
			});
			this.$JavascriptGeneration$Syntax$ObjectLiteral$ = (function (v) {
				this.$JavascriptGeneration$Syntax$ObjectLiteral$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$OperatorExpression = (function () {
				return this.$JavascriptGeneration$Syntax$OperatorExpression$slot;
			});
			this.$JavascriptGeneration$Syntax$OperatorExpression$ = (function (v) {
				this.$JavascriptGeneration$Syntax$OperatorExpression$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$ReturnStatement = (function () {
				return this.$JavascriptGeneration$Syntax$ReturnStatement$slot;
			});
			this.$JavascriptGeneration$Syntax$ReturnStatement$ = (function (v) {
				this.$JavascriptGeneration$Syntax$ReturnStatement$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$Script = (function () {
				return this.$JavascriptGeneration$Syntax$Script$slot;
			});
			this.$JavascriptGeneration$Syntax$Script$ = (function (v) {
				this.$JavascriptGeneration$Syntax$Script$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$StringLiteral = (function () {
				return this.$JavascriptGeneration$Syntax$StringLiteral$slot;
			});
			this.$JavascriptGeneration$Syntax$StringLiteral$ = (function (v) {
				this.$JavascriptGeneration$Syntax$StringLiteral$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$TernaryOperatorExpression = (function () {
				return this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot;
			});
			this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$ = (function (v) {
				this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$ThrowStatement = (function () {
				return this.$JavascriptGeneration$Syntax$ThrowStatement$slot;
			});
			this.$JavascriptGeneration$Syntax$ThrowStatement$ = (function (v) {
				this.$JavascriptGeneration$Syntax$ThrowStatement$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$TryStatement = (function () {
				return this.$JavascriptGeneration$Syntax$TryStatement$slot;
			});
			this.$JavascriptGeneration$Syntax$TryStatement$ = (function (v) {
				this.$JavascriptGeneration$Syntax$TryStatement$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$UnaryOperatorExpression = (function () {
				return this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot;
			});
			this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$ = (function (v) {
				this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$VariableStatement = (function () {
				return this.$JavascriptGeneration$Syntax$VariableStatement$slot;
			});
			this.$JavascriptGeneration$Syntax$VariableStatement$ = (function (v) {
				this.$JavascriptGeneration$Syntax$VariableStatement$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$VerbatimNode = (function () {
				return this.$JavascriptGeneration$Syntax$VerbatimNode$slot;
			});
			this.$JavascriptGeneration$Syntax$VerbatimNode$ = (function (v) {
				this.$JavascriptGeneration$Syntax$VerbatimNode$slot = v;
				return this;
			});
			this.$JavascriptGeneration$Syntax$ArrayExpression = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`ArrayExpression";
				this.name = "JavascriptGeneration`Syntax`ArrayExpression";
				this.header = "ArrayExpression elements: elements = Node (\r(* An array constructor expression. *)|\r	protected elements_ = elements.\r|)";
				this.slots = [new SM("elements_", false, false)];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`ArrayExpression", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and: [elements = anotherNode elements]\r)"),
					new MM("elements", false, "public elements = (\r	^elements_\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitArrayExpression: self\r)"),
					new MM("elements_", true, null),
					new MM("setOnce`elements_:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$ArrayExpression = (function ($elements) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$ArrayExpression$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($elements) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$ArrayExpression($elements);
					self._$setOnce$elements_$($elements);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$ArrayExpression$slot._$$equal.call(self, $anotherNode) && self._$elements().$$equal($anotherNode.$elements());
				});
				this.$elements = (function () {
					var self = this;
					return self._$elements_();
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitArrayExpression$(self);
				});
				this.$elements_ = (function () {
					return this.$elements_$slot;
				});
				this.$setOnce$elements_$ = (function (v) {
					this.$elements_$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`ArrayExpression";
						this._$superInit$JavascriptGeneration$Syntax$ArrayExpression = $.$superInit$JavascriptGeneration$Syntax$ArrayExpression;
						this.$superInit$JavascriptGeneration$Syntax$ArrayExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$ArrayExpression");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$elements = this._$elements = $.$elements;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this._$elements_ = $.$elements_;
						this.$elements_ = dnuCatcher("$elements_");
						this._$setOnce$elements_$ = $.$setOnce$elements_$;
						this.$setOnce$elements_$ = dnuCatcher("$setOnce$elements_$");
						this.$enclosingObjects$JavascriptGeneration$Syntax$ArrayExpression = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$ArrayExpression$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`ArrayExpression"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$elements_$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`ArrayExpression"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`ArrayExpression";
					this.slots = [];
					this.methods = [new MM("elements:", true, null)];
					this.nestedClasses = [];
					this.$elements$ = (function ($elements) {
						return (new this.nonMeta.basicNew()).$instance$initializer($elements);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`ArrayExpression";
							this.$elements$ = this._$elements$ = $.$elements$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$ArrayExpression = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$ArrayExpression = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$AssignmentExpression = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`AssignmentExpression";
				this.name = "JavascriptGeneration`Syntax`AssignmentExpression";
				this.header = "AssignmentExpression leftHandSide: lhs rightHandSide: rhs = Node (|\r	public leftHandSide <Expression> = lhs.\r	public rightHandSide <Expression> = rhs.\r|)";
				this.slots = [
					new SM("leftHandSide", false, false),
					new SM("rightHandSide", false, false)
				];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`AssignmentExpression", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode \r		and: [leftHandSide = anotherNode leftHandSide\r			and: [rightHandSide = anotherNode rightHandSide]]	\r)"),
					new MM("isOperatorExpression", false, "public isOperatorExpression = (\r	^true\r)"),
					new MM("printOn:", false, "public printOn: stream = (\r	super printOn: stream.\r	stream nextPutAll: ' ('.\r	leftHandSide printOn: stream.\r	stream nextPutAll: ', '.\r	rightHandSide printOn: stream.\r	stream nextPutAll: ')'\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitAssignmentExpression: self\r)"),
					new MM("leftHandSide", true, null),
					new MM("setOnce`leftHandSide:", true, null),
					new MM("rightHandSide", true, null),
					new MM("setOnce`rightHandSide:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$AssignmentExpression = (function ($lhs, $rhs) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$AssignmentExpression$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($lhs, $rhs) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$AssignmentExpression($lhs, $rhs);
					self._$setOnce$leftHandSide$($lhs);
					self._$setOnce$rightHandSide$($rhs);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$AssignmentExpression$slot._$$equal.call(self, $anotherNode) && (self._$leftHandSide().$$equal($anotherNode.$leftHandSide()) && self._$rightHandSide().$$equal($anotherNode.$rightHandSide()));
				});
				this.$isOperatorExpression = (function () {
					var self = this;
					return true;
				});
				this.$printOn$ = (function ($stream) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$AssignmentExpression$slot._$printOn$.call(self, $stream);
					$stream.$nextPutAll$(" (");
					self._$leftHandSide().$printOn$($stream);
					$stream.$nextPutAll$(", ");
					self._$rightHandSide().$printOn$($stream);
					$stream.$nextPutAll$(")");
					return self;
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitAssignmentExpression$(self);
				});
				this.$leftHandSide = (function () {
					return this.$leftHandSide$slot;
				});
				this.$setOnce$leftHandSide$ = (function (v) {
					this.$leftHandSide$slot = v;
					return this;
				});
				this.$rightHandSide = (function () {
					return this.$rightHandSide$slot;
				});
				this.$setOnce$rightHandSide$ = (function (v) {
					this.$rightHandSide$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`AssignmentExpression";
						this._$superInit$JavascriptGeneration$Syntax$AssignmentExpression = $.$superInit$JavascriptGeneration$Syntax$AssignmentExpression;
						this.$superInit$JavascriptGeneration$Syntax$AssignmentExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$AssignmentExpression");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$isOperatorExpression = this._$isOperatorExpression = $.$isOperatorExpression;
						this.$printOn$ = this._$printOn$ = $.$printOn$;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this.$leftHandSide = this._$leftHandSide = $.$leftHandSide;
						this.$setOnce$leftHandSide$ = this._$setOnce$leftHandSide$ = $.$setOnce$leftHandSide$;
						this.$rightHandSide = this._$rightHandSide = $.$rightHandSide;
						this.$setOnce$rightHandSide$ = this._$setOnce$rightHandSide$ = $.$setOnce$rightHandSide$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$AssignmentExpression = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$AssignmentExpression$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`AssignmentExpression"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$leftHandSide$slot = nil;
							this.$rightHandSide$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`AssignmentExpression"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`AssignmentExpression";
					this.slots = [];
					this.methods = [new MM("leftHandSide:rightHandSide:", true, null)];
					this.nestedClasses = [];
					this.$leftHandSide$rightHandSide$ = (function ($lhs, $rhs) {
						return (new this.nonMeta.basicNew()).$instance$initializer($lhs, $rhs);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`AssignmentExpression";
							this.$leftHandSide$rightHandSide$ = this._$leftHandSide$rightHandSide$ = $.$leftHandSide$rightHandSide$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$AssignmentExpression = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$AssignmentExpression = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$Block = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`Block";
				this.name = "JavascriptGeneration`Syntax`Block";
				this.header = "Block statements: s = Node (\r(* Block; ECMA-262 p. 220. *)|\r	statementsS <List[Statement | Expression]> = s.\r|)";
				this.slots = [new SM("statementsS", false, false)];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`Block", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and: [statements = anotherNode statements]\r)"),
					new MM("asBlock", false, "public asBlock = (\r	^self\r)"),
					new MM("isBlockStatement", false, "public isBlockStatement = (\r	^true\r)"),
					new MM("statements", false, "public statements = (\r	^statementsS\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitBlock: self\r)"),
					new MM("statementsS", true, null),
					new MM("setOnce`statementsS:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$Block = (function ($s) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$Block$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($s) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$Block($s);
					self._$setOnce$statementsS$($s);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$Block$slot._$$equal.call(self, $anotherNode) && self._$statements().$$equal($anotherNode.$statements());
				});
				this.$asBlock = (function () {
					var self = this;
					return self;
				});
				this.$isBlockStatement = (function () {
					var self = this;
					return true;
				});
				this.$statements = (function () {
					var self = this;
					return self._$statementsS();
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitBlock$(self);
				});
				this.$statementsS = (function () {
					return this.$statementsS$slot;
				});
				this.$setOnce$statementsS$ = (function (v) {
					this.$statementsS$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`Block";
						this._$superInit$JavascriptGeneration$Syntax$Block = $.$superInit$JavascriptGeneration$Syntax$Block;
						this.$superInit$JavascriptGeneration$Syntax$Block = dnuCatcher("$superInit$JavascriptGeneration$Syntax$Block");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$asBlock = this._$asBlock = $.$asBlock;
						this.$isBlockStatement = this._$isBlockStatement = $.$isBlockStatement;
						this.$statements = this._$statements = $.$statements;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this._$statementsS = $.$statementsS;
						this.$statementsS = dnuCatcher("$statementsS");
						this._$setOnce$statementsS$ = $.$setOnce$statementsS$;
						this.$setOnce$statementsS$ = dnuCatcher("$setOnce$statementsS$");
						this.$enclosingObjects$JavascriptGeneration$Syntax$Block = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$Block$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`Block"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$statementsS$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`Block"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`Block";
					this.slots = [];
					this.methods = [
						new MM("statements:", true, null),
						new MM("empty", false, "public empty = (\r	^Block statements: {}\r)")
					];
					this.nestedClasses = [];
					this.$statements$ = (function ($s) {
						return (new this.nonMeta.basicNew()).$instance$initializer($s);
					});
					this.$empty = (function () {
						var self = this;
						return self.$enclosingObjects$JavascriptGeneration$Syntax$Block[0]._$Block().$statements$([]);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`Block";
							this.$statements$ = this._$statements$ = $.$statements$;
							this.$empty = this._$empty = $.$empty;
							this.$enclosingObjects$JavascriptGeneration$Syntax$Block = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$Block = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$BooleanLiteral = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`BooleanLiteral";
				this.name = "JavascriptGeneration`Syntax`BooleanLiteral";
				this.header = "BooleanLiteral value: b <Boolean> = Node (|\r	valueS = b.\r|)";
				this.slots = [new SM("valueS", false, false)];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`BooleanLiteral", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and: [value = anotherNode value]\r)"),
					new MM("printOn:", false, "public printOn: stream = (\r	super printOn: stream.\r	stream nextPutAll: ' ('.\r	value printOn: stream.\r	stream nextPutAll: ')'\r)"),
					new MM("value", false, "public value = (\r	^valueS\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitBooleanLiteral: self\r)"),
					new MM("valueS", true, null),
					new MM("setOnce`valueS:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$BooleanLiteral = (function ($b) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$BooleanLiteral$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($b) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$BooleanLiteral($b);
					self._$setOnce$valueS$($b);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$BooleanLiteral$slot._$$equal.call(self, $anotherNode) && self._$value().$$equal($anotherNode.$value());
				});
				this.$printOn$ = (function ($stream) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$BooleanLiteral$slot._$printOn$.call(self, $stream);
					$stream.$nextPutAll$(" (");
					self._$value().$printOn$($stream);
					$stream.$nextPutAll$(")");
					return self;
				});
				this.$value = (function () {
					var self = this;
					return self._$valueS();
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitBooleanLiteral$(self);
				});
				this.$valueS = (function () {
					return this.$valueS$slot;
				});
				this.$setOnce$valueS$ = (function (v) {
					this.$valueS$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`BooleanLiteral";
						this._$superInit$JavascriptGeneration$Syntax$BooleanLiteral = $.$superInit$JavascriptGeneration$Syntax$BooleanLiteral;
						this.$superInit$JavascriptGeneration$Syntax$BooleanLiteral = dnuCatcher("$superInit$JavascriptGeneration$Syntax$BooleanLiteral");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$printOn$ = this._$printOn$ = $.$printOn$;
						this.$value = this._$value = $.$value;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this._$valueS = $.$valueS;
						this.$valueS = dnuCatcher("$valueS");
						this._$setOnce$valueS$ = $.$setOnce$valueS$;
						this.$setOnce$valueS$ = dnuCatcher("$setOnce$valueS$");
						this.$enclosingObjects$JavascriptGeneration$Syntax$BooleanLiteral = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$BooleanLiteral$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`BooleanLiteral"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$valueS$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`BooleanLiteral"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`BooleanLiteral";
					this.slots = [];
					this.methods = [new MM("value:", true, null)];
					this.nestedClasses = [];
					this.$value$ = (function ($b) {
						return (new this.nonMeta.basicNew()).$instance$initializer($b);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`BooleanLiteral";
							this.$value$ = this._$value$ = $.$value$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$BooleanLiteral = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$BooleanLiteral = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$CallExpression = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`CallExpression";
				this.name = "JavascriptGeneration`Syntax`CallExpression";
				this.header = "CallExpression function: f arguments: args = Node (\r(* expression ( arguments ) *)|\r	public function <Expression> = f.\r	public arguments <List[Expression]> = args.\r|)";
				this.slots = [
					new SM("function", false, false),
					new SM("arguments", false, false)
				];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`CallExpression", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and:\r		[function = anotherNode function and: [arguments = anotherNode arguments]]\r)"),
					new MM("isCallExpression", false, "public isCallExpression = (\r	^true\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitCallExpression: self\r)"),
					new MM("function", true, null),
					new MM("setOnce`function:", true, null),
					new MM("arguments", true, null),
					new MM("setOnce`arguments:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$CallExpression = (function ($f, $args) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$CallExpression$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($f, $args) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$CallExpression($f, $args);
					self._$setOnce$function$($f);
					self._$setOnce$arguments$($args);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$CallExpression$slot._$$equal.call(self, $anotherNode) && (self._$function().$$equal($anotherNode.$function()) && self._$arguments().$$equal($anotherNode.$arguments()));
				});
				this.$isCallExpression = (function () {
					var self = this;
					return true;
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitCallExpression$(self);
				});
				this.$function = (function () {
					return this.$function$slot;
				});
				this.$setOnce$function$ = (function (v) {
					this.$function$slot = v;
					return this;
				});
				this.$arguments = (function () {
					return this.$arguments$slot;
				});
				this.$setOnce$arguments$ = (function (v) {
					this.$arguments$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`CallExpression";
						this._$superInit$JavascriptGeneration$Syntax$CallExpression = $.$superInit$JavascriptGeneration$Syntax$CallExpression;
						this.$superInit$JavascriptGeneration$Syntax$CallExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$CallExpression");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$isCallExpression = this._$isCallExpression = $.$isCallExpression;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this.$function = this._$function = $.$function;
						this.$setOnce$function$ = this._$setOnce$function$ = $.$setOnce$function$;
						this.$arguments = this._$arguments = $.$arguments;
						this.$setOnce$arguments$ = this._$setOnce$arguments$ = $.$setOnce$arguments$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$CallExpression = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$CallExpression$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`CallExpression"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$function$slot = nil;
							this.$arguments$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`CallExpression"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`CallExpression";
					this.slots = [];
					this.methods = [new MM("function:arguments:", true, null)];
					this.nestedClasses = [];
					this.$function$arguments$ = (function ($f, $args) {
						return (new this.nonMeta.basicNew()).$instance$initializer($f, $args);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`CallExpression";
							this.$function$arguments$ = this._$function$arguments$ = $.$function$arguments$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$CallExpression = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$CallExpression = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$ForInStatement = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`ForInStatement";
				this.name = "JavascriptGeneration`Syntax`ForInStatement";
				this.header = "ForInStatement varName: name <IdentifierExpression> expression: expr body: body = Node (|\r	public varName = name.\r	public expression = expr.\r	public body = body.\r|)";
				this.slots = [
					new SM("varName", false, false),
					new SM("expression", false, false),
					new SM("body", false, false)
				];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`ForInStatement", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and:\r		[varName = anotherNode varName and:\r		[expression = anotherNode expression and:\r		[body = anotherNode body]]]\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitForInStatement: self\r)"),
					new MM("varName", true, null),
					new MM("setOnce`varName:", true, null),
					new MM("expression", true, null),
					new MM("setOnce`expression:", true, null),
					new MM("body", true, null),
					new MM("setOnce`body:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$ForInStatement = (function ($name, $expr, $body) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$ForInStatement$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($name, $expr, $body) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$ForInStatement($name, $expr, $body);
					self._$setOnce$varName$($name);
					self._$setOnce$expression$($expr);
					self._$setOnce$body$($body);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$ForInStatement$slot._$$equal.call(self, $anotherNode) && (self._$varName().$$equal($anotherNode.$varName()) && (self._$expression().$$equal($anotherNode.$expression()) && self._$body().$$equal($anotherNode.$body())));
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitForInStatement$(self);
				});
				this.$varName = (function () {
					return this.$varName$slot;
				});
				this.$setOnce$varName$ = (function (v) {
					this.$varName$slot = v;
					return this;
				});
				this.$expression = (function () {
					return this.$expression$slot;
				});
				this.$setOnce$expression$ = (function (v) {
					this.$expression$slot = v;
					return this;
				});
				this.$body = (function () {
					return this.$body$slot;
				});
				this.$setOnce$body$ = (function (v) {
					this.$body$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`ForInStatement";
						this._$superInit$JavascriptGeneration$Syntax$ForInStatement = $.$superInit$JavascriptGeneration$Syntax$ForInStatement;
						this.$superInit$JavascriptGeneration$Syntax$ForInStatement = dnuCatcher("$superInit$JavascriptGeneration$Syntax$ForInStatement");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this.$varName = this._$varName = $.$varName;
						this.$setOnce$varName$ = this._$setOnce$varName$ = $.$setOnce$varName$;
						this.$expression = this._$expression = $.$expression;
						this.$setOnce$expression$ = this._$setOnce$expression$ = $.$setOnce$expression$;
						this.$body = this._$body = $.$body;
						this.$setOnce$body$ = this._$setOnce$body$ = $.$setOnce$body$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$ForInStatement = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$ForInStatement$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`ForInStatement"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$varName$slot = nil;
							this.$expression$slot = nil;
							this.$body$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`ForInStatement"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`ForInStatement";
					this.slots = [];
					this.methods = [new MM("varName:expression:body:", true, null)];
					this.nestedClasses = [];
					this.$varName$expression$body$ = (function ($name, $expr, $body) {
						return (new this.nonMeta.basicNew()).$instance$initializer($name, $expr, $body);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`ForInStatement";
							this.$varName$expression$body$ = this._$varName$expression$body$ = $.$varName$expression$body$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$ForInStatement = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$ForInStatement = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$ForStatement = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`ForStatement";
				this.name = "JavascriptGeneration`Syntax`ForStatement";
				this.header = "ForStatement initExpression: initExpr test: testExpr increment: incExpr body: body = Node (|\r	public initExpression = initExpr.\r	public testExpression = testExpr.\r	public incrementExpression = incExpr.\r	public body = body.\r|)";
				this.slots = [
					new SM("initExpression", false, false),
					new SM("testExpression", false, false),
					new SM("incrementExpression", false, false),
					new SM("body", false, false)
				];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`ForStatement", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and:\r		[initExpression = anotherNode initExpression and:\r		[testExpression = anotherNode testExpression and:\r		[incrementExpression = anotherNode incrementExpression and:\r		[body = anotherNode body]]]]\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitForStatement: self\r)"),
					new MM("initExpression", true, null),
					new MM("setOnce`initExpression:", true, null),
					new MM("testExpression", true, null),
					new MM("setOnce`testExpression:", true, null),
					new MM("incrementExpression", true, null),
					new MM("setOnce`incrementExpression:", true, null),
					new MM("body", true, null),
					new MM("setOnce`body:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$ForStatement = (function ($initExpr, $testExpr, $incExpr, $body) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$ForStatement$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($initExpr, $testExpr, $incExpr, $body) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$ForStatement($initExpr, $testExpr, $incExpr, $body);
					self._$setOnce$initExpression$($initExpr);
					self._$setOnce$testExpression$($testExpr);
					self._$setOnce$incrementExpression$($incExpr);
					self._$setOnce$body$($body);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$ForStatement$slot._$$equal.call(self, $anotherNode) && (self._$initExpression().$$equal($anotherNode.$initExpression()) && (self._$testExpression().$$equal($anotherNode.$testExpression()) && (self._$incrementExpression().$$equal($anotherNode.$incrementExpression()) && self._$body().$$equal($anotherNode.$body()))));
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitForStatement$(self);
				});
				this.$initExpression = (function () {
					return this.$initExpression$slot;
				});
				this.$setOnce$initExpression$ = (function (v) {
					this.$initExpression$slot = v;
					return this;
				});
				this.$testExpression = (function () {
					return this.$testExpression$slot;
				});
				this.$setOnce$testExpression$ = (function (v) {
					this.$testExpression$slot = v;
					return this;
				});
				this.$incrementExpression = (function () {
					return this.$incrementExpression$slot;
				});
				this.$setOnce$incrementExpression$ = (function (v) {
					this.$incrementExpression$slot = v;
					return this;
				});
				this.$body = (function () {
					return this.$body$slot;
				});
				this.$setOnce$body$ = (function (v) {
					this.$body$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`ForStatement";
						this._$superInit$JavascriptGeneration$Syntax$ForStatement = $.$superInit$JavascriptGeneration$Syntax$ForStatement;
						this.$superInit$JavascriptGeneration$Syntax$ForStatement = dnuCatcher("$superInit$JavascriptGeneration$Syntax$ForStatement");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this.$initExpression = this._$initExpression = $.$initExpression;
						this.$setOnce$initExpression$ = this._$setOnce$initExpression$ = $.$setOnce$initExpression$;
						this.$testExpression = this._$testExpression = $.$testExpression;
						this.$setOnce$testExpression$ = this._$setOnce$testExpression$ = $.$setOnce$testExpression$;
						this.$incrementExpression = this._$incrementExpression = $.$incrementExpression;
						this.$setOnce$incrementExpression$ = this._$setOnce$incrementExpression$ = $.$setOnce$incrementExpression$;
						this.$body = this._$body = $.$body;
						this.$setOnce$body$ = this._$setOnce$body$ = $.$setOnce$body$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$ForStatement = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$ForStatement$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`ForStatement"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$initExpression$slot = nil;
							this.$testExpression$slot = nil;
							this.$incrementExpression$slot = nil;
							this.$body$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`ForStatement"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`ForStatement";
					this.slots = [];
					this.methods = [new MM("initExpression:test:increment:body:", true, null)];
					this.nestedClasses = [];
					this.$initExpression$test$increment$body$ = (function ($initExpr, $testExpr, $incExpr, $body) {
						return (new this.nonMeta.basicNew()).$instance$initializer($initExpr, $testExpr, $incExpr, $body);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`ForStatement";
							this.$initExpression$test$increment$body$ = this._$initExpression$test$increment$body$ = $.$initExpression$test$increment$body$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$ForStatement = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$ForStatement = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$FunctionExpression = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`FunctionExpression";
				this.name = "JavascriptGeneration`Syntax`FunctionExpression";
				this.header = "FunctionExpression name: s <IdentifierExpression | nil> parameters: names <List[IdentifierExpression]> body: b = Node (\r(* FunctionExpression. ECMA-262, p. 262. *)|\r	public name <IdentifierExpression | nil> = s.\r	public parameters <List[IdentifierExpression]> = names.\r	public body <Block> = b asBlock.\r|)";
				this.slots = [
					new SM("name", false, false),
					new SM("parameters", false, false),
					new SM("body", false, false)
				];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`FunctionExpression", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and:\r		[name = anotherNode name and:\r		[parameters = anotherNode parameters and:\r		[body = anotherNode body]]]\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitFunctionExpression: self\r)"),
					new MM("name", true, null),
					new MM("setOnce`name:", true, null),
					new MM("parameters", true, null),
					new MM("setOnce`parameters:", true, null),
					new MM("body", true, null),
					new MM("setOnce`body:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$FunctionExpression = (function ($s, $names, $b) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$FunctionExpression$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($s, $names, $b) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$FunctionExpression($s, $names, $b);
					self._$setOnce$name$($s);
					self._$setOnce$parameters$($names);
					self._$setOnce$body$($b.$asBlock());
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$FunctionExpression$slot._$$equal.call(self, $anotherNode) && (self._$name().$$equal($anotherNode.$name()) && (self._$parameters().$$equal($anotherNode.$parameters()) && self._$body().$$equal($anotherNode.$body())));
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitFunctionExpression$(self);
				});
				this.$name = (function () {
					return this.$name$slot;
				});
				this.$setOnce$name$ = (function (v) {
					this.$name$slot = v;
					return this;
				});
				this.$parameters = (function () {
					return this.$parameters$slot;
				});
				this.$setOnce$parameters$ = (function (v) {
					this.$parameters$slot = v;
					return this;
				});
				this.$body = (function () {
					return this.$body$slot;
				});
				this.$setOnce$body$ = (function (v) {
					this.$body$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`FunctionExpression";
						this._$superInit$JavascriptGeneration$Syntax$FunctionExpression = $.$superInit$JavascriptGeneration$Syntax$FunctionExpression;
						this.$superInit$JavascriptGeneration$Syntax$FunctionExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$FunctionExpression");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this.$name = this._$name = $.$name;
						this.$setOnce$name$ = this._$setOnce$name$ = $.$setOnce$name$;
						this.$parameters = this._$parameters = $.$parameters;
						this.$setOnce$parameters$ = this._$setOnce$parameters$ = $.$setOnce$parameters$;
						this.$body = this._$body = $.$body;
						this.$setOnce$body$ = this._$setOnce$body$ = $.$setOnce$body$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$FunctionExpression = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$FunctionExpression$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`FunctionExpression"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$name$slot = nil;
							this.$parameters$slot = nil;
							this.$body$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`FunctionExpression"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`FunctionExpression";
					this.slots = [];
					this.methods = [
						new MM("name:parameters:body:", true, null),
						new MM("parameters:body:", false, "public parameters: names <List[IdentifierExpression]> body: b <Node> = (\r	^FunctionExpression name: nil parameters: names body: b\r)")
					];
					this.nestedClasses = [];
					this.$name$parameters$body$ = (function ($s, $names, $b) {
						return (new this.nonMeta.basicNew()).$instance$initializer($s, $names, $b);
					});
					this.$parameters$body$ = (function ($names, $b) {
						var self = this;
						return self.$enclosingObjects$JavascriptGeneration$Syntax$FunctionExpression[0]._$FunctionExpression().$name$parameters$body$(nil, $names, $b);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`FunctionExpression";
							this.$name$parameters$body$ = this._$name$parameters$body$ = $.$name$parameters$body$;
							this.$parameters$body$ = this._$parameters$body$ = $.$parameters$body$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$FunctionExpression = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$FunctionExpression = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$FunctionStatement = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`FunctionStatement";
				this.name = "JavascriptGeneration`Syntax`FunctionStatement";
				this.header = "FunctionStatement name: s parameters: names body: b = FunctionExpression name: s parameters: names body: b (\r(* A function statement. Essentially the same thing as a function expression, but needs to be written out differently. Note that unlike in a function expression, the name argument is not optional. TODO: should we move name up to this class and make function expressions anonymous? What does the standard say? *)|\r|)";
				this.slots = [];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`FunctionStatement", true, "name: s parameters: names body: b"),
					new MM("instance`initializer", true, "name: s parameters: names body: b"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitFunctionStatement: self\r)")
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$FunctionStatement = (function ($s, $names, $b) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$FunctionStatement$slot._$instance$initializer.call(self, $s, $names, $b);
					return self;
				});
				this.$instance$initializer = (function ($s, $names, $b) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$FunctionStatement($s, $names, $b);
					return self;
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitFunctionStatement$(self);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`FunctionStatement";
						this._$superInit$JavascriptGeneration$Syntax$FunctionStatement = $.$superInit$JavascriptGeneration$Syntax$FunctionStatement;
						this.$superInit$JavascriptGeneration$Syntax$FunctionStatement = dnuCatcher("$superInit$JavascriptGeneration$Syntax$FunctionStatement");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$FunctionStatement = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$FunctionStatement$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`FunctionStatement"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`FunctionStatement"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`FunctionStatement";
					this.slots = [];
					this.methods = [new MM("name:parameters:body:", true, null)];
					this.nestedClasses = [];
					this.$name$parameters$body$ = (function ($s, $names, $b) {
						return (new this.nonMeta.basicNew()).$instance$initializer($s, $names, $b);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`FunctionStatement";
							this.$name$parameters$body$ = this._$name$parameters$body$ = $.$name$parameters$body$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$FunctionStatement = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$FunctionStatement = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$IdentifierExpression = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`IdentifierExpression";
				this.name = "JavascriptGeneration`Syntax`IdentifierExpression";
				this.header = "IdentifierExpression name: s <String> = Node (\r(* a case of PrimaryExpression *)|\r	nameS = s.\r|)";
				this.slots = [new SM("nameS", false, false)];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`IdentifierExpression", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and: [name = anotherNode name]\r)"),
					new MM("isIdentifier", false, "public isIdentifier = (\r	^true\r)"),
					new MM("name", false, "public name = (\r	^nameS\r)"),
					new MM("printOn:", false, "public printOn: stream = (\r	super printOn: stream.\r	stream nextPutAll: ' ('.\r	stream nextPutAll: name.\r	stream nextPutAll: ')'\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitIdentifierExpression: self\r)"),
					new MM("nameS", true, null),
					new MM("setOnce`nameS:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$IdentifierExpression = (function ($s) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$IdentifierExpression$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($s) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$IdentifierExpression($s);
					self._$setOnce$nameS$($s);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$IdentifierExpression$slot._$$equal.call(self, $anotherNode) && self._$name().$$equal($anotherNode.$name());
				});
				this.$isIdentifier = (function () {
					var self = this;
					return true;
				});
				this.$name = (function () {
					var self = this;
					return self._$nameS();
				});
				this.$printOn$ = (function ($stream) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$IdentifierExpression$slot._$printOn$.call(self, $stream);
					$stream.$nextPutAll$(" (");
					$stream.$nextPutAll$(self._$name());
					$stream.$nextPutAll$(")");
					return self;
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitIdentifierExpression$(self);
				});
				this.$nameS = (function () {
					return this.$nameS$slot;
				});
				this.$setOnce$nameS$ = (function (v) {
					this.$nameS$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`IdentifierExpression";
						this._$superInit$JavascriptGeneration$Syntax$IdentifierExpression = $.$superInit$JavascriptGeneration$Syntax$IdentifierExpression;
						this.$superInit$JavascriptGeneration$Syntax$IdentifierExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$IdentifierExpression");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$isIdentifier = this._$isIdentifier = $.$isIdentifier;
						this.$name = this._$name = $.$name;
						this.$printOn$ = this._$printOn$ = $.$printOn$;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this._$nameS = $.$nameS;
						this.$nameS = dnuCatcher("$nameS");
						this._$setOnce$nameS$ = $.$setOnce$nameS$;
						this.$setOnce$nameS$ = dnuCatcher("$setOnce$nameS$");
						this.$enclosingObjects$JavascriptGeneration$Syntax$IdentifierExpression = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$IdentifierExpression$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`IdentifierExpression"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$nameS$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`IdentifierExpression"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`IdentifierExpression";
					this.slots = [];
					this.methods = [new MM("name:", true, null)];
					this.nestedClasses = [];
					this.$name$ = (function ($s) {
						return (new this.nonMeta.basicNew()).$instance$initializer($s);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`IdentifierExpression";
							this.$name$ = this._$name$ = $.$name$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$IdentifierExpression = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$IdentifierExpression = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$IfStatement = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`IfStatement";
				this.name = "JavascriptGeneration`Syntax`IfStatement";
				this.header = "IfStatement expression: expr then: then else: else = Node (\r(* if ( expression ) thenStatement else elseStatement *)|\r	public expression = expr.\r	public thenStatement = then.\r	public elseStatement = else.\r|)";
				this.slots = [
					new SM("expression", false, false),
					new SM("thenStatement", false, false),
					new SM("elseStatement", false, false)
				];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`IfStatement", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and:\r		[expression = anotherNode expression and:\r		[thenStatement = anotherNode thenStatement and:\r		[elseStatement = anotherNode elseStatement]]]\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitIfStatement: self\r)"),
					new MM("expression", true, null),
					new MM("setOnce`expression:", true, null),
					new MM("thenStatement", true, null),
					new MM("setOnce`thenStatement:", true, null),
					new MM("elseStatement", true, null),
					new MM("setOnce`elseStatement:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$IfStatement = (function ($expr, $then, $else) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$IfStatement$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($expr, $then, $else) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$IfStatement($expr, $then, $else);
					self._$setOnce$expression$($expr);
					self._$setOnce$thenStatement$($then);
					self._$setOnce$elseStatement$($else);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$IfStatement$slot._$$equal.call(self, $anotherNode) && (self._$expression().$$equal($anotherNode.$expression()) && (self._$thenStatement().$$equal($anotherNode.$thenStatement()) && self._$elseStatement().$$equal($anotherNode.$elseStatement())));
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitIfStatement$(self);
				});
				this.$expression = (function () {
					return this.$expression$slot;
				});
				this.$setOnce$expression$ = (function (v) {
					this.$expression$slot = v;
					return this;
				});
				this.$thenStatement = (function () {
					return this.$thenStatement$slot;
				});
				this.$setOnce$thenStatement$ = (function (v) {
					this.$thenStatement$slot = v;
					return this;
				});
				this.$elseStatement = (function () {
					return this.$elseStatement$slot;
				});
				this.$setOnce$elseStatement$ = (function (v) {
					this.$elseStatement$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`IfStatement";
						this._$superInit$JavascriptGeneration$Syntax$IfStatement = $.$superInit$JavascriptGeneration$Syntax$IfStatement;
						this.$superInit$JavascriptGeneration$Syntax$IfStatement = dnuCatcher("$superInit$JavascriptGeneration$Syntax$IfStatement");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this.$expression = this._$expression = $.$expression;
						this.$setOnce$expression$ = this._$setOnce$expression$ = $.$setOnce$expression$;
						this.$thenStatement = this._$thenStatement = $.$thenStatement;
						this.$setOnce$thenStatement$ = this._$setOnce$thenStatement$ = $.$setOnce$thenStatement$;
						this.$elseStatement = this._$elseStatement = $.$elseStatement;
						this.$setOnce$elseStatement$ = this._$setOnce$elseStatement$ = $.$setOnce$elseStatement$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$IfStatement = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$IfStatement$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`IfStatement"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$expression$slot = nil;
							this.$thenStatement$slot = nil;
							this.$elseStatement$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`IfStatement"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`IfStatement";
					this.slots = [];
					this.methods = [
						new MM("expression:then:else:", true, null),
						new MM("expression:then:", false, "public expression: expr then: then = (\r	^IfStatement expression: expr then: then else: nil\r)")
					];
					this.nestedClasses = [];
					this.$expression$then$else$ = (function ($expr, $then, $else) {
						return (new this.nonMeta.basicNew()).$instance$initializer($expr, $then, $else);
					});
					this.$expression$then$ = (function ($expr, $then) {
						var self = this;
						return self.$enclosingObjects$JavascriptGeneration$Syntax$IfStatement[0]._$IfStatement().$expression$then$else$($expr, $then, nil);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`IfStatement";
							this.$expression$then$else$ = this._$expression$then$else$ = $.$expression$then$else$;
							this.$expression$then$ = this._$expression$then$ = $.$expression$then$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$IfStatement = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$IfStatement = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$IntegerLiteral = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`IntegerLiteral";
				this.name = "JavascriptGeneration`Syntax`IntegerLiteral";
				this.header = "IntegerLiteral value: v <Integer> = Node (|\r	valueS = v.\r|)";
				this.slots = [new SM("valueS", false, false)];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`IntegerLiteral", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and:\r		[value = anotherNode value]\r)"),
					new MM("printOn:", false, "public printOn: stream = (\r	super printOn: stream.\r	stream nextPutAll: ' ('.\r	value printOn: stream.\r	stream nextPutAll: ')'\r)"),
					new MM("value", false, "public value = (\r	^valueS\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitIntegerLiteral: self\r)"),
					new MM("valueS", true, null),
					new MM("setOnce`valueS:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$IntegerLiteral = (function ($v) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$IntegerLiteral$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($v) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$IntegerLiteral($v);
					self._$setOnce$valueS$($v);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$IntegerLiteral$slot._$$equal.call(self, $anotherNode) && self._$value().$$equal($anotherNode.$value());
				});
				this.$printOn$ = (function ($stream) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$IntegerLiteral$slot._$printOn$.call(self, $stream);
					$stream.$nextPutAll$(" (");
					self._$value().$printOn$($stream);
					$stream.$nextPutAll$(")");
					return self;
				});
				this.$value = (function () {
					var self = this;
					return self._$valueS();
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitIntegerLiteral$(self);
				});
				this.$valueS = (function () {
					return this.$valueS$slot;
				});
				this.$setOnce$valueS$ = (function (v) {
					this.$valueS$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`IntegerLiteral";
						this._$superInit$JavascriptGeneration$Syntax$IntegerLiteral = $.$superInit$JavascriptGeneration$Syntax$IntegerLiteral;
						this.$superInit$JavascriptGeneration$Syntax$IntegerLiteral = dnuCatcher("$superInit$JavascriptGeneration$Syntax$IntegerLiteral");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$printOn$ = this._$printOn$ = $.$printOn$;
						this.$value = this._$value = $.$value;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this._$valueS = $.$valueS;
						this.$valueS = dnuCatcher("$valueS");
						this._$setOnce$valueS$ = $.$setOnce$valueS$;
						this.$setOnce$valueS$ = dnuCatcher("$setOnce$valueS$");
						this.$enclosingObjects$JavascriptGeneration$Syntax$IntegerLiteral = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$IntegerLiteral$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`IntegerLiteral"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$valueS$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`IntegerLiteral"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`IntegerLiteral";
					this.slots = [];
					this.methods = [new MM("value:", true, null)];
					this.nestedClasses = [];
					this.$value$ = (function ($v) {
						return (new this.nonMeta.basicNew()).$instance$initializer($v);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`IntegerLiteral";
							this.$value$ = this._$value$ = $.$value$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$IntegerLiteral = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$IntegerLiteral = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$MemberExpression = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`MemberExpression";
				this.name = "JavascriptGeneration`Syntax`MemberExpression";
				this.header = "MemberExpression primary: expr <Expression> property: p <Node> = Node (\r(* primary[property] *)|\r	public primary = expr.\r	public property = p.\r|)";
				this.slots = [
					new SM("primary", false, false),
					new SM("property", false, false)
				];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`MemberExpression", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and:\r		[primary = anotherNode primary and:\r		[property = anotherNode property]]\r)"),
					new MM("isMemberExpression", false, "public isMemberExpression = (\r	^true\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitMemberExpression: self\r)"),
					new MM("primary", true, null),
					new MM("setOnce`primary:", true, null),
					new MM("property", true, null),
					new MM("setOnce`property:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$MemberExpression = (function ($expr, $p) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$MemberExpression$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($expr, $p) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$MemberExpression($expr, $p);
					self._$setOnce$primary$($expr);
					self._$setOnce$property$($p);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$MemberExpression$slot._$$equal.call(self, $anotherNode) && (self._$primary().$$equal($anotherNode.$primary()) && self._$property().$$equal($anotherNode.$property()));
				});
				this.$isMemberExpression = (function () {
					var self = this;
					return true;
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitMemberExpression$(self);
				});
				this.$primary = (function () {
					return this.$primary$slot;
				});
				this.$setOnce$primary$ = (function (v) {
					this.$primary$slot = v;
					return this;
				});
				this.$property = (function () {
					return this.$property$slot;
				});
				this.$setOnce$property$ = (function (v) {
					this.$property$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`MemberExpression";
						this._$superInit$JavascriptGeneration$Syntax$MemberExpression = $.$superInit$JavascriptGeneration$Syntax$MemberExpression;
						this.$superInit$JavascriptGeneration$Syntax$MemberExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$MemberExpression");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$isMemberExpression = this._$isMemberExpression = $.$isMemberExpression;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this.$primary = this._$primary = $.$primary;
						this.$setOnce$primary$ = this._$setOnce$primary$ = $.$setOnce$primary$;
						this.$property = this._$property = $.$property;
						this.$setOnce$property$ = this._$setOnce$property$ = $.$setOnce$property$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$MemberExpression = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$MemberExpression$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`MemberExpression"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$primary$slot = nil;
							this.$property$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`MemberExpression"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`MemberExpression";
					this.slots = [];
					this.methods = [new MM("primary:property:", true, null)];
					this.nestedClasses = [];
					this.$primary$property$ = (function ($expr, $p) {
						return (new this.nonMeta.basicNew()).$instance$initializer($expr, $p);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`MemberExpression";
							this.$primary$property$ = this._$primary$property$ = $.$primary$property$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$MemberExpression = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$MemberExpression = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$NewExpression = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`NewExpression";
				this.name = "JavascriptGeneration`Syntax`NewExpression";
				this.header = "NewExpression expression: expr arguments: args = Node (\r(* new expr ( arg, .... ) *)|\r	public expression = expr.\r	public arguments = args.\r|)";
				this.slots = [
					new SM("expression", false, false),
					new SM("arguments", false, false)
				];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`NewExpression", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and:\r		[expression = anotherNode expression and:\r		[arguments = anotherNode arguments]]\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitNewExpression: self\r)"),
					new MM("expression", true, null),
					new MM("setOnce`expression:", true, null),
					new MM("arguments", true, null),
					new MM("setOnce`arguments:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$NewExpression = (function ($expr, $args) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$NewExpression$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($expr, $args) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$NewExpression($expr, $args);
					self._$setOnce$expression$($expr);
					self._$setOnce$arguments$($args);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$NewExpression$slot._$$equal.call(self, $anotherNode) && (self._$expression().$$equal($anotherNode.$expression()) && self._$arguments().$$equal($anotherNode.$arguments()));
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitNewExpression$(self);
				});
				this.$expression = (function () {
					return this.$expression$slot;
				});
				this.$setOnce$expression$ = (function (v) {
					this.$expression$slot = v;
					return this;
				});
				this.$arguments = (function () {
					return this.$arguments$slot;
				});
				this.$setOnce$arguments$ = (function (v) {
					this.$arguments$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`NewExpression";
						this._$superInit$JavascriptGeneration$Syntax$NewExpression = $.$superInit$JavascriptGeneration$Syntax$NewExpression;
						this.$superInit$JavascriptGeneration$Syntax$NewExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$NewExpression");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this.$expression = this._$expression = $.$expression;
						this.$setOnce$expression$ = this._$setOnce$expression$ = $.$setOnce$expression$;
						this.$arguments = this._$arguments = $.$arguments;
						this.$setOnce$arguments$ = this._$setOnce$arguments$ = $.$setOnce$arguments$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$NewExpression = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$NewExpression$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`NewExpression"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$expression$slot = nil;
							this.$arguments$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`NewExpression"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`NewExpression";
					this.slots = [];
					this.methods = [new MM("expression:arguments:", true, null)];
					this.nestedClasses = [];
					this.$expression$arguments$ = (function ($expr, $args) {
						return (new this.nonMeta.basicNew()).$instance$initializer($expr, $args);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`NewExpression";
							this.$expression$arguments$ = this._$expression$arguments$ = $.$expression$arguments$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$NewExpression = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$NewExpression = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$Node = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`Node";
				this.name = "JavascriptGeneration`Syntax`Node";
				this.header = "Node = (\r(* The superclass of all other nodes, both statements and expressions. *)|\r	public comment <String>\r|)";
				this.slots = [new SM("comment", true, false)];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`Node", true, " "),
					new MM("instance`initializer", true, " "),
					new MM("=", false, "public = anotherNode = (\r	^class = anotherNode class\r)"),
					new MM("asBlock", false, "public asBlock = (\r	^Block statements: {self}\r)"),
					new MM("isBlockStatement", false, "public isBlockStatement = (\r	^false\r)"),
					new MM("isCallExpression", false, "public isCallExpression = (\r	^false\r)"),
					new MM("isIdentifier", false, "public isIdentifier = (\r	^false\r)"),
					new MM("isJsNode", false, "public isJsNode = (\r	^true\r)"),
					new MM("isMemberExpression", false, "public isMemberExpression = (\r	^false\r)"),
					new MM("isOperatorExpression", false, "public isOperatorExpression = (\r	^false\r)"),
					new MM("comment", true, null),
					new MM("comment:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$Node = (function () {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$Node$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function () {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$Node();
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self._$class().$$equal($anotherNode.$class());
				});
				this.$asBlock = (function () {
					var self = this;
					return self.$enclosingObjects$JavascriptGeneration$Syntax$Node[0]._$Block().$statements$([self]);
				});
				this.$isBlockStatement = (function () {
					var self = this;
					return false;
				});
				this.$isCallExpression = (function () {
					var self = this;
					return false;
				});
				this.$isIdentifier = (function () {
					var self = this;
					return false;
				});
				this.$isJsNode = (function () {
					var self = this;
					return true;
				});
				this.$isMemberExpression = (function () {
					var self = this;
					return false;
				});
				this.$isOperatorExpression = (function () {
					var self = this;
					return false;
				});
				this.$comment = (function () {
					return this.$comment$slot;
				});
				this.$comment$ = (function (v) {
					this.$comment$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`Node";
						this._$superInit$JavascriptGeneration$Syntax$Node = $.$superInit$JavascriptGeneration$Syntax$Node;
						this.$superInit$JavascriptGeneration$Syntax$Node = dnuCatcher("$superInit$JavascriptGeneration$Syntax$Node");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$asBlock = this._$asBlock = $.$asBlock;
						this.$isBlockStatement = this._$isBlockStatement = $.$isBlockStatement;
						this.$isCallExpression = this._$isCallExpression = $.$isCallExpression;
						this.$isIdentifier = this._$isIdentifier = $.$isIdentifier;
						this.$isJsNode = this._$isJsNode = $.$isJsNode;
						this.$isMemberExpression = this._$isMemberExpression = $.$isMemberExpression;
						this.$isOperatorExpression = this._$isOperatorExpression = $.$isOperatorExpression;
						this.$comment = this._$comment = $.$comment;
						this.$comment$ = this._$comment$ = $.$comment$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$Node = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$Node$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`Node"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$comment$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`Node"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`Node";
					this.slots = [];
					this.methods = [new MM("new", true, null)];
					this.nestedClasses = [];
					this.$new = (function () {
						return (new this.nonMeta.basicNew()).$instance$initializer();
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`Node";
							this.$new = this._$new = $.$new;
							this.$enclosingObjects$JavascriptGeneration$Syntax$Node = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$Node = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$ObjectLiteral = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`ObjectLiteral";
				this.name = "JavascriptGeneration`Syntax`ObjectLiteral";
				this.header = "ObjectLiteral = Node (\r(* Object literal. ECMA-262, p. 216. *)|\r	public slotNames = List new.\r	public slotValues = List new.\r|)";
				this.slots = [
					new SM("slotNames", false, false),
					new SM("slotValues", false, false)
				];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`ObjectLiteral", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and:\r		[slotNames = anotherNode slotNames and:\r		[slotValues = anotherNode slotValues]]\r)"),
					new MM("addSlot:value:", false, "public addSlot: name <String> value: object = (\r	slotNames addLast: name.\r	slotValues addLast: object\r)"),
					new MM("slotCount", false, "public slotCount = (\r	^slotNames size\r)"),
					new MM("slotsDo:", false, "public slotsDo: aBlock = (\r	(* Invoke a two-argument aBlock with the name and the value of each slot in this literal. *)\r	^slotNames with: slotValues do: aBlock\r)"),
					new MM("slotsDo:betweenDo:", false, "public slotsDo: aBlock betweenDo: betweenBlock = (\r	(* Invoke a two-argument aBlock with the name and the value of each slot in this literal. Between the invocations (but not after the last one), invoke the betweenBlock. *)\r	| lastIndex |\r	lastIndex:: slotNames size.\r	1 to: lastIndex do:\r		[:index |\r		aBlock value: (slotNames at: index) value: (slotValues at: index).\r		index = lastIndex ifFalse: [betweenBlock value]]\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitObjectLiteral: self\r)"),
					new MM("slotNames", true, null),
					new MM("setOnce`slotNames:", true, null),
					new MM("slotValues", true, null),
					new MM("setOnce`slotValues:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$ObjectLiteral = (function () {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$ObjectLiteral$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function () {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$ObjectLiteral();
					self._$setOnce$slotNames$($0.$List.call(self.$enclosingObjects$JavascriptGeneration$Syntax$ObjectLiteral[1]).$new());
					self._$setOnce$slotValues$($0.$List.call(self.$enclosingObjects$JavascriptGeneration$Syntax$ObjectLiteral[1]).$new());
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$ObjectLiteral$slot._$$equal.call(self, $anotherNode) && (self._$slotNames().$$equal($anotherNode.$slotNames()) && self._$slotValues().$$equal($anotherNode.$slotValues()));
				});
				this.$addSlot$value$ = (function ($name, $object) {
					var self = this;
					self._$slotNames().$addLast$($name);
					self._$slotValues().$addLast$($object);
					return self;
				});
				this.$slotCount = (function () {
					var self = this;
					return self._$slotNames().$size();
				});
				this.$slotsDo$ = (function ($aBlock) {
					var self = this;
					return self._$slotNames().$with$do$(self._$slotValues(), $aBlock);
				});
				this.$slotsDo$betweenDo$ = (function ($aBlock, $betweenBlock) {
					var self = this;
					var $lastIndex = nil;
					$lastIndex = self._$slotNames().$size();
					{
						var $$limit = nil;
						var $index = nil;
						nil;
						$index = 1;
						$$limit = $lastIndex;
						for (; $$limit.$$greater$equal($index); ) {
							$aBlock.$value$value$(self._$slotNames().$at$($index), self._$slotValues().$at$($index));
							if (!$index.$$equal($lastIndex)) {
								$betweenBlock.$value();
							} else {
								nil;
							};
							$index = (1).$$plus($index);
						};
					};
					return self;
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitObjectLiteral$(self);
				});
				this.$slotNames = (function () {
					return this.$slotNames$slot;
				});
				this.$setOnce$slotNames$ = (function (v) {
					this.$slotNames$slot = v;
					return this;
				});
				this.$slotValues = (function () {
					return this.$slotValues$slot;
				});
				this.$setOnce$slotValues$ = (function (v) {
					this.$slotValues$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`ObjectLiteral";
						this._$superInit$JavascriptGeneration$Syntax$ObjectLiteral = $.$superInit$JavascriptGeneration$Syntax$ObjectLiteral;
						this.$superInit$JavascriptGeneration$Syntax$ObjectLiteral = dnuCatcher("$superInit$JavascriptGeneration$Syntax$ObjectLiteral");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$addSlot$value$ = this._$addSlot$value$ = $.$addSlot$value$;
						this.$slotCount = this._$slotCount = $.$slotCount;
						this.$slotsDo$ = this._$slotsDo$ = $.$slotsDo$;
						this.$slotsDo$betweenDo$ = this._$slotsDo$betweenDo$ = $.$slotsDo$betweenDo$;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this.$slotNames = this._$slotNames = $.$slotNames;
						this.$setOnce$slotNames$ = this._$setOnce$slotNames$ = $.$setOnce$slotNames$;
						this.$slotValues = this._$slotValues = $.$slotValues;
						this.$setOnce$slotValues$ = this._$setOnce$slotValues$ = $.$setOnce$slotValues$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$ObjectLiteral = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$ObjectLiteral$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`ObjectLiteral"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$slotNames$slot = nil;
							this.$slotValues$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`ObjectLiteral"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`ObjectLiteral";
					this.slots = [];
					this.methods = [
						new MM("new", true, null),
						new MM("slotNames:values:", false, "public slotNames: names values: values = (\r	| instance |\r	instance:: ObjectLiteral new.\r	names with: values do:\r		[:eachName :eachValue |\r		instance addSlot: eachName value: eachValue].\r	^instance\r)"),
						new MM("slots:", false, "public slots: namesAndValues = (\r	| instance |\r	namesAndValues size odd ifTrue: [error: 'invalid slot initialization data'].\r	instance:: ObjectLiteral new.\r	1 to: namesAndValues size by: 2 do:\r		[:i |\r		instance addSlot: (namesAndValues at: i) value: (namesAndValues at: i + 1)].\r	^instance\r)")
					];
					this.nestedClasses = [];
					this.$new = (function () {
						return (new this.nonMeta.basicNew()).$instance$initializer();
					});
					this.$slotNames$values$ = (function ($names, $values) {
						var self = this;
						var $instance = nil;
						$instance = self.$enclosingObjects$JavascriptGeneration$Syntax$ObjectLiteral[0]._$ObjectLiteral().$new();
						$names.$with$do$($values, (function ($eachName, $eachValue) {
							return $instance.$addSlot$value$($eachName, $eachValue);
						}));
						return $instance;
					});
					this.$slots$ = (function ($namesAndValues) {
						var self = this;
						var $instance = nil;
						if ($namesAndValues.$size().$odd()) {
							self._$error$("invalid slot initialization data");
						} else {
							nil;
						};
						$instance = self.$enclosingObjects$JavascriptGeneration$Syntax$ObjectLiteral[0]._$ObjectLiteral().$new();
						{
							var $$limit = nil;
							var $i = nil;
							nil;
							$i = 1;
							$$limit = $namesAndValues.$size();
							for (; $$limit.$$greater$equal($i); ) {
								$instance.$addSlot$value$($namesAndValues.$at$($i), $namesAndValues.$at$($i + 1));
								$i = (2).$$plus($i);
							};
						};
						return $instance;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`ObjectLiteral";
							this.$new = this._$new = $.$new;
							this.$slotNames$values$ = this._$slotNames$values$ = $.$slotNames$values$;
							this.$slots$ = this._$slots$ = $.$slots$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$ObjectLiteral = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$ObjectLiteral = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$OperatorExpression = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`OperatorExpression";
				this.name = "JavascriptGeneration`Syntax`OperatorExpression";
				this.header = "OperatorExpression operator: name <String> with: left <Node> and: right <Node> = Node (|\r	public operatorName = name.\r	public left = left.\r	public right = right.\r|)";
				this.slots = [
					new SM("operatorName", false, false),
					new SM("left", false, false),
					new SM("right", false, false)
				];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`OperatorExpression", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and:\r		[operatorName = anotherNode operatorName and:\r		[left = anotherNode left and:\r		[right = anotherNode right]]]\r)"),
					new MM("isOperatorExpression", false, "public isOperatorExpression = (\r	^true\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitOperatorExpression: self\r)"),
					new MM("operatorName", true, null),
					new MM("setOnce`operatorName:", true, null),
					new MM("left", true, null),
					new MM("setOnce`left:", true, null),
					new MM("right", true, null),
					new MM("setOnce`right:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$OperatorExpression = (function ($name, $left, $right) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$OperatorExpression$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($name, $left, $right) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$OperatorExpression($name, $left, $right);
					self._$setOnce$operatorName$($name);
					self._$setOnce$left$($left);
					self._$setOnce$right$($right);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$OperatorExpression$slot._$$equal.call(self, $anotherNode) && (self._$operatorName().$$equal($anotherNode.$operatorName()) && (self._$left().$$equal($anotherNode.$left()) && self._$right().$$equal($anotherNode.$right())));
				});
				this.$isOperatorExpression = (function () {
					var self = this;
					return true;
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitOperatorExpression$(self);
				});
				this.$operatorName = (function () {
					return this.$operatorName$slot;
				});
				this.$setOnce$operatorName$ = (function (v) {
					this.$operatorName$slot = v;
					return this;
				});
				this.$left = (function () {
					return this.$left$slot;
				});
				this.$setOnce$left$ = (function (v) {
					this.$left$slot = v;
					return this;
				});
				this.$right = (function () {
					return this.$right$slot;
				});
				this.$setOnce$right$ = (function (v) {
					this.$right$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`OperatorExpression";
						this._$superInit$JavascriptGeneration$Syntax$OperatorExpression = $.$superInit$JavascriptGeneration$Syntax$OperatorExpression;
						this.$superInit$JavascriptGeneration$Syntax$OperatorExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$OperatorExpression");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$isOperatorExpression = this._$isOperatorExpression = $.$isOperatorExpression;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this.$operatorName = this._$operatorName = $.$operatorName;
						this.$setOnce$operatorName$ = this._$setOnce$operatorName$ = $.$setOnce$operatorName$;
						this.$left = this._$left = $.$left;
						this.$setOnce$left$ = this._$setOnce$left$ = $.$setOnce$left$;
						this.$right = this._$right = $.$right;
						this.$setOnce$right$ = this._$setOnce$right$ = $.$setOnce$right$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$OperatorExpression = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$OperatorExpression$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`OperatorExpression"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$operatorName$slot = nil;
							this.$left$slot = nil;
							this.$right$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`OperatorExpression"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`OperatorExpression";
					this.slots = [];
					this.methods = [new MM("operator:with:and:", true, null)];
					this.nestedClasses = [];
					this.$operator$with$and$ = (function ($name, $left, $right) {
						return (new this.nonMeta.basicNew()).$instance$initializer($name, $left, $right);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`OperatorExpression";
							this.$operator$with$and$ = this._$operator$with$and$ = $.$operator$with$and$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$OperatorExpression = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$OperatorExpression = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$ReturnStatement = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`ReturnStatement";
				this.name = "JavascriptGeneration`Syntax`ReturnStatement";
				this.header = "ReturnStatement expression: expr = Node (\r(* return expression/opt. *)|\r	expressionS = expr.\r|)";
				this.slots = [new SM("expressionS", false, false)];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`ReturnStatement", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and: [expression = anotherNode expression]\r)"),
					new MM("expression", false, "public expression = (\r	^expressionS\r)"),
					new MM("printOn:", false, "public printOn: stream = (\r	super printOn: stream.\r	stream nextPutAll: ' ('.\r	expression printOn: stream.\r	stream nextPutAll: ')'\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitReturnStatement: self\r)"),
					new MM("expressionS", true, null),
					new MM("setOnce`expressionS:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$ReturnStatement = (function ($expr) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$ReturnStatement$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($expr) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$ReturnStatement($expr);
					self._$setOnce$expressionS$($expr);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$ReturnStatement$slot._$$equal.call(self, $anotherNode) && self._$expression().$$equal($anotherNode.$expression());
				});
				this.$expression = (function () {
					var self = this;
					return self._$expressionS();
				});
				this.$printOn$ = (function ($stream) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$ReturnStatement$slot._$printOn$.call(self, $stream);
					$stream.$nextPutAll$(" (");
					self._$expression().$printOn$($stream);
					$stream.$nextPutAll$(")");
					return self;
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitReturnStatement$(self);
				});
				this.$expressionS = (function () {
					return this.$expressionS$slot;
				});
				this.$setOnce$expressionS$ = (function (v) {
					this.$expressionS$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`ReturnStatement";
						this._$superInit$JavascriptGeneration$Syntax$ReturnStatement = $.$superInit$JavascriptGeneration$Syntax$ReturnStatement;
						this.$superInit$JavascriptGeneration$Syntax$ReturnStatement = dnuCatcher("$superInit$JavascriptGeneration$Syntax$ReturnStatement");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$expression = this._$expression = $.$expression;
						this.$printOn$ = this._$printOn$ = $.$printOn$;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this._$expressionS = $.$expressionS;
						this.$expressionS = dnuCatcher("$expressionS");
						this._$setOnce$expressionS$ = $.$setOnce$expressionS$;
						this.$setOnce$expressionS$ = dnuCatcher("$setOnce$expressionS$");
						this.$enclosingObjects$JavascriptGeneration$Syntax$ReturnStatement = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$ReturnStatement$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`ReturnStatement"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$expressionS$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`ReturnStatement"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`ReturnStatement";
					this.slots = [];
					this.methods = [new MM("expression:", true, null)];
					this.nestedClasses = [];
					this.$expression$ = (function ($expr) {
						return (new this.nonMeta.basicNew()).$instance$initializer($expr);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`ReturnStatement";
							this.$expression$ = this._$expression$ = $.$expression$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$ReturnStatement = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$ReturnStatement = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$Script = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`Script";
				this.name = "JavascriptGeneration`Syntax`Script";
				this.header = "Script statements: statements <List[Node]> = Node (\r(* A series of statements, a top-level node to hold them together. *)|\r	statements_ = statements.\r|)";
				this.slots = [new SM("statements_", false, false)];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`Script", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and: [statements = anotherNode statements]\r)"),
					new MM("statements", false, "public statements ^<List[Node]> = (\r	^statements_\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitScript: self\r)"),
					new MM("statements_", true, null),
					new MM("setOnce`statements_:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$Script = (function ($statements) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$Script$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($statements) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$Script($statements);
					self._$setOnce$statements_$($statements);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$Script$slot._$$equal.call(self, $anotherNode) && self._$statements().$$equal($anotherNode.$statements());
				});
				this.$statements = (function () {
					var self = this;
					return self._$statements_();
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitScript$(self);
				});
				this.$statements_ = (function () {
					return this.$statements_$slot;
				});
				this.$setOnce$statements_$ = (function (v) {
					this.$statements_$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`Script";
						this._$superInit$JavascriptGeneration$Syntax$Script = $.$superInit$JavascriptGeneration$Syntax$Script;
						this.$superInit$JavascriptGeneration$Syntax$Script = dnuCatcher("$superInit$JavascriptGeneration$Syntax$Script");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$statements = this._$statements = $.$statements;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this._$statements_ = $.$statements_;
						this.$statements_ = dnuCatcher("$statements_");
						this._$setOnce$statements_$ = $.$setOnce$statements_$;
						this.$setOnce$statements_$ = dnuCatcher("$setOnce$statements_$");
						this.$enclosingObjects$JavascriptGeneration$Syntax$Script = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$Script$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`Script"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$statements_$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`Script"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`Script";
					this.slots = [];
					this.methods = [new MM("statements:", true, null)];
					this.nestedClasses = [];
					this.$statements$ = (function ($statements) {
						return (new this.nonMeta.basicNew()).$instance$initializer($statements);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`Script";
							this.$statements$ = this._$statements$ = $.$statements$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$Script = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$Script = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$StringLiteral = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`StringLiteral";
				this.name = "JavascriptGeneration`Syntax`StringLiteral";
				this.header = "StringLiteral value: string <String> = Node (|\r	valueS = string.\r|)";
				this.slots = [new SM("valueS", false, false)];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`StringLiteral", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and:\r		[value = anotherNode value]\r)"),
					new MM("isStringLiteral", false, "public isStringLiteral ^<Boolean> = (\r	^true\r)"),
					new MM("printOn:", false, "public printOn: stream = (\r	super printOn: stream.\r	stream nextPutAll: ' ('.\r	value printOn: stream.\r	stream nextPutAll: ')'\r)"),
					new MM("value", false, "public value = (\r	^valueS\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitStringLiteral: self\r)"),
					new MM("valueS", true, null),
					new MM("setOnce`valueS:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$StringLiteral = (function ($string) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$StringLiteral$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($string) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$StringLiteral($string);
					self._$setOnce$valueS$($string);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$StringLiteral$slot._$$equal.call(self, $anotherNode) && self._$value().$$equal($anotherNode.$value());
				});
				this.$isStringLiteral = (function () {
					var self = this;
					return true;
				});
				this.$printOn$ = (function ($stream) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$StringLiteral$slot._$printOn$.call(self, $stream);
					$stream.$nextPutAll$(" (");
					self._$value().$printOn$($stream);
					$stream.$nextPutAll$(")");
					return self;
				});
				this.$value = (function () {
					var self = this;
					return self._$valueS();
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitStringLiteral$(self);
				});
				this.$valueS = (function () {
					return this.$valueS$slot;
				});
				this.$setOnce$valueS$ = (function (v) {
					this.$valueS$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`StringLiteral";
						this._$superInit$JavascriptGeneration$Syntax$StringLiteral = $.$superInit$JavascriptGeneration$Syntax$StringLiteral;
						this.$superInit$JavascriptGeneration$Syntax$StringLiteral = dnuCatcher("$superInit$JavascriptGeneration$Syntax$StringLiteral");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$isStringLiteral = this._$isStringLiteral = $.$isStringLiteral;
						this.$printOn$ = this._$printOn$ = $.$printOn$;
						this.$value = this._$value = $.$value;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this._$valueS = $.$valueS;
						this.$valueS = dnuCatcher("$valueS");
						this._$setOnce$valueS$ = $.$setOnce$valueS$;
						this.$setOnce$valueS$ = dnuCatcher("$setOnce$valueS$");
						this.$enclosingObjects$JavascriptGeneration$Syntax$StringLiteral = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$StringLiteral$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`StringLiteral"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$valueS$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`StringLiteral"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`StringLiteral";
					this.slots = [];
					this.methods = [new MM("value:", true, null)];
					this.nestedClasses = [];
					this.$value$ = (function ($string) {
						return (new this.nonMeta.basicNew()).$instance$initializer($string);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`StringLiteral";
							this.$value$ = this._$value$ = $.$value$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$StringLiteral = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$StringLiteral = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$TernaryOperatorExpression = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`TernaryOperatorExpression";
				this.name = "JavascriptGeneration`Syntax`TernaryOperatorExpression";
				this.header = "TernaryOperatorExpression if: condExpr then: thenExpr else: elseExpr = Node (|\r	public condition = condExpr.\r	public then = thenExpr.\r	public else = elseExpr.\r|)";
				this.slots = [
					new SM("condition", false, false),
					new SM("then", false, false),
					new SM("else", false, false)
				];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`TernaryOperatorExpression", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and:\r		[condition = anotherNode condition and:\r		[then = anotherNode then and:\r		[else = anotherNode else]]]\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitTernaryOperatorExpression: self\r)"),
					new MM("condition", true, null),
					new MM("setOnce`condition:", true, null),
					new MM("then", true, null),
					new MM("setOnce`then:", true, null),
					new MM("else", true, null),
					new MM("setOnce`else:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$TernaryOperatorExpression = (function ($condExpr, $thenExpr, $elseExpr) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($condExpr, $thenExpr, $elseExpr) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$TernaryOperatorExpression($condExpr, $thenExpr, $elseExpr);
					self._$setOnce$condition$($condExpr);
					self._$setOnce$then$($thenExpr);
					self._$setOnce$else$($elseExpr);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot._$$equal.call(self, $anotherNode) && (self._$condition().$$equal($anotherNode.$condition()) && (self._$then().$$equal($anotherNode.$then()) && self._$else().$$equal($anotherNode.$else())));
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitTernaryOperatorExpression$(self);
				});
				this.$condition = (function () {
					return this.$condition$slot;
				});
				this.$setOnce$condition$ = (function (v) {
					this.$condition$slot = v;
					return this;
				});
				this.$then = (function () {
					return this.$then$slot;
				});
				this.$setOnce$then$ = (function (v) {
					this.$then$slot = v;
					return this;
				});
				this.$else = (function () {
					return this.$else$slot;
				});
				this.$setOnce$else$ = (function (v) {
					this.$else$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`TernaryOperatorExpression";
						this._$superInit$JavascriptGeneration$Syntax$TernaryOperatorExpression = $.$superInit$JavascriptGeneration$Syntax$TernaryOperatorExpression;
						this.$superInit$JavascriptGeneration$Syntax$TernaryOperatorExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$TernaryOperatorExpression");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this.$condition = this._$condition = $.$condition;
						this.$setOnce$condition$ = this._$setOnce$condition$ = $.$setOnce$condition$;
						this.$then = this._$then = $.$then;
						this.$setOnce$then$ = this._$setOnce$then$ = $.$setOnce$then$;
						this.$else = this._$else = $.$else;
						this.$setOnce$else$ = this._$setOnce$else$ = $.$setOnce$else$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$TernaryOperatorExpression = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`TernaryOperatorExpression"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$condition$slot = nil;
							this.$then$slot = nil;
							this.$else$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`TernaryOperatorExpression"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`TernaryOperatorExpression";
					this.slots = [];
					this.methods = [new MM("if:then:else:", true, null)];
					this.nestedClasses = [];
					this.$if$then$else$ = (function ($condExpr, $thenExpr, $elseExpr) {
						return (new this.nonMeta.basicNew()).$instance$initializer($condExpr, $thenExpr, $elseExpr);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`TernaryOperatorExpression";
							this.$if$then$else$ = this._$if$then$else$ = $.$if$then$else$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$TernaryOperatorExpression = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$TernaryOperatorExpression = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$ThrowStatement = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`ThrowStatement";
				this.name = "JavascriptGeneration`Syntax`ThrowStatement";
				this.header = "ThrowStatement expression: expr = Node (|\r	expressionS = expr.\r|)";
				this.slots = [new SM("expressionS", false, false)];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`ThrowStatement", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and: [expression = anotherNode expression]\r)"),
					new MM("expression", false, "public expression = (\r	^expressionS\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitThrowStatement: self\r)"),
					new MM("expressionS", true, null),
					new MM("setOnce`expressionS:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$ThrowStatement = (function ($expr) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$ThrowStatement$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($expr) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$ThrowStatement($expr);
					self._$setOnce$expressionS$($expr);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$ThrowStatement$slot._$$equal.call(self, $anotherNode) && self._$expression().$$equal($anotherNode.$expression());
				});
				this.$expression = (function () {
					var self = this;
					return self._$expressionS();
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitThrowStatement$(self);
				});
				this.$expressionS = (function () {
					return this.$expressionS$slot;
				});
				this.$setOnce$expressionS$ = (function (v) {
					this.$expressionS$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`ThrowStatement";
						this._$superInit$JavascriptGeneration$Syntax$ThrowStatement = $.$superInit$JavascriptGeneration$Syntax$ThrowStatement;
						this.$superInit$JavascriptGeneration$Syntax$ThrowStatement = dnuCatcher("$superInit$JavascriptGeneration$Syntax$ThrowStatement");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$expression = this._$expression = $.$expression;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this._$expressionS = $.$expressionS;
						this.$expressionS = dnuCatcher("$expressionS");
						this._$setOnce$expressionS$ = $.$setOnce$expressionS$;
						this.$setOnce$expressionS$ = dnuCatcher("$setOnce$expressionS$");
						this.$enclosingObjects$JavascriptGeneration$Syntax$ThrowStatement = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$ThrowStatement$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`ThrowStatement"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$expressionS$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`ThrowStatement"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`ThrowStatement";
					this.slots = [];
					this.methods = [new MM("expression:", true, null)];
					this.nestedClasses = [];
					this.$expression$ = (function ($expr) {
						return (new this.nonMeta.basicNew()).$instance$initializer($expr);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`ThrowStatement";
							this.$expression$ = this._$expression$ = $.$expression$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$ThrowStatement = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$ThrowStatement = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$TryStatement = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`TryStatement";
				this.name = "JavascriptGeneration`Syntax`TryStatement";
				this.header = "TryStatement block: pb <Block> catch: cvar <IdentifierExpression | nil> with: cb <Block | nil> finally: fb <Block | nil> = Node (\r(* ECMA-262 p. 222 *)|\r	public protectedBlock = pb.\r	public catchVar = cvar.\r	public catchBlock = cb.\r	public finallyBlock = fb.\r|)";
				this.slots = [
					new SM("protectedBlock", false, false),
					new SM("catchVar", false, false),
					new SM("catchBlock", false, false),
					new SM("finallyBlock", false, false)
				];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`TryStatement", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and:\r		[protectedBlock = anotherNode protectedBlock and:\r		[catchVar = anotherNode catchVar and:\r		[catchBlock = anotherNode catchBlock and:\r		[finallyBlock = anotherNode finallyBlock]]]]\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitTryStatement: self\r)"),
					new MM("protectedBlock", true, null),
					new MM("setOnce`protectedBlock:", true, null),
					new MM("catchVar", true, null),
					new MM("setOnce`catchVar:", true, null),
					new MM("catchBlock", true, null),
					new MM("setOnce`catchBlock:", true, null),
					new MM("finallyBlock", true, null),
					new MM("setOnce`finallyBlock:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$TryStatement = (function ($pb, $cvar, $cb, $fb) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$TryStatement$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($pb, $cvar, $cb, $fb) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$TryStatement($pb, $cvar, $cb, $fb);
					self._$setOnce$protectedBlock$($pb);
					self._$setOnce$catchVar$($cvar);
					self._$setOnce$catchBlock$($cb);
					self._$setOnce$finallyBlock$($fb);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$TryStatement$slot._$$equal.call(self, $anotherNode) && (self._$protectedBlock().$$equal($anotherNode.$protectedBlock()) && (self._$catchVar().$$equal($anotherNode.$catchVar()) && (self._$catchBlock().$$equal($anotherNode.$catchBlock()) && self._$finallyBlock().$$equal($anotherNode.$finallyBlock()))));
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitTryStatement$(self);
				});
				this.$protectedBlock = (function () {
					return this.$protectedBlock$slot;
				});
				this.$setOnce$protectedBlock$ = (function (v) {
					this.$protectedBlock$slot = v;
					return this;
				});
				this.$catchVar = (function () {
					return this.$catchVar$slot;
				});
				this.$setOnce$catchVar$ = (function (v) {
					this.$catchVar$slot = v;
					return this;
				});
				this.$catchBlock = (function () {
					return this.$catchBlock$slot;
				});
				this.$setOnce$catchBlock$ = (function (v) {
					this.$catchBlock$slot = v;
					return this;
				});
				this.$finallyBlock = (function () {
					return this.$finallyBlock$slot;
				});
				this.$setOnce$finallyBlock$ = (function (v) {
					this.$finallyBlock$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`TryStatement";
						this._$superInit$JavascriptGeneration$Syntax$TryStatement = $.$superInit$JavascriptGeneration$Syntax$TryStatement;
						this.$superInit$JavascriptGeneration$Syntax$TryStatement = dnuCatcher("$superInit$JavascriptGeneration$Syntax$TryStatement");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this.$protectedBlock = this._$protectedBlock = $.$protectedBlock;
						this.$setOnce$protectedBlock$ = this._$setOnce$protectedBlock$ = $.$setOnce$protectedBlock$;
						this.$catchVar = this._$catchVar = $.$catchVar;
						this.$setOnce$catchVar$ = this._$setOnce$catchVar$ = $.$setOnce$catchVar$;
						this.$catchBlock = this._$catchBlock = $.$catchBlock;
						this.$setOnce$catchBlock$ = this._$setOnce$catchBlock$ = $.$setOnce$catchBlock$;
						this.$finallyBlock = this._$finallyBlock = $.$finallyBlock;
						this.$setOnce$finallyBlock$ = this._$setOnce$finallyBlock$ = $.$setOnce$finallyBlock$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$TryStatement = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$TryStatement$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`TryStatement"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$protectedBlock$slot = nil;
							this.$catchVar$slot = nil;
							this.$catchBlock$slot = nil;
							this.$finallyBlock$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`TryStatement"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`TryStatement";
					this.slots = [];
					this.methods = [new MM("block:catch:with:finally:", true, null)];
					this.nestedClasses = [];
					this.$block$catch$with$finally$ = (function ($pb, $cvar, $cb, $fb) {
						return (new this.nonMeta.basicNew()).$instance$initializer($pb, $cvar, $cb, $fb);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`TryStatement";
							this.$block$catch$with$finally$ = this._$block$catch$with$finally$ = $.$block$catch$with$finally$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$TryStatement = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$TryStatement = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$UnaryOperatorExpression = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`UnaryOperatorExpression";
				this.name = "JavascriptGeneration`Syntax`UnaryOperatorExpression";
				this.header = "UnaryOperatorExpression operator: name <String> postfix: postfix <Boolean> on: node <Node> = Node (\r(* A unary operator application, either prefix or postfix. *)|\r	public operatorName <String> = name.\r	public isPostfix <Boolean> = postfix.\r	public operand <Node> = node.\r|)";
				this.slots = [
					new SM("operatorName", false, false),
					new SM("isPostfix", false, false),
					new SM("operand", false, false)
				];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`UnaryOperatorExpression", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and:\r		[operatorName = anotherNode operatorName and:\r		[isPostfix = anotherNode isPostfix and:\r		[operand = anotherNode operand]]]\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitUnaryOperatorExpression: self\r)"),
					new MM("operatorName", true, null),
					new MM("setOnce`operatorName:", true, null),
					new MM("isPostfix", true, null),
					new MM("setOnce`isPostfix:", true, null),
					new MM("operand", true, null),
					new MM("setOnce`operand:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$UnaryOperatorExpression = (function ($name, $postfix, $node) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($name, $postfix, $node) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$UnaryOperatorExpression($name, $postfix, $node);
					self._$setOnce$operatorName$($name);
					self._$setOnce$isPostfix$($postfix);
					self._$setOnce$operand$($node);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot._$$equal.call(self, $anotherNode) && (self._$operatorName().$$equal($anotherNode.$operatorName()) && (self._$isPostfix().$$equal($anotherNode.$isPostfix()) && self._$operand().$$equal($anotherNode.$operand())));
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitUnaryOperatorExpression$(self);
				});
				this.$operatorName = (function () {
					return this.$operatorName$slot;
				});
				this.$setOnce$operatorName$ = (function (v) {
					this.$operatorName$slot = v;
					return this;
				});
				this.$isPostfix = (function () {
					return this.$isPostfix$slot;
				});
				this.$setOnce$isPostfix$ = (function (v) {
					this.$isPostfix$slot = v;
					return this;
				});
				this.$operand = (function () {
					return this.$operand$slot;
				});
				this.$setOnce$operand$ = (function (v) {
					this.$operand$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`UnaryOperatorExpression";
						this._$superInit$JavascriptGeneration$Syntax$UnaryOperatorExpression = $.$superInit$JavascriptGeneration$Syntax$UnaryOperatorExpression;
						this.$superInit$JavascriptGeneration$Syntax$UnaryOperatorExpression = dnuCatcher("$superInit$JavascriptGeneration$Syntax$UnaryOperatorExpression");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this.$operatorName = this._$operatorName = $.$operatorName;
						this.$setOnce$operatorName$ = this._$setOnce$operatorName$ = $.$setOnce$operatorName$;
						this.$isPostfix = this._$isPostfix = $.$isPostfix;
						this.$setOnce$isPostfix$ = this._$setOnce$isPostfix$ = $.$setOnce$isPostfix$;
						this.$operand = this._$operand = $.$operand;
						this.$setOnce$operand$ = this._$setOnce$operand$ = $.$setOnce$operand$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$UnaryOperatorExpression = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`UnaryOperatorExpression"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$operatorName$slot = nil;
							this.$isPostfix$slot = nil;
							this.$operand$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`UnaryOperatorExpression"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`UnaryOperatorExpression";
					this.slots = [];
					this.methods = [new MM("operator:postfix:on:", true, null)];
					this.nestedClasses = [];
					this.$operator$postfix$on$ = (function ($name, $postfix, $node) {
						return (new this.nonMeta.basicNew()).$instance$initializer($name, $postfix, $node);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`UnaryOperatorExpression";
							this.$operator$postfix$on$ = this._$operator$postfix$on$ = $.$operator$postfix$on$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$UnaryOperatorExpression = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$UnaryOperatorExpression = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$VariableStatement = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`VariableStatement";
				this.name = "JavascriptGeneration`Syntax`VariableStatement";
				this.header = "VariableStatement name: n <IdentifierExpression> initializer: expr <Expression> = Node (\r(* var name [= expression] *)|\r	public name = n.\r	public initializer = expr.\r|)";
				this.slots = [
					new SM("name", false, false),
					new SM("initializer", false, false)
				];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`VariableStatement", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and:\r		[name = anotherNode name and:\r		[initializer = anotherNode initializer]]\r)"),
					new MM("printOn:", false, "public printOn: stream = (\r	super printOn: stream.\r	stream nextPutAll: ' ('.\r	name printOn: stream.\r	stream nextPutAll: ', '.\r	initializer printOn: stream.\r	stream nextPutAll: ')'\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitVariableStatement: self\r)"),
					new MM("name", true, null),
					new MM("setOnce`name:", true, null),
					new MM("initializer", true, null),
					new MM("setOnce`initializer:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$VariableStatement = (function ($n, $expr) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$VariableStatement$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($n, $expr) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$VariableStatement($n, $expr);
					self._$setOnce$name$($n);
					self._$setOnce$initializer$($expr);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$VariableStatement$slot._$$equal.call(self, $anotherNode) && (self._$name().$$equal($anotherNode.$name()) && self._$initializer().$$equal($anotherNode.$initializer()));
				});
				this.$printOn$ = (function ($stream) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$VariableStatement$slot._$printOn$.call(self, $stream);
					$stream.$nextPutAll$(" (");
					self._$name().$printOn$($stream);
					$stream.$nextPutAll$(", ");
					self._$initializer().$printOn$($stream);
					$stream.$nextPutAll$(")");
					return self;
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitVariableStatement$(self);
				});
				this.$name = (function () {
					return this.$name$slot;
				});
				this.$setOnce$name$ = (function (v) {
					this.$name$slot = v;
					return this;
				});
				this.$initializer = (function () {
					return this.$initializer$slot;
				});
				this.$setOnce$initializer$ = (function (v) {
					this.$initializer$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`VariableStatement";
						this._$superInit$JavascriptGeneration$Syntax$VariableStatement = $.$superInit$JavascriptGeneration$Syntax$VariableStatement;
						this.$superInit$JavascriptGeneration$Syntax$VariableStatement = dnuCatcher("$superInit$JavascriptGeneration$Syntax$VariableStatement");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$printOn$ = this._$printOn$ = $.$printOn$;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this.$name = this._$name = $.$name;
						this.$setOnce$name$ = this._$setOnce$name$ = $.$setOnce$name$;
						this.$initializer = this._$initializer = $.$initializer;
						this.$setOnce$initializer$ = this._$setOnce$initializer$ = $.$setOnce$initializer$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$VariableStatement = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$VariableStatement$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`VariableStatement"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$name$slot = nil;
							this.$initializer$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`VariableStatement"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`VariableStatement";
					this.slots = [];
					this.methods = [
						new MM("name:initializer:", true, null),
						new MM("name:", false, "public name: s = (\r	^VariableStatement name: s initializer: nil\r)")
					];
					this.nestedClasses = [];
					this.$name$initializer$ = (function ($n, $expr) {
						return (new this.nonMeta.basicNew()).$instance$initializer($n, $expr);
					});
					this.$name$ = (function ($s) {
						var self = this;
						return self.$enclosingObjects$JavascriptGeneration$Syntax$VariableStatement[0]._$VariableStatement().$name$initializer$($s, nil);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`VariableStatement";
							this.$name$initializer$ = this._$name$initializer$ = $.$name$initializer$;
							this.$name$ = this._$name$ = $.$name$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$VariableStatement = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$VariableStatement = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$VerbatimNode = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for JavascriptGeneration`Syntax`VerbatimNode";
				this.name = "JavascriptGeneration`Syntax`VerbatimNode";
				this.header = "VerbatimNode text: s <String> = Node (\r(* A node holding onto arbitrary text, to be emitted verbatim into the generated Javascript source. Nothing but the text is emitted, however the context may insert additional tokens before or after the text. For example if a verbatim node appears as a statement in a block, it will have a terminating semicolon. *)|\r	public text = s.\r|)";
				this.slots = [new SM("text", false, false)];
				this.methods = [
					new MM("superInit`JavascriptGeneration`Syntax`VerbatimNode", true, "Node"),
					new MM("instance`initializer", true, "Node"),
					new MM("=", false, "public = anotherNode = (\r	^super = anotherNode and: [text = anotherNode text]\r)"),
					new MM("visitBy:", false, "public visitBy: visitor = (\r	^visitor visitVerbatimNode: self\r)"),
					new MM("text", true, null),
					new MM("setOnce`text:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$JavascriptGeneration$Syntax$VerbatimNode = (function ($s) {
					var self = this;
					self.$super$JavascriptGeneration$Syntax$VerbatimNode$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($s) {
					var self = this;
					self._$superInit$JavascriptGeneration$Syntax$VerbatimNode($s);
					self._$setOnce$text$($s);
					return self;
				});
				this.$$equal = (function ($anotherNode) {
					var self = this;
					return self.$super$JavascriptGeneration$Syntax$VerbatimNode$slot._$$equal.call(self, $anotherNode) && self._$text().$$equal($anotherNode.$text());
				});
				this.$visitBy$ = (function ($visitor) {
					var self = this;
					return $visitor.$visitVerbatimNode$(self);
				});
				this.$text = (function () {
					return this.$text$slot;
				});
				this.$setOnce$text$ = (function (v) {
					this.$text$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for JavascriptGeneration`Syntax`VerbatimNode";
						this._$superInit$JavascriptGeneration$Syntax$VerbatimNode = $.$superInit$JavascriptGeneration$Syntax$VerbatimNode;
						this.$superInit$JavascriptGeneration$Syntax$VerbatimNode = dnuCatcher("$superInit$JavascriptGeneration$Syntax$VerbatimNode");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$$equal = this._$$equal = $.$$equal;
						this.$visitBy$ = this._$visitBy$ = $.$visitBy$;
						this.$text = this._$text = $.$text;
						this.$setOnce$text$ = this._$setOnce$text$ = $.$setOnce$text$;
						this.$enclosingObjects$JavascriptGeneration$Syntax$VerbatimNode = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax$VerbatimNode$slot = runtimeSuperclass;
						this["JavascriptGeneration`Syntax`VerbatimNode"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$text$slot = nil;
						});
						this.basicNew = this["JavascriptGeneration`Syntax`VerbatimNode"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax`VerbatimNode";
					this.slots = [];
					this.methods = [new MM("text:", true, null)];
					this.nestedClasses = [];
					this.$text$ = (function ($s) {
						return (new this.nonMeta.basicNew()).$instance$initializer($s);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for JavascriptGeneration`Syntax`VerbatimNode";
							this.$text$ = this._$text$ = $.$text$;
							this.$enclosingObjects$JavascriptGeneration$Syntax$VerbatimNode = enclosingObjects;
							this.$super$JavascriptGeneration$Syntax$VerbatimNode = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$JavascriptGeneration$Syntax$ArrayExpression.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$AssignmentExpression.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$Block.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$BooleanLiteral.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$CallExpression.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$ForInStatement.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$ForStatement.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$FunctionExpression.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$FunctionStatement.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$IdentifierExpression.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$IfStatement.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$IntegerLiteral.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$MemberExpression.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$NewExpression.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$Node.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$ObjectLiteral.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$OperatorExpression.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$ReturnStatement.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$Script.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$StringLiteral.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$TernaryOperatorExpression.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$ThrowStatement.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$TryStatement.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$UnaryOperatorExpression.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$VariableStatement.enclosingMixin = this;
			this.$JavascriptGeneration$Syntax$VerbatimNode.enclosingMixin = this;
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for JavascriptGeneration`Syntax";
					this._$superInit$JavascriptGeneration$Syntax = $.$superInit$JavascriptGeneration$Syntax;
					this.$superInit$JavascriptGeneration$Syntax = dnuCatcher("$superInit$JavascriptGeneration$Syntax");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$ArrayExpression = this._$ArrayExpression = $.$ArrayExpression;
					this.$AssignmentExpression = this._$AssignmentExpression = $.$AssignmentExpression;
					this.$Block = this._$Block = $.$Block;
					this.$BooleanLiteral = this._$BooleanLiteral = $.$BooleanLiteral;
					this.$CallExpression = this._$CallExpression = $.$CallExpression;
					this.$ForInStatement = this._$ForInStatement = $.$ForInStatement;
					this.$ForStatement = this._$ForStatement = $.$ForStatement;
					this.$FunctionExpression = this._$FunctionExpression = $.$FunctionExpression;
					this.$FunctionStatement = this._$FunctionStatement = $.$FunctionStatement;
					this.$IdentifierExpression = this._$IdentifierExpression = $.$IdentifierExpression;
					this.$IfStatement = this._$IfStatement = $.$IfStatement;
					this.$IntegerLiteral = this._$IntegerLiteral = $.$IntegerLiteral;
					this.$MemberExpression = this._$MemberExpression = $.$MemberExpression;
					this.$NewExpression = this._$NewExpression = $.$NewExpression;
					this._$Node = $.$Node;
					this.$Node = dnuCatcher("$Node");
					this.$ObjectLiteral = this._$ObjectLiteral = $.$ObjectLiteral;
					this.$OperatorExpression = this._$OperatorExpression = $.$OperatorExpression;
					this.$ReturnStatement = this._$ReturnStatement = $.$ReturnStatement;
					this.$Script = this._$Script = $.$Script;
					this.$StringLiteral = this._$StringLiteral = $.$StringLiteral;
					this.$TernaryOperatorExpression = this._$TernaryOperatorExpression = $.$TernaryOperatorExpression;
					this.$ThrowStatement = this._$ThrowStatement = $.$ThrowStatement;
					this.$TryStatement = this._$TryStatement = $.$TryStatement;
					this.$UnaryOperatorExpression = this._$UnaryOperatorExpression = $.$UnaryOperatorExpression;
					this.$VariableStatement = this._$VariableStatement = $.$VariableStatement;
					this.$VerbatimNode = this._$VerbatimNode = $.$VerbatimNode;
					this.$JavascriptGeneration$Syntax$ArrayExpression = this._$JavascriptGeneration$Syntax$ArrayExpression = $.$JavascriptGeneration$Syntax$ArrayExpression;
					this.$JavascriptGeneration$Syntax$ArrayExpression$ = this._$JavascriptGeneration$Syntax$ArrayExpression$ = $.$JavascriptGeneration$Syntax$ArrayExpression$;
					this.$JavascriptGeneration$Syntax$AssignmentExpression = this._$JavascriptGeneration$Syntax$AssignmentExpression = $.$JavascriptGeneration$Syntax$AssignmentExpression;
					this.$JavascriptGeneration$Syntax$AssignmentExpression$ = this._$JavascriptGeneration$Syntax$AssignmentExpression$ = $.$JavascriptGeneration$Syntax$AssignmentExpression$;
					this.$JavascriptGeneration$Syntax$Block = this._$JavascriptGeneration$Syntax$Block = $.$JavascriptGeneration$Syntax$Block;
					this.$JavascriptGeneration$Syntax$Block$ = this._$JavascriptGeneration$Syntax$Block$ = $.$JavascriptGeneration$Syntax$Block$;
					this.$JavascriptGeneration$Syntax$BooleanLiteral = this._$JavascriptGeneration$Syntax$BooleanLiteral = $.$JavascriptGeneration$Syntax$BooleanLiteral;
					this.$JavascriptGeneration$Syntax$BooleanLiteral$ = this._$JavascriptGeneration$Syntax$BooleanLiteral$ = $.$JavascriptGeneration$Syntax$BooleanLiteral$;
					this.$JavascriptGeneration$Syntax$CallExpression = this._$JavascriptGeneration$Syntax$CallExpression = $.$JavascriptGeneration$Syntax$CallExpression;
					this.$JavascriptGeneration$Syntax$CallExpression$ = this._$JavascriptGeneration$Syntax$CallExpression$ = $.$JavascriptGeneration$Syntax$CallExpression$;
					this.$JavascriptGeneration$Syntax$ForInStatement = this._$JavascriptGeneration$Syntax$ForInStatement = $.$JavascriptGeneration$Syntax$ForInStatement;
					this.$JavascriptGeneration$Syntax$ForInStatement$ = this._$JavascriptGeneration$Syntax$ForInStatement$ = $.$JavascriptGeneration$Syntax$ForInStatement$;
					this.$JavascriptGeneration$Syntax$ForStatement = this._$JavascriptGeneration$Syntax$ForStatement = $.$JavascriptGeneration$Syntax$ForStatement;
					this.$JavascriptGeneration$Syntax$ForStatement$ = this._$JavascriptGeneration$Syntax$ForStatement$ = $.$JavascriptGeneration$Syntax$ForStatement$;
					this.$JavascriptGeneration$Syntax$FunctionExpression = this._$JavascriptGeneration$Syntax$FunctionExpression = $.$JavascriptGeneration$Syntax$FunctionExpression;
					this.$JavascriptGeneration$Syntax$FunctionExpression$ = this._$JavascriptGeneration$Syntax$FunctionExpression$ = $.$JavascriptGeneration$Syntax$FunctionExpression$;
					this.$JavascriptGeneration$Syntax$FunctionStatement = this._$JavascriptGeneration$Syntax$FunctionStatement = $.$JavascriptGeneration$Syntax$FunctionStatement;
					this.$JavascriptGeneration$Syntax$FunctionStatement$ = this._$JavascriptGeneration$Syntax$FunctionStatement$ = $.$JavascriptGeneration$Syntax$FunctionStatement$;
					this.$JavascriptGeneration$Syntax$IdentifierExpression = this._$JavascriptGeneration$Syntax$IdentifierExpression = $.$JavascriptGeneration$Syntax$IdentifierExpression;
					this.$JavascriptGeneration$Syntax$IdentifierExpression$ = this._$JavascriptGeneration$Syntax$IdentifierExpression$ = $.$JavascriptGeneration$Syntax$IdentifierExpression$;
					this.$JavascriptGeneration$Syntax$IfStatement = this._$JavascriptGeneration$Syntax$IfStatement = $.$JavascriptGeneration$Syntax$IfStatement;
					this.$JavascriptGeneration$Syntax$IfStatement$ = this._$JavascriptGeneration$Syntax$IfStatement$ = $.$JavascriptGeneration$Syntax$IfStatement$;
					this.$JavascriptGeneration$Syntax$IntegerLiteral = this._$JavascriptGeneration$Syntax$IntegerLiteral = $.$JavascriptGeneration$Syntax$IntegerLiteral;
					this.$JavascriptGeneration$Syntax$IntegerLiteral$ = this._$JavascriptGeneration$Syntax$IntegerLiteral$ = $.$JavascriptGeneration$Syntax$IntegerLiteral$;
					this.$JavascriptGeneration$Syntax$MemberExpression = this._$JavascriptGeneration$Syntax$MemberExpression = $.$JavascriptGeneration$Syntax$MemberExpression;
					this.$JavascriptGeneration$Syntax$MemberExpression$ = this._$JavascriptGeneration$Syntax$MemberExpression$ = $.$JavascriptGeneration$Syntax$MemberExpression$;
					this.$JavascriptGeneration$Syntax$NewExpression = this._$JavascriptGeneration$Syntax$NewExpression = $.$JavascriptGeneration$Syntax$NewExpression;
					this.$JavascriptGeneration$Syntax$NewExpression$ = this._$JavascriptGeneration$Syntax$NewExpression$ = $.$JavascriptGeneration$Syntax$NewExpression$;
					this.$JavascriptGeneration$Syntax$Node = this._$JavascriptGeneration$Syntax$Node = $.$JavascriptGeneration$Syntax$Node;
					this.$JavascriptGeneration$Syntax$Node$ = this._$JavascriptGeneration$Syntax$Node$ = $.$JavascriptGeneration$Syntax$Node$;
					this.$JavascriptGeneration$Syntax$ObjectLiteral = this._$JavascriptGeneration$Syntax$ObjectLiteral = $.$JavascriptGeneration$Syntax$ObjectLiteral;
					this.$JavascriptGeneration$Syntax$ObjectLiteral$ = this._$JavascriptGeneration$Syntax$ObjectLiteral$ = $.$JavascriptGeneration$Syntax$ObjectLiteral$;
					this.$JavascriptGeneration$Syntax$OperatorExpression = this._$JavascriptGeneration$Syntax$OperatorExpression = $.$JavascriptGeneration$Syntax$OperatorExpression;
					this.$JavascriptGeneration$Syntax$OperatorExpression$ = this._$JavascriptGeneration$Syntax$OperatorExpression$ = $.$JavascriptGeneration$Syntax$OperatorExpression$;
					this.$JavascriptGeneration$Syntax$ReturnStatement = this._$JavascriptGeneration$Syntax$ReturnStatement = $.$JavascriptGeneration$Syntax$ReturnStatement;
					this.$JavascriptGeneration$Syntax$ReturnStatement$ = this._$JavascriptGeneration$Syntax$ReturnStatement$ = $.$JavascriptGeneration$Syntax$ReturnStatement$;
					this.$JavascriptGeneration$Syntax$Script = this._$JavascriptGeneration$Syntax$Script = $.$JavascriptGeneration$Syntax$Script;
					this.$JavascriptGeneration$Syntax$Script$ = this._$JavascriptGeneration$Syntax$Script$ = $.$JavascriptGeneration$Syntax$Script$;
					this.$JavascriptGeneration$Syntax$StringLiteral = this._$JavascriptGeneration$Syntax$StringLiteral = $.$JavascriptGeneration$Syntax$StringLiteral;
					this.$JavascriptGeneration$Syntax$StringLiteral$ = this._$JavascriptGeneration$Syntax$StringLiteral$ = $.$JavascriptGeneration$Syntax$StringLiteral$;
					this.$JavascriptGeneration$Syntax$TernaryOperatorExpression = this._$JavascriptGeneration$Syntax$TernaryOperatorExpression = $.$JavascriptGeneration$Syntax$TernaryOperatorExpression;
					this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$ = this._$JavascriptGeneration$Syntax$TernaryOperatorExpression$ = $.$JavascriptGeneration$Syntax$TernaryOperatorExpression$;
					this.$JavascriptGeneration$Syntax$ThrowStatement = this._$JavascriptGeneration$Syntax$ThrowStatement = $.$JavascriptGeneration$Syntax$ThrowStatement;
					this.$JavascriptGeneration$Syntax$ThrowStatement$ = this._$JavascriptGeneration$Syntax$ThrowStatement$ = $.$JavascriptGeneration$Syntax$ThrowStatement$;
					this.$JavascriptGeneration$Syntax$TryStatement = this._$JavascriptGeneration$Syntax$TryStatement = $.$JavascriptGeneration$Syntax$TryStatement;
					this.$JavascriptGeneration$Syntax$TryStatement$ = this._$JavascriptGeneration$Syntax$TryStatement$ = $.$JavascriptGeneration$Syntax$TryStatement$;
					this.$JavascriptGeneration$Syntax$UnaryOperatorExpression = this._$JavascriptGeneration$Syntax$UnaryOperatorExpression = $.$JavascriptGeneration$Syntax$UnaryOperatorExpression;
					this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$ = this._$JavascriptGeneration$Syntax$UnaryOperatorExpression$ = $.$JavascriptGeneration$Syntax$UnaryOperatorExpression$;
					this.$JavascriptGeneration$Syntax$VariableStatement = this._$JavascriptGeneration$Syntax$VariableStatement = $.$JavascriptGeneration$Syntax$VariableStatement;
					this.$JavascriptGeneration$Syntax$VariableStatement$ = this._$JavascriptGeneration$Syntax$VariableStatement$ = $.$JavascriptGeneration$Syntax$VariableStatement$;
					this.$JavascriptGeneration$Syntax$VerbatimNode = this._$JavascriptGeneration$Syntax$VerbatimNode = $.$JavascriptGeneration$Syntax$VerbatimNode;
					this.$JavascriptGeneration$Syntax$VerbatimNode$ = this._$JavascriptGeneration$Syntax$VerbatimNode$ = $.$JavascriptGeneration$Syntax$VerbatimNode$;
					this.$enclosingObjects$JavascriptGeneration$Syntax = enclosingObjects;
					this.$super$JavascriptGeneration$Syntax$slot = runtimeSuperclass;
					this["JavascriptGeneration`Syntax"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$JavascriptGeneration$Syntax$ArrayExpression$slot = nil;
						this.$JavascriptGeneration$Syntax$AssignmentExpression$slot = nil;
						this.$JavascriptGeneration$Syntax$Block$slot = nil;
						this.$JavascriptGeneration$Syntax$BooleanLiteral$slot = nil;
						this.$JavascriptGeneration$Syntax$CallExpression$slot = nil;
						this.$JavascriptGeneration$Syntax$ForInStatement$slot = nil;
						this.$JavascriptGeneration$Syntax$ForStatement$slot = nil;
						this.$JavascriptGeneration$Syntax$FunctionExpression$slot = nil;
						this.$JavascriptGeneration$Syntax$FunctionStatement$slot = nil;
						this.$JavascriptGeneration$Syntax$IdentifierExpression$slot = nil;
						this.$JavascriptGeneration$Syntax$IfStatement$slot = nil;
						this.$JavascriptGeneration$Syntax$IntegerLiteral$slot = nil;
						this.$JavascriptGeneration$Syntax$MemberExpression$slot = nil;
						this.$JavascriptGeneration$Syntax$NewExpression$slot = nil;
						this.$JavascriptGeneration$Syntax$Node$slot = nil;
						this.$JavascriptGeneration$Syntax$ObjectLiteral$slot = nil;
						this.$JavascriptGeneration$Syntax$OperatorExpression$slot = nil;
						this.$JavascriptGeneration$Syntax$ReturnStatement$slot = nil;
						this.$JavascriptGeneration$Syntax$Script$slot = nil;
						this.$JavascriptGeneration$Syntax$StringLiteral$slot = nil;
						this.$JavascriptGeneration$Syntax$TernaryOperatorExpression$slot = nil;
						this.$JavascriptGeneration$Syntax$ThrowStatement$slot = nil;
						this.$JavascriptGeneration$Syntax$TryStatement$slot = nil;
						this.$JavascriptGeneration$Syntax$UnaryOperatorExpression$slot = nil;
						this.$JavascriptGeneration$Syntax$VariableStatement$slot = nil;
						this.$JavascriptGeneration$Syntax$VerbatimNode$slot = nil;
					});
					this.basicNew = this["JavascriptGeneration`Syntax"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for JavascriptGeneration`Syntax";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for JavascriptGeneration`Syntax";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$JavascriptGeneration$Syntax = enclosingObjects;
						this.$super$JavascriptGeneration$Syntax = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$JavascriptGeneration$Writer = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for JavascriptGeneration`Writer";
			this.name = "JavascriptGeneration`Writer";
			this.header = "Writer = (\r(* Writes out a tree of Javascript syntax elements. *)|\r	private output <WriteStream>\r	private tabLevel <Integer>\r	private stringTranslation = Dictionary new.\r|stringTranslation at: \"\\\" put: '\\\\'.\r	stringTranslation at: Character cr put: '\\r'.\r	stringTranslation at: Character lf put: '\\n'.\r	stringTranslation at:  \"\"\" put: '\\\"')";
			this.slots = [
				new SM("output", true, false),
				new SM("tabLevel", true, false),
				new SM("stringTranslation", false, false)
			];
			this.methods = [
				new MM("superInit`JavascriptGeneration`Writer", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("contents", false, "contents ^<String> = (\r	(* Answer the Javascript source generated last. *)\r	^output contents\r)"),
				new MM("generateSourceFor:", false, "public generateSourceFor: node <Node> ^<String> = (\r	(* Generate and answer Javascript source to represent node. Any previously generated output is lost. *)\r	generateSourceFor: node on: (WriteStream on: (String new: 100)).\r	^contents\r)"),
				new MM("generateSourceFor:on:", false, "public generateSourceFor: node <Node> on: stream <WriteStream> = (\r	(* Generate Javascript source to represent the node, writing it out to the stream. *)\r	beginNewWriteCycleUsing: stream.\r	node visitBy: self.\r)"),
				new MM("visitArrayExpression:", false, "public visitArrayExpression: node <ArrayExpression> = (\r	| elements |\r	elements: node elements.\r	elements isEmpty ifTrue:\r		[^write: '[]'].\r	elements size = 1 ifTrue:\r		[write: '['.\r		elements first visitBy: self.\r		^write: ']'].\r	write: '['.\r	indentCr.\r	elements\r		do:\r			[:each | each visitBy: self]\r		separatedBy:\r			[write: ','.\r			cr].\r	unindentCr.\r	write: ']'\r)"),
				new MM("visitForInStatement:", false, "public visitForInStatement: node = (\r	write: 'for ('.\r	node varName visitBy: self.\r	write: ' in '.\r	node expression visitBy: self.\r	write: ') '.\r	node body asBlock visitBy: self.\r)"),
				new MM("visitForStatement:", false, "public visitForStatement: node = (\r	write: 'for ('.\r	node initExpression visitBy: self.\r	write: '; '.\r	node testExpression visitBy: self.\r	write: '; '.\r	node incrementExpression visitBy: self.\r	write: ') '.\r	node body asBlock visitBy: self.\r)"),
				new MM("visitFunctionStatement:", false, "public visitFunctionStatement: node <FunctionStatement> = (\r	write: 'function '.\r	node name ifNotNil:\r		[:name | \r		name visitBy: self.\r		write: ' '].\r	write: '('.\r	node parameters\r		do: [:each | each visitBy: self]\r		separatedBy: [write: ', '].\r	write: ') '.\r	writeBlock: node body.\r)"),
				new MM("visitOperatorExpression:", false, "public visitOperatorExpression: node <OperatorExpression> = (\r	| parenthesizeLeft parenthesizeRight |\r	parenthesizeLeft:: node left isOperatorExpression.\r	parenthesizeRight:: node right isOperatorExpression.\r	parenthesizeLeft ifTrue: [write: '('].\r	node left visitBy: self.\r	parenthesizeLeft ifTrue: [write: ') '] ifFalse: [write: ' '].\r	node operatorName visitBy: self.\r	parenthesizeRight ifTrue: [write: ' ('] ifFalse: [write: ' '].\r	node right visitBy: self.\r	parenthesizeRight ifTrue: [write: ')']\r)"),
				new MM("visitScript:", false, "public visitScript: node <Script> = (\r	node statements\r		do:\r			[:each |\r			each visitBy: self.\r			write: ';']\r		separatedBy:\r			[cr.\r			cr].\r)"),
				new MM("visitStringLiteral:", false, "public visitStringLiteral: node <StringLiteral> = (\r\r	write: '\"'.\r	node value do:\r		[:each | | s |\r		s:: stringTranslation\r			at: each\r			ifAbsent: [{each}].\r		write: s].\r	write: '\"'\r)"),
				new MM("visitTernaryOperatorExpression:", false, "public visitTernaryOperatorExpression: node = (\r	write: '('.\r	node condition visitBy: self.\r	write: ' ? '.\r	node then visitBy: self.\r	write: ' : '.\r	node else visitBy: self.\r	write: ')'\r)"),
				new MM("visitThrowStatement:", false, "public visitThrowStatement: node <ThrowStatement> = (\r	write: 'throw '.\r	node expression visitBy: self\r)"),
				new MM("visitUnaryOperatorExpression:", false, "public visitUnaryOperatorExpression: node <UnaryOperatorExpression> = (\r	| isPostfix isOnOperator |\r	isPostfix:: node isPostfix.\r	isOnOperator:: node operand isOperatorExpression.\r	isPostfix ifFalse: [node operatorName visitBy: self].\r	isOnOperator ifTrue: [write: '(']. (* not always necessary, but safer *)\r	node operand visitBy: self.\r	isOnOperator ifTrue: [write: ')'].\r	isPostfix ifTrue: [node operatorName visitBy: self].\r)"),
				new MM("visitVerbatimNode:", false, "public visitVerbatimNode: node = (\r	write: node text\r)"),
				new MM("visitAssignmentExpression:", false, "public visitAssignmentExpression: node <AssignmentExpression> = (\r	node leftHandSide visitBy: self.\r	write: ' = '.\r	node rightHandSide visitBy: self.\r)"),
				new MM("visitBlock:", false, "public visitBlock: node <Block> = (\r	| statements |\r	statements: node statements.\r	statements isEmpty ifTrue:\r		[^write: '{}'].\r	write: '{'.\r	indentCr.\r	statements\r		do:\r			[:each |\r			each visitBy: self.\r			write: ';']\r		separatedBy:\r			[cr].\r	unindentCr.\r	write: '}'\r)"),
				new MM("visitBooleanLiteral:", false, "public visitBooleanLiteral: node <BooleanLiteral> = (\r	write:: node value ifTrue: ['true'] ifFalse: ['false']\r)"),
				new MM("visitCallExpression:", false, "public visitCallExpression: node <CallExpression> = (\r	node function visitBy: self.\r	write: '('.\r	node arguments\r		do:\r			[:arg |\r			arg visitBy: self]\r		separatedBy:\r			[write: ', '].\r	write: ')'\r)"),
				new MM("visitFunctionExpression:", false, "public visitFunctionExpression: node <FunctionExpression> = (\r	write: '('.\r	visitFunctionStatement: node.\r	write: ')'\r)"),
				new MM("visitIdentifierExpression:", false, "public visitIdentifierExpression: node <IdentifierExpression> = (\r	write: node name\r)"),
				new MM("visitIfStatement:", false, "public visitIfStatement: node <IfStatement> = (\r	write: 'if ('.\r	node expression visitBy: self.\r	write: ') '.\r	writeBlock: node thenStatement asBlock.\r	node elseStatement ifNotNil:\r		[:else |\r		write: ' else '.\r		writeBlock: node elseStatement asBlock]\r)"),
				new MM("visitIntegerLiteral:", false, "public visitIntegerLiteral: node <IntegerLiteral> = (\r	write: node value printString\r)"),
				new MM("visitMemberExpression:", false, "public visitMemberExpression: node <MemberExpression> = (\r	| parenthesize |\r	parenthesize::\r		(node primary isIdentifier \r		or: [node primary isMemberExpression\r		or: [node primary isCallExpression]]) not.\r	parenthesize ifTrue: [write: '('].\r	node primary visitBy: self.\r	parenthesize ifTrue: [write: ')'].\r	\r	(node property isStringLiteral and: [isLegalIdentifier: node property value]) \r		ifTrue: 	[write: '.'.\r				 write: node property value]\r		ifFalse: [write: '['.\r				 node property visitBy: self.\r				 write: ']'.]\r)"),
				new MM("visitNewExpression:", false, "public visitNewExpression: node <NewExpression> = (\r	write: 'new '.\r	node expression visitBy: self.\r	write: '('.\r	node arguments\r		do:\r			[:arg |\r			arg visitBy: self]\r		separatedBy:\r			[write: ', '].\r	write: ')'\r)"),
				new MM("visitObjectLiteral:", false, "public visitObjectLiteral: node <ObjectLiteral> = (\r	node slotCount = 0 ifTrue: \r		[write: '{}'.\r		^self].\r	write: '{'.\r	indentCr.\r	node\r		slotsDo:\r			[:name :value |\r			| nameIsQuoted |\r			(* Fancy slot names can be pre-quoted. *)\r			nameIsQuoted:: name first = \"'\".\r			nameIsQuoted ifFalse: [write: ''''].\r			write: name.\r			nameIsQuoted ifFalse: [write: ''''].\r			write: ': '.\r			value visitBy: self]\r		betweenDo:\r			[write: ','.\r			cr].\r	unindentCr.\r	write: '}'\r)"),
				new MM("visitReturnStatement:", false, "public visitReturnStatement: node <ReturnStatement> = (\r	write: 'return'.\r	node expression ifNotNil:\r		[:expr |\r		write: ' '.\r		expr visitBy: self]\r)"),
				new MM("visitTryStatement:", false, "public visitTryStatement: node <TryStatement> = (\r	write: 'try '.\r	writeBlock: node protectedBlock.\r	node catchBlock ifNotNil:\r		[:catch |\r		write: ' catch ('.\r		node catchVar visitBy: self.\r		write: ') '.\r		writeBlock: catch].\r	node finallyBlock ifNotNil:\r		[:finally |\r		write: ' finally '.\r		writeBlock: finally]\r)"),
				new MM("visitVariableStatement:", false, "public visitVariableStatement: node <VariableStatement> = (\r	write: 'var '.\r	node name visitBy: self.\r	node initializer ifNotNil:\r		[:expr |\r		write: ' = '.\r		expr visitBy: self].\r)"),
				new MM("beginNewWriteCycleUsing:", false, "beginNewWriteCycleUsing: stream <WriteStream> = (\r	output:: stream.\r	tabLevel:: 0.\r)"),
				new MM("cr", false, "cr = (\r	(* Write a newline and the next line's indentation. *)\r	output cr.\r	tabLevel timesRepeat: [output tab]\r)"),
				new MM("inIndentedBlock:", false, "inIndentedBlock: closure = (\r	write: '{'.\r	indentCr.\r	^closure ensure: \r		[unindentCr.\r		write: '}']\r)"),
				new MM("indentCr", false, "indentCr = (\r	tabLevel: tabLevel + 1.\r	cr\r)"),
				new MM("unindentCr", false, "unindentCr = (\r	tabLevel:: 0 max: tabLevel - 1.\r	cr\r)"),
				new MM("write:", false, "write: text <String> = (\r	output nextPutAll: text\r)"),
				new MM("writeBlock:", false, "writeBlock: block = (\r	| statements |\r	statements: block statements.\r	statements isEmpty\r		ifTrue: [write: '{}']\r		ifFalse:\r			[inIndentedBlock:\r				[statements\r					do: \r						[:each |\r						each visitBy: self.\r						write: ';']\r					separatedBy:\r						[cr]]]\r)"),
				new MM("output", true, null),
				new MM("output:", true, null),
				new MM("tabLevel", true, null),
				new MM("tabLevel:", true, null),
				new MM("stringTranslation", true, null),
				new MM("setOnce`stringTranslation:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$JavascriptGeneration$Writer = (function () {
				var self = this;
				self.$super$JavascriptGeneration$Writer$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$JavascriptGeneration$Writer();
				$1.$setOnce$stringTranslation$.call(self, $0.$Dictionary.call(self.$enclosingObjects$JavascriptGeneration$Writer[0]).$new());
				$1.$stringTranslation.call(self).$at$put$("\\", "\\\\");
				$1.$stringTranslation.call(self).$at$put$(self._$Character().$cr(), "\\r");
				$1.$stringTranslation.call(self).$at$put$(self._$Character().$lf(), "\\n");
				$1.$stringTranslation.call(self).$at$put$("\"", "\\\"");
				return self;
			});
			this.$contents = (function () {
				var self = this;
				return $1.$output.call(self).$contents();
			});
			this.$generateSourceFor$ = (function ($node) {
				var self = this;
				self._$generateSourceFor$on$($node, $0.$WriteStream.call(self.$enclosingObjects$JavascriptGeneration$Writer[0]).$on$(self._$String().$new$(100)));
				return self._$contents();
			});
			this.$generateSourceFor$on$ = (function ($node, $stream) {
				var self = this;
				self._$beginNewWriteCycleUsing$($stream);
				$node.$visitBy$(self);
				return self;
			});
			this.$visitArrayExpression$ = (function ($node) {
				var self = this;
				var $elements = nil;
				$elements = $node.$elements();
				if ($elements.$isEmpty()) {
					return self._$write$("[]");
				} else {
					nil;
				};
				if ($elements.$size().$$equal(1)) {
					self._$write$("[");
					$elements.$first().$visitBy$(self);
					return self._$write$("]");
				} else {
					nil;
				};
				self._$write$("[");
				self._$indentCr();
				$elements.$do$separatedBy$((function ($each) {
					return $each.$visitBy$(self);
				}), (function () {
					self._$write$(",");
					return self._$cr();
				}));
				self._$unindentCr();
				self._$write$("]");
				return self;
			});
			this.$visitForInStatement$ = (function ($node) {
				var self = this;
				self._$write$("for (");
				$node.$varName().$visitBy$(self);
				self._$write$(" in ");
				$node.$expression().$visitBy$(self);
				self._$write$(") ");
				$node.$body().$asBlock().$visitBy$(self);
				return self;
			});
			this.$visitForStatement$ = (function ($node) {
				var self = this;
				self._$write$("for (");
				$node.$initExpression().$visitBy$(self);
				self._$write$("; ");
				$node.$testExpression().$visitBy$(self);
				self._$write$("; ");
				$node.$incrementExpression().$visitBy$(self);
				self._$write$(") ");
				$node.$body().$asBlock().$visitBy$(self);
				return self;
			});
			this.$visitFunctionStatement$ = (function ($node) {
				var self = this;
				self._$write$("function ");
				$node.$name().$ifNotNil$((function ($name) {
					$name.$visitBy$(self);
					return self._$write$(" ");
				}));
				self._$write$("(");
				$node.$parameters().$do$separatedBy$((function ($each) {
					return $each.$visitBy$(self);
				}), (function () {
					return self._$write$(", ");
				}));
				self._$write$(") ");
				self._$writeBlock$($node.$body());
				return self;
			});
			this.$visitOperatorExpression$ = (function ($node) {
				var self = this;
				var $parenthesizeLeft = nil;
				var $parenthesizeRight = nil;
				$parenthesizeLeft = $node.$left().$isOperatorExpression();
				$parenthesizeRight = $node.$right().$isOperatorExpression();
				if ($parenthesizeLeft) {
					self._$write$("(");
				} else {
					nil;
				};
				$node.$left().$visitBy$(self);
				if ($parenthesizeLeft) {
					self._$write$(") ");
				} else {
					self._$write$(" ");
				};
				$node.$operatorName().$visitBy$(self);
				if ($parenthesizeRight) {
					self._$write$(" (");
				} else {
					self._$write$(" ");
				};
				$node.$right().$visitBy$(self);
				if ($parenthesizeRight) {
					self._$write$(")");
				} else {
					nil;
				};
				return self;
			});
			this.$visitScript$ = (function ($node) {
				var self = this;
				$node.$statements().$do$separatedBy$((function ($each) {
					$each.$visitBy$(self);
					return self._$write$(";");
				}), (function () {
					self._$cr();
					return self._$cr();
				}));
				return self;
			});
			this.$visitStringLiteral$ = (function ($node) {
				var self = this;
				self._$write$("\"");
				$node.$value().$do$((function ($each) {
					var $s = nil;
					$s = $1.$stringTranslation.call(self).$at$ifAbsent$($each, (function () {
						return [$each];
					}));
					return self._$write$($s);
				}));
				self._$write$("\"");
				return self;
			});
			this.$visitTernaryOperatorExpression$ = (function ($node) {
				var self = this;
				self._$write$("(");
				$node.$condition().$visitBy$(self);
				self._$write$(" ? ");
				$node.$then().$visitBy$(self);
				self._$write$(" : ");
				$node.$else().$visitBy$(self);
				self._$write$(")");
				return self;
			});
			this.$visitThrowStatement$ = (function ($node) {
				var self = this;
				self._$write$("throw ");
				$node.$expression().$visitBy$(self);
				return self;
			});
			this.$visitUnaryOperatorExpression$ = (function ($node) {
				var self = this;
				var $isPostfix = nil;
				var $isOnOperator = nil;
				$isPostfix = $node.$isPostfix();
				$isOnOperator = $node.$operand().$isOperatorExpression();
				if (!$isPostfix) {
					$node.$operatorName().$visitBy$(self);
				} else {
					nil;
				};
				if ($isOnOperator) {
					self._$write$("(");
				} else {
					nil;
				};
				$node.$operand().$visitBy$(self);
				if ($isOnOperator) {
					self._$write$(")");
				} else {
					nil;
				};
				if ($isPostfix) {
					$node.$operatorName().$visitBy$(self);
				} else {
					nil;
				};
				return self;
			});
			this.$visitVerbatimNode$ = (function ($node) {
				var self = this;
				self._$write$($node.$text());
				return self;
			});
			this.$visitAssignmentExpression$ = (function ($node) {
				var self = this;
				$node.$leftHandSide().$visitBy$(self);
				self._$write$(" = ");
				$node.$rightHandSide().$visitBy$(self);
				return self;
			});
			this.$visitBlock$ = (function ($node) {
				var self = this;
				var $statements = nil;
				$statements = $node.$statements();
				if ($statements.$isEmpty()) {
					return self._$write$("{}");
				} else {
					nil;
				};
				self._$write$("{");
				self._$indentCr();
				$statements.$do$separatedBy$((function ($each) {
					$each.$visitBy$(self);
					return self._$write$(";");
				}), (function () {
					return self._$cr();
				}));
				self._$unindentCr();
				self._$write$("}");
				return self;
			});
			this.$visitBooleanLiteral$ = (function ($node) {
				var self = this;
				self._$write$($node.$value().$ifTrue$ifFalse$((function () {
					return "true";
				}), (function () {
					return "false";
				})));
				return self;
			});
			this.$visitCallExpression$ = (function ($node) {
				var self = this;
				$node.$function().$visitBy$(self);
				self._$write$("(");
				$node.$arguments().$do$separatedBy$((function ($arg) {
					return $arg.$visitBy$(self);
				}), (function () {
					return self._$write$(", ");
				}));
				self._$write$(")");
				return self;
			});
			this.$visitFunctionExpression$ = (function ($node) {
				var self = this;
				self._$write$("(");
				self._$visitFunctionStatement$($node);
				self._$write$(")");
				return self;
			});
			this.$visitIdentifierExpression$ = (function ($node) {
				var self = this;
				self._$write$($node.$name());
				return self;
			});
			this.$visitIfStatement$ = (function ($node) {
				var self = this;
				self._$write$("if (");
				$node.$expression().$visitBy$(self);
				self._$write$(") ");
				self._$writeBlock$($node.$thenStatement().$asBlock());
				$node.$elseStatement().$ifNotNil$((function ($else) {
					self._$write$(" else ");
					return self._$writeBlock$($node.$elseStatement().$asBlock());
				}));
				return self;
			});
			this.$visitIntegerLiteral$ = (function ($node) {
				var self = this;
				self._$write$($node.$value().$printString());
				return self;
			});
			this.$visitMemberExpression$ = (function ($node) {
				var self = this;
				var $parenthesize = nil;
				$parenthesize = ($node.$primary().$isIdentifier() || ($node.$primary().$isMemberExpression() || $node.$primary().$isCallExpression())).$not();
				if ($parenthesize) {
					self._$write$("(");
				} else {
					nil;
				};
				$node.$primary().$visitBy$(self);
				if ($parenthesize) {
					self._$write$(")");
				} else {
					nil;
				};
				if ($node.$property().$isStringLiteral() && self.$enclosingObjects$JavascriptGeneration$Writer[0]._$isLegalIdentifier$($node.$property().$value())) {
					self._$write$(".");
					self._$write$($node.$property().$value());
				} else {
					self._$write$("[");
					$node.$property().$visitBy$(self);
					self._$write$("]");
				};
				return self;
			});
			this.$visitNewExpression$ = (function ($node) {
				var self = this;
				self._$write$("new ");
				$node.$expression().$visitBy$(self);
				self._$write$("(");
				$node.$arguments().$do$separatedBy$((function ($arg) {
					return $arg.$visitBy$(self);
				}), (function () {
					return self._$write$(", ");
				}));
				self._$write$(")");
				return self;
			});
			this.$visitObjectLiteral$ = (function ($node) {
				var self = this;
				if ($node.$slotCount().$$equal(0)) {
					self._$write$("{}");
					return self;
				} else {
					nil;
				};
				self._$write$("{");
				self._$indentCr();
				$node.$slotsDo$betweenDo$((function ($name, $value) {
					var $nameIsQuoted = nil;
					$nameIsQuoted = $name.$first().$$equal("'");
					if (!$nameIsQuoted) {
						self._$write$("'");
					} else {
						nil;
					};
					self._$write$($name);
					if (!$nameIsQuoted) {
						self._$write$("'");
					} else {
						nil;
					};
					self._$write$(": ");
					return $value.$visitBy$(self);
				}), (function () {
					self._$write$(",");
					return self._$cr();
				}));
				self._$unindentCr();
				self._$write$("}");
				return self;
			});
			this.$visitReturnStatement$ = (function ($node) {
				var self = this;
				self._$write$("return");
				$node.$expression().$ifNotNil$((function ($expr) {
					self._$write$(" ");
					return $expr.$visitBy$(self);
				}));
				return self;
			});
			this.$visitTryStatement$ = (function ($node) {
				var self = this;
				self._$write$("try ");
				self._$writeBlock$($node.$protectedBlock());
				$node.$catchBlock().$ifNotNil$((function ($catch) {
					self._$write$(" catch (");
					$node.$catchVar().$visitBy$(self);
					self._$write$(") ");
					return self._$writeBlock$($catch);
				}));
				$node.$finallyBlock().$ifNotNil$((function ($finally) {
					self._$write$(" finally ");
					return self._$writeBlock$($finally);
				}));
				return self;
			});
			this.$visitVariableStatement$ = (function ($node) {
				var self = this;
				self._$write$("var ");
				$node.$name().$visitBy$(self);
				$node.$initializer().$ifNotNil$((function ($expr) {
					self._$write$(" = ");
					return $expr.$visitBy$(self);
				}));
				return self;
			});
			this.$beginNewWriteCycleUsing$ = (function ($stream) {
				var self = this;
				$1.$output$.call(self, $stream);
				$1.$tabLevel$.call(self, 0);
				return self;
			});
			this.$cr = (function () {
				var self = this;
				$1.$output.call(self).$cr();
				{
					var $$limit = nil;
					var $$i = nil;
					nil;
					$$i = 1;
					$$limit = $1.$tabLevel.call(self);
					for (; $$limit.$$greater$equal($$i); ) {
						$1.$output.call(self).$tab();
						$$i = (1).$$plus($$i);
					};
				};
				return self;
			});
			this.$inIndentedBlock$ = (function ($closure) {
				var self = this;
				self._$write$("{");
				self._$indentCr();
				return $closure.$ensure$((function () {
					self._$unindentCr();
					return self._$write$("}");
				}));
			});
			this.$indentCr = (function () {
				var self = this;
				$1.$tabLevel$.call(self, $1.$tabLevel.call(self) + 1);
				self._$cr();
				return self;
			});
			this.$unindentCr = (function () {
				var self = this;
				$1.$tabLevel$.call(self, (0).$max$($1.$tabLevel.call(self) - 1));
				self._$cr();
				return self;
			});
			this.$write$ = (function ($text) {
				var self = this;
				$1.$output.call(self).$nextPutAll$($text);
				return self;
			});
			this.$writeBlock$ = (function ($block) {
				var self = this;
				var $statements = nil;
				$statements = $block.$statements();
				if ($statements.$isEmpty()) {
					self._$write$("{}");
				} else {
					self._$inIndentedBlock$((function () {
						return $statements.$do$separatedBy$((function ($each) {
							$each.$visitBy$(self);
							return self._$write$(";");
						}), (function () {
							return self._$cr();
						}));
					}));
				};
				return self;
			});
			this.$output = (function () {
				return this.$output$slot;
			});
			this.$output$ = (function (v) {
				this.$output$slot = v;
				return this;
			});
			this.$tabLevel = (function () {
				return this.$tabLevel$slot;
			});
			this.$tabLevel$ = (function (v) {
				this.$tabLevel$slot = v;
				return this;
			});
			this.$stringTranslation = (function () {
				return this.$stringTranslation$slot;
			});
			this.$setOnce$stringTranslation$ = (function (v) {
				this.$stringTranslation$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for JavascriptGeneration`Writer";
					this._$superInit$JavascriptGeneration$Writer = $.$superInit$JavascriptGeneration$Writer;
					this.$superInit$JavascriptGeneration$Writer = dnuCatcher("$superInit$JavascriptGeneration$Writer");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$contents = $.$contents;
					this.$contents = dnuCatcher("$contents");
					this.$generateSourceFor$ = this._$generateSourceFor$ = $.$generateSourceFor$;
					this.$generateSourceFor$on$ = this._$generateSourceFor$on$ = $.$generateSourceFor$on$;
					this.$visitArrayExpression$ = this._$visitArrayExpression$ = $.$visitArrayExpression$;
					this.$visitForInStatement$ = this._$visitForInStatement$ = $.$visitForInStatement$;
					this.$visitForStatement$ = this._$visitForStatement$ = $.$visitForStatement$;
					this.$visitFunctionStatement$ = this._$visitFunctionStatement$ = $.$visitFunctionStatement$;
					this.$visitOperatorExpression$ = this._$visitOperatorExpression$ = $.$visitOperatorExpression$;
					this.$visitScript$ = this._$visitScript$ = $.$visitScript$;
					this.$visitStringLiteral$ = this._$visitStringLiteral$ = $.$visitStringLiteral$;
					this.$visitTernaryOperatorExpression$ = this._$visitTernaryOperatorExpression$ = $.$visitTernaryOperatorExpression$;
					this.$visitThrowStatement$ = this._$visitThrowStatement$ = $.$visitThrowStatement$;
					this.$visitUnaryOperatorExpression$ = this._$visitUnaryOperatorExpression$ = $.$visitUnaryOperatorExpression$;
					this.$visitVerbatimNode$ = this._$visitVerbatimNode$ = $.$visitVerbatimNode$;
					this.$visitAssignmentExpression$ = this._$visitAssignmentExpression$ = $.$visitAssignmentExpression$;
					this.$visitBlock$ = this._$visitBlock$ = $.$visitBlock$;
					this.$visitBooleanLiteral$ = this._$visitBooleanLiteral$ = $.$visitBooleanLiteral$;
					this.$visitCallExpression$ = this._$visitCallExpression$ = $.$visitCallExpression$;
					this.$visitFunctionExpression$ = this._$visitFunctionExpression$ = $.$visitFunctionExpression$;
					this.$visitIdentifierExpression$ = this._$visitIdentifierExpression$ = $.$visitIdentifierExpression$;
					this.$visitIfStatement$ = this._$visitIfStatement$ = $.$visitIfStatement$;
					this.$visitIntegerLiteral$ = this._$visitIntegerLiteral$ = $.$visitIntegerLiteral$;
					this.$visitMemberExpression$ = this._$visitMemberExpression$ = $.$visitMemberExpression$;
					this.$visitNewExpression$ = this._$visitNewExpression$ = $.$visitNewExpression$;
					this.$visitObjectLiteral$ = this._$visitObjectLiteral$ = $.$visitObjectLiteral$;
					this.$visitReturnStatement$ = this._$visitReturnStatement$ = $.$visitReturnStatement$;
					this.$visitTryStatement$ = this._$visitTryStatement$ = $.$visitTryStatement$;
					this.$visitVariableStatement$ = this._$visitVariableStatement$ = $.$visitVariableStatement$;
					this._$beginNewWriteCycleUsing$ = $.$beginNewWriteCycleUsing$;
					this.$beginNewWriteCycleUsing$ = dnuCatcher("$beginNewWriteCycleUsing$");
					this._$cr = $.$cr;
					this.$cr = dnuCatcher("$cr");
					this._$inIndentedBlock$ = $.$inIndentedBlock$;
					this.$inIndentedBlock$ = dnuCatcher("$inIndentedBlock$");
					this._$indentCr = $.$indentCr;
					this.$indentCr = dnuCatcher("$indentCr");
					this._$unindentCr = $.$unindentCr;
					this.$unindentCr = dnuCatcher("$unindentCr");
					this._$write$ = $.$write$;
					this.$write$ = dnuCatcher("$write$");
					this._$writeBlock$ = $.$writeBlock$;
					this.$writeBlock$ = dnuCatcher("$writeBlock$");
					this.$enclosingObjects$JavascriptGeneration$Writer = enclosingObjects;
					this.$super$JavascriptGeneration$Writer$slot = runtimeSuperclass;
					this["JavascriptGeneration`Writer"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$output$slot = nil;
						this.$tabLevel$slot = nil;
						this.$stringTranslation$slot = nil;
					});
					this.basicNew = this["JavascriptGeneration`Writer"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for JavascriptGeneration`Writer";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for JavascriptGeneration`Writer";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$JavascriptGeneration$Writer = enclosingObjects;
						this.$super$JavascriptGeneration$Writer = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$JavascriptGeneration$Factory.enclosingMixin = this;
		this.$JavascriptGeneration$Syntax.enclosingMixin = this;
		this.$JavascriptGeneration$Writer.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for JavascriptGeneration";
				this._$superInit$JavascriptGeneration = $.$superInit$JavascriptGeneration;
				this.$superInit$JavascriptGeneration = dnuCatcher("$superInit$JavascriptGeneration");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this._$isLegalIdentifier$ = $.$isLegalIdentifier$;
				this.$isLegalIdentifier$ = dnuCatcher("$isLegalIdentifier$");
				this._$Factory = $.$Factory;
				this.$Factory = dnuCatcher("$Factory");
				this._$Syntax = $.$Syntax;
				this.$Syntax = dnuCatcher("$Syntax");
				this.$Writer = this._$Writer = $.$Writer;
				this._$syntax = $.$syntax;
				this.$syntax = dnuCatcher("$syntax");
				this._$setOnce$syntax$ = $.$setOnce$syntax$;
				this.$setOnce$syntax$ = dnuCatcher("$setOnce$syntax$");
				this.$factory = this._$factory = $.$factory;
				this.$setOnce$factory$ = this._$setOnce$factory$ = $.$setOnce$factory$;
				this.$JavascriptGeneration$Factory = this._$JavascriptGeneration$Factory = $.$JavascriptGeneration$Factory;
				this.$JavascriptGeneration$Factory$ = this._$JavascriptGeneration$Factory$ = $.$JavascriptGeneration$Factory$;
				this.$JavascriptGeneration$Syntax = this._$JavascriptGeneration$Syntax = $.$JavascriptGeneration$Syntax;
				this.$JavascriptGeneration$Syntax$ = this._$JavascriptGeneration$Syntax$ = $.$JavascriptGeneration$Syntax$;
				this.$JavascriptGeneration$Writer = this._$JavascriptGeneration$Writer = $.$JavascriptGeneration$Writer;
				this.$JavascriptGeneration$Writer$ = this._$JavascriptGeneration$Writer$ = $.$JavascriptGeneration$Writer$;
				this.$enclosingObjects$JavascriptGeneration = enclosingObjects;
				this.$super$JavascriptGeneration$slot = runtimeSuperclass;
				this.JavascriptGeneration = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$List$slot = nil;
					this.$Dictionary$slot = nil;
					this.$WriteStream$slot = nil;
					this.$syntax$slot = nil;
					this.$factory$slot = nil;
					this.$JavascriptGeneration$Factory$slot = nil;
					this.$JavascriptGeneration$Syntax$slot = nil;
					this.$JavascriptGeneration$Writer$slot = nil;
				});
				this.basicNew = this.JavascriptGeneration;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for JavascriptGeneration";
			this.slots = [];
			this.methods = [new MM("usingPlatform:", true, null)];
			this.nestedClasses = [];
			this.$usingPlatform$ = (function ($platform) {
				return (new this.nonMeta.basicNew()).$instance$initializer($platform);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for JavascriptGeneration";
					this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
					this.$enclosingObjects$JavascriptGeneration = enclosingObjects;
					this.$super$JavascriptGeneration = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$Newspeak2V8Compilation = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for Newspeak2V8Compilation";
		this.name = "Newspeak2V8Compilation";
		this.header = "Newspeak2V8Compilation usingPlatform: platform\r parsing: parsing\r generation: generation\r mirrors: mirrors = NewspeakCompilation\r usingPlatform: platform\r asts: parsing ASTModule ((* This module provides a Newspeak-to-Javascript cross-compiler. It is a descendent of Newspeak2Javascript which takes care to generate code that is easier for V8 to optimize and which is easier to maintain because of a simpler bootstrapping story and strategy for including bits that need to be written directly in Javascript. The output is not V8-specific and should run in any Javascript implementation that supports apply(), call() and bind().\r\rThe current compilation scheme does not address async sends, reflection or reified activation records. Also, like all Newspeak implementations as of this writing, it does not provide generalized mixin application.\r\rAt runtime, a Newspeak object O is represented as a Javascript object J with properties that correspond directly to the Newspeak slots. The prototype of J is a runtime-class JRC, whose properties correspond to the instance methods of O's class, including any necessary synthetic methods. The prototype of JRC is another runtime class object corresponding to the superclass of O's class, and so on up to Object. The prototype of the runtime class of Object is ImplementationBase, which is hand-written and contains stub implementations to end the upward recursion in basicNew and the instance initializers.\r\rJRC includes synthetic slots that refer to its runtime mixin, its enclosing object chain, and its metaclass or non-metaclass counterpart.\r\rThe main output of the compiler is an object containing all of the runtime mixins corresponding to the top-level class declarations. A runtime mixin has properties containing the definitions of its Newspeak and synthetic methods and its nested mixins. It also has a function that takes a runtime superclass and produces a runtime class that represents the application of the mixin. This function produces either a runtime class or a runtime metaclass, not the pair.\r\rOne synthetic method deserves particular attention: basicNew(). The prototype of basicNew is the runtime class. The body of basicNew calls the basicNew of the superclass using call(), then initializes properties corresponding to each Newspeak slot to nil.\r\rAll mixin applications share the same Newspeak and synthetic functions, except basicNew.\r\r[PERFORMANCE NOTE] It is important that objects have all their slots initialized up front, rather than lazily. This ensures that all instances of the same Newspeak class go through the same transitions in the same order so V8 will give them all the same \"hidden class\" (what Self called a map).\r\r[PERFORMANCE NOTE] It is important that an object's methods are defined in a prototype, rather than in the constructor call. If they were defined in the constructor, they would be different objects with different contexts.\r\r[PERFORMANCE NOTE] The current structure where the functions for methods are defined in other deeply nested functions may produce functions that perform slower than if they had been defined at the top level. This is because of a need to give them contexts, even if they never access their free variables. This used to be an issue in V8, but it was fixed under pressure from dart2js (who wanted to nest all of their code at least one level to avoid polluting the global scope). It may still be the case in other Javascript engines.\r\rObject creation follows the same pattern as the Squeak and Dart implementations: basicNew is followed by running a synthetic instance initializer.\r\rMixin application is implemented by a hand-written method on VMMirror. First a pair of runtime class and runtime metaclass are produced by applying the runtime mixin and runtime metamixin to the runtime class of the superclass and the runtime class of Class, respectively. Then an instance of Metaclass is created to represent the Newspeak metaclass, and an instance of the metaclass is created to represent the Newspeak class. Newspeak objects never directly interact with runtime classes or runtime mixins; the objects answered by #class are the Newspeak class or metaclass.\r\rSelf sends and ordinary sends map to Javascript method invocation. Outer sends map to an invocation on an entry in the enclosing objects array at the correct depth. Implicit receiver sends are resolved either as the self sends or outer sends at compile-time. Super sends are implemented as call() applied to the corresponding property of the runtime superclass.\r\rNewspeak selectors are mangled into legal Javascript identifiers. The mangling differs according to the accessibility of the selector. Public selectors are always prefixed with$. In addition,  keyword selectors have each colon replaced with dollar. For binary selectors, they are the concatenation of a mapping for each of the special characters. Examples:\r\ryourself maps to $yourself.\rwith:with: maps to $$with$with.\r +- maps to $$plus$minus.\r\rFor protected selectors, the public mangling is preceded with an underscore. Hence\r\r yourself maps to _$yourself.\rwith:with: maps to _$$with$with.\r +- maps to _$$plus$minus.\r\rThe selector #doesNotUnderstand: is treated specially an dmapped to dnu.\rA full description of the access control scheme is available at:  https://docs.google.com/document/d/1CHTjsOsamXv9AwGTvkhe871QVY5vpZP9sDfz6I40gaA/\r\r[PERFORMANCE NOTE] It is important that we use legal identifiers for our property names. The earlier NS2JS did not mangle selectors and instead used square bracket notation to access properties. For example, foo at: 1 put: 2 would become foo[\"#at:put:\"](1,2) rather than foo.at$put$(1,2). V8 eagerly transitions objects like these to dictionary mode, which means they do not have fast property access. This is the most important difference between NS2JS and NS2V8.\r\rNon-local return is implemented using exceptions. The body of a method containing an NLR is wrapped in a try-catch block. At the beginning, an object is created to represent the current activation. When there is a non-local return, the return value is assigned to a property of this object and the object is thrown. The catch clause checks if the object thrown corresponds to its NLR object, and if so extracts the value and does a Javascript (local) return. Otherwise the object is re-thrown.\r\rNewspeak closures map to Javascript functions. Accesses to self do *not* map directly to \"this\". Rather the receiver must be captured in a local at the beginning of a method, and access must be through this local to get proper lexical scope.\r\r[UNIMPLEMENTED] This representation is not suitable for closure mirrors as there is no way in Javascript to get at the closure's free variables. To support closure mirrors, we would have create objects for each closure that took free variables and the enclosing context as arguments and stored them as slots that reflection could later access. dart2js follows this approach (but I believe this is to ensure they cannot be called with the wrong arity).\r\rTo implement #doesNotUnderstand:, for every message sent the compiler emits a DNU catcher that creates a Message object from the arguments and forwards to #doesNotUnderstand:.  At bootstrap, these handlers are all installed into ImplementationBase under for both the public and protected manglings of the selector.\r\r[PERFORMANCE NOTE] It is important that these prototypes are all installed up-front, rather than the subset needed at each mixin application, to ensure the prototype chain is stable during the program's execution. Installing these catchers later would trigger deoptimizations.\r\rThe basic types (number, array, block, boolean, string) are represented directly as their Javascript counterparts. Where the Javascript behavior differs from the Newspeak behavior, we monkey patch the Javascript prototypes.\r\r[ENGINEERING NOTE] These patches are all defined in classes of KernelForV8, using the js intrinsic described below. Unlike NS2JS, there is no need to look through several places and bootstrapping phases to find where such behavior is defined. Adding or modifying behavior for the basic types is as easier as adding or changing methods in these classes.\r\r[PERFORMANCE NOTE] It is important that these patches are labelled for strict mode to avoid automatic boxing.\r\r[ENGINEERING NOTE] We simply label the whole program for script mode, but if our output got wrapped in or otherwise mixed with other scripts, it wouldn't run in script mode.\r\r[ENGINEERING NOTE] dart2js does not use this technique because they want to interoperate with other Javascript code. Instead they use a technique called interceptors, and can avoid the cost in the common cast through fancy type inference and inlining that make runtime modification very difficult. Newspeak doesn't want to go there and is content to monkey patch.\r\r[ENGINEERING NOTE] Like dart2js, we cave on the semantics of integers by directly representing our numbers as Javascript numbers, which are doubles.\r\rNil is not respresented as Javascript's null. We use of a singleton instance of the Newspeak class UndefinedObject.\r\rBootstrapping: the compiled Javascript starts by hand-initializing the classes of Kernel to deal with the circular references. Then a namespace is populated with the applications of each of the top-level mixins to Object. This namespace is passed to the factory of RuntimeForV8, and the returned object is passed the VMMirror. This causes the platform object to be created and initialized. As part of this process, the DNU catchers and basic type monkey patches are installed. The application configuration is then passed the namespace, and the returned app object is sent #main:args: with the platform.  (Newspeak2Dart follows the same pattern, though without DNU catcher or basic type patches.)\r\r[ENGINEERING NOTE] This is *way* simpler than whatever multi-phase thing NS2JS is doing.\r\rThe js intrinsic: When compiling the platform sources, we evaluate sends to \"js\" at compile-time against a factory for Javascript ASTs (an instance of JavascriptGeneration`Factory). For instance,\r\rat: index = (\r  ^js propertyOf: (js ident: 'this') at: index - 1\r)\r\rtranslates to\r\rfunction $at$(index) { return this[index - 1]; }\r\rNote that arguments in messages to \"js\" can be arbitrary expressions (index - 1), which will be compiled like any other ordinary expression, allowing one to write implementations partially in the target language and partially in ordinary Newspeak in the same method.\r\rThis scheme allows the implementations of primitives to be written in the methods they are implementing and without special language support like pragmas, externs or native clauses, which I think is pretty cool :)\r\r\r[UNIMPLEMENTED] Async sends\r\r[UNIMPLEMENTED] Reflective modification\r\r[UNIMPLEMENTED] Reified activation records\r\r\rCopyright 2008 Cadence Design Systems, Inc.\rCopyright 2009-2010 Gilad Bracha.\rCopyright 2012 SAP AG.\rCopyright 2012 Google Inc.\rCopyright 2013 Ryan Macnak\rCopyright 2014-2015 Google Inc.\r   \rLicensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)|\r      asts = parsing ASTModule.\r	Collection = platform collections Collection.\r	Dictionary = platform collections Dictionary.\r	IdentityDictionary = platform collections IdentityDictionary.\r	OrderedCollection = platform collections OrderedCollection.\r	SortedList = platform collections SortedList.\r	Set = platform collections Set.\r	ReadStream = platform streams CharacterReadStream.\r	WriteStream = platform streams CharacterReadWriteStream.\r\r	MutableString = platform kernel MutableString.\r	\r	Parser = parsing Parser.\r	\r	javascriptGeneration = generation.\r	JavascriptWriter = javascriptGeneration Writer.\r	js = javascriptGeneration factory.\r\r	public names = NameMangler new.\r\r	ASTTool = asts ASTTool.\r      ASTCopier = asts ASTCopier.\r      AST = asts AST.\r	AssignmentAST = asts AssignmentAST.\r	BlockAST = asts BlockAST.\r	CascadedSendAST = asts CascadedSendAST.\r	CodeBodyAST = asts CodeBodyAST.\r	MessageAST = asts MessageAST.\r      MessagePatternAST = asts MessagePatternAST.\r	MethodAST = asts MethodAST.\r	NormalSendAST = asts NormalSendAST.\r	NumberAST = asts NumberAST.\r	ReturnStatAST = asts ReturnStatAST.\r      SendAST = asts SendAST.\r	SymbolAST = asts SymbolAST.\r	TupleAST = asts TupleAST.\r      VarDeclAST = asts VarDeclAST.\r	VariableAST = asts VariableAST.\r\r	parser = Parser new.\r	\r	cachedCompilations = Dictionary new.\r|)";
		this.slots = [
			new SM("asts", false, false),
			new SM("Collection", false, false),
			new SM("Dictionary", false, false),
			new SM("IdentityDictionary", false, false),
			new SM("OrderedCollection", false, false),
			new SM("SortedList", false, false),
			new SM("Set", false, false),
			new SM("ReadStream", false, false),
			new SM("WriteStream", false, false),
			new SM("MutableString", false, false),
			new SM("Parser", false, false),
			new SM("javascriptGeneration", false, false),
			new SM("JavascriptWriter", false, false),
			new SM("js", false, false),
			new SM("names", false, false),
			new SM("ASTTool", false, false),
			new SM("ASTCopier", false, false),
			new SM("AST", false, false),
			new SM("AssignmentAST", false, false),
			new SM("BlockAST", false, false),
			new SM("CascadedSendAST", false, false),
			new SM("CodeBodyAST", false, false),
			new SM("MessageAST", false, false),
			new SM("MessagePatternAST", false, false),
			new SM("MethodAST", false, false),
			new SM("NormalSendAST", false, false),
			new SM("NumberAST", false, false),
			new SM("ReturnStatAST", false, false),
			new SM("SendAST", false, false),
			new SM("SymbolAST", false, false),
			new SM("TupleAST", false, false),
			new SM("VarDeclAST", false, false),
			new SM("VariableAST", false, false),
			new SM("parser", false, false),
			new SM("cachedCompilations", false, false),
			new SM("Newspeak2V8Compilation`CachedCompilation", true, true),
			new SM("Newspeak2V8Compilation`ClassDeclarationIR", true, true),
			new SM("Newspeak2V8Compilation`Compiler", true, true),
			new SM("Newspeak2V8Compilation`MethodIR", true, true),
			new SM("Newspeak2V8Compilation`MixinIR", true, true),
			new SM("Newspeak2V8Compilation`NameMangler", true, true),
			new SM("Newspeak2V8Compilation`ProgramBuilder", true, true),
			new SM("Newspeak2V8Compilation`PropertyCallAST", true, true),
			new SM("Newspeak2V8Compilation`SlotIR", true, true)
		];
		this.methods = [
			new MM("superInit`Newspeak2V8Compilation", true, "usingPlatform: platform\r asts: parsing ASTModule"),
			new MM("instance`initializer", true, "usingPlatform: platform\r asts: parsing ASTModule"),
			new MM("LocalEntry", false, "LocalEntry = (\r	^super LocalEntry\r)"),
			new MM("Scope", false, "Scope = (\r	^super Scope\r)"),
			new MM("assert:", false, "assert: block <[Boolean]> = (\r      super assert: block message: 'assertion failed'.\r	(* block value ifFalse: [error: 'assertion failed'] *)\r)"),
			new MM("mixinNameOfClassNamed:", false, "mixinNameOfClassNamed: className <String> ^ <Symbol> = (\r	| simpleNames <Collection[String]> rawNames <Collection[String]> |\r	rawNames:: splitFullyQualifiedName: className. \r	rawNames size =1 ifTrue: [^className].\r	simpleNames:: rawNames select: [:n <String>  | \r					n size == 0 or: [ n first isLetter ]].\r				(* this was isDigit--either add isDigit to core string, or perhaps use between:and: *) \r	assert: [simpleNames size >= 2].\r	^(simpleNames inject: '' into: [:sn1 <String>  :sn2 <String> | sn1, syntheticNameSeparator, sn2]) asSymbol\r)"),
			new MM("mixinSlotNameFor:", false, "mixinSlotNameFor: nestedName <String> = (\r	| mixinName <String> |\r	mixinName:: mixinNameOfClassNamed: nestedName.\r	^mixinName\r)"),
			new MM("split:at:", false, "split: aString at: aCharacter = (\r	| parts start |\r	parts:: OrderedCollection new.\r	start:: 1.\r	1 to: aString size do:\r		[:index |\r		(aString at: index) = aCharacter ifTrue:\r			[parts add: (aString copyFrom: start to: index - 1).\r			start:: index + 1]].\r	parts add: (aString copyFrom: start to: aString size).\r	^parts\r)"),
			new MM("splitFullyQualifiedName:", false, "splitFullyQualifiedName: fqn = (\r\r	(* Make sure we pass only the first character, so that the code works in image and on JS *)\r	^ split: fqn at: syntheticNameSeparator first\r)"),
			new MM("syntheticNameSeparator", false, "syntheticNameSeparator ^<String> = (\r	^'`'\r)"),
			new MM("CachedCompilation", true, null),
			new MM("ClassDeclarationIR", true, null),
			new MM("Compiler", true, null),
			new MM("MethodIR", true, null),
			new MM("MixinIR", true, null),
			new MM("NameMangler", true, null),
			new MM("ProgramBuilder", true, null),
			new MM("PropertyCallAST", true, null),
			new MM("SlotIR", true, null),
			new MM("asts", true, null),
			new MM("setOnce`asts:", true, null),
			new MM("Collection", true, null),
			new MM("setOnce`Collection:", true, null),
			new MM("Dictionary", true, null),
			new MM("setOnce`Dictionary:", true, null),
			new MM("IdentityDictionary", true, null),
			new MM("setOnce`IdentityDictionary:", true, null),
			new MM("OrderedCollection", true, null),
			new MM("setOnce`OrderedCollection:", true, null),
			new MM("SortedList", true, null),
			new MM("setOnce`SortedList:", true, null),
			new MM("Set", true, null),
			new MM("setOnce`Set:", true, null),
			new MM("ReadStream", true, null),
			new MM("setOnce`ReadStream:", true, null),
			new MM("WriteStream", true, null),
			new MM("setOnce`WriteStream:", true, null),
			new MM("MutableString", true, null),
			new MM("setOnce`MutableString:", true, null),
			new MM("Parser", true, null),
			new MM("setOnce`Parser:", true, null),
			new MM("javascriptGeneration", true, null),
			new MM("setOnce`javascriptGeneration:", true, null),
			new MM("JavascriptWriter", true, null),
			new MM("setOnce`JavascriptWriter:", true, null),
			new MM("js", true, null),
			new MM("setOnce`js:", true, null),
			new MM("names", true, null),
			new MM("setOnce`names:", true, null),
			new MM("ASTTool", true, null),
			new MM("setOnce`ASTTool:", true, null),
			new MM("ASTCopier", true, null),
			new MM("setOnce`ASTCopier:", true, null),
			new MM("AST", true, null),
			new MM("setOnce`AST:", true, null),
			new MM("AssignmentAST", true, null),
			new MM("setOnce`AssignmentAST:", true, null),
			new MM("BlockAST", true, null),
			new MM("setOnce`BlockAST:", true, null),
			new MM("CascadedSendAST", true, null),
			new MM("setOnce`CascadedSendAST:", true, null),
			new MM("CodeBodyAST", true, null),
			new MM("setOnce`CodeBodyAST:", true, null),
			new MM("MessageAST", true, null),
			new MM("setOnce`MessageAST:", true, null),
			new MM("MessagePatternAST", true, null),
			new MM("setOnce`MessagePatternAST:", true, null),
			new MM("MethodAST", true, null),
			new MM("setOnce`MethodAST:", true, null),
			new MM("NormalSendAST", true, null),
			new MM("setOnce`NormalSendAST:", true, null),
			new MM("NumberAST", true, null),
			new MM("setOnce`NumberAST:", true, null),
			new MM("ReturnStatAST", true, null),
			new MM("setOnce`ReturnStatAST:", true, null),
			new MM("SendAST", true, null),
			new MM("setOnce`SendAST:", true, null),
			new MM("SymbolAST", true, null),
			new MM("setOnce`SymbolAST:", true, null),
			new MM("TupleAST", true, null),
			new MM("setOnce`TupleAST:", true, null),
			new MM("VarDeclAST", true, null),
			new MM("setOnce`VarDeclAST:", true, null),
			new MM("VariableAST", true, null),
			new MM("setOnce`VariableAST:", true, null),
			new MM("parser", true, null),
			new MM("setOnce`parser:", true, null),
			new MM("cachedCompilations", true, null),
			new MM("setOnce`cachedCompilations:", true, null),
			new MM("Newspeak2V8Compilation`CachedCompilation", true, null),
			new MM("Newspeak2V8Compilation`CachedCompilation:", true, null),
			new MM("Newspeak2V8Compilation`ClassDeclarationIR", true, null),
			new MM("Newspeak2V8Compilation`ClassDeclarationIR:", true, null),
			new MM("Newspeak2V8Compilation`Compiler", true, null),
			new MM("Newspeak2V8Compilation`Compiler:", true, null),
			new MM("Newspeak2V8Compilation`MethodIR", true, null),
			new MM("Newspeak2V8Compilation`MethodIR:", true, null),
			new MM("Newspeak2V8Compilation`MixinIR", true, null),
			new MM("Newspeak2V8Compilation`MixinIR:", true, null),
			new MM("Newspeak2V8Compilation`NameMangler", true, null),
			new MM("Newspeak2V8Compilation`NameMangler:", true, null),
			new MM("Newspeak2V8Compilation`ProgramBuilder", true, null),
			new MM("Newspeak2V8Compilation`ProgramBuilder:", true, null),
			new MM("Newspeak2V8Compilation`PropertyCallAST", true, null),
			new MM("Newspeak2V8Compilation`PropertyCallAST:", true, null),
			new MM("Newspeak2V8Compilation`SlotIR", true, null),
			new MM("Newspeak2V8Compilation`SlotIR:", true, null)
		];
		this.nestedClasses = [
			"Newspeak2V8Compilation`CachedCompilation",
			"Newspeak2V8Compilation`ClassDeclarationIR",
			"Newspeak2V8Compilation`Compiler",
			"Newspeak2V8Compilation`MethodIR",
			"Newspeak2V8Compilation`MixinIR",
			"Newspeak2V8Compilation`NameMangler",
			"Newspeak2V8Compilation`ProgramBuilder",
			"Newspeak2V8Compilation`PropertyCallAST",
			"Newspeak2V8Compilation`SlotIR"
		];
		this.applications = [];
		this.$superInit$Newspeak2V8Compilation = (function ($platform, $parsing, $generation, $mirrors) {
			var self = this;
			self.$super$Newspeak2V8Compilation$slot._$instance$initializer.call(self, $platform, $parsing.$ASTModule());
			return self;
		});
		this.$instance$initializer = (function ($platform, $parsing, $generation, $mirrors) {
			var self = this;
			self._$superInit$Newspeak2V8Compilation($platform, $parsing, $generation, $mirrors);
			self._$setOnce$asts$($parsing.$ASTModule());
			self._$setOnce$Collection$($platform.$collections().$Collection());
			self._$setOnce$Dictionary$($platform.$collections().$Dictionary());
			self._$setOnce$IdentityDictionary$($platform.$collections().$IdentityDictionary());
			self._$setOnce$OrderedCollection$($platform.$collections().$OrderedCollection());
			self._$setOnce$SortedList$($platform.$collections().$SortedList());
			self._$setOnce$Set$($platform.$collections().$Set());
			self._$setOnce$ReadStream$($platform.$streams().$CharacterReadStream());
			self._$setOnce$WriteStream$($platform.$streams().$CharacterReadWriteStream());
			self._$setOnce$MutableString$($platform.$kernel().$MutableString());
			self._$setOnce$Parser$($parsing.$Parser());
			self._$setOnce$javascriptGeneration$($generation);
			self._$setOnce$JavascriptWriter$(self._$javascriptGeneration().$Writer());
			self._$setOnce$js$(self._$javascriptGeneration().$factory());
			self._$setOnce$names$(self._$NameMangler().$new());
			self._$setOnce$ASTTool$(self._$asts().$ASTTool());
			self._$setOnce$ASTCopier$(self._$asts().$ASTCopier());
			self._$setOnce$AST$(self._$asts().$AST());
			self._$setOnce$AssignmentAST$(self._$asts().$AssignmentAST());
			self._$setOnce$BlockAST$(self._$asts().$BlockAST());
			self._$setOnce$CascadedSendAST$(self._$asts().$CascadedSendAST());
			self._$setOnce$CodeBodyAST$(self._$asts().$CodeBodyAST());
			self._$setOnce$MessageAST$(self._$asts().$MessageAST());
			self._$setOnce$MessagePatternAST$(self._$asts().$MessagePatternAST());
			self._$setOnce$MethodAST$(self._$asts().$MethodAST());
			self._$setOnce$NormalSendAST$(self._$asts().$NormalSendAST());
			self._$setOnce$NumberAST$(self._$asts().$NumberAST());
			self._$setOnce$ReturnStatAST$(self._$asts().$ReturnStatAST());
			self._$setOnce$SendAST$(self._$asts().$SendAST());
			self._$setOnce$SymbolAST$(self._$asts().$SymbolAST());
			self._$setOnce$TupleAST$(self._$asts().$TupleAST());
			self._$setOnce$VarDeclAST$(self._$asts().$VarDeclAST());
			self._$setOnce$VariableAST$(self._$asts().$VariableAST());
			self._$setOnce$parser$(self._$Parser().$new());
			self._$setOnce$cachedCompilations$(self._$Dictionary().$new());
			return self;
		});
		this.$LocalEntry = (function () {
			var self = this;
			return self.$super$Newspeak2V8Compilation$slot._$LocalEntry.call(self);
		});
		this.$Scope = (function () {
			var self = this;
			return self.$super$Newspeak2V8Compilation$slot._$Scope.call(self);
		});
		this.$assert$ = (function ($block) {
			var self = this;
			self.$super$Newspeak2V8Compilation$slot._$assert$message$.call(self, $block, "assertion failed");
			return self;
		});
		this.$mixinNameOfClassNamed$ = (function ($className) {
			var self = this;
			var $simpleNames = nil;
			var $rawNames = nil;
			$rawNames = self._$splitFullyQualifiedName$($className);
			if ($rawNames.$size().$$equal(1)) {
				return $className;
			} else {
				nil;
			};
			$simpleNames = $rawNames.$select$((function ($n) {
				return ($n.$size() === 0) || $n.$first().$isLetter();
			}));
			self._$assert$((function () {
				return $simpleNames.$size() >= 2;
			}));
			return $simpleNames.$inject$into$("", (function ($sn1, $sn2) {
				return $sn1.$$comma(self._$syntheticNameSeparator()).$$comma($sn2);
			})).$asSymbol();
		});
		this.$mixinSlotNameFor$ = (function ($nestedName) {
			var self = this;
			var $mixinName = nil;
			$mixinName = self._$mixinNameOfClassNamed$($nestedName);
			return $mixinName;
		});
		this.$split$at$ = (function ($aString, $aCharacter) {
			var self = this;
			var $parts = nil;
			var $start = nil;
			$parts = self._$OrderedCollection().$new();
			$start = 1;
			{
				var $$limit = nil;
				var $index = nil;
				nil;
				$index = 1;
				$$limit = $aString.$size();
				for (; $$limit.$$greater$equal($index); ) {
					if ($aString.$at$($index).$$equal($aCharacter)) {
						$parts.$add$($aString.$copyFrom$to$($start, $index - 1));
						$start = $index + 1;
					} else {
						nil;
					};
					$index = (1).$$plus($index);
				};
			};
			$parts.$add$($aString.$copyFrom$to$($start, $aString.$size()));
			return $parts;
		});
		this.$splitFullyQualifiedName$ = (function ($fqn) {
			var self = this;
			return self._$split$at$($fqn, self._$syntheticNameSeparator().$first());
		});
		this.$syntheticNameSeparator = (function () {
			var self = this;
			return "`";
		});
		this.$CachedCompilation = (function () {
			if (nil === this.$Newspeak2V8Compilation$CachedCompilation$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Newspeak2V8Compilation);
				var mixin = $.$Newspeak2V8Compilation$CachedCompilation;
				this.$Newspeak2V8Compilation$CachedCompilation$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Newspeak2V8Compilation$CachedCompilation$slot;
		});
		this.$ClassDeclarationIR = (function () {
			if (nil === this.$Newspeak2V8Compilation$ClassDeclarationIR$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Newspeak2V8Compilation);
				var mixin = $.$Newspeak2V8Compilation$ClassDeclarationIR;
				this.$Newspeak2V8Compilation$ClassDeclarationIR$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Newspeak2V8Compilation$ClassDeclarationIR$slot;
		});
		this.$Compiler = (function () {
			if (nil === this.$Newspeak2V8Compilation$Compiler$slot) {
				var self = this;
				var superclass = self.$super$Newspeak2V8Compilation$slot._$Compiler.call(self);
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Newspeak2V8Compilation);
				var mixin = $.$Newspeak2V8Compilation$Compiler;
				this.$Newspeak2V8Compilation$Compiler$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Newspeak2V8Compilation$Compiler$slot;
		});
		this.$MethodIR = (function () {
			if (nil === this.$Newspeak2V8Compilation$MethodIR$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Newspeak2V8Compilation);
				var mixin = $.$Newspeak2V8Compilation$MethodIR;
				this.$Newspeak2V8Compilation$MethodIR$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Newspeak2V8Compilation$MethodIR$slot;
		});
		this.$MixinIR = (function () {
			if (nil === this.$Newspeak2V8Compilation$MixinIR$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Newspeak2V8Compilation);
				var mixin = $.$Newspeak2V8Compilation$MixinIR;
				this.$Newspeak2V8Compilation$MixinIR$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Newspeak2V8Compilation$MixinIR$slot;
		});
		this.$NameMangler = (function () {
			if (nil === this.$Newspeak2V8Compilation$NameMangler$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Newspeak2V8Compilation);
				var mixin = $.$Newspeak2V8Compilation$NameMangler;
				this.$Newspeak2V8Compilation$NameMangler$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Newspeak2V8Compilation$NameMangler$slot;
		});
		this.$ProgramBuilder = (function () {
			if (nil === this.$Newspeak2V8Compilation$ProgramBuilder$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Newspeak2V8Compilation);
				var mixin = $.$Newspeak2V8Compilation$ProgramBuilder;
				this.$Newspeak2V8Compilation$ProgramBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Newspeak2V8Compilation$ProgramBuilder$slot;
		});
		this.$PropertyCallAST = (function () {
			if (nil === this.$Newspeak2V8Compilation$PropertyCallAST$slot) {
				var self = this;
				var superclass = self._$MessageAST();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Newspeak2V8Compilation);
				var mixin = $.$Newspeak2V8Compilation$PropertyCallAST;
				this.$Newspeak2V8Compilation$PropertyCallAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Newspeak2V8Compilation$PropertyCallAST$slot;
		});
		this.$SlotIR = (function () {
			if (nil === this.$Newspeak2V8Compilation$SlotIR$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Newspeak2V8Compilation);
				var mixin = $.$Newspeak2V8Compilation$SlotIR;
				this.$Newspeak2V8Compilation$SlotIR$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Newspeak2V8Compilation$SlotIR$slot;
		});
		this.$asts = (function () {
			return this.$asts$slot;
		});
		this.$setOnce$asts$ = (function (v) {
			this.$asts$slot = v;
			return this;
		});
		this.$Collection = (function () {
			return this.$Collection$slot;
		});
		this.$setOnce$Collection$ = (function (v) {
			this.$Collection$slot = v;
			return this;
		});
		this.$Dictionary = (function () {
			return this.$Dictionary$slot;
		});
		this.$setOnce$Dictionary$ = (function (v) {
			this.$Dictionary$slot = v;
			return this;
		});
		this.$IdentityDictionary = (function () {
			return this.$IdentityDictionary$slot;
		});
		this.$setOnce$IdentityDictionary$ = (function (v) {
			this.$IdentityDictionary$slot = v;
			return this;
		});
		this.$OrderedCollection = (function () {
			return this.$OrderedCollection$slot;
		});
		this.$setOnce$OrderedCollection$ = (function (v) {
			this.$OrderedCollection$slot = v;
			return this;
		});
		this.$SortedList = (function () {
			return this.$SortedList$slot;
		});
		this.$setOnce$SortedList$ = (function (v) {
			this.$SortedList$slot = v;
			return this;
		});
		this.$Set = (function () {
			return this.$Set$slot;
		});
		this.$setOnce$Set$ = (function (v) {
			this.$Set$slot = v;
			return this;
		});
		this.$ReadStream = (function () {
			return this.$ReadStream$slot;
		});
		this.$setOnce$ReadStream$ = (function (v) {
			this.$ReadStream$slot = v;
			return this;
		});
		this.$WriteStream = (function () {
			return this.$WriteStream$slot;
		});
		this.$setOnce$WriteStream$ = (function (v) {
			this.$WriteStream$slot = v;
			return this;
		});
		this.$MutableString = (function () {
			return this.$MutableString$slot;
		});
		this.$setOnce$MutableString$ = (function (v) {
			this.$MutableString$slot = v;
			return this;
		});
		this.$Parser = (function () {
			return this.$Parser$slot;
		});
		this.$setOnce$Parser$ = (function (v) {
			this.$Parser$slot = v;
			return this;
		});
		this.$javascriptGeneration = (function () {
			return this.$javascriptGeneration$slot;
		});
		this.$setOnce$javascriptGeneration$ = (function (v) {
			this.$javascriptGeneration$slot = v;
			return this;
		});
		this.$JavascriptWriter = (function () {
			return this.$JavascriptWriter$slot;
		});
		this.$setOnce$JavascriptWriter$ = (function (v) {
			this.$JavascriptWriter$slot = v;
			return this;
		});
		this.$js = (function () {
			return this.$js$slot;
		});
		this.$setOnce$js$ = (function (v) {
			this.$js$slot = v;
			return this;
		});
		this.$names = (function () {
			return this.$names$slot;
		});
		this.$setOnce$names$ = (function (v) {
			this.$names$slot = v;
			return this;
		});
		this.$ASTTool = (function () {
			return this.$ASTTool$slot;
		});
		this.$setOnce$ASTTool$ = (function (v) {
			this.$ASTTool$slot = v;
			return this;
		});
		this.$ASTCopier = (function () {
			return this.$ASTCopier$slot;
		});
		this.$setOnce$ASTCopier$ = (function (v) {
			this.$ASTCopier$slot = v;
			return this;
		});
		this.$AST = (function () {
			return this.$AST$slot;
		});
		this.$setOnce$AST$ = (function (v) {
			this.$AST$slot = v;
			return this;
		});
		this.$AssignmentAST = (function () {
			return this.$AssignmentAST$slot;
		});
		this.$setOnce$AssignmentAST$ = (function (v) {
			this.$AssignmentAST$slot = v;
			return this;
		});
		this.$BlockAST = (function () {
			return this.$BlockAST$slot;
		});
		this.$setOnce$BlockAST$ = (function (v) {
			this.$BlockAST$slot = v;
			return this;
		});
		this.$CascadedSendAST = (function () {
			return this.$CascadedSendAST$slot;
		});
		this.$setOnce$CascadedSendAST$ = (function (v) {
			this.$CascadedSendAST$slot = v;
			return this;
		});
		this.$CodeBodyAST = (function () {
			return this.$CodeBodyAST$slot;
		});
		this.$setOnce$CodeBodyAST$ = (function (v) {
			this.$CodeBodyAST$slot = v;
			return this;
		});
		this.$MessageAST = (function () {
			return this.$MessageAST$slot;
		});
		this.$setOnce$MessageAST$ = (function (v) {
			this.$MessageAST$slot = v;
			return this;
		});
		this.$MessagePatternAST = (function () {
			return this.$MessagePatternAST$slot;
		});
		this.$setOnce$MessagePatternAST$ = (function (v) {
			this.$MessagePatternAST$slot = v;
			return this;
		});
		this.$MethodAST = (function () {
			return this.$MethodAST$slot;
		});
		this.$setOnce$MethodAST$ = (function (v) {
			this.$MethodAST$slot = v;
			return this;
		});
		this.$NormalSendAST = (function () {
			return this.$NormalSendAST$slot;
		});
		this.$setOnce$NormalSendAST$ = (function (v) {
			this.$NormalSendAST$slot = v;
			return this;
		});
		this.$NumberAST = (function () {
			return this.$NumberAST$slot;
		});
		this.$setOnce$NumberAST$ = (function (v) {
			this.$NumberAST$slot = v;
			return this;
		});
		this.$ReturnStatAST = (function () {
			return this.$ReturnStatAST$slot;
		});
		this.$setOnce$ReturnStatAST$ = (function (v) {
			this.$ReturnStatAST$slot = v;
			return this;
		});
		this.$SendAST = (function () {
			return this.$SendAST$slot;
		});
		this.$setOnce$SendAST$ = (function (v) {
			this.$SendAST$slot = v;
			return this;
		});
		this.$SymbolAST = (function () {
			return this.$SymbolAST$slot;
		});
		this.$setOnce$SymbolAST$ = (function (v) {
			this.$SymbolAST$slot = v;
			return this;
		});
		this.$TupleAST = (function () {
			return this.$TupleAST$slot;
		});
		this.$setOnce$TupleAST$ = (function (v) {
			this.$TupleAST$slot = v;
			return this;
		});
		this.$VarDeclAST = (function () {
			return this.$VarDeclAST$slot;
		});
		this.$setOnce$VarDeclAST$ = (function (v) {
			this.$VarDeclAST$slot = v;
			return this;
		});
		this.$VariableAST = (function () {
			return this.$VariableAST$slot;
		});
		this.$setOnce$VariableAST$ = (function (v) {
			this.$VariableAST$slot = v;
			return this;
		});
		this.$parser = (function () {
			return this.$parser$slot;
		});
		this.$setOnce$parser$ = (function (v) {
			this.$parser$slot = v;
			return this;
		});
		this.$cachedCompilations = (function () {
			return this.$cachedCompilations$slot;
		});
		this.$setOnce$cachedCompilations$ = (function (v) {
			this.$cachedCompilations$slot = v;
			return this;
		});
		this.$Newspeak2V8Compilation$CachedCompilation = (function () {
			return this.$Newspeak2V8Compilation$CachedCompilation$slot;
		});
		this.$Newspeak2V8Compilation$CachedCompilation$ = (function (v) {
			this.$Newspeak2V8Compilation$CachedCompilation$slot = v;
			return this;
		});
		this.$Newspeak2V8Compilation$ClassDeclarationIR = (function () {
			return this.$Newspeak2V8Compilation$ClassDeclarationIR$slot;
		});
		this.$Newspeak2V8Compilation$ClassDeclarationIR$ = (function (v) {
			this.$Newspeak2V8Compilation$ClassDeclarationIR$slot = v;
			return this;
		});
		this.$Newspeak2V8Compilation$Compiler = (function () {
			return this.$Newspeak2V8Compilation$Compiler$slot;
		});
		this.$Newspeak2V8Compilation$Compiler$ = (function (v) {
			this.$Newspeak2V8Compilation$Compiler$slot = v;
			return this;
		});
		this.$Newspeak2V8Compilation$MethodIR = (function () {
			return this.$Newspeak2V8Compilation$MethodIR$slot;
		});
		this.$Newspeak2V8Compilation$MethodIR$ = (function (v) {
			this.$Newspeak2V8Compilation$MethodIR$slot = v;
			return this;
		});
		this.$Newspeak2V8Compilation$MixinIR = (function () {
			return this.$Newspeak2V8Compilation$MixinIR$slot;
		});
		this.$Newspeak2V8Compilation$MixinIR$ = (function (v) {
			this.$Newspeak2V8Compilation$MixinIR$slot = v;
			return this;
		});
		this.$Newspeak2V8Compilation$NameMangler = (function () {
			return this.$Newspeak2V8Compilation$NameMangler$slot;
		});
		this.$Newspeak2V8Compilation$NameMangler$ = (function (v) {
			this.$Newspeak2V8Compilation$NameMangler$slot = v;
			return this;
		});
		this.$Newspeak2V8Compilation$ProgramBuilder = (function () {
			return this.$Newspeak2V8Compilation$ProgramBuilder$slot;
		});
		this.$Newspeak2V8Compilation$ProgramBuilder$ = (function (v) {
			this.$Newspeak2V8Compilation$ProgramBuilder$slot = v;
			return this;
		});
		this.$Newspeak2V8Compilation$PropertyCallAST = (function () {
			return this.$Newspeak2V8Compilation$PropertyCallAST$slot;
		});
		this.$Newspeak2V8Compilation$PropertyCallAST$ = (function (v) {
			this.$Newspeak2V8Compilation$PropertyCallAST$slot = v;
			return this;
		});
		this.$Newspeak2V8Compilation$SlotIR = (function () {
			return this.$Newspeak2V8Compilation$SlotIR$slot;
		});
		this.$Newspeak2V8Compilation$SlotIR$ = (function (v) {
			this.$Newspeak2V8Compilation$SlotIR$slot = v;
			return this;
		});
		this.$Newspeak2V8Compilation$CachedCompilation = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Newspeak2V8Compilation`CachedCompilation";
			this.name = "Newspeak2V8Compilation`CachedCompilation";
			this.header = "CachedCompilation = (|\r	source <String>\r	enableIntrinsics <Boolean>\r	ir <ClassDeclarationIR>\r	sentSelectors <Set[Symbol]>\r|)";
			this.slots = [
				new SM("source", true, false),
				new SM("enableIntrinsics", true, false),
				new SM("ir", true, false),
				new SM("sentSelectors", true, false)
			];
			this.methods = [
				new MM("superInit`Newspeak2V8Compilation`CachedCompilation", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("source", true, null),
				new MM("source:", true, null),
				new MM("enableIntrinsics", true, null),
				new MM("enableIntrinsics:", true, null),
				new MM("ir", true, null),
				new MM("ir:", true, null),
				new MM("sentSelectors", true, null),
				new MM("sentSelectors:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Newspeak2V8Compilation$CachedCompilation = (function () {
				var self = this;
				self.$super$Newspeak2V8Compilation$CachedCompilation$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Newspeak2V8Compilation$CachedCompilation();
				return self;
			});
			this.$source = (function () {
				return this.$source$slot;
			});
			this.$source$ = (function (v) {
				this.$source$slot = v;
				return this;
			});
			this.$enableIntrinsics = (function () {
				return this.$enableIntrinsics$slot;
			});
			this.$enableIntrinsics$ = (function (v) {
				this.$enableIntrinsics$slot = v;
				return this;
			});
			this.$ir = (function () {
				return this.$ir$slot;
			});
			this.$ir$ = (function (v) {
				this.$ir$slot = v;
				return this;
			});
			this.$sentSelectors = (function () {
				return this.$sentSelectors$slot;
			});
			this.$sentSelectors$ = (function (v) {
				this.$sentSelectors$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Newspeak2V8Compilation`CachedCompilation";
					this._$superInit$Newspeak2V8Compilation$CachedCompilation = $.$superInit$Newspeak2V8Compilation$CachedCompilation;
					this.$superInit$Newspeak2V8Compilation$CachedCompilation = dnuCatcher("$superInit$Newspeak2V8Compilation$CachedCompilation");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$source = $.$source;
					this.$source = dnuCatcher("$source");
					this._$source$ = $.$source$;
					this.$source$ = dnuCatcher("$source$");
					this._$enableIntrinsics = $.$enableIntrinsics;
					this.$enableIntrinsics = dnuCatcher("$enableIntrinsics");
					this._$enableIntrinsics$ = $.$enableIntrinsics$;
					this.$enableIntrinsics$ = dnuCatcher("$enableIntrinsics$");
					this._$ir = $.$ir;
					this.$ir = dnuCatcher("$ir");
					this._$ir$ = $.$ir$;
					this.$ir$ = dnuCatcher("$ir$");
					this._$sentSelectors = $.$sentSelectors;
					this.$sentSelectors = dnuCatcher("$sentSelectors");
					this._$sentSelectors$ = $.$sentSelectors$;
					this.$sentSelectors$ = dnuCatcher("$sentSelectors$");
					this.$enclosingObjects$Newspeak2V8Compilation$CachedCompilation = enclosingObjects;
					this.$super$Newspeak2V8Compilation$CachedCompilation$slot = runtimeSuperclass;
					this["Newspeak2V8Compilation`CachedCompilation"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$source$slot = nil;
						this.$enableIntrinsics$slot = nil;
						this.$ir$slot = nil;
						this.$sentSelectors$slot = nil;
					});
					this.basicNew = this["Newspeak2V8Compilation`CachedCompilation"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Newspeak2V8Compilation`CachedCompilation";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Newspeak2V8Compilation`CachedCompilation";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Newspeak2V8Compilation$CachedCompilation = enclosingObjects;
						this.$super$Newspeak2V8Compilation$CachedCompilation = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Newspeak2V8Compilation$ClassDeclarationIR = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Newspeak2V8Compilation`ClassDeclarationIR";
			this.name = "Newspeak2V8Compilation`ClassDeclarationIR";
			this.header = "ClassDeclarationIR = (|\r	public name\r	public headerSource\r	public instanceSide = MixinIR for: self isMeta: false.\r	public classSide = MixinIR for: self isMeta: true.\r	public depth\r	public accessModifier\r|)";
			this.slots = [
				new SM("name", true, false),
				new SM("headerSource", true, false),
				new SM("instanceSide", false, false),
				new SM("classSide", false, false),
				new SM("depth", true, false),
				new SM("accessModifier", true, false)
			];
			this.methods = [
				new MM("superInit`Newspeak2V8Compilation`ClassDeclarationIR", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("basicNew", false, "basicNew = (\r	^js functionOf: {} body: (js block: (\r		{\r		js call: (js ident: 'superBasicNew.call') with: {js ident: 'this'}.\r		js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'hashCode')) toBe: (js literal: 0).\r		},\r		(instanceSide slots collect: [:s | \r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: (names mangleSlot: s name))) toBe: (js ident: 'nil')])\r	))\r)"),
				new MM("basicNewMeta", false, "basicNewMeta = (\r	^js functionOf: {} body: (js block: (\r		{\r		js call: (js ident: 'superBasicNew.call') with: {js ident: 'this'}.\r		js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'hashCode')) toBe: (js literal: 0).\r		}\r	))\r)"),
				new MM("classMethodsMetadata", false, "classMethodsMetadata = (\r	^js array: (classSide methods collect:\r		[:method | js new: (js ident: 'MM') with: {\r			js literal: method name.\r			js literal: method isSynthetic.\r			method src ifNil: [js ident: 'null'] ifNotNil: [:src | js literal: src]\r		}])\r)"),
				new MM("copyMethods:", false, "copyMethods: methods = (\r	| stmts = OrderedCollection new. |\r	methods do: [:m | \r		| assignProtected |\r		assignProtected::\r			(js assign: (js propertyOf: (js ident: 'this') at: (js literal: (names mangleProtected: m name)))\r				toBe: (js propertyOf: (js ident: '$') at: (js literal: (names manglePublic: m name)))).\r\r		m isPublic ifTrue: [\r			stmts add: (js assign: (js propertyOf: (js ident: 'this') at: (js literal: (names manglePublic: m name)))\r					toBe: assignProtected).\r		].\r		m isProtected ifTrue: [\r			stmts add: assignProtected.\r			stmts add: (js assign: (js propertyOf: (js ident: 'this') at: (js literal: (names manglePublic: m name)))\r					toBe: (dnuCatcherFor: (names manglePublic: m name))).\r		].\r		m name = #doesNotUnderstand: ifTrue: [\r			stmts add: (js assign: (js propertyOf: (js ident: 'this') at: (js literal: names privateDnu))\r					toBe: (js propertyOf: (js ident: '$') at: (js literal: (names manglePublic: m name)))).\r		].\r	].\r	^stmts\r)"),
				new MM("dnuCatcherFor:", false, "dnuCatcherFor: publicMangling = (\r	^js call: (js ident: 'dnuCatcher') with: {js literal: publicMangling}\r)"),
				new MM("invoke", false, "invoke = (				\r	^js functionOf: {js ident: 'runtimeSuperclass'. js ident: 'enclosingObjects'} body: (js block: {\r		js function: 'constructRuntimeClass' of: {js ident: 'superBasicNew'} body: (js block: (\r			{\r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'debug')) toBe: (js literal: 'Runtime class for ', name).\r			},\r			(copyMethods: instanceSide methods),\r			{\r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: (names manglePublic: 'enclosingObjects`',name)))\r				toBe: (js ident: 'enclosingObjects').\r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: (names mangleSlot: 'super`',name)))\r				toBe: (js ident: 'runtimeSuperclass').\r			(* This first assignment causes devtools to use the class's name as the short name for its instances. *)\r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: name)) toBe: basicNew.\r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'basicNew')) toBe: (js propertyOf: (js ident: 'this') at: (js literal: name)).\r			js verbatim: 'this.basicNew.prototype = this'.\r			js verbatim: 'this.meta = null'.\r			js verbatim: 'this.newspeakClass = null'.\r			}\r		)).\r		js verbatim: 'constructRuntimeClass.prototype = runtimeSuperclass'.\r		js verbatim: 'return new constructRuntimeClass(runtimeSuperclass.basicNew)'.\r	})\r)"),
				new MM("invokeMeta", false, "invokeMeta = (\r	^js functionOf: {js ident: 'runtimeSuperclass'. js ident: 'enclosingObjects'.} body: (js block: {\r		js function: 'constructRuntimeClass' of: {js ident: 'superBasicNew'} body: (js block: (\r			{\r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'debug')) toBe: (js literal: 'Runtime meta class for ', name).\r			},\r			(copyMethods: classSide methods),\r			{\r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: (names manglePublic: 'enclosingObjects`',name)))\r				toBe: (js ident: 'enclosingObjects').\r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: (names manglePublic: 'super`',name)))\r				toBe: (js ident: 'runtimeSuperclass').	\r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'basicNew')) toBe: basicNewMeta.\r			js verbatim: 'this.basicNew.prototype = this'.\r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'nonMeta')) toBe: (js ident: 'null').\r			js verbatim: 'this.newspeakClass = null'.\r			}\r		)).\r		js verbatim: 'constructRuntimeClass.prototype = runtimeSuperclass'.\r		js verbatim: 'return new constructRuntimeClass(runtimeSuperclass.basicNew)'.\r	})\r)"),
				new MM("makeMixin:", false, "makeMixin: rm = (\r	^js call: (js propertyOf: (js ident: 'Mixin') at: (js literal: 'fromRuntimeMixin')) with: {rm}\r)"),
				new MM("methodsMetadata", false, "methodsMetadata = (\r	^js array: (instanceSide methods collect:\r		[:method | js new: (js ident: 'MM') with: {\r			js literal: method name.\r			js literal: method isSynthetic.\r			method src ifNil: [js ident: 'null'] ifNotNil: [:src | js literal: src]\r		}])\r)"),
				new MM("nestedClassesMetadata", false, "nestedClassesMetadata = (\r	^js array: (instanceSide nestedClasses collect: [:nc | js literal: nc name])\r)"),
				new MM("printOn:", false, "public printOn: stm = (\r	stm nextPutAll: 'ClassDeclarationIR:'.\r	stm nextPutAll: name.\r)"),
				new MM("runtimeMetamixin", false, "runtimeMetamixin = (\r	^js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'meta')) toBe: (\r	js new: (js functionOf: {} body: (js block: (\r		{\r		js var: '$' value: (js ident: 'this').\r		js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'debug')) toBe: (js literal: 'Runtime meta mixin for ', name).\r		js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'slots')) toBe: (js array: {}).\r		js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'methods')) toBe: classMethodsMetadata.\r		js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'nestedClasses')) toBe: (js array: {}).\r		},\r		(classSide methods collect: [:m | \r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: (names manglePublic: m name))) toBe: m function]),\r		{\r		js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'invoke')) toBe: invokeMeta.\r		}\r	))) with: {})\r)"),
				new MM("runtimeMixin", false, "public runtimeMixin = (\r	^js new: (js functionOf: {} body: (js block: (\r		{\r		js var: '$' value: (js ident: 'this').\r		js var: '$', depth printString value: (js ident: 'this').\r		js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'debug')) toBe: (js literal: 'Runtime mixin for ', name).\r		js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'name')) toBe: (js literal: name).\r		js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'header')) toBe: (js literal: headerSource).\r		js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'slots')) toBe: slotsMetadata.\r		js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'methods')) toBe: methodsMetadata.\r		js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'nestedClasses')) toBe: nestedClassesMetadata.\r		js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'applications')) toBe: (js array: {}).\r		},\r		(instanceSide methods collect: [:m | \r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: (names manglePublic: m name))) toBe: m function]),\r		(instanceSide nestedClasses collect: [:ncd | \r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: (names manglePublic: ncd name))) toBe: ncd runtimeMixin]),\r		(instanceSide nestedClasses collect: [:ncd | \r			js assign: (js propertyOf: (js propertyOf: (js ident: 'this') at: (js literal: (names manglePublic: ncd name))) at: (js literal: 'enclosingMixin')) toBe: (js ident: 'this')]),\r		{\r		js assign: (js propertyOf: (js ident: 'this') at: (js literal: 'invoke')) toBe: invoke.\r		runtimeMetamixin.\r		js assign: (js propertyOf: (js propertyOf: (js ident: 'this') at: (js literal: 'meta')) at: (js literal: 'nonMeta')) toBe: (js ident: 'this').\r		}\r	))) with: {}\r)"),
				new MM("slotsMetadata", false, "slotsMetadata = (\r	^js array: (instanceSide slots collect:\r		[:slot | js new: (js ident: 'SM') with: {\r			js literal: slot name.\r			js literal: slot isMutable.\r			js literal: slot isSynthetic\r	}]).\r)"),
				new MM("name", true, null),
				new MM("name:", true, null),
				new MM("headerSource", true, null),
				new MM("headerSource:", true, null),
				new MM("instanceSide", true, null),
				new MM("setOnce`instanceSide:", true, null),
				new MM("classSide", true, null),
				new MM("setOnce`classSide:", true, null),
				new MM("depth", true, null),
				new MM("depth:", true, null),
				new MM("accessModifier", true, null),
				new MM("accessModifier:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Newspeak2V8Compilation$ClassDeclarationIR = (function () {
				var self = this;
				self.$super$Newspeak2V8Compilation$ClassDeclarationIR$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Newspeak2V8Compilation$ClassDeclarationIR();
				self._$setOnce$instanceSide$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$MixinIR().$for$isMeta$(self, false));
				self._$setOnce$classSide$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$MixinIR().$for$isMeta$(self, true));
				return self;
			});
			this.$basicNew = (function () {
				var self = this;
				return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$block$(([
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("superBasicNew.call"), [self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this")]),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("hashCode")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(0))
				]).$$comma(self._$instanceSide().$slots().$collect$((function ($s) {
					return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$names().$mangleSlot$($s.$name()))), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("nil"));
				})))));
			});
			this.$basicNewMeta = (function () {
				var self = this;
				return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$block$([
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("superBasicNew.call"), [self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this")]),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("hashCode")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(0))
				]));
			});
			this.$classMethodsMetadata = (function () {
				var self = this;
				return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$array$(self._$classSide().$methods().$collect$((function ($method) {
					return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$new$with$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("MM"), [
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$($method.$name()),
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$($method.$isSynthetic()),
						$method.$src().$ifNil$ifNotNil$((function () {
							return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("null");
						}), (function ($src) {
							return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$($src);
						}))
					]);
				})));
			});
			this.$copyMethods$ = (function ($methods) {
				var self = this;
				var $stmts = nil;
				$stmts = self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$OrderedCollection().$new();
				$methods.$do$((function ($m) {
					var $assignProtected = nil;
					$assignProtected = self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$names().$mangleProtected$($m.$name()))), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("$"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$names().$manglePublic$($m.$name()))));
					if ($m.$isPublic()) {
						$stmts.$add$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$names().$manglePublic$($m.$name()))), $assignProtected));
					} else {
						nil;
					};
					if ($m.$isProtected()) {
						$stmts.$add$($assignProtected);
						$stmts.$add$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$names().$manglePublic$($m.$name()))), self._$dnuCatcherFor$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$names().$manglePublic$($m.$name()))));
					} else {
						nil;
					};
					return $m.$name().$$equal("doesNotUnderstand:").$ifTrue$((function () {
						return $stmts.$add$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$names().$privateDnu())), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("$"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$names().$manglePublic$($m.$name())))));
					}));
				}));
				return $stmts;
			});
			this.$dnuCatcherFor$ = (function ($publicMangling) {
				var self = this;
				return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("dnuCatcher"), [self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$($publicMangling)]);
			});
			this.$invoke = (function () {
				var self = this;
				return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$functionOf$body$([
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("runtimeSuperclass"),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("enclosingObjects")
				], self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$block$([
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$function$of$body$("constructRuntimeClass", [self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("superBasicNew")], self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$block$(([self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("debug")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(("Runtime class for ").$$comma(self._$name())))]).$$comma(self._$copyMethods$(self._$instanceSide().$methods())).$$comma([
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$names().$manglePublic$(("enclosingObjects`").$$comma(self._$name())))), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("enclosingObjects")),
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$names().$mangleSlot$(("super`").$$comma(self._$name())))), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("runtimeSuperclass")),
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self._$name())), self._$basicNew()),
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("basicNew")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self._$name()))),
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$verbatim$("this.basicNew.prototype = this"),
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$verbatim$("this.meta = null"),
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$verbatim$("this.newspeakClass = null")
					]))),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$verbatim$("constructRuntimeClass.prototype = runtimeSuperclass"),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$verbatim$("return new constructRuntimeClass(runtimeSuperclass.basicNew)")
				]));
			});
			this.$invokeMeta = (function () {
				var self = this;
				return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$functionOf$body$([
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("runtimeSuperclass"),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("enclosingObjects")
				], self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$block$([
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$function$of$body$("constructRuntimeClass", [self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("superBasicNew")], self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$block$(([self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("debug")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(("Runtime meta class for ").$$comma(self._$name())))]).$$comma(self._$copyMethods$(self._$classSide().$methods())).$$comma([
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$names().$manglePublic$(("enclosingObjects`").$$comma(self._$name())))), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("enclosingObjects")),
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$names().$manglePublic$(("super`").$$comma(self._$name())))), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("runtimeSuperclass")),
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("basicNew")), self._$basicNewMeta()),
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$verbatim$("this.basicNew.prototype = this"),
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("nonMeta")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("null")),
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$verbatim$("this.newspeakClass = null")
					]))),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$verbatim$("constructRuntimeClass.prototype = runtimeSuperclass"),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$verbatim$("return new constructRuntimeClass(runtimeSuperclass.basicNew)")
				]));
			});
			this.$makeMixin$ = (function ($rm) {
				var self = this;
				return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("Mixin"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("fromRuntimeMixin")), [$rm]);
			});
			this.$methodsMetadata = (function () {
				var self = this;
				return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$array$(self._$instanceSide().$methods().$collect$((function ($method) {
					return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$new$with$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("MM"), [
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$($method.$name()),
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$($method.$isSynthetic()),
						$method.$src().$ifNil$ifNotNil$((function () {
							return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("null");
						}), (function ($src) {
							return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$($src);
						}))
					]);
				})));
			});
			this.$nestedClassesMetadata = (function () {
				var self = this;
				return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$array$(self._$instanceSide().$nestedClasses().$collect$((function ($nc) {
					return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$($nc.$name());
				})));
			});
			this.$printOn$ = (function ($stm) {
				var self = this;
				$stm.$nextPutAll$("ClassDeclarationIR:");
				$stm.$nextPutAll$(self._$name());
				return self;
			});
			this.$runtimeMetamixin = (function () {
				var self = this;
				return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("meta")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$new$with$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$block$(([
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$var$value$("$", self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this")),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("debug")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(("Runtime meta mixin for ").$$comma(self._$name()))),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("slots")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$array$([])),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("methods")), self._$classMethodsMetadata()),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("nestedClasses")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$array$([]))
				]).$$comma(self._$classSide().$methods().$collect$((function ($m) {
					return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$names().$manglePublic$($m.$name()))), $m.$function());
				}))).$$comma([self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("invoke")), self._$invokeMeta())]))), []));
			});
			this.$runtimeMixin = (function () {
				var self = this;
				return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$new$with$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$block$(([
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$var$value$("$", self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this")),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$var$value$(("$").$$comma(self._$depth().$printString()), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this")),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("debug")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(("Runtime mixin for ").$$comma(self._$name()))),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("name")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self._$name())),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("header")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self._$headerSource())),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("slots")), self._$slotsMetadata()),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("methods")), self._$methodsMetadata()),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("nestedClasses")), self._$nestedClassesMetadata()),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("applications")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$array$([]))
				]).$$comma(self._$instanceSide().$methods().$collect$((function ($m) {
					return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$names().$manglePublic$($m.$name()))), $m.$function());
				}))).$$comma(self._$instanceSide().$nestedClasses().$collect$((function ($ncd) {
					return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$names().$manglePublic$($ncd.$name()))), $ncd.$runtimeMixin());
				}))).$$comma(self._$instanceSide().$nestedClasses().$collect$((function ($ncd) {
					return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$names().$manglePublic$($ncd.$name()))), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("enclosingMixin")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"));
				}))).$$comma([
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("invoke")), self._$invoke()),
					self._$runtimeMetamixin(),
					self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("meta")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$("nonMeta")), self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("this"))
				]))), []);
			});
			this.$slotsMetadata = (function () {
				var self = this;
				return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$array$(self._$instanceSide().$slots().$collect$((function ($slot) {
					return self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$new$with$(self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$ident$("SM"), [
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$($slot.$name()),
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$($slot.$isMutable()),
						self.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR[0]._$js().$literal$($slot.$isSynthetic())
					]);
				})));
			});
			this.$name = (function () {
				return this.$name$slot;
			});
			this.$name$ = (function (v) {
				this.$name$slot = v;
				return this;
			});
			this.$headerSource = (function () {
				return this.$headerSource$slot;
			});
			this.$headerSource$ = (function (v) {
				this.$headerSource$slot = v;
				return this;
			});
			this.$instanceSide = (function () {
				return this.$instanceSide$slot;
			});
			this.$setOnce$instanceSide$ = (function (v) {
				this.$instanceSide$slot = v;
				return this;
			});
			this.$classSide = (function () {
				return this.$classSide$slot;
			});
			this.$setOnce$classSide$ = (function (v) {
				this.$classSide$slot = v;
				return this;
			});
			this.$depth = (function () {
				return this.$depth$slot;
			});
			this.$depth$ = (function (v) {
				this.$depth$slot = v;
				return this;
			});
			this.$accessModifier = (function () {
				return this.$accessModifier$slot;
			});
			this.$accessModifier$ = (function (v) {
				this.$accessModifier$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Newspeak2V8Compilation`ClassDeclarationIR";
					this._$superInit$Newspeak2V8Compilation$ClassDeclarationIR = $.$superInit$Newspeak2V8Compilation$ClassDeclarationIR;
					this.$superInit$Newspeak2V8Compilation$ClassDeclarationIR = dnuCatcher("$superInit$Newspeak2V8Compilation$ClassDeclarationIR");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$basicNew = $.$basicNew;
					this.$basicNew = dnuCatcher("$basicNew");
					this._$basicNewMeta = $.$basicNewMeta;
					this.$basicNewMeta = dnuCatcher("$basicNewMeta");
					this._$classMethodsMetadata = $.$classMethodsMetadata;
					this.$classMethodsMetadata = dnuCatcher("$classMethodsMetadata");
					this._$copyMethods$ = $.$copyMethods$;
					this.$copyMethods$ = dnuCatcher("$copyMethods$");
					this._$dnuCatcherFor$ = $.$dnuCatcherFor$;
					this.$dnuCatcherFor$ = dnuCatcher("$dnuCatcherFor$");
					this._$invoke = $.$invoke;
					this.$invoke = dnuCatcher("$invoke");
					this._$invokeMeta = $.$invokeMeta;
					this.$invokeMeta = dnuCatcher("$invokeMeta");
					this._$makeMixin$ = $.$makeMixin$;
					this.$makeMixin$ = dnuCatcher("$makeMixin$");
					this._$methodsMetadata = $.$methodsMetadata;
					this.$methodsMetadata = dnuCatcher("$methodsMetadata");
					this._$nestedClassesMetadata = $.$nestedClassesMetadata;
					this.$nestedClassesMetadata = dnuCatcher("$nestedClassesMetadata");
					this.$printOn$ = this._$printOn$ = $.$printOn$;
					this._$runtimeMetamixin = $.$runtimeMetamixin;
					this.$runtimeMetamixin = dnuCatcher("$runtimeMetamixin");
					this.$runtimeMixin = this._$runtimeMixin = $.$runtimeMixin;
					this._$slotsMetadata = $.$slotsMetadata;
					this.$slotsMetadata = dnuCatcher("$slotsMetadata");
					this.$name = this._$name = $.$name;
					this.$name$ = this._$name$ = $.$name$;
					this.$headerSource = this._$headerSource = $.$headerSource;
					this.$headerSource$ = this._$headerSource$ = $.$headerSource$;
					this.$instanceSide = this._$instanceSide = $.$instanceSide;
					this.$setOnce$instanceSide$ = this._$setOnce$instanceSide$ = $.$setOnce$instanceSide$;
					this.$classSide = this._$classSide = $.$classSide;
					this.$setOnce$classSide$ = this._$setOnce$classSide$ = $.$setOnce$classSide$;
					this.$depth = this._$depth = $.$depth;
					this.$depth$ = this._$depth$ = $.$depth$;
					this.$accessModifier = this._$accessModifier = $.$accessModifier;
					this.$accessModifier$ = this._$accessModifier$ = $.$accessModifier$;
					this.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR = enclosingObjects;
					this.$super$Newspeak2V8Compilation$ClassDeclarationIR$slot = runtimeSuperclass;
					this["Newspeak2V8Compilation`ClassDeclarationIR"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$name$slot = nil;
						this.$headerSource$slot = nil;
						this.$instanceSide$slot = nil;
						this.$classSide$slot = nil;
						this.$depth$slot = nil;
						this.$accessModifier$slot = nil;
					});
					this.basicNew = this["Newspeak2V8Compilation`ClassDeclarationIR"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Newspeak2V8Compilation`ClassDeclarationIR";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Newspeak2V8Compilation`ClassDeclarationIR";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Newspeak2V8Compilation$ClassDeclarationIR = enclosingObjects;
						this.$super$Newspeak2V8Compilation$ClassDeclarationIR = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Newspeak2V8Compilation$Compiler = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Newspeak2V8Compilation`Compiler";
			this.name = "Newspeak2V8Compilation`Compiler";
			this.header = "Compiler = super Compiler ((* A work-in-progress Compiler reimplementation, with Javascript AST as the output. This makes automated testing easier and provides control over formatting (for example, placing every expression on its own line to allow for precise breakpoint placement in substandard JS debugger implementations). *)|\r	scopeStack ::= OrderedCollection new.\r	input\r	sentSelectors ::= Set new.\r\r	rewriter = Rewriter new.	\r	translator = Translator new.\r	currentDepth\r	currentMixinUID\r	jsWriter = JavascriptWriter new.\r	supportDoesNotUnderstand ::= true.\r	inlineOperators ::= true.\r	enableIntrinsics ::= true.\r|)";
			this.slots = [
				new SM("scopeStack", true, false),
				new SM("input", true, false),
				new SM("sentSelectors", true, false),
				new SM("rewriter", false, false),
				new SM("translator", false, false),
				new SM("currentDepth", true, false),
				new SM("currentMixinUID", true, false),
				new SM("jsWriter", false, false),
				new SM("supportDoesNotUnderstand", true, false),
				new SM("inlineOperators", true, false),
				new SM("enableIntrinsics", true, false),
				new SM("Newspeak2V8Compilation`Compiler`Rewriter", true, true),
				new SM("Newspeak2V8Compilation`Compiler`ScopeBuilder", true, true),
				new SM("Newspeak2V8Compilation`Compiler`Translator", true, true)
			];
			this.methods = [
				new MM("superInit`Newspeak2V8Compilation`Compiler", true, "Compiler"),
				new MM("instance`initializer", true, "Compiler"),
				new MM("accessorForNestedClassNamed:in:superCall:", false, "accessorForNestedClassNamed: simpleName <String> in: mixinName  <String> superCall: superAccessor <Node> ^ <String> = (\r(* Build  a method that will lazily create a nested class 'simpleName' with superclass defined by 'superAccessor' via mixin application, and cache it.  Maybe replace null slot with self-replacing function that computes class and stores in its closure? *)\r\r	| nestedName <String> nestedSlotName <String> nestedSlotNode <Node> enclosingObjectsName <String> |\r	nestedName:: names mangleSynthetic: mixinName, '`', simpleName.\r	nestedSlotName:: names mangleSlot: mixinName, '`', simpleName.\r	nestedSlotNode:: js propertyOf: (js ident: 'this') at: (js literal: nestedSlotName).	\r	enclosingObjectsName:: names mangleSynthetic: 'enclosingObjects`', mixinName.\r	^js functionOf: {} body: (js block: {\r		js if: (js operator: '===' with: (js ident: 'nil') and: nestedSlotNode)\r			then: (js block: {\r				js var: 'self' value: (js ident: 'this').\r				js var: 'superclass' value: superAccessor.\r				js var: 'enclosingObjects' value: \r					(js call: (js propertyOf: (js array: {js ident: 'this'}) at: (js literal: 'concat'))\r						with: {js propertyOf: (js ident: 'this') at: (js literal: enclosingObjectsName)}).\r				js var: 'mixin' value: (js propertyOf: (js ident: '$') at: (js literal: nestedName)).\r				js assign: nestedSlotNode toBe: \r					(js call: (js propertyOf: (js ident: 'vmmirror') at: (js literal: '$applyMixin$toSuperclass$withEnclosingObjects$'))\r						with: {(js ident: 'mixin'). js ident: 'superclass'. js ident: 'enclosingObjects'}).\r			}).\r		js return: nestedSlotNode.\r		})\r)"),
				new MM("accessorForSuperclass:inScope:", false, "accessorForSuperclass: superclassCall <AST> inScope: s <Scope> ^<Node> = (\r	| send scopeBuilder |\r	rewriter pushScope: s.\r	send:: superclassCall apply: rewriter.\r	rewriter popScope.\r	\r	translator beginNewTranslationCycle.\r	^send apply: translator\r)"),
				new MM("checkForDuplicateNames:", false, "checkForDuplicateNames: aNode = (\r\r	| namesWithDuplicates names duplicateNames |\r	\r	namesWithDuplicates:: OrderedCollection new.\r	aNode instanceSide categories do: [:cat |\r		cat methods do: [:each | namesWithDuplicates add: each selector]].\r	\r	aNode header slots do: [:each |\r		namesWithDuplicates add: each name.\r		each isMutable ifTrue: [namesWithDuplicates add: each name, ':']].\r	\r	namesWithDuplicates\r		addAll: (aNode instanceSide nestedClasses collect: [:each | each name]).\r\r	names:: Set new.\r	duplicateNames:: Set new.\r	namesWithDuplicates do: [:each | | present |\r		present:: true.\r		names include: each ifNew: [present:: false].\r		present ifTrue: [duplicateNames add: each]].\r	\r	duplicateNames isEmpty ifFalse: [ | message |\r		message:: String streamContents: [:s |\r			s\r				nextPutAll: 'Class ';\r				nextPutAll: aNode name;\r				nextPutAll: '\" has multiple definitions for '.\r			duplicateNames\r				do: [:each | s nextPutAll: each asString]\r				separatedBy: [ s nextPutAll: ','].\r			s nextPutAll: '.'.].\r		assert: false message: message].\r\r)"),
				new MM("classNode:", false, "classNode: aNode <ClassDeclarationAST> ^ <ClassDeclarationIR> = (\r	| ir <ClassDeclarationIR> priorMixinUID <String> |\r	aNode name = #Newspeak2V8Compilation ifTrue: [\r		#BOGUS. (* The flaw in the js intrinsic scheme. *)\r		enableIntrinsics: false].\r	checkForDuplicateNames: aNode.\r	ir:: computeMixinFrom: aNode header.\r	ir accessModifier: aNode accessModifier.\r	priorMixinUID:: currentMixinUID.\r	currentMixinUID:: ir name.\r	currentDepth:: currentDepth + 1.\r	processInstanceSideOf: aNode ofMixin: ir instanceSide.\r	generateSlotAccessorsFor:  ir instanceSide. \r	(* must be called after nested classes are processed, so all synthetic slots have been added *)\r	processClassSideOf: aNode ofMixin: ir classSide.\r	currentDepth::currentDepth - 1.\r	currentMixinUID:: priorMixinUID.\r	^ir\r)"),
				new MM("compileClassSource:within:", false, "public compileClassSource: source <ReadStream> within: enclosing <MixinMirror> ^<CompiledMixinMirror> = (\r	| tree <AST> mixinRep <MixinRep> |\r	tree:: parser compilationUnit parse: source.\r	setInput: source.\r	setScopeFor: tree in: enclosing.\r	(*sentSelectors:: Set new.*)\r	mixinRep:: classNode: tree.\r	scopeMap:: Dictionary new.\r	^enclosing isNil ifTrue:[mixinRep] ifFalse:[{enclosing. mixinRep}].\r)"),
				new MM("compileExpressionSource:inMixin:", false, "public compileExpressionSource: stm <ReadStream> inMixin: enclosing <MixinMirror> ^<MethodIR> = (\r	|\r	body <CodeBodyAST>\r	method <MethodAST>\r	result <LowLevelMethodMirror>\r	|\r	\r	(* Parse as a code body *)\r	body:: parser doItExpression parse: stm.\r	input:: stm.\r\r	(* Ensure last statement is a return statement *)\r	body statements isEmpty ifFalse:\r		[body statements last isReturnStatNode ifFalse:\r			[| last |\r			last:: body statements removeLast.\r			body statements add: (ReturnStatAST new \r				expression: last; start: last start; end: last end)]].\r\r	(* Put into a method *)\r	method:: MethodAST new\r		pattern: (MessagePatternAST new selector: #DoIt parameters: {});\r		body: body;\r		accessModifier: #public.\r	\r	(* Build scope *)\r	setScopeFor: method in: enclosing.\r	currentMixinUID: enclosing declaration name.\r	\r	(* Rewrite and compile *)\r 	result:: methodNode: method.\r	scopeMap:: Dictionary new.\r	^result\r)"),
				new MM("compileMethodSource:within:", false, "public compileMethodSource: source <ReadStream> within: enclosing <MixinMirror> ^<MethodMirror> = (\r	| tree <AST> jsTree |\r	tree:: parser methodDecl parse: source.\r	setInput: source.\r	setScopeFor: tree in: enclosing.\r	currentMixinUID: enclosing declaration name.\r	jsTree:: methodNode: tree.\r	scopeMap:: Dictionary new.\r	^jsTree\r)"),
				new MM("compileNestedClasses:within:", false, "compileNestedClasses: nestedClasses <Collection[ClassDeclarationAST]> within: mixinIR <MixinIR> = (\r	\r	nestedClasses do:\r		[ :nc <ClassDeclarationAST> |  \r			| nSlotName <String> nSlot <InstanceVariableMirror> |\r		nSlotName:: mixinIR declaration name, '`', nc name.\r		nSlot:: SlotIR named: nSlotName mutable: true accessModifier: #public (* questionable*).\r		nSlot isSynthetic: true.\r		mixinIR slots add: nSlot.\r		mixinIR nestedClasses add: (classNode: (nestedMixinWrapperFor: nc in: mixinIR)). (* make 'mixin' (a Smalltalk subclass of ProtoObject) for nested class *)\r		createNestedClassAccessorFrom: nc within: mixinIR\r		].\r)"),
				new MM("compileNestedClassesOf:within:", false, "compileNestedClassesOf: aNode <SideAST> within: mixinMirror <LowLevelMixinMirror> ^ <Collection[MixinRep]> = (\r	(* where do we check that nested classes do not conflict with each other, or with methods or slots? *)\r	^compileNestedClasses: aNode nestedClasses within: mixinMirror\r)"),
				new MM("computeMethod:inScope:", false, "computeMethod: aNode <MethodAST> inScope: s <Scope> = (\r	|  scopeBuilder <ScopeBuilder>  |\r	scopeBuilder:: ScopeBuilder nestedIn: s atLevel: currentDepth.\r	aNode apply: scopeBuilder.\r	(* need to build scope for method before visiting it *)\r	^methodNode: aNode.\r)"),
				new MM("computeMixinFrom:", false, "computeMixinFrom: aNode <ClassHeaderAST> ^ <ClassDeclarationIR> = (\r	| \r	ir = ClassDeclarationIR new.\r	|\r	\r	ir name: aNode name.\r	aNode slots do: [:s |\r		ir instanceSide slots add:\r			(SlotIR \r				named: s name\r				mutable: s isMutable\r				accessModifier: s accessModifier)].\r	ir headerSource: (input contents copyFrom: aNode start to: aNode end).\r	ir depth: currentDepth.\r	(* ir factorySelector: aNode constructor selector. *)\r	^ir\r)"),
				new MM("createNestedClassAccessorFrom:within:", false, "createNestedClassAccessorFrom: classDecl <ClassDeclarationAST> within: mixinMirror <LowLevelMixinMirror> = (\r(* Create an accessor method for the nested class represented by the incoming class tree.\rThis accessor will lazily generate the nested class when its enclosing instance is first asked for it. *)\r\r	| n <String>  accessorString <String> methodAST hdr <ClassHeaderAST> accessor <MethdMirror>  |\r	hdr:: classDecl header.\r	n:: hdr name. \r	methodAST:: \r		accessorForNestedClassNamed: n \r		in:  mixinMirror name \r		superCall: (accessorForSuperclass: hdr superclassCall inScope:  (scopeMap at: classDecl instanceSide)).\r	accessor:: MethodIR \r		named: classDecl name\r		accessModifier: classDecl accessModifier\r		function: methodAST\r		source: nil.\r	accessor isSynthetic: true.\r	mixinMirror methods add: accessor.\r)"),
				new MM("currentScope", false, "currentScope ^<Scope> = (\r	^scopeStack last\r)"),
				new MM("dnuHandlers", false, "public dnuHandlers = (\r	(* We used to generate a separate function for each selector. Now we are recycling the same code for each selector and using the JS magic 'arguments' to handle the variable number of arguments in an attempt to reduce the amount of code the must be compiled at start-up (recall DNU handlers must be installed up front). *)\r	|\r	mangledSelectors = js array: (sentSelectors collect: [:sel | js literal: (names manglePublic: sel)]).\r	catcher = js call: (js ident: 'dnuCatcher') with: {js ident: 'sel'}.\r	|\r	^js function: 'installDnuHandlersOn' of: {js ident: 'p'} body: (js block: {\r		js call: (js propertyOf: mangledSelectors at: (js literal: 'forEach'))\r		with: {js functionOf: {'sel'} body: (js block: {\r			js assign: (js propertyOf: (js ident: 'p') at: (js operator: '+' with: (js literal: '_') and: (js ident: 'sel'))) toBe: catcher.\r			js assign: (js propertyOf: (js ident: 'p') at: (js ident: 'sel')) toBe: catcher\r		})}\r	}).\r	(* function() {  this.dnu(kernel.Message().selector$arguments$(selector, arguments) )  } *)\r)"),
				new MM("generateSlotAccessorsFor:", false, "generateSlotAccessorsFor: mixinIR <MixinIR>  = (\r(* We need getter FUNCTIONS so we can call them uniformly with arguments (albeit empty ones) *)\r	mixinIR slots do: [:slotIR  | \r		| getter <MethodMirror> getterJS <Node> setter <MethodMirror> setterJS <Node> slotName <String> fieldName |\r		slotName:: slotIR name.\r		fieldName:: names mangleSlot: slotName.\r		\r		\r		getterJS:: js functionOf: {} body: (js block: {\r			js return: (js propertyOf: (js ident: 'this') at: (js literal: fieldName))\r			}).\r		getter:: MethodIR\r			named: slotName\r			accessModifier: slotIR accessModifier\r			function: getterJS\r			source: nil.\r		getter isSynthetic: true.			\r		mixinIR methods add: getter.\r		\r		setterJS:: js functionOf: {'v'} body: (js block: {\r			(js assign: (js propertyOf: (js ident: 'this') at: (js literal: fieldName))\r				toBe: (js ident: 'v')).\r			js return: (js ident: 'this')\r			}).\r		setter:: MethodIR \r			named: (setterSelectorFor: slotIR)\r			accessModifier: slotIR accessModifier\r			function: setterJS\r			source: nil.\r		setter isSynthetic: true.	\r		mixinIR methods add: setter.\r		]	\r)"),
				new MM("hereNode", false, "hereNode ^<VariableAST> = (\r	(* Generates an AST representing the implicit receiver. We use a string so that we can represent a name that is not a legal identier *)\r	\r	^VariableAST new name: #'@here'; start: 0; end: 0.\r)"),
				new MM("hereSendFrom:", false, "hereSendFrom: arg <VarDeclAST> ^<MessageNode> = (\r	^NormalSendAST new\r		to: hereNode\r		send: (MessageAST new \r			send: arg name\r			with: {};\r			start: arg start; end: arg end); \r		start: arg start; end: arg end\r)"),
				new MM("initializerFor:", false, "initializerFor: aNode <ClassHeaderAST> ^ <MethodAST> = (\r| \rstmts  <Collection[StatementAST]>\rstart <Integer>  \rend <Integer> \rinitHdr <MessagePatternAST>\rbody <CodeBodyAST> \rcopier <ASTCopier> \rparams <List[VarDeclAST]>\r|\r\r	start:: aNode superConstructorCall start.\r	end:: aNode superConstructorCall end.\r	copier:: ASTCopier new.\r	params:: aNode constructor parameters collect: \r		[:formal | formal apply: copier].\r	initHdr:: MessagePatternAST new\r		selector: #'instance`initializer' parameters: params;\r		start: start; end: end.\r		\r	(* set up scope with constructor parameters *)\r 	stmts:: OrderedCollection new.\r	\r	stmts add: (superConstructorCallFor: aNode).\r	\r	(aNode slots reject: [:ea | ea initializer isNil]) \r		do: [:slot <SlotDefAST> | | aMsg <MessageAST> |\r	aMsg:: MessageAST new send: (setterSelectorFor: slot)\r					   with:  {slot initializer apply: copier} ;\r					   start: slot  start; end: slot end.\r	stmts add: (NormalSendAST new message: aMsg; \r                          receiver: (selfNode start: aMsg start; end: aMsg end);\r                          start: aMsg start; end: aMsg end).			\r	].\r\r stmts addAll: (aNode initExprs collect:[:ie | ie apply: copier]).\r body:: CodeBodyAST new temporaries: OrderedCollection new\r                                       statements: stmts; \r                                       start: start; end: end.\r ^MethodAST new pattern: initHdr\r                            body: body\r                            accessModifier: #public; \r                            start: start; end: end.\r)"),
				new MM("language", false, "language = (\r	^#NewspeakLanguage2\r)"),
				new MM("methodNode:", false, "methodNode: aNode <MethodAST> ^ <MethodMirror> = (\r	| tree <AST> jsTree |\r	tree:: aNode apply: rewriter.  (* rewrite ast *)\r	translator beginNewTranslationCycle.\r	jsTree:: tree apply: translator.	 (* final pass: visit rewritten ast *)\r	(* pop scope? *)\r	^MethodIR\r		named: translator currentSelector\r		accessModifier: aNode accessModifier\r		function: jsTree\r		source: ([sourceForNode: aNode] on: Error do: [nil])\r)"),
				new MM("nestScope:", false, "nestScope: s <Scope> = (\r	(* Hook up a new lexically nested scope, and push onto the scope stack *)\r	s setSuperScope: currentScope.\r	pushScope: s\r)"),
				new MM("nestedMixinWrapperFor:in:", false, "nestedMixinWrapperFor: nested <ClassDeclarationAST> in: outerClass <MixinMirror>  ^ <ClassDeclarationAST> = (\r(* Wrap a class declaration to make it look like a nested mixin within outerClass should. This includes making the name be the fully qualified name, and hiding the superclass. *)\r\r	| wrapper <ClassDeclarationAST> |\r	wrapper:: nested clone.\r	wrapper header: nested header clone.\r	wrapper header name: (names fullyQualifySimpleName: nested name with: outerClass name).\r	^wrapper\r)"),
				new MM("popScope", false, "popScope ^<Scope> = (\r	^scopeStack removeLast\r)"),
				new MM("processClassSideOf:ofMixin:", false, "processClassSideOf: aNode <ClassAST> ofMixin: mixinMirror <LowLevelMixinMirror> = (\r	(* | primaryFactory <MethodMirror> factoryAST <MethodAST> | *)\r	processFactoryFor: aNode in: mixinMirror.\r	processSide: aNode classSide ofMixin: mixinMirror. (* compile class methods *)\r)"),
				new MM("processFactoryFor:in:", false, "processFactoryFor: aNode <ClassAST> in: mixinIR <MixinIR> = (\r	| accessor <MethdMirror> argNames ast |\r	argNames:: (aNode header constructor parameters collect: [:each | names mangleLocal: each name]) asArray.\r	ast:: js functionOf: argNames body: (js block: {\r		js return:\r			(js call: (js ident: '(new this.nonMeta.basicNew()).$instance$initializer') (* cheat! *)\r				with: (argNames collect: [:each | js ident: each]))\r		}).\r	accessor:: MethodIR \r		named: aNode header constructor selector\r		accessModifier: #public\r		function: ast\r		source: nil.\r	accessor isSynthetic: true.\r	accessor isFactory: true.\r	mixinIR methods add: accessor.\r)"),
				new MM("processInitializerFor:in:", false, "processInitializerFor: aNode <ClassAST> in: mixinIR <MixinIR> = (\r	processMethod: (superConstructorMethodFor: aNode header) inScope:  (scopeMap at: aNode instanceSide) in: mixinIR. \r	(*makeCreateSlotsFor: aNode hdr within: mixinIR.*)\r	processMethod: (initializerFor: aNode header) inScope:  (scopeMap at: aNode instanceSide) in: mixinIR.\r)"),
				new MM("processInstanceSideOf:ofMixin:", false, "processInstanceSideOf: aNode <ClassAST> ofMixin: mixinIR <MixinIR> ^ <Collection[MixinRep]> = (\r	processInitializerFor: aNode in: mixinIR.\r	processSide: aNode instanceSide ofMixin: mixinIR. (* compile instance methods *)\r	compileNestedClassesOf: aNode instanceSide within: mixinIR. (* gather nested classes *)\r)"),
				new MM("processMethod:inScope:in:", false, "processMethod: aNode <MethodAST> inScope: s <Scope> in: mixinIR <MixinIR> = (\r	|  method <MethodMirror> |\r	method:: computeMethod: aNode inScope: s.\r	method isSynthetic: true.\r	mixinIR methods add: method.\r)"),
				new MM("processSide:ofMixin:", false, "processSide: side <SideAST> ofMixin: mixinIR <MixinIR> = (\r	side categories do: [:cat |\r		cat methods do: [:m | \r			mixinIR methods add: (methodNode: m)]].\r)"),
				new MM("pushScope:", false, "pushScope: scope <Scope> = (\r	scopeStack addLast: scope\r)"),
				new MM("selfNode", false, "selfNode ^ <VariableAST> = (\r	(* generate a an AST representing self; used for implicit self sends *)\r	^VariableAST new name: #self; start: 0; end: 0\r)"),
				new MM("setInput:", false, "setInput: source <ReadStream> = (\r	source position: 1.\r	input: source. (* save the input *)\r)"),
				new MM("setScopeFor:in:", false, "setScopeFor: node <AST> in: enclosing <MixinMirror | nil> = (\r	| scopeBuilder |\r	pushScope: Scope new.\r	enclosing isNil ifFalse: [nestScope:: ScopeBuilder new buildScopeFor: enclosing].\r	currentDepth:: currentScope depth.\r	scopeBuilder:: ScopeBuilder nestedIn: currentScope atLevel: currentDepth.\r	node apply: scopeBuilder\r)"),
				new MM("setterSelectorFor:", false, "setterSelectorFor: slot <SlotDefAST | InstanceVariableMirror> ^<Symbol> = (\r	^((slot isMutableSlot ifTrue: [ '' ] ifFalse: [ 'setOnce`' ]), slot name, ':') asSymbol.\r)"),
				new MM("sourceForNode:", false, "sourceForNode: node <AST> ^ <String> = (\r	| savedPos <Integer> pos <Integer> len <Integer> s <String> |\r	^input contents copyFrom: node start to: node end\r)"),
				new MM("superConstructorCallFor:", false, "superConstructorCallFor: aNode <ClassHeaderAST> ^<NormalSendAST> = (\r	\r	(* create call to super constructor method *)\r	|\r	var  <VariableAST> \r	send <NormalSendAST>\r	start <Integer> \r	end <Integer>  \r	superMsg <MessageAST>\r	args <List[VariableAST]> \r	|\r\r	start:: aNode superConstructorCall start.\r	end:: aNode superConstructorCall end.\r	var:: VariableAST new name: #self; start: start; end: end.\r	args:: aNode constructor parameters collect:\r		[:p <VarDeclAST> | hereSendFrom: p].\r	superMsg:: MessageAST new \r		send: (superConstructorNameFor: aNode) with: args; \r		start: start; end: end.\r	send:: NormalSendAST new to: var send: superMsg; start: start; end: end.	\r	^send\r)"),
				new MM("superConstructorMethodFor:", false, "superConstructorMethodFor:  aNode <ClassHeaderAST> ^ <MethodAST> = (\r| \rstart <Integer> \rend <Integer>\rstmts <List[StmtAST]> \rvar  <VariableAST> \rinitHdr <MessagePatternAST>\rsuperMsg <MessageAST> \rsend <NormalSendAST>\rbody  <CodeBodyAST>\rcopier <ASTCopier>\rparams <List[VarDeclAST]>\rargs <List>\r|\r\r	start:: aNode superConstructorCall start.\r	end::  aNode  superConstructorCall end.\r	copier:: ASTCopier new.\r	params:: aNode constructor parameters collect:[:formal | formal apply: copier].\r	initHdr:: MessagePatternAST new selector: (superConstructorNameFor: aNode) parameters: params;\r				start: start; end: end. \r	(* set up scope with constructor parameters *)\r	(* create call to superclass initializer *)\r	stmts:: OrderedCollection new. \r	var:: VariableAST new name: #super; start: start; end: end.\r	args:: aNode superConstructorCall arguments collect:[:actual | actual apply: copier].\r	superMsg::  PropertyCallAST new send: 'instance`initializer' with: args; \r				start: start; end: end. \r	(* only copy actual args *)\r	(* send these as a tuple? to super instance initializer? *)\r	send:: NormalSendAST new to: var send: superMsg; start: start; end: end. \r	stmts addFirst: send.\r	body:: CodeBodyAST new temporaries: OrderedCollection new\r                                       	statements: stmts;\r                                      	start: start; end: end.\r	^MethodAST new pattern: initHdr\r                            body: body\r                            accessModifier: #protected;\r                            start: start; end: end	\r)"),
				new MM("superConstructorNameFor:", false, "superConstructorNameFor: aNode <ClassHeaderAST> ^ <Symbol> = (\r	^'superInit`', aNode name\r)"),
				new MM("scopeMap", false, "scopeMap = (\r	^super scopeMap\r)"),
				new MM("Rewriter", true, null),
				new MM("ScopeBuilder", true, null),
				new MM("Translator", true, null),
				new MM("scopeStack", true, null),
				new MM("scopeStack:", true, null),
				new MM("input", true, null),
				new MM("input:", true, null),
				new MM("sentSelectors", true, null),
				new MM("sentSelectors:", true, null),
				new MM("rewriter", true, null),
				new MM("setOnce`rewriter:", true, null),
				new MM("translator", true, null),
				new MM("setOnce`translator:", true, null),
				new MM("currentDepth", true, null),
				new MM("currentDepth:", true, null),
				new MM("currentMixinUID", true, null),
				new MM("currentMixinUID:", true, null),
				new MM("jsWriter", true, null),
				new MM("setOnce`jsWriter:", true, null),
				new MM("supportDoesNotUnderstand", true, null),
				new MM("supportDoesNotUnderstand:", true, null),
				new MM("inlineOperators", true, null),
				new MM("inlineOperators:", true, null),
				new MM("enableIntrinsics", true, null),
				new MM("enableIntrinsics:", true, null),
				new MM("Newspeak2V8Compilation`Compiler`Rewriter", true, null),
				new MM("Newspeak2V8Compilation`Compiler`Rewriter:", true, null),
				new MM("Newspeak2V8Compilation`Compiler`ScopeBuilder", true, null),
				new MM("Newspeak2V8Compilation`Compiler`ScopeBuilder:", true, null),
				new MM("Newspeak2V8Compilation`Compiler`Translator", true, null),
				new MM("Newspeak2V8Compilation`Compiler`Translator:", true, null)
			];
			this.nestedClasses = [
				"Newspeak2V8Compilation`Compiler`Rewriter",
				"Newspeak2V8Compilation`Compiler`ScopeBuilder",
				"Newspeak2V8Compilation`Compiler`Translator"
			];
			this.applications = [];
			this.$superInit$Newspeak2V8Compilation$Compiler = (function () {
				var self = this;
				self.$super$Newspeak2V8Compilation$Compiler$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Newspeak2V8Compilation$Compiler();
				self._$scopeStack$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$OrderedCollection().$new());
				self._$sentSelectors$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$Set().$new());
				self._$setOnce$rewriter$(self._$Rewriter().$new());
				self._$setOnce$translator$(self._$Translator().$new());
				self._$setOnce$jsWriter$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$JavascriptWriter().$new());
				self._$supportDoesNotUnderstand$(true);
				self._$inlineOperators$(true);
				self._$enableIntrinsics$(true);
				return self;
			});
			this.$accessorForNestedClassNamed$in$superCall$ = (function ($simpleName, $mixinName, $superAccessor) {
				var self = this;
				var $nestedName = nil;
				var $nestedSlotName = nil;
				var $nestedSlotNode = nil;
				var $enclosingObjectsName = nil;
				$nestedName = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$names().$mangleSynthetic$($mixinName.$$comma("`").$$comma($simpleName));
				$nestedSlotName = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$names().$mangleSlot$($mixinName.$$comma("`").$$comma($simpleName));
				$nestedSlotNode = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$($nestedSlotName));
				$enclosingObjectsName = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$names().$mangleSynthetic$(("enclosingObjects`").$$comma($mixinName));
				return self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([
					self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$if$then$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$operator$with$and$("===", self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("nil"), $nestedSlotNode), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([
						self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$var$value$("self", self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("this")),
						self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$var$value$("superclass", $superAccessor),
						self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$var$value$("enclosingObjects", self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$array$([self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("this")]), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$("concat")), [self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$($enclosingObjectsName))])),
						self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$var$value$("mixin", self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("$"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$($nestedName))),
						self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$assign$toBe$($nestedSlotNode, self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("vmmirror"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$("$applyMixin$toSuperclass$withEnclosingObjects$")), [
							self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("mixin"),
							self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("superclass"),
							self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("enclosingObjects")
						]))
					])),
					self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$return$($nestedSlotNode)
				]));
			});
			this.$accessorForSuperclass$inScope$ = (function ($superclassCall, $s) {
				var self = this;
				var $send = nil;
				var $scopeBuilder = nil;
				self._$rewriter().$pushScope$($s);
				$send = $superclassCall.$apply$(self._$rewriter());
				self._$rewriter().$popScope();
				self._$translator().$beginNewTranslationCycle();
				return $send.$apply$(self._$translator());
			});
			this.$checkForDuplicateNames$ = (function ($aNode) {
				var self = this;
				var $namesWithDuplicates = nil;
				var $names = nil;
				var $duplicateNames = nil;
				$namesWithDuplicates = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$OrderedCollection().$new();
				$aNode.$instanceSide().$categories().$do$((function ($cat) {
					return $cat.$methods().$do$((function ($each) {
						return $namesWithDuplicates.$add$($each.$selector());
					}));
				}));
				$aNode.$header().$slots().$do$((function ($each) {
					$namesWithDuplicates.$add$($each.$name());
					return $each.$isMutable().$ifTrue$((function () {
						return $namesWithDuplicates.$add$($each.$name().$$comma(":"));
					}));
				}));
				$namesWithDuplicates.$addAll$($aNode.$instanceSide().$nestedClasses().$collect$((function ($each) {
					return $each.$name();
				})));
				$names = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$Set().$new();
				$duplicateNames = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$Set().$new();
				$namesWithDuplicates.$do$((function ($each) {
					var $present = nil;
					$present = true;
					$names.$include$ifNew$($each, (function () {
						return $present = false;
					}));
					return $present.$ifTrue$((function () {
						return $duplicateNames.$add$($each);
					}));
				}));
				if (!$duplicateNames.$isEmpty()) {
					var $message = nil;
					$message = self._$String().$streamContents$((function ($s) {
						(function (cascadeReceiver) {
							cascadeReceiver.$nextPutAll$("Class ");
							cascadeReceiver.$nextPutAll$($aNode.$name());
							return cascadeReceiver.$nextPutAll$("\" has multiple definitions for ");
						})($s);
						$duplicateNames.$do$separatedBy$((function ($each) {
							return $s.$nextPutAll$($each.$asString());
						}), (function () {
							return $s.$nextPutAll$(",");
						}));
						return $s.$nextPutAll$(".");
					}));
					self._$assert$message$(false, $message);
				} else {
					nil;
				};
				return self;
			});
			this.$classNode$ = (function ($aNode) {
				var self = this;
				var $ir = nil;
				var $priorMixinUID = nil;
				if ($aNode.$name().$$equal("Newspeak2V8Compilation")) {
					"BOGUS";
					self._$enableIntrinsics$(false);
				} else {
					nil;
				};
				self._$checkForDuplicateNames$($aNode);
				$ir = self._$computeMixinFrom$($aNode.$header());
				$ir.$accessModifier$($aNode.$accessModifier());
				$priorMixinUID = self._$currentMixinUID();
				self._$currentMixinUID$($ir.$name());
				self._$currentDepth$(self._$currentDepth() + 1);
				self._$processInstanceSideOf$ofMixin$($aNode, $ir.$instanceSide());
				self._$generateSlotAccessorsFor$($ir.$instanceSide());
				self._$processClassSideOf$ofMixin$($aNode, $ir.$classSide());
				self._$currentDepth$(self._$currentDepth() - 1);
				self._$currentMixinUID$($priorMixinUID);
				return $ir;
			});
			this.$compileClassSource$within$ = (function ($source, $enclosing) {
				var self = this;
				var $tree = nil;
				var $mixinRep = nil;
				$tree = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$parser().$compilationUnit().$parse$($source);
				self._$setInput$($source);
				self._$setScopeFor$in$($tree, $enclosing);
				$mixinRep = self._$classNode$($tree);
				self._$scopeMap$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$Dictionary().$new());
				return $enclosing.$isNil().$ifTrue$ifFalse$((function () {
					return $mixinRep;
				}), (function () {
					return [
						$enclosing,
						$mixinRep
					];
				}));
			});
			this.$compileExpressionSource$inMixin$ = (function ($stm, $enclosing) {
				var self = this;
				var $body = nil;
				var $method = nil;
				var $result = nil;
				$body = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$parser().$doItExpression().$parse$($stm);
				self._$input$($stm);
				if (!$body.$statements().$isEmpty()) {
					if (!$body.$statements().$last().$isReturnStatNode()) {
						var $last = nil;
						$last = $body.$statements().$removeLast();
						$body.$statements().$add$((function (cascadeReceiver) {
							cascadeReceiver.$expression$($last);
							cascadeReceiver.$start$($last.$start());
							return cascadeReceiver.$end$($last.$end());
						})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$ReturnStatAST().$new()));
					} else {
						nil;
					};
				} else {
					nil;
				};
				$method = (function (cascadeReceiver) {
					cascadeReceiver.$pattern$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MessagePatternAST().$new().$selector$parameters$("DoIt", []));
					cascadeReceiver.$body$($body);
					return cascadeReceiver.$accessModifier$("public");
				})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MethodAST().$new());
				self._$setScopeFor$in$($method, $enclosing);
				self._$currentMixinUID$($enclosing.$declaration().$name());
				$result = self._$methodNode$($method);
				self._$scopeMap$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$Dictionary().$new());
				return $result;
			});
			this.$compileMethodSource$within$ = (function ($source, $enclosing) {
				var self = this;
				var $tree = nil;
				var $jsTree = nil;
				$tree = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$parser().$methodDecl().$parse$($source);
				self._$setInput$($source);
				self._$setScopeFor$in$($tree, $enclosing);
				self._$currentMixinUID$($enclosing.$declaration().$name());
				$jsTree = self._$methodNode$($tree);
				self._$scopeMap$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$Dictionary().$new());
				return $jsTree;
			});
			this.$compileNestedClasses$within$ = (function ($nestedClasses, $mixinIR) {
				var self = this;
				$nestedClasses.$do$((function ($nc) {
					var $nSlotName = nil;
					var $nSlot = nil;
					$nSlotName = $mixinIR.$declaration().$name().$$comma("`").$$comma($nc.$name());
					$nSlot = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$SlotIR().$named$mutable$accessModifier$($nSlotName, true, "public");
					$nSlot.$isSynthetic$(true);
					$mixinIR.$slots().$add$($nSlot);
					$mixinIR.$nestedClasses().$add$(self._$classNode$(self._$nestedMixinWrapperFor$in$($nc, $mixinIR)));
					return self._$createNestedClassAccessorFrom$within$($nc, $mixinIR);
				}));
				return self;
			});
			this.$compileNestedClassesOf$within$ = (function ($aNode, $mixinMirror) {
				var self = this;
				return self._$compileNestedClasses$within$($aNode.$nestedClasses(), $mixinMirror);
			});
			this.$computeMethod$inScope$ = (function ($aNode, $s) {
				var self = this;
				var $scopeBuilder = nil;
				$scopeBuilder = self._$ScopeBuilder().$nestedIn$atLevel$($s, self._$currentDepth());
				$aNode.$apply$($scopeBuilder);
				return self._$methodNode$($aNode);
			});
			this.$computeMixinFrom$ = (function ($aNode) {
				var self = this;
				var $ir = nil;
				$ir = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$ClassDeclarationIR().$new();
				$ir.$name$($aNode.$name());
				$aNode.$slots().$do$((function ($s) {
					return $ir.$instanceSide().$slots().$add$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$SlotIR().$named$mutable$accessModifier$($s.$name(), $s.$isMutable(), $s.$accessModifier()));
				}));
				$ir.$headerSource$(self._$input().$contents().$copyFrom$to$($aNode.$start(), $aNode.$end()));
				$ir.$depth$(self._$currentDepth());
				return $ir;
			});
			this.$createNestedClassAccessorFrom$within$ = (function ($classDecl, $mixinMirror) {
				var self = this;
				var $n = nil;
				var $accessorString = nil;
				var $methodAST = nil;
				var $hdr = nil;
				var $accessor = nil;
				$hdr = $classDecl.$header();
				$n = $hdr.$name();
				$methodAST = self._$accessorForNestedClassNamed$in$superCall$($n, $mixinMirror.$name(), self._$accessorForSuperclass$inScope$($hdr.$superclassCall(), self._$scopeMap().$at$($classDecl.$instanceSide())));
				$accessor = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MethodIR().$named$accessModifier$function$source$($classDecl.$name(), $classDecl.$accessModifier(), $methodAST, nil);
				$accessor.$isSynthetic$(true);
				$mixinMirror.$methods().$add$($accessor);
				return self;
			});
			this.$currentScope = (function () {
				var self = this;
				return self._$scopeStack().$last();
			});
			this.$dnuHandlers = (function () {
				var self = this;
				var $mangledSelectors = nil;
				var $catcher = nil;
				$mangledSelectors = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$array$(self._$sentSelectors().$collect$((function ($sel) {
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$names().$manglePublic$($sel));
				})));
				$catcher = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("dnuCatcher"), [self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("sel")]);
				return self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$function$of$body$("installDnuHandlersOn", [self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("p")], self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$($mangledSelectors, self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$("forEach")), [self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$functionOf$body$(["sel"], self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([
					self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("p"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$operator$with$and$("+", self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$("_"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("sel"))), $catcher),
					self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("p"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("sel")), $catcher)
				]))])]));
			});
			this.$generateSlotAccessorsFor$ = (function ($mixinIR) {
				var self = this;
				$mixinIR.$slots().$do$((function ($slotIR) {
					var $getter = nil;
					var $getterJS = nil;
					var $setter = nil;
					var $setterJS = nil;
					var $slotName = nil;
					var $fieldName = nil;
					$slotName = $slotIR.$name();
					$fieldName = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$names().$mangleSlot$($slotName);
					$getterJS = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$return$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$($fieldName)))]));
					$getter = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MethodIR().$named$accessModifier$function$source$($slotName, $slotIR.$accessModifier(), $getterJS, nil);
					$getter.$isSynthetic$(true);
					$mixinIR.$methods().$add$($getter);
					$setterJS = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$functionOf$body$(["v"], self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([
						self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$literal$($fieldName)), self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("v")),
						self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$return$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("this"))
					]));
					$setter = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MethodIR().$named$accessModifier$function$source$(self._$setterSelectorFor$($slotIR), $slotIR.$accessModifier(), $setterJS, nil);
					$setter.$isSynthetic$(true);
					return $mixinIR.$methods().$add$($setter);
				}));
				return self;
			});
			this.$hereNode = (function () {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$name$("@here");
					cascadeReceiver.$start$(0);
					return cascadeReceiver.$end$(0);
				})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$VariableAST().$new());
			});
			this.$hereSendFrom$ = (function ($arg) {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$to$send$(self._$hereNode(), (function (cascadeReceiver) {
						cascadeReceiver.$send$with$($arg.$name(), []);
						cascadeReceiver.$start$($arg.$start());
						return cascadeReceiver.$end$($arg.$end());
					})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MessageAST().$new()));
					cascadeReceiver.$start$($arg.$start());
					return cascadeReceiver.$end$($arg.$end());
				})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$NormalSendAST().$new());
			});
			this.$initializerFor$ = (function ($aNode) {
				var self = this;
				var $stmts = nil;
				var $start = nil;
				var $end = nil;
				var $initHdr = nil;
				var $body = nil;
				var $copier = nil;
				var $params = nil;
				$start = $aNode.$superConstructorCall().$start();
				$end = $aNode.$superConstructorCall().$end();
				$copier = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$ASTCopier().$new();
				$params = $aNode.$constructor().$parameters().$collect$((function ($formal) {
					return $formal.$apply$($copier);
				}));
				$initHdr = (function (cascadeReceiver) {
					cascadeReceiver.$selector$parameters$("instance`initializer", $params);
					cascadeReceiver.$start$($start);
					return cascadeReceiver.$end$($end);
				})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MessagePatternAST().$new());
				$stmts = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$OrderedCollection().$new();
				$stmts.$add$(self._$superConstructorCallFor$($aNode));
				$aNode.$slots().$reject$((function ($ea) {
					return $ea.$initializer().$isNil();
				})).$do$((function ($slot) {
					var $aMsg = nil;
					$aMsg = (function (cascadeReceiver) {
						cascadeReceiver.$send$with$(self._$setterSelectorFor$($slot), [$slot.$initializer().$apply$($copier)]);
						cascadeReceiver.$start$($slot.$start());
						return cascadeReceiver.$end$($slot.$end());
					})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MessageAST().$new());
					return $stmts.$add$((function (cascadeReceiver) {
						cascadeReceiver.$message$($aMsg);
						cascadeReceiver.$receiver$((function (cascadeReceiver) {
							cascadeReceiver.$start$($aMsg.$start());
							return cascadeReceiver.$end$($aMsg.$end());
						})(self._$selfNode()));
						cascadeReceiver.$start$($aMsg.$start());
						return cascadeReceiver.$end$($aMsg.$end());
					})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$NormalSendAST().$new()));
				}));
				$stmts.$addAll$($aNode.$initExprs().$collect$((function ($ie) {
					return $ie.$apply$($copier);
				})));
				$body = (function (cascadeReceiver) {
					cascadeReceiver.$temporaries$statements$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$OrderedCollection().$new(), $stmts);
					cascadeReceiver.$start$($start);
					return cascadeReceiver.$end$($end);
				})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$CodeBodyAST().$new());
				return (function (cascadeReceiver) {
					cascadeReceiver.$pattern$body$accessModifier$($initHdr, $body, "public");
					cascadeReceiver.$start$($start);
					return cascadeReceiver.$end$($end);
				})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MethodAST().$new());
			});
			this.$language = (function () {
				var self = this;
				return "NewspeakLanguage2";
			});
			this.$methodNode$ = (function ($aNode) {
				var self = this;
				var $tree = nil;
				var $jsTree = nil;
				$tree = $aNode.$apply$(self._$rewriter());
				self._$translator().$beginNewTranslationCycle();
				$jsTree = $tree.$apply$(self._$translator());
				return self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MethodIR().$named$accessModifier$function$source$(self._$translator().$currentSelector(), $aNode.$accessModifier(), $jsTree, ((function () {
					return self._$sourceForNode$($aNode);
				})).$on$do$(self._$Error(), (function () {
					return nil;
				})));
			});
			this.$nestScope$ = (function ($s) {
				var self = this;
				$s.$setSuperScope$(self._$currentScope());
				self._$pushScope$($s);
				return self;
			});
			this.$nestedMixinWrapperFor$in$ = (function ($nested, $outerClass) {
				var self = this;
				var $wrapper = nil;
				$wrapper = $nested.$clone();
				$wrapper.$header$($nested.$header().$clone());
				$wrapper.$header().$name$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$names().$fullyQualifySimpleName$with$($nested.$name(), $outerClass.$name()));
				return $wrapper;
			});
			this.$popScope = (function () {
				var self = this;
				return self._$scopeStack().$removeLast();
			});
			this.$processClassSideOf$ofMixin$ = (function ($aNode, $mixinMirror) {
				var self = this;
				self._$processFactoryFor$in$($aNode, $mixinMirror);
				self._$processSide$ofMixin$($aNode.$classSide(), $mixinMirror);
				return self;
			});
			this.$processFactoryFor$in$ = (function ($aNode, $mixinIR) {
				var self = this;
				var $accessor = nil;
				var $argNames = nil;
				var $ast = nil;
				$argNames = $aNode.$header().$constructor().$parameters().$collect$((function ($each) {
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$names().$mangleLocal$($each.$name());
				})).$asArray();
				$ast = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$functionOf$body$($argNames, self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$return$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$("(new this.nonMeta.basicNew()).$instance$initializer"), $argNames.$collect$((function ($each) {
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$js().$ident$($each);
				}))))]));
				$accessor = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MethodIR().$named$accessModifier$function$source$($aNode.$header().$constructor().$selector(), "public", $ast, nil);
				$accessor.$isSynthetic$(true);
				$accessor.$isFactory$(true);
				$mixinIR.$methods().$add$($accessor);
				return self;
			});
			this.$processInitializerFor$in$ = (function ($aNode, $mixinIR) {
				var self = this;
				self._$processMethod$inScope$in$(self._$superConstructorMethodFor$($aNode.$header()), self._$scopeMap().$at$($aNode.$instanceSide()), $mixinIR);
				self._$processMethod$inScope$in$(self._$initializerFor$($aNode.$header()), self._$scopeMap().$at$($aNode.$instanceSide()), $mixinIR);
				return self;
			});
			this.$processInstanceSideOf$ofMixin$ = (function ($aNode, $mixinIR) {
				var self = this;
				self._$processInitializerFor$in$($aNode, $mixinIR);
				self._$processSide$ofMixin$($aNode.$instanceSide(), $mixinIR);
				self._$compileNestedClassesOf$within$($aNode.$instanceSide(), $mixinIR);
				return self;
			});
			this.$processMethod$inScope$in$ = (function ($aNode, $s, $mixinIR) {
				var self = this;
				var $method = nil;
				$method = self._$computeMethod$inScope$($aNode, $s);
				$method.$isSynthetic$(true);
				$mixinIR.$methods().$add$($method);
				return self;
			});
			this.$processSide$ofMixin$ = (function ($side, $mixinIR) {
				var self = this;
				$side.$categories().$do$((function ($cat) {
					return $cat.$methods().$do$((function ($m) {
						return $mixinIR.$methods().$add$(self._$methodNode$($m));
					}));
				}));
				return self;
			});
			this.$pushScope$ = (function ($scope) {
				var self = this;
				self._$scopeStack().$addLast$($scope);
				return self;
			});
			this.$selfNode = (function () {
				var self = this;
				return (function (cascadeReceiver) {
					cascadeReceiver.$name$("self");
					cascadeReceiver.$start$(0);
					return cascadeReceiver.$end$(0);
				})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$VariableAST().$new());
			});
			this.$setInput$ = (function ($source) {
				var self = this;
				$source.$position$(1);
				self._$input$($source);
				return self;
			});
			this.$setScopeFor$in$ = (function ($node, $enclosing) {
				var self = this;
				var $scopeBuilder = nil;
				self._$pushScope$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$Scope().$new());
				if (!$enclosing.$isNil()) {
					self._$nestScope$(self._$ScopeBuilder().$new().$buildScopeFor$($enclosing));
				} else {
					nil;
				};
				self._$currentDepth$(self._$currentScope().$depth());
				$scopeBuilder = self._$ScopeBuilder().$nestedIn$atLevel$(self._$currentScope(), self._$currentDepth());
				$node.$apply$($scopeBuilder);
				return self;
			});
			this.$setterSelectorFor$ = (function ($slot) {
				var self = this;
				return $slot.$isMutableSlot().$ifTrue$ifFalse$((function () {
					return "";
				}), (function () {
					return "setOnce`";
				})).$$comma($slot.$name()).$$comma(":").$asSymbol();
			});
			this.$sourceForNode$ = (function ($node) {
				var self = this;
				var $savedPos = nil;
				var $pos = nil;
				var $len = nil;
				var $s = nil;
				return self._$input().$contents().$copyFrom$to$($node.$start(), $node.$end());
			});
			this.$superConstructorCallFor$ = (function ($aNode) {
				var self = this;
				var $var = nil;
				var $send = nil;
				var $start = nil;
				var $end = nil;
				var $superMsg = nil;
				var $args = nil;
				$start = $aNode.$superConstructorCall().$start();
				$end = $aNode.$superConstructorCall().$end();
				$var = (function (cascadeReceiver) {
					cascadeReceiver.$name$("self");
					cascadeReceiver.$start$($start);
					return cascadeReceiver.$end$($end);
				})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$VariableAST().$new());
				$args = $aNode.$constructor().$parameters().$collect$((function ($p) {
					return self._$hereSendFrom$($p);
				}));
				$superMsg = (function (cascadeReceiver) {
					cascadeReceiver.$send$with$(self._$superConstructorNameFor$($aNode), $args);
					cascadeReceiver.$start$($start);
					return cascadeReceiver.$end$($end);
				})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MessageAST().$new());
				$send = (function (cascadeReceiver) {
					cascadeReceiver.$to$send$($var, $superMsg);
					cascadeReceiver.$start$($start);
					return cascadeReceiver.$end$($end);
				})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$NormalSendAST().$new());
				return $send;
			});
			this.$superConstructorMethodFor$ = (function ($aNode) {
				var self = this;
				var $start = nil;
				var $end = nil;
				var $stmts = nil;
				var $var = nil;
				var $initHdr = nil;
				var $superMsg = nil;
				var $send = nil;
				var $body = nil;
				var $copier = nil;
				var $params = nil;
				var $args = nil;
				$start = $aNode.$superConstructorCall().$start();
				$end = $aNode.$superConstructorCall().$end();
				$copier = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$ASTCopier().$new();
				$params = $aNode.$constructor().$parameters().$collect$((function ($formal) {
					return $formal.$apply$($copier);
				}));
				$initHdr = (function (cascadeReceiver) {
					cascadeReceiver.$selector$parameters$(self._$superConstructorNameFor$($aNode), $params);
					cascadeReceiver.$start$($start);
					return cascadeReceiver.$end$($end);
				})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MessagePatternAST().$new());
				$stmts = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$OrderedCollection().$new();
				$var = (function (cascadeReceiver) {
					cascadeReceiver.$name$("super");
					cascadeReceiver.$start$($start);
					return cascadeReceiver.$end$($end);
				})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$VariableAST().$new());
				$args = $aNode.$superConstructorCall().$arguments().$collect$((function ($actual) {
					return $actual.$apply$($copier);
				}));
				$superMsg = (function (cascadeReceiver) {
					cascadeReceiver.$send$with$("instance`initializer", $args);
					cascadeReceiver.$start$($start);
					return cascadeReceiver.$end$($end);
				})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$PropertyCallAST().$new());
				$send = (function (cascadeReceiver) {
					cascadeReceiver.$to$send$($var, $superMsg);
					cascadeReceiver.$start$($start);
					return cascadeReceiver.$end$($end);
				})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$NormalSendAST().$new());
				$stmts.$addFirst$($send);
				$body = (function (cascadeReceiver) {
					cascadeReceiver.$temporaries$statements$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$OrderedCollection().$new(), $stmts);
					cascadeReceiver.$start$($start);
					return cascadeReceiver.$end$($end);
				})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$CodeBodyAST().$new());
				return (function (cascadeReceiver) {
					cascadeReceiver.$pattern$body$accessModifier$($initHdr, $body, "protected");
					cascadeReceiver.$start$($start);
					return cascadeReceiver.$end$($end);
				})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$MethodAST().$new());
			});
			this.$superConstructorNameFor$ = (function ($aNode) {
				var self = this;
				return ("superInit`").$$comma($aNode.$name());
			});
			this.$scopeMap = (function () {
				var self = this;
				return self.$super$Newspeak2V8Compilation$Compiler$slot._$scopeMap.call(self);
			});
			this.$Rewriter = (function () {
				if (nil === this.$Newspeak2V8Compilation$Compiler$Rewriter$slot) {
					var self = this;
					var superclass = self.$super$Newspeak2V8Compilation$Compiler$slot._$Rewriter.call(self);
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$Newspeak2V8Compilation$Compiler);
					var mixin = $.$Newspeak2V8Compilation$Compiler$Rewriter;
					this.$Newspeak2V8Compilation$Compiler$Rewriter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$Newspeak2V8Compilation$Compiler$Rewriter$slot;
			});
			this.$ScopeBuilder = (function () {
				if (nil === this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot) {
					var self = this;
					var superclass = self.$super$Newspeak2V8Compilation$Compiler$slot._$ScopeBuilder.call(self);
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$Newspeak2V8Compilation$Compiler);
					var mixin = $.$Newspeak2V8Compilation$Compiler$ScopeBuilder;
					this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot;
			});
			this.$Translator = (function () {
				if (nil === this.$Newspeak2V8Compilation$Compiler$Translator$slot) {
					var self = this;
					var superclass = self.$enclosingObjects$Newspeak2V8Compilation$Compiler[0]._$ASTTool();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$Newspeak2V8Compilation$Compiler);
					var mixin = $.$Newspeak2V8Compilation$Compiler$Translator;
					this.$Newspeak2V8Compilation$Compiler$Translator$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$Newspeak2V8Compilation$Compiler$Translator$slot;
			});
			this.$scopeStack = (function () {
				return this.$scopeStack$slot;
			});
			this.$scopeStack$ = (function (v) {
				this.$scopeStack$slot = v;
				return this;
			});
			this.$input = (function () {
				return this.$input$slot;
			});
			this.$input$ = (function (v) {
				this.$input$slot = v;
				return this;
			});
			this.$sentSelectors = (function () {
				return this.$sentSelectors$slot;
			});
			this.$sentSelectors$ = (function (v) {
				this.$sentSelectors$slot = v;
				return this;
			});
			this.$rewriter = (function () {
				return this.$rewriter$slot;
			});
			this.$setOnce$rewriter$ = (function (v) {
				this.$rewriter$slot = v;
				return this;
			});
			this.$translator = (function () {
				return this.$translator$slot;
			});
			this.$setOnce$translator$ = (function (v) {
				this.$translator$slot = v;
				return this;
			});
			this.$currentDepth = (function () {
				return this.$currentDepth$slot;
			});
			this.$currentDepth$ = (function (v) {
				this.$currentDepth$slot = v;
				return this;
			});
			this.$currentMixinUID = (function () {
				return this.$currentMixinUID$slot;
			});
			this.$currentMixinUID$ = (function (v) {
				this.$currentMixinUID$slot = v;
				return this;
			});
			this.$jsWriter = (function () {
				return this.$jsWriter$slot;
			});
			this.$setOnce$jsWriter$ = (function (v) {
				this.$jsWriter$slot = v;
				return this;
			});
			this.$supportDoesNotUnderstand = (function () {
				return this.$supportDoesNotUnderstand$slot;
			});
			this.$supportDoesNotUnderstand$ = (function (v) {
				this.$supportDoesNotUnderstand$slot = v;
				return this;
			});
			this.$inlineOperators = (function () {
				return this.$inlineOperators$slot;
			});
			this.$inlineOperators$ = (function (v) {
				this.$inlineOperators$slot = v;
				return this;
			});
			this.$enableIntrinsics = (function () {
				return this.$enableIntrinsics$slot;
			});
			this.$enableIntrinsics$ = (function (v) {
				this.$enableIntrinsics$slot = v;
				return this;
			});
			this.$Newspeak2V8Compilation$Compiler$Rewriter = (function () {
				return this.$Newspeak2V8Compilation$Compiler$Rewriter$slot;
			});
			this.$Newspeak2V8Compilation$Compiler$Rewriter$ = (function (v) {
				this.$Newspeak2V8Compilation$Compiler$Rewriter$slot = v;
				return this;
			});
			this.$Newspeak2V8Compilation$Compiler$ScopeBuilder = (function () {
				return this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot;
			});
			this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$ = (function (v) {
				this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot = v;
				return this;
			});
			this.$Newspeak2V8Compilation$Compiler$Translator = (function () {
				return this.$Newspeak2V8Compilation$Compiler$Translator$slot;
			});
			this.$Newspeak2V8Compilation$Compiler$Translator$ = (function (v) {
				this.$Newspeak2V8Compilation$Compiler$Translator$slot = v;
				return this;
			});
			this.$Newspeak2V8Compilation$Compiler$Rewriter = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for Newspeak2V8Compilation`Compiler`Rewriter";
				this.name = "Newspeak2V8Compilation`Compiler`Rewriter";
				this.header = "Rewriter = super Rewriter (|\r	protected inlinableOperators <Dictionary[String, String]> = Dictionary new.\r	protected inlinableNumericOperators <Dictionary[String, String]> = Dictionary new.\r|inlinableOperators\r		at: #+ put: '+';\r		at: #- put: '-';\r		at: #* put: '*';\r		at: #/ put: '/';\r		at: #'==' put: '==='.\r	inlinableNumericOperators	\r		at: #'<' put: '<';\r		at: #'<=' put: '<=';\r		at: #'>' put: '>';\r		at: #'>=' put: '>=')";
				this.slots = [
					new SM("inlinableOperators", false, false),
					new SM("inlinableNumericOperators", false, false),
					new SM("Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST", true, true),
					new SM("Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST", true, true)
				];
				this.methods = [
					new MM("superInit`Newspeak2V8Compilation`Compiler`Rewriter", true, "Rewriter"),
					new MM("instance`initializer", true, "Rewriter"),
					new MM("__isInlinableAsExpressionConditional:", false, "__isInlinableAsExpressionConditional: node <NormalSendAST> ^ <Boolean> = (\r	((conditionalSelectors includes: node msg sel) and: [valueExpected]) ifFalse: [^false].\r	node msg args do:\r		[:each <AST> |\r		((isRemovableBlock: each withArgs: 0)\r			and: [each body statements size = 1\r			and: [each body statements first isReturnStatNode not]])\r				ifFalse: [^false]].\r	^true\r)"),
					new MM("canInlineSeqexps", false, "canInlineSeqexps ^<Boolean> = (\r	^false\r)"),
					new MM("currentScope", false, "currentScope = (\r	^super currentScope\r)"),
					new MM("inline:as:selector:rewriteArgsAs:", false, "inline: node as: sendClass selector: selector rewriteArgsAs: argRewriteBlock = (\r	| receiver message |\r	receiver:: applyForValueTo: node receiver.\r	message:: MessageAST new\r		send: selector\r		with: (node message arguments collect: argRewriteBlock).\r	^sendClass new\r		to: receiver send: message;\r		start: node start;\r		end: node end\r)"),
					new MM("isInlinableBooleanOperator:", false, "isInlinableBooleanOperator: node <NormalSendAST> = (\r	| selector |\r	selector:: node message selector.\r	^(selector = 'or:' or: [selector = 'and:'])\r		and: [node message arguments size = 1\r		and: [node message arguments first isBlockNode\r		and: [node message arguments first body statements size = 1]]]\r)"),
					new MM("isInlinableNumericOperator:", false, "isInlinableNumericOperator: node <NormalSendAST> = (\r	| args |\r	args:: node message arguments.\r	args size = 1 ifFalse: [^false].\r	(inlinableNumericOperators includesKey: node message selector) ifFalse: [^false].\r	(node receiver isLiteralNode and: [node receiver value isNumber]) ifTrue: [^true].\r	(args first isLiteralNode and: [args first value isNumber]) ifTrue: [^true].\r	^false\r)"),
					new MM("isInlinableOperator:", false, "isInlinableOperator: node <NormalSendAST> = (\r	^(inlinableOperators includesKey: node message selector)\r		and: [node message arguments size = 1]\r)"),
					new MM("processEventualSend:", false, "processEventualSend: node <NormalSendAST> = (\r	| scheduler receiver selector arguments |\r	scheduler:: SchedulerAST new.\r		\r	receiver:: node receiver apply: self.\r	selector:: (SymbolAST new value: node message selector) apply: self.\r	arguments:: (TupleAST new elements: node message arguments) apply: self.\r\r	^(OrdinarySendAST\r		to: scheduler\r		send: ((MessageAST new\r			send: #eventualSendTo:selector:arguments: \r			with: {receiver. selector. arguments})\r				copyPositionFrom: node message))\r		copyPositionFrom: node\r)"),
					new MM("setterBlockArgName", false, "setterBlockArgName = (\r	^ ('setter_arg') asSymbol\r)"),
					new MM("normalSendNode:", false, "public normalSendNode: node <NormalSendAST> ^ <AST> = (\r\r	(inlineOperators and: [isInlinableNumericOperator: node]) ifTrue:\r		[^inline: node as: InlinedOperatorAST\r			selector: (inlinableNumericOperators at: node message selector)\r			rewriteArgsAs: [:each | applyForValueTo: each]].\r	(inlineOperators and: [isInlinableOperator: node]) ifTrue:\r		[^inline: node as: InlinedOperatorAST\r			selector: (inlinableOperators at: node message selector)\r			rewriteArgsAs: [:each | applyForValueTo: each]].\r	(inlineOperators and: [isInlinableBooleanOperator: node]) ifTrue:\r		[^inline: node as: InlinedOperatorAST\r			selector: (node message selector = 'and:' ifTrue: ['&&'] ifFalse: ['||']) (* BOGUS *)\r			rewriteArgsAs: [:each <BlockAST> | applyForValueTo: each body statements first]].\r	\r	^super normalSendNode: node\r)"),
					new MM("propertyCallNode:", false, "public propertyCallNode: node <PropertyCallAST> ^ <PropertyCallAST> = (\r	| args |\r	assert: [node isMessageNode].\r	args:: OrderedCollection new.\r	node arguments do: [:each | args add: (applyForValueTo: each)].\r	^PropertyCallAST new\r		send: node selector with: args;\r		start: node start;\r		end: node end\r)"),
					new MM("setterSendNode:", false, "public setterSendNode: node <SetterSendAST> ^ <AST> = (\r(* Rewrite a double-colon setter send. The value of the entire expression should be the value of the argument of the send, NOT the value returned by the setter method. This general case is somewhat inefficient, but in most cases the value of the expression is ignored by the parent so we can use a cheaper regular message send. *)\r	| binding block blockArg blockParam blockScope send rewrittenSetterSend |\r	binding:: currentScope at: node message selector ifAbsent: [MessageAST new].\r	binding isVarDeclNode ifTrue:\r		(* This is an assignment to a temporary; no special handling is needed\r		as the value of the expression is the value being assigned. *)\r		[^processLocalAccess: node message of: binding].\r	valueExpected ifFalse:\r		(* The parent ignores the expression value; use a plain cheap here message send. *)\r		[^processImplicitReceiverSend: node].\r\r	(* The value is used by the parent; rewrite the whole thing as\r		setter:: expr  =>  [:a | setter: a. a] value: expr *)\r	(* a -- ok to use a constant name as long as it cannot collide with a user's name *)\r	blockArg:: NormalSendAST new\r		to: implicitReceiverNode\r		send: (MessageAST new send: setterBlockArgName with: {}).\r	blockParam:: ParameterAST name: setterBlockArgName type: nil.\r	(* setter: a *)\r	send:: NormalSendAST new to: node receiver send:\r		(MessageAST new selector: node message selector; arguments: {blockArg};\r		start: node message start; end: node message end; yourself);\r		start: node start; end: node end.\r	(* [:a | setter: a. a] *)\r	block:: BlockAST new body:\r		(CodeBodyAST new\r			parameters: {blockParam}\r			temporaries: {}\r			statements: {\r				send.\r				blockArg\r			};			\r			start: node start; end: node end);\r			start: node start; end: node end.\r	blockScope:: Scope new.\r	blockScope\r		superScope: currentScope;\r		at: setterBlockArgName put: (LocalEntry forDeclaration: blockParam atDepth: nil).\r	scopeMap at: block put: blockScope.\r	scopeMap at: block body put: blockScope.\r	(* [:a | setter: a. a] value: expr *)\r	rewrittenSetterSend::\r		NormalSendAST new\r			to: block\r			send: (MessageAST new\r				selector: #value:;\r				arguments: {node message arguments first};\r				start: node message start; end: node message end);\r				start: node start; end: node end.\r	^applyForValueTo: rewrittenSetterSend\r)"),
					new MM("InlinedOperatorAST", true, null),
					new MM("SchedulerAST", true, null),
					new MM("inlinableOperators", true, null),
					new MM("setOnce`inlinableOperators:", true, null),
					new MM("inlinableNumericOperators", true, null),
					new MM("setOnce`inlinableNumericOperators:", true, null),
					new MM("Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST", true, null),
					new MM("Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST:", true, null),
					new MM("Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST", true, null),
					new MM("Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST:", true, null)
				];
				this.nestedClasses = [
					"Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST",
					"Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST"
				];
				this.applications = [];
				this.$superInit$Newspeak2V8Compilation$Compiler$Rewriter = (function () {
					var self = this;
					self.$super$Newspeak2V8Compilation$Compiler$Rewriter$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function () {
					var self = this;
					self._$superInit$Newspeak2V8Compilation$Compiler$Rewriter();
					self._$setOnce$inlinableOperators$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$Dictionary().$new());
					self._$setOnce$inlinableNumericOperators$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$Dictionary().$new());
					(function (cascadeReceiver) {
						cascadeReceiver.$at$put$("+", "+");
						cascadeReceiver.$at$put$("-", "-");
						cascadeReceiver.$at$put$("*", "*");
						cascadeReceiver.$at$put$("/", "/");
						return cascadeReceiver.$at$put$("==", "===");
					})(self._$inlinableOperators());
					(function (cascadeReceiver) {
						cascadeReceiver.$at$put$("<", "<");
						cascadeReceiver.$at$put$("<=", "<=");
						cascadeReceiver.$at$put$(">", ">");
						return cascadeReceiver.$at$put$(">=", ">=");
					})(self._$inlinableNumericOperators());
					return self;
				});
				this.$__isInlinableAsExpressionConditional$ = (function ($node) {
					var self = this;
					var NLR = new Object();
					try {
						if (!(self._$conditionalSelectors().$includes$($node.$msg().$sel()) && self._$valueExpected())) {
							return false;
						} else {
							nil;
						};
						$node.$msg().$args().$do$((function ($each) {
							return (self._$isRemovableBlock$withArgs$($each, 0) && ($each.$body().$statements().$size().$$equal(1) && $each.$body().$statements().$first().$isReturnStatNode().$not())).$ifFalse$((function () {
								{
									NLR.value = false;
									throw NLR;
								};
							}));
						}));
						return true;
					} catch (NLR_exception) {
						if (NLR === NLR_exception) {
							return NLR_exception.value;
						} else {
							throw NLR_exception;
						};
					};
				});
				this.$canInlineSeqexps = (function () {
					var self = this;
					return false;
				});
				this.$currentScope = (function () {
					var self = this;
					return self.$super$Newspeak2V8Compilation$Compiler$Rewriter$slot._$currentScope.call(self);
				});
				this.$inline$as$selector$rewriteArgsAs$ = (function ($node, $sendClass, $selector, $argRewriteBlock) {
					var self = this;
					var $receiver = nil;
					var $message = nil;
					$receiver = self._$applyForValueTo$($node.$receiver());
					$message = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$MessageAST().$new().$send$with$($selector, $node.$message().$arguments().$collect$($argRewriteBlock));
					return (function (cascadeReceiver) {
						cascadeReceiver.$to$send$($receiver, $message);
						cascadeReceiver.$start$($node.$start());
						return cascadeReceiver.$end$($node.$end());
					})($sendClass.$new());
				});
				this.$isInlinableBooleanOperator$ = (function ($node) {
					var self = this;
					var $selector = nil;
					$selector = $node.$message().$selector();
					return ($selector.$$equal("or:") || $selector.$$equal("and:")) && ($node.$message().$arguments().$size().$$equal(1) && ($node.$message().$arguments().$first().$isBlockNode() && $node.$message().$arguments().$first().$body().$statements().$size().$$equal(1)));
				});
				this.$isInlinableNumericOperator$ = (function ($node) {
					var self = this;
					var $args = nil;
					$args = $node.$message().$arguments();
					if (!$args.$size().$$equal(1)) {
						return false;
					} else {
						nil;
					};
					if (!self._$inlinableNumericOperators().$includesKey$($node.$message().$selector())) {
						return false;
					} else {
						nil;
					};
					if ($node.$receiver().$isLiteralNode() && $node.$receiver().$value().$isNumber()) {
						return true;
					} else {
						nil;
					};
					if ($args.$first().$isLiteralNode() && $args.$first().$value().$isNumber()) {
						return true;
					} else {
						nil;
					};
					return false;
				});
				this.$isInlinableOperator$ = (function ($node) {
					var self = this;
					return self._$inlinableOperators().$includesKey$($node.$message().$selector()) && $node.$message().$arguments().$size().$$equal(1);
				});
				this.$processEventualSend$ = (function ($node) {
					var self = this;
					var $scheduler = nil;
					var $receiver = nil;
					var $selector = nil;
					var $arguments = nil;
					$scheduler = self._$SchedulerAST().$new();
					$receiver = $node.$receiver().$apply$(self);
					$selector = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$SymbolAST().$new().$value$($node.$message().$selector()).$apply$(self);
					$arguments = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$TupleAST().$new().$elements$($node.$message().$arguments()).$apply$(self);
					return self._$OrdinarySendAST().$to$send$($scheduler, self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$MessageAST().$new().$send$with$("eventualSendTo:selector:arguments:", [
						$receiver,
						$selector,
						$arguments
					]).$copyPositionFrom$($node.$message())).$copyPositionFrom$($node);
				});
				this.$setterBlockArgName = (function () {
					var self = this;
					return ("setter_arg").$asSymbol();
				});
				this.$normalSendNode$ = (function ($node) {
					var self = this;
					if (self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[0]._$inlineOperators() && self._$isInlinableNumericOperator$($node)) {
						return self._$inline$as$selector$rewriteArgsAs$($node, self._$InlinedOperatorAST(), self._$inlinableNumericOperators().$at$($node.$message().$selector()), (function ($each) {
							return self._$applyForValueTo$($each);
						}));
					} else {
						nil;
					};
					if (self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[0]._$inlineOperators() && self._$isInlinableOperator$($node)) {
						return self._$inline$as$selector$rewriteArgsAs$($node, self._$InlinedOperatorAST(), self._$inlinableOperators().$at$($node.$message().$selector()), (function ($each) {
							return self._$applyForValueTo$($each);
						}));
					} else {
						nil;
					};
					if (self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[0]._$inlineOperators() && self._$isInlinableBooleanOperator$($node)) {
						return self._$inline$as$selector$rewriteArgsAs$($node, self._$InlinedOperatorAST(), $node.$message().$selector().$$equal("and:").$ifTrue$ifFalse$((function () {
							return "&&";
						}), (function () {
							return "||";
						})), (function ($each) {
							return self._$applyForValueTo$($each.$body().$statements().$first());
						}));
					} else {
						nil;
					};
					return self.$super$Newspeak2V8Compilation$Compiler$Rewriter$slot._$normalSendNode$.call(self, $node);
				});
				this.$propertyCallNode$ = (function ($node) {
					var self = this;
					var $args = nil;
					self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$assert$((function () {
						return $node.$isMessageNode();
					}));
					$args = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$OrderedCollection().$new();
					$node.$arguments().$do$((function ($each) {
						return $args.$add$(self._$applyForValueTo$($each));
					}));
					return (function (cascadeReceiver) {
						cascadeReceiver.$send$with$($node.$selector(), $args);
						cascadeReceiver.$start$($node.$start());
						return cascadeReceiver.$end$($node.$end());
					})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$PropertyCallAST().$new());
				});
				this.$setterSendNode$ = (function ($node) {
					var self = this;
					var $binding = nil;
					var $block = nil;
					var $blockArg = nil;
					var $blockParam = nil;
					var $blockScope = nil;
					var $send = nil;
					var $rewrittenSetterSend = nil;
					$binding = self._$currentScope().$at$ifAbsent$($node.$message().$selector(), (function () {
						return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$MessageAST().$new();
					}));
					if ($binding.$isVarDeclNode()) {
						return self._$processLocalAccess$of$($node.$message(), $binding);
					} else {
						nil;
					};
					if (!self._$valueExpected()) {
						return self._$processImplicitReceiverSend$($node);
					} else {
						nil;
					};
					$blockArg = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$NormalSendAST().$new().$to$send$(self._$implicitReceiverNode(), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$MessageAST().$new().$send$with$(self._$setterBlockArgName(), []));
					$blockParam = self._$ParameterAST().$name$type$(self._$setterBlockArgName(), nil);
					$send = (function (cascadeReceiver) {
						cascadeReceiver.$to$send$($node.$receiver(), (function (cascadeReceiver) {
							cascadeReceiver.$selector$($node.$message().$selector());
							cascadeReceiver.$arguments$([$blockArg]);
							cascadeReceiver.$start$($node.$message().$start());
							cascadeReceiver.$end$($node.$message().$end());
							return cascadeReceiver.$yourself();
						})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$MessageAST().$new()));
						cascadeReceiver.$start$($node.$start());
						return cascadeReceiver.$end$($node.$end());
					})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$NormalSendAST().$new());
					$block = (function (cascadeReceiver) {
						cascadeReceiver.$body$((function (cascadeReceiver) {
							cascadeReceiver.$parameters$temporaries$statements$([$blockParam], [], [
								$send,
								$blockArg
							]);
							cascadeReceiver.$start$($node.$start());
							return cascadeReceiver.$end$($node.$end());
						})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$CodeBodyAST().$new()));
						cascadeReceiver.$start$($node.$start());
						return cascadeReceiver.$end$($node.$end());
					})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$BlockAST().$new());
					$blockScope = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$Scope().$new();
					(function (cascadeReceiver) {
						cascadeReceiver.$superScope$(self._$currentScope());
						return cascadeReceiver.$at$put$(self._$setterBlockArgName(), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$LocalEntry().$forDeclaration$atDepth$($blockParam, nil));
					})($blockScope);
					self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($block, $blockScope);
					self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($block.$body(), $blockScope);
					$rewrittenSetterSend = (function (cascadeReceiver) {
						cascadeReceiver.$to$send$($block, (function (cascadeReceiver) {
							cascadeReceiver.$selector$("value:");
							cascadeReceiver.$arguments$([$node.$message().$arguments().$first()]);
							cascadeReceiver.$start$($node.$message().$start());
							return cascadeReceiver.$end$($node.$message().$end());
						})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$MessageAST().$new()));
						cascadeReceiver.$start$($node.$start());
						return cascadeReceiver.$end$($node.$end());
					})(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$NormalSendAST().$new());
					return self._$applyForValueTo$($rewrittenSetterSend);
				});
				this.$InlinedOperatorAST = (function () {
					if (nil === this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot) {
						var self = this;
						var superclass = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$NormalSendAST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter);
						var mixin = $.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST;
						this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot;
				});
				this.$SchedulerAST = (function () {
					if (nil === this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot) {
						var self = this;
						var superclass = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter[1]._$AST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter);
						var mixin = $.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST;
						this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot;
				});
				this.$inlinableOperators = (function () {
					return this.$inlinableOperators$slot;
				});
				this.$setOnce$inlinableOperators$ = (function (v) {
					this.$inlinableOperators$slot = v;
					return this;
				});
				this.$inlinableNumericOperators = (function () {
					return this.$inlinableNumericOperators$slot;
				});
				this.$setOnce$inlinableNumericOperators$ = (function (v) {
					this.$inlinableNumericOperators$slot = v;
					return this;
				});
				this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = (function () {
					return this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot;
				});
				this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$ = (function (v) {
					this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot = v;
					return this;
				});
				this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = (function () {
					return this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot;
				});
				this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$ = (function (v) {
					this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot = v;
					return this;
				});
				this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST";
					this.name = "Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST";
					this.header = "InlinedOperatorAST = NormalSendAST ((* When the inlineOperators mode is on, message sends with certain selectors are replaced with this node. Javascript code generated for those nodes uses native Javascript operators instead of real message sends. The selector of the message of this AST is not a real Newspeak selector but rather the Javascript operator such as &&. *)|\r|)";
					this.slots = [];
					this.methods = [
						new MM("superInit`Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST", true, "NormalSendAST"),
						new MM("instance`initializer", true, "NormalSendAST"),
						new MM("apply:", false, "public apply: aTool <ASTTool> ^ <Self> = (\r	^aTool inlinedOperatorNode: self\r)")
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = (function () {
						var self = this;
						self.$super$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function () {
						var self = this;
						self._$superInit$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST();
						return self;
					});
					this.$apply$ = (function ($aTool) {
						var self = this;
						return $aTool.$inlinedOperatorNode$(self);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST";
							this._$superInit$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = $.$superInit$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST;
							this.$superInit$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = dnuCatcher("$superInit$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = enclosingObjects;
							this.$super$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot = runtimeSuperclass;
							this["Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew = this["Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST";
						this.slots = [];
						this.methods = [new MM("new", true, null)];
						this.nestedClasses = [];
						this.$new = (function () {
							return (new this.nonMeta.basicNew()).$instance$initializer();
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for Newspeak2V8Compilation`Compiler`Rewriter`InlinedOperatorAST";
								this.$new = this._$new = $.$new;
								this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = enclosingObjects;
								this.$super$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST";
					this.name = "Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST";
					this.header = "SchedulerAST = AST ()";
					this.slots = [];
					this.methods = [
						new MM("superInit`Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST", true, "AST"),
						new MM("instance`initializer", true, "AST"),
						new MM("apply:", false, "public apply: visitor <ASTVisitor> = (\r	^visitor schedulerNode: self\r)")
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = (function () {
						var self = this;
						self.$super$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function () {
						var self = this;
						self._$superInit$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST();
						return self;
					});
					this.$apply$ = (function ($visitor) {
						var self = this;
						return $visitor.$schedulerNode$(self);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST";
							this._$superInit$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = $.$superInit$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST;
							this.$superInit$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = dnuCatcher("$superInit$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = enclosingObjects;
							this.$super$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot = runtimeSuperclass;
							this["Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew = this["Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST";
						this.slots = [];
						this.methods = [new MM("new", true, null)];
						this.nestedClasses = [];
						this.$new = (function () {
							return (new this.nonMeta.basicNew()).$instance$initializer();
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for Newspeak2V8Compilation`Compiler`Rewriter`SchedulerAST";
								this.$new = this._$new = $.$new;
								this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = enclosingObjects;
								this.$super$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST.enclosingMixin = this;
				this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST.enclosingMixin = this;
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for Newspeak2V8Compilation`Compiler`Rewriter";
						this._$superInit$Newspeak2V8Compilation$Compiler$Rewriter = $.$superInit$Newspeak2V8Compilation$Compiler$Rewriter;
						this.$superInit$Newspeak2V8Compilation$Compiler$Rewriter = dnuCatcher("$superInit$Newspeak2V8Compilation$Compiler$Rewriter");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this._$__isInlinableAsExpressionConditional$ = $.$__isInlinableAsExpressionConditional$;
						this.$__isInlinableAsExpressionConditional$ = dnuCatcher("$__isInlinableAsExpressionConditional$");
						this._$canInlineSeqexps = $.$canInlineSeqexps;
						this.$canInlineSeqexps = dnuCatcher("$canInlineSeqexps");
						this._$currentScope = $.$currentScope;
						this.$currentScope = dnuCatcher("$currentScope");
						this._$inline$as$selector$rewriteArgsAs$ = $.$inline$as$selector$rewriteArgsAs$;
						this.$inline$as$selector$rewriteArgsAs$ = dnuCatcher("$inline$as$selector$rewriteArgsAs$");
						this._$isInlinableBooleanOperator$ = $.$isInlinableBooleanOperator$;
						this.$isInlinableBooleanOperator$ = dnuCatcher("$isInlinableBooleanOperator$");
						this._$isInlinableNumericOperator$ = $.$isInlinableNumericOperator$;
						this.$isInlinableNumericOperator$ = dnuCatcher("$isInlinableNumericOperator$");
						this._$isInlinableOperator$ = $.$isInlinableOperator$;
						this.$isInlinableOperator$ = dnuCatcher("$isInlinableOperator$");
						this._$processEventualSend$ = $.$processEventualSend$;
						this.$processEventualSend$ = dnuCatcher("$processEventualSend$");
						this._$setterBlockArgName = $.$setterBlockArgName;
						this.$setterBlockArgName = dnuCatcher("$setterBlockArgName");
						this.$normalSendNode$ = this._$normalSendNode$ = $.$normalSendNode$;
						this.$propertyCallNode$ = this._$propertyCallNode$ = $.$propertyCallNode$;
						this.$setterSendNode$ = this._$setterSendNode$ = $.$setterSendNode$;
						this._$InlinedOperatorAST = $.$InlinedOperatorAST;
						this.$InlinedOperatorAST = dnuCatcher("$InlinedOperatorAST");
						this._$SchedulerAST = $.$SchedulerAST;
						this.$SchedulerAST = dnuCatcher("$SchedulerAST");
						this._$inlinableOperators = $.$inlinableOperators;
						this.$inlinableOperators = dnuCatcher("$inlinableOperators");
						this._$setOnce$inlinableOperators$ = $.$setOnce$inlinableOperators$;
						this.$setOnce$inlinableOperators$ = dnuCatcher("$setOnce$inlinableOperators$");
						this._$inlinableNumericOperators = $.$inlinableNumericOperators;
						this.$inlinableNumericOperators = dnuCatcher("$inlinableNumericOperators");
						this._$setOnce$inlinableNumericOperators$ = $.$setOnce$inlinableNumericOperators$;
						this.$setOnce$inlinableNumericOperators$ = dnuCatcher("$setOnce$inlinableNumericOperators$");
						this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = this._$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST = $.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST;
						this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$ = this._$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$ = $.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$;
						this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = this._$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST = $.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST;
						this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$ = this._$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$ = $.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$;
						this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter = enclosingObjects;
						this.$super$Newspeak2V8Compilation$Compiler$Rewriter$slot = runtimeSuperclass;
						this["Newspeak2V8Compilation`Compiler`Rewriter"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$inlinableOperators$slot = nil;
							this.$inlinableNumericOperators$slot = nil;
							this.$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST$slot = nil;
							this.$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST$slot = nil;
						});
						this.basicNew = this["Newspeak2V8Compilation`Compiler`Rewriter"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for Newspeak2V8Compilation`Compiler`Rewriter";
					this.slots = [];
					this.methods = [new MM("new", true, null)];
					this.nestedClasses = [];
					this.$new = (function () {
						return (new this.nonMeta.basicNew()).$instance$initializer();
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for Newspeak2V8Compilation`Compiler`Rewriter";
							this.$new = this._$new = $.$new;
							this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Rewriter = enclosingObjects;
							this.$super$Newspeak2V8Compilation$Compiler$Rewriter = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$Newspeak2V8Compilation$Compiler$ScopeBuilder = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for Newspeak2V8Compilation`Compiler`ScopeBuilder";
				this.name = "Newspeak2V8Compilation`Compiler`ScopeBuilder";
				this.header = "ScopeBuilder nestedIn: initialScope <Scope> atLevel: initialDepth <Integer> = super ScopeBuilder nestedIn: initialScope atLevel: initialDepth ()";
				this.slots = [];
				this.methods = [
					new MM("superInit`Newspeak2V8Compilation`Compiler`ScopeBuilder", true, "nestedIn: initialScope atLevel: initialDepth"),
					new MM("instance`initializer", true, "nestedIn: initialScope atLevel: initialDepth"),
					new MM("propertyCallNode:", false, "public propertyCallNode: aNode <PropertyCallAST> = (\r	self messageNode: aNode\r)")
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$Newspeak2V8Compilation$Compiler$ScopeBuilder = (function ($initialScope, $initialDepth) {
					var self = this;
					self.$super$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot._$instance$initializer.call(self, $initialScope, $initialDepth);
					return self;
				});
				this.$instance$initializer = (function ($initialScope, $initialDepth) {
					var self = this;
					self._$superInit$Newspeak2V8Compilation$Compiler$ScopeBuilder($initialScope, $initialDepth);
					return self;
				});
				this.$propertyCallNode$ = (function ($aNode) {
					var self = this;
					self._$messageNode$($aNode);
					return self;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for Newspeak2V8Compilation`Compiler`ScopeBuilder";
						this._$superInit$Newspeak2V8Compilation$Compiler$ScopeBuilder = $.$superInit$Newspeak2V8Compilation$Compiler$ScopeBuilder;
						this.$superInit$Newspeak2V8Compilation$Compiler$ScopeBuilder = dnuCatcher("$superInit$Newspeak2V8Compilation$Compiler$ScopeBuilder");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$propertyCallNode$ = this._$propertyCallNode$ = $.$propertyCallNode$;
						this.$enclosingObjects$Newspeak2V8Compilation$Compiler$ScopeBuilder = enclosingObjects;
						this.$super$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot = runtimeSuperclass;
						this["Newspeak2V8Compilation`Compiler`ScopeBuilder"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew = this["Newspeak2V8Compilation`Compiler`ScopeBuilder"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for Newspeak2V8Compilation`Compiler`ScopeBuilder";
					this.slots = [];
					this.methods = [
						new MM("nestedIn:atLevel:", true, null),
						new MM("new", false, "public new ^<Instance> = (\r	^self nestedIn: Scope new atLevel: 0\r)")
					];
					this.nestedClasses = [];
					this.$nestedIn$atLevel$ = (function ($initialScope, $initialDepth) {
						return (new this.nonMeta.basicNew()).$instance$initializer($initialScope, $initialDepth);
					});
					this.$new = (function () {
						var self = this;
						return self._$nestedIn$atLevel$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$ScopeBuilder[1]._$Scope().$new(), 0);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for Newspeak2V8Compilation`Compiler`ScopeBuilder";
							this.$nestedIn$atLevel$ = this._$nestedIn$atLevel$ = $.$nestedIn$atLevel$;
							this.$new = this._$new = $.$new;
							this.$enclosingObjects$Newspeak2V8Compilation$Compiler$ScopeBuilder = enclosingObjects;
							this.$super$Newspeak2V8Compilation$Compiler$ScopeBuilder = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$Newspeak2V8Compilation$Compiler$Translator = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for Newspeak2V8Compilation`Compiler`Translator";
				this.name = "Newspeak2V8Compilation`Compiler`Translator";
				this.header = "Translator = ASTTool ((* Visits nodes of an NS AST to produce a Javascript AST. The usual translation unit is a method. Translation is initiated by sending the translateMethodNode: message. The argument is the method to translate, the returned value is the translation. *)|\r	scopeStack\r	public currentSelector\r	protected containsNonLocalReturn <Boolean> (* Set to false at the beginning of translating a method. The code that emits a non-local return sets this to true. The top-level code checks the value to see whether to emit a try-catch wrapper for an NLR. *)\r\r|)";
				this.slots = [
					new SM("scopeStack", true, false),
					new SM("currentSelector", true, false),
					new SM("containsNonLocalReturn", true, false)
				];
				this.methods = [
					new MM("superInit`Newspeak2V8Compilation`Compiler`Translator", true, "ASTTool"),
					new MM("instance`initializer", true, "ASTTool"),
					new MM("addCascadedSend:to:", false, "addCascadedSend: node to: statements = (\r	node isCascadedSendNode ifTrue:\r		[addCascadedSend: node previousSend to: statements].\r	statements add:\r		(js call: (js propertyOf: (js ident: 'cascadeReceiver') at: (publicMessage: node message))\r			with: (node message arguments collect: [:each | each apply: self]) asArray). \r)"),
					new MM("beginNewTranslationCycle", false, "public beginNewTranslationCycle = (\r	scopeStack:: OrderedCollection new.\r	containsNonLocalReturn:: false.\r)"),
					new MM("nlrName", false, "nlrName = (\r	^'NLR'\r)"),
					new MM("nlrValuePropertyName", false, "nlrValuePropertyName = (\r	^'value'\r)"),
					new MM("processIntrinsic:", false, "processIntrinsic: msg <MessageAST> = (\r	^js perform: msg selector\r		withArguments: (msg arguments collect: [:arg | processIntrinsicArg: arg]) asArray.\r)"),
					new MM("processIntrinsicArg:", false, "processIntrinsicArg: arg <AST> = (\r	arg isTupleNode ifTrue: [^(arg elements collect: [:el | processIntrinsicArg: el]) asArray].\r	arg isLiteralNode ifTrue: [^arg value].\r	^arg apply: self\r)"),
					new MM("processLexicalSend:to:binding:", false, "processLexicalSend: message to: jsReceiver binding: binding = (\r	\r	(binding notNil and: [binding ast accessModifier = #private]) ifTrue: [\r		(* Do early binding. *)\r		|\r		definingMixinDepth = binding depth - 1.\r		definingMixin = js ident: '$', definingMixinDepth printString.\r		targetMethod = js propertyOf: definingMixin at: (publicMessage: message).\r		|\r		^js call: (js propertyOf: targetMethod at: (js literal: 'call'))\r			with: {jsReceiver}, (message arguments collect: [:each | each apply: self]) asArray\r	].\r	\r	^js \r		call: (js propertyOf: jsReceiver at: (protectedMessage: message))\r		with: (message arguments collect: [:each | each apply: self]) asArray\r)"),
					new MM("processOuterReceiverAtDepth:", false, "processOuterReceiverAtDepth: depth <Integer> = (\r	| slotName |\r	depth = 0 ifTrue: [^js ident: 'self'].\r	slotName:: names mangleSynthetic: 'enclosingObjects`', currentMixinUID.\r	^js propertyOf: (js propertyOf: (js ident: 'self') at: (js literal: slotName))\r		at: (js literal: depth - 1) (* Adjust for self not being in the enclosing objects array. *)\r)"),
					new MM("protectedMessage:", false, "protectedMessage: node = (\r	sentSelectors add: node selector.\r	^js literal: (names mangleProtected: node selector)\r)"),
					new MM("publicMessage:", false, "publicMessage: node = (\r	sentSelectors add: node selector.\r	^js literal: (names manglePublic: node selector)\r)"),
					new MM("selfName", false, "selfName = (\r	^'self'\r)"),
					new MM("wrapBodyForNlrHandling:", false, "wrapBodyForNlrHandling: body <Block> = (\r	| nlrVarNode nlrParamName nlrParamNode |\r	nlrVarNode:: js ident: nlrName.\r	nlrParamName:: nlrName, '_exception'.\r	nlrParamNode:: js ident: nlrParamName.\r	^js block: {\r		js var: selfName value: (js ident: 'this').\r		js var: nlrName value: (js new: (js ident: 'Object') with: {}).\r		js try: body catch: nlrParamName with:\r			(js block: {\r				js if: (js operator: '===' with: nlrVarNode and: nlrParamNode)\r					then: (js return: (js propertyOf: nlrParamNode at: (js literal: nlrValuePropertyName)))\r					else: (js throw: nlrParamNode)\r			})\r	}\r)"),
					new MM("wrapBodyNoNlrHandling:", false, "wrapBodyNoNlrHandling: body <Block> = (\r	^js block: {js var: selfName value: (js ident: 'this')}, body statements\r)"),
					new MM("blockLocalReturnNode:", false, "public blockLocalReturnNode: node <BlockLocalReturnAST> = (\r	^js return: (node expression apply: self)\r)"),
					new MM("blockNode:", false, "public blockNode: node <BlockAST> = (\r(* Commented out code creates a special object that may be examined by ClosureMirrors.\r*)\r       ^(* js new: (js ident: #JsBlock) with: { *)\r		js functionOf: (node parameters collect: [:each | each apply: self]) asArray\r			body: (node body apply: self).\r		(* freeNameLiteralOf: node.\r		astFunctionForBlock: node. \r		js literal:  (sourceForNode: node). \r		js literal: parsedLanguage\r		} *)\r)"),
					new MM("boolNode:", false, "public boolNode: node <BoolAST> = (\r	^js literal: node value\r)"),
					new MM("cascadedSendNode:", false, "public cascadedSendNode: node <CascadedSendAST> = (\r	| statements |\r	statements:: OrderedCollection new.\r	addCascadedSend: node to: statements.\r	statements at: statements size put: (js return: statements last).\r	^js call: (js functionOf: {'cascadeReceiver'} body: (js block: statements))\r		with: {node receiver apply: self}\r)"),
					new MM("charNode:", false, "public charNode: node <CharAST> = (\r	(* Javascript has no characters, only strings. *)\r	^js literal: node value asString\r)"),
					new MM("codeBodyNode:", false, "public codeBodyNode: node <CodeBodyAST> = (\r	| locals statements |\r	locals:: node temporaries collect: [:each | each apply: self].\r	statements:: node statements collect: [:each | each apply: self].\r	^js block: (locals asArray, statements) asArray\r)"),
					new MM("conditionalNode:", false, "public conditionalNode: node <ConditionalAST> = (\r	^inlinableConditionalNode: node\r)"),
					new MM("contextNode:", false, "public contextNode: node <ContextAST> = (\r	Error signal: 'NS2V8 does not support thisContext'.\r)"),
					new MM("enclosingObjectNode:", false, "public enclosingObjectNode: node <EnclosingObjectAST> = (\r	^processOuterReceiverAtDepth: node depth\r)"),
					new MM("explicitOuterReceiverNode:", false, "public explicitOuterReceiverNode: node <ExplicitOuterReceiverAST> = (\r	^processOuterReceiverAtDepth: node depth\r)"),
					new MM("implicitReceiverSendNode:", false, "public implicitReceiverSendNode: node <ImplicitReceiverSendAST> = (\r	| receiver = processOuterReceiverAtDepth: node depth. |\r	^processLexicalSend: node message to: receiver binding: node binding\r)"),
					new MM("inlinableAsExpressionConditionalNode:", false, "public inlinableAsExpressionConditionalNode: node <InlinableConditionalAST> = (\r	| truePath falsePath condition |\r	\r	condition:: (node receiver apply: self).\r	\r	node message selector = 'ifTrue:' ifTrue:\r		[truePath:: (node message arguments at: 1) body statements first apply: self.\r		falsePath:: js ident: 'nil'].\r	node message selector = 'ifFalse:' ifTrue:\r		[truePath:: js ident: 'nil'.\r		falsePath:: (node message arguments at: 1) body statements first apply: self].\r	node message selector = 'ifTrue:ifFalse:' ifTrue:\r		[truePath:: (node message arguments at: 1) body statements first apply: self.\r		falsePath:: (node message arguments at: 2) body statements first apply: self].\r	node message selector = 'ifFalse:ifTrue:' ifTrue:\r		[truePath:: (node message arguments at: 2) body statements first apply: self.\r		falsePath:: (node message arguments at: 1) body statements first apply: self].\r	\r	^js ternaryIf: condition then: truePath else: falsePath\r)"),
					new MM("inlinableConditionalNode:", false, "public inlinableConditionalNode: node <InlinableConditionalAST> = (\r	| inverseCondition hasElseClause condition |\r	inverseCondition:: node ifTrue not.\r	hasElseClause:: node else isNil not.\r	condition:: node condition apply: self.\r	^js if: (inverseCondition ifTrue: [js prefixOperator: '!' on: condition] ifFalse: [condition])\r		then: (node then apply: self)\r		else: (hasElseClause ifTrue: [node else apply: self] ifFalse: [nil])\r)"),
					new MM("inlinedOperatorNode:", false, "public inlinedOperatorNode: node <InlinedOperatorAST> = (\r	(* We are not modeling JS operator precedence, so just parenthesize everything. *)\r	^js operator: node message selector\r		with: (node receiver apply: self)\r		and: (node message arguments first apply: self)\r)"),
					new MM("localReadNode:", false, "public localReadNode: node <LocalReadAST> = (\r	^js ident: (names mangleLocal: node name)\r)"),
					new MM("localWriteNode:", false, "public localWriteNode: node <LocalWriteAST> = (\r	^js assign: (js ident: (names mangleLocal: node name)) toBe: (node value apply: self)\r)"),
					new MM("loopNode:", false, "public loopNode: node <LoopAST> = (\r\r	(* prologue; while(cond==whileTrue) {body}; *)\r\r	|\r	prologue = node prologue apply: self.\r	cond = node condition apply: self.\r	body = node body ifNil: [js block: {}] ifNotNil: [:it | it apply: self].\r	\r	(* Split the condition is it isn't a single expression *)\r	condExpression ::= cond statements last.\r	condPrologue = cond statements asOrderedCollection removeLast; yourself.\r	|\r	\r	node isWhileTrue ifFalse: [\r		condExpression:: js prefixOperator: '!' on: condExpression].\r	\r	(* Flatten prologue so its declarations are in scope for the loop *)\r	\r	^js block: \r		prologue statements,\r		condPrologue, {\r		js \r			for: (js verbatim: '')\r			while: condExpression\r			step: (js verbatim: '')\r			do: (js block: body statements, condPrologue)}\r)"),
					new MM("messageNode:", false, "public messageNode: node = (\r	halt.\r	sentSelectors add: node selector.\r	^js literal: (names mangleSelector: node selector)\r)"),
					new MM("messagePatternNode:", false, "public messagePatternNode: node <MessagePatternAST> ^<List[String]> = (\r	currentSelector:: node selector.\r	^node parameters collect: [:each | each apply: self]\r)"),
					new MM("methodLocalReturnNode:", false, "public methodLocalReturnNode: node <MethodLocalReturnAST> = (\r	^blockLocalReturnNode: node\r)"),
					new MM("methodNode:", false, "public methodNode: node <MethodAST> ^<Node> = (\r	| translatedBody |\r	translatedBody:: node body apply: self.\r	^js functionOf: (node pattern apply: self) asArray\r		body: (containsNonLocalReturn\r			ifTrue: [wrapBodyForNlrHandling: translatedBody]\r			ifFalse: [wrapBodyNoNlrHandling: translatedBody]).\r)"),
					new MM("nilNode:", false, "public nilNode: node = (\r	^js ident: 'nil'\r)"),
					new MM("nonLocalReturnNode:", false, "public nonLocalReturnNode: node <NonlocalReturnAST> = (\r	^returnStatNode: node\r)"),
					new MM("numberNode:", false, "public numberNode: node <NumberAST> = (\r	^js literal: node value\r)"),
					new MM("ordinarySendNode:", false, "public ordinarySendNode: node <OrdinarySendAST> = (\r	enableIntrinsics ifTrue: [\r		node receiver isImplicitReceiverSendNode ifTrue: [\r			node receiver message selector = 'js' ifTrue: [^processIntrinsic: node message]]].\r\r	^js \r		call: (js propertyOf: (node receiver apply: self) at: (publicMessage: node message))\r		with: (node message arguments collect: [:each | each apply: self]) asArray\r)"),
					new MM("outerSendNode:", false, "public outerSendNode: node <OuterSendAST> = (\r	| receiver = processOuterReceiverAtDepth: node depth. |\r	^processLexicalSend: node message to: receiver binding: node binding\r)"),
					new MM("parameterDeclNode:", false, "public parameterDeclNode: node <ParameterAST> = (\r	^names mangleLocal: node name\r)"),
					new MM("propertyCallNode:", false, "public propertyCallNode: node <PropertyCallAST> = (\r	^js literal: (names mangleSelector: node selector)\r)"),
					new MM("receiverNode:", false, "public receiverNode: node <ReceiverNode> = (\r	^js ident: selfName\r)"),
					new MM("returnStatNode:", false, "public returnStatNode: node <ReturnAST> = (\r	containsNonLocalReturn:: true.\r	^js block: {\r		js assign: (js propertyOf: (js ident: nlrName) at: (js literal: nlrValuePropertyName)) toBe: (node expression apply: self).\r		js throw: (js ident: nlrName)\r	}\r)"),
					new MM("schedulerNode:", false, "public schedulerNode: node <SchedulerAST> = (\r	^js ident: 'theScheduler'\r)"),
					new MM("selfSendNode:", false, "public selfSendNode: node <SelfSendAST> = (\r	| receiver = js ident: selfName. |\r	^processLexicalSend: node message to: receiver binding: node binding\r)"),
					new MM("stringNode:", false, "public stringNode: node <StringAST> = (\r	^js literal: node value\r)"),
					new MM("superSendNode:", false, "public superSendNode: node <SuperSendAST> = (\r	| superSlotName args |\r	superSlotName:: names mangleSlot: 'super`', currentMixinUID.\r	args:: OrderedCollection new.\r	args add: (js ident: 'self').\r	node message arguments do: [:each | args add: (each apply: self)].\r	^js call:\r			(js propertyOf:\r				(js propertyOf: (\r					js propertyOf: (js ident: 'self')\r						at: (js literal: superSlotName))\r					at: (protectedMessage: node message))\r				at: (js literal: 'call')) with: args\r)"),
					new MM("symbolNode:", false, "public symbolNode: node <SymbolAST> = (\r	assert: [node isSymbolNode].\r	^js literal: node value\r)"),
					new MM("temporaryDeclNode:", false, "public temporaryDeclNode: node <ParameterAST> ^<String> = (\r	^js var: (names mangleLocal: node name)\r		value: (js ident: 'nil')\r)"),
					new MM("tupleNode:", false, "public tupleNode: node <TupleAST> = (\r	^js array: (node elements collect: [:ea | ea apply: self])\r)"),
					new MM("varDeclNode:", false, "public varDeclNode: node <VarDeclNode> = (\r	(* Produce the corresponding local decl. *)\r	^js var: (names mangleLocal: node name)\r)"),
					new MM("scopeStack", true, null),
					new MM("scopeStack:", true, null),
					new MM("currentSelector", true, null),
					new MM("currentSelector:", true, null),
					new MM("containsNonLocalReturn", true, null),
					new MM("containsNonLocalReturn:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$Newspeak2V8Compilation$Compiler$Translator = (function () {
					var self = this;
					self.$super$Newspeak2V8Compilation$Compiler$Translator$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function () {
					var self = this;
					self._$superInit$Newspeak2V8Compilation$Compiler$Translator();
					return self;
				});
				this.$addCascadedSend$to$ = (function ($node, $statements) {
					var self = this;
					if ($node.$isCascadedSendNode()) {
						self._$addCascadedSend$to$($node.$previousSend(), $statements);
					} else {
						nil;
					};
					$statements.$add$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("cascadeReceiver"), self._$publicMessage$($node.$message())), $node.$message().$arguments().$collect$((function ($each) {
						return $each.$apply$(self);
					})).$asArray()));
					return self;
				});
				this.$beginNewTranslationCycle = (function () {
					var self = this;
					self._$scopeStack$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$OrderedCollection().$new());
					self._$containsNonLocalReturn$(false);
					return self;
				});
				this.$nlrName = (function () {
					var self = this;
					return "NLR";
				});
				this.$nlrValuePropertyName = (function () {
					var self = this;
					return "value";
				});
				this.$processIntrinsic$ = (function ($msg) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$perform$withArguments$($msg.$selector(), $msg.$arguments().$collect$((function ($arg) {
						return self._$processIntrinsicArg$($arg);
					})).$asArray());
				});
				this.$processIntrinsicArg$ = (function ($arg) {
					var self = this;
					if ($arg.$isTupleNode()) {
						return $arg.$elements().$collect$((function ($el) {
							return self._$processIntrinsicArg$($el);
						})).$asArray();
					} else {
						nil;
					};
					if ($arg.$isLiteralNode()) {
						return $arg.$value();
					} else {
						nil;
					};
					return $arg.$apply$(self);
				});
				this.$processLexicalSend$to$binding$ = (function ($message, $jsReceiver, $binding) {
					var self = this;
					if ($binding.$notNil() && $binding.$ast().$accessModifier().$$equal("private")) {
						var $definingMixinDepth = nil;
						var $definingMixin = nil;
						var $targetMethod = nil;
						$definingMixinDepth = $binding.$depth() - 1;
						$definingMixin = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$(("$").$$comma($definingMixinDepth.$printString()));
						$targetMethod = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$($definingMixin, self._$publicMessage$($message));
						return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$($targetMethod, self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$("call")), ([$jsReceiver]).$$comma($message.$arguments().$collect$((function ($each) {
							return $each.$apply$(self);
						})).$asArray()));
					} else {
						nil;
					};
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$($jsReceiver, self._$protectedMessage$($message)), $message.$arguments().$collect$((function ($each) {
						return $each.$apply$(self);
					})).$asArray());
				});
				this.$processOuterReceiverAtDepth$ = (function ($depth) {
					var self = this;
					var $slotName = nil;
					if ($depth.$$equal(0)) {
						return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("self");
					} else {
						nil;
					};
					$slotName = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleSynthetic$(("enclosingObjects`").$$comma(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[0]._$currentMixinUID()));
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("self"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$($slotName)), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$($depth - 1));
				});
				this.$protectedMessage$ = (function ($node) {
					var self = this;
					self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[0]._$sentSelectors().$add$($node.$selector());
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleProtected$($node.$selector()));
				});
				this.$publicMessage$ = (function ($node) {
					var self = this;
					self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[0]._$sentSelectors().$add$($node.$selector());
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$manglePublic$($node.$selector()));
				});
				this.$selfName = (function () {
					var self = this;
					return "self";
				});
				this.$wrapBodyForNlrHandling$ = (function ($body) {
					var self = this;
					var $nlrVarNode = nil;
					var $nlrParamName = nil;
					var $nlrParamNode = nil;
					$nlrVarNode = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$(self._$nlrName());
					$nlrParamName = self._$nlrName().$$comma("_exception");
					$nlrParamNode = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$($nlrParamName);
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$([
						self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$var$value$(self._$selfName(), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("this")),
						self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$var$value$(self._$nlrName(), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$new$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("Object"), [])),
						self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$try$catch$with$($body, $nlrParamName, self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$if$then$else$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$operator$with$and$("===", $nlrVarNode, $nlrParamNode), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$return$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$($nlrParamNode, self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$(self._$nlrValuePropertyName()))), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$throw$($nlrParamNode))]))
					]);
				});
				this.$wrapBodyNoNlrHandling$ = (function ($body) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$(([self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$var$value$(self._$selfName(), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("this"))]).$$comma($body.$statements()));
				});
				this.$blockLocalReturnNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$return$($node.$expression().$apply$(self));
				});
				this.$blockNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$functionOf$body$($node.$parameters().$collect$((function ($each) {
						return $each.$apply$(self);
					})).$asArray(), $node.$body().$apply$(self));
				});
				this.$boolNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$($node.$value());
				});
				this.$cascadedSendNode$ = (function ($node) {
					var self = this;
					var $statements = nil;
					$statements = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$OrderedCollection().$new();
					self._$addCascadedSend$to$($node, $statements);
					$statements.$at$put$($statements.$size(), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$return$($statements.$last()));
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$functionOf$body$(["cascadeReceiver"], self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$($statements)), [$node.$receiver().$apply$(self)]);
				});
				this.$charNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$($node.$value().$asString());
				});
				this.$codeBodyNode$ = (function ($node) {
					var self = this;
					var $locals = nil;
					var $statements = nil;
					$locals = $node.$temporaries().$collect$((function ($each) {
						return $each.$apply$(self);
					}));
					$statements = $node.$statements().$collect$((function ($each) {
						return $each.$apply$(self);
					}));
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$($locals.$asArray().$$comma($statements).$asArray());
				});
				this.$conditionalNode$ = (function ($node) {
					var self = this;
					return self._$inlinableConditionalNode$($node);
				});
				this.$contextNode$ = (function ($node) {
					var self = this;
					self._$Error().$signal$("NS2V8 does not support thisContext");
					return self;
				});
				this.$enclosingObjectNode$ = (function ($node) {
					var self = this;
					return self._$processOuterReceiverAtDepth$($node.$depth());
				});
				this.$explicitOuterReceiverNode$ = (function ($node) {
					var self = this;
					return self._$processOuterReceiverAtDepth$($node.$depth());
				});
				this.$implicitReceiverSendNode$ = (function ($node) {
					var self = this;
					var $receiver = nil;
					$receiver = self._$processOuterReceiverAtDepth$($node.$depth());
					return self._$processLexicalSend$to$binding$($node.$message(), $receiver, $node.$binding());
				});
				this.$inlinableAsExpressionConditionalNode$ = (function ($node) {
					var self = this;
					var $truePath = nil;
					var $falsePath = nil;
					var $condition = nil;
					$condition = $node.$receiver().$apply$(self);
					if ($node.$message().$selector().$$equal("ifTrue:")) {
						$truePath = $node.$message().$arguments().$at$(1).$body().$statements().$first().$apply$(self);
						$falsePath = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("nil");
					} else {
						nil;
					};
					if ($node.$message().$selector().$$equal("ifFalse:")) {
						$truePath = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("nil");
						$falsePath = $node.$message().$arguments().$at$(1).$body().$statements().$first().$apply$(self);
					} else {
						nil;
					};
					if ($node.$message().$selector().$$equal("ifTrue:ifFalse:")) {
						$truePath = $node.$message().$arguments().$at$(1).$body().$statements().$first().$apply$(self);
						$falsePath = $node.$message().$arguments().$at$(2).$body().$statements().$first().$apply$(self);
					} else {
						nil;
					};
					if ($node.$message().$selector().$$equal("ifFalse:ifTrue:")) {
						$truePath = $node.$message().$arguments().$at$(2).$body().$statements().$first().$apply$(self);
						$falsePath = $node.$message().$arguments().$at$(1).$body().$statements().$first().$apply$(self);
					} else {
						nil;
					};
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ternaryIf$then$else$($condition, $truePath, $falsePath);
				});
				this.$inlinableConditionalNode$ = (function ($node) {
					var self = this;
					var $inverseCondition = nil;
					var $hasElseClause = nil;
					var $condition = nil;
					$inverseCondition = $node.$ifTrue().$not();
					$hasElseClause = $node.$else().$isNil().$not();
					$condition = $node.$condition().$apply$(self);
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$if$then$else$($inverseCondition.$ifTrue$ifFalse$((function () {
						return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$prefixOperator$on$("!", $condition);
					}), (function () {
						return $condition;
					})), $node.$then().$apply$(self), $hasElseClause.$ifTrue$ifFalse$((function () {
						return $node.$else().$apply$(self);
					}), (function () {
						return nil;
					})));
				});
				this.$inlinedOperatorNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$operator$with$and$($node.$message().$selector(), $node.$receiver().$apply$(self), $node.$message().$arguments().$first().$apply$(self));
				});
				this.$localReadNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleLocal$($node.$name()));
				});
				this.$localWriteNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleLocal$($node.$name())), $node.$value().$apply$(self));
				});
				this.$loopNode$ = (function ($node) {
					var self = this;
					var $prologue = nil;
					var $cond = nil;
					var $body = nil;
					var $condExpression = nil;
					var $condPrologue = nil;
					$prologue = $node.$prologue().$apply$(self);
					$cond = $node.$condition().$apply$(self);
					$body = $node.$body().$ifNil$ifNotNil$((function () {
						return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$([]);
					}), (function ($it) {
						return $it.$apply$(self);
					}));
					$condExpression = $cond.$statements().$last();
					$condPrologue = (function (cascadeReceiver) {
						cascadeReceiver.$removeLast();
						return cascadeReceiver.$yourself();
					})($cond.$statements().$asOrderedCollection());
					if (!$node.$isWhileTrue()) {
						$condExpression = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$prefixOperator$on$("!", $condExpression);
					} else {
						nil;
					};
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$($prologue.$statements().$$comma($condPrologue).$$comma([self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$for$while$step$do$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$verbatim$(""), $condExpression, self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$verbatim$(""), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$($body.$statements().$$comma($condPrologue)))]));
				});
				this.$messageNode$ = (function ($node) {
					var self = this;
					self._$halt();
					self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[0]._$sentSelectors().$add$($node.$selector());
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleSelector$($node.$selector()));
				});
				this.$messagePatternNode$ = (function ($node) {
					var self = this;
					self._$currentSelector$($node.$selector());
					return $node.$parameters().$collect$((function ($each) {
						return $each.$apply$(self);
					}));
				});
				this.$methodLocalReturnNode$ = (function ($node) {
					var self = this;
					return self._$blockLocalReturnNode$($node);
				});
				this.$methodNode$ = (function ($node) {
					var self = this;
					var $translatedBody = nil;
					$translatedBody = $node.$body().$apply$(self);
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$functionOf$body$($node.$pattern().$apply$(self).$asArray(), self._$containsNonLocalReturn().$ifTrue$ifFalse$((function () {
						return self._$wrapBodyForNlrHandling$($translatedBody);
					}), (function () {
						return self._$wrapBodyNoNlrHandling$($translatedBody);
					})));
				});
				this.$nilNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("nil");
				});
				this.$nonLocalReturnNode$ = (function ($node) {
					var self = this;
					return self._$returnStatNode$($node);
				});
				this.$numberNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$($node.$value());
				});
				this.$ordinarySendNode$ = (function ($node) {
					var self = this;
					if (self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[0]._$enableIntrinsics()) {
						if ($node.$receiver().$isImplicitReceiverSendNode()) {
							if ($node.$receiver().$message().$selector().$$equal("js")) {
								return self._$processIntrinsic$($node.$message());
							} else {
								nil;
							};
						} else {
							nil;
						};
					} else {
						nil;
					};
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$($node.$receiver().$apply$(self), self._$publicMessage$($node.$message())), $node.$message().$arguments().$collect$((function ($each) {
						return $each.$apply$(self);
					})).$asArray());
				});
				this.$outerSendNode$ = (function ($node) {
					var self = this;
					var $receiver = nil;
					$receiver = self._$processOuterReceiverAtDepth$($node.$depth());
					return self._$processLexicalSend$to$binding$($node.$message(), $receiver, $node.$binding());
				});
				this.$parameterDeclNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleLocal$($node.$name());
				});
				this.$propertyCallNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleSelector$($node.$selector()));
				});
				this.$receiverNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$(self._$selfName());
				});
				this.$returnStatNode$ = (function ($node) {
					var self = this;
					self._$containsNonLocalReturn$(true);
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$block$([
						self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$(self._$nlrName()), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$(self._$nlrValuePropertyName())), $node.$expression().$apply$(self)),
						self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$throw$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$(self._$nlrName()))
					]);
				});
				this.$schedulerNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("theScheduler");
				});
				this.$selfSendNode$ = (function ($node) {
					var self = this;
					var $receiver = nil;
					$receiver = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$(self._$selfName());
					return self._$processLexicalSend$to$binding$($node.$message(), $receiver, $node.$binding());
				});
				this.$stringNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$($node.$value());
				});
				this.$superSendNode$ = (function ($node) {
					var self = this;
					var $superSlotName = nil;
					var $args = nil;
					$superSlotName = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleSlot$(("super`").$$comma(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[0]._$currentMixinUID()));
					$args = self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$OrderedCollection().$new();
					$args.$add$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("self"));
					$node.$message().$arguments().$do$((function ($each) {
						return $args.$add$($each.$apply$(self));
					}));
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("self"), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$($superSlotName)), self._$protectedMessage$($node.$message())), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$("call")), $args);
				});
				this.$symbolNode$ = (function ($node) {
					var self = this;
					self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$assert$((function () {
						return $node.$isSymbolNode();
					}));
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$literal$($node.$value());
				});
				this.$temporaryDeclNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$var$value$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleLocal$($node.$name()), self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$ident$("nil"));
				});
				this.$tupleNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$array$($node.$elements().$collect$((function ($ea) {
						return $ea.$apply$(self);
					})));
				});
				this.$varDeclNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$js().$var$(self.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator[1]._$names().$mangleLocal$($node.$name()));
				});
				this.$scopeStack = (function () {
					return this.$scopeStack$slot;
				});
				this.$scopeStack$ = (function (v) {
					this.$scopeStack$slot = v;
					return this;
				});
				this.$currentSelector = (function () {
					return this.$currentSelector$slot;
				});
				this.$currentSelector$ = (function (v) {
					this.$currentSelector$slot = v;
					return this;
				});
				this.$containsNonLocalReturn = (function () {
					return this.$containsNonLocalReturn$slot;
				});
				this.$containsNonLocalReturn$ = (function (v) {
					this.$containsNonLocalReturn$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for Newspeak2V8Compilation`Compiler`Translator";
						this._$superInit$Newspeak2V8Compilation$Compiler$Translator = $.$superInit$Newspeak2V8Compilation$Compiler$Translator;
						this.$superInit$Newspeak2V8Compilation$Compiler$Translator = dnuCatcher("$superInit$Newspeak2V8Compilation$Compiler$Translator");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this._$addCascadedSend$to$ = $.$addCascadedSend$to$;
						this.$addCascadedSend$to$ = dnuCatcher("$addCascadedSend$to$");
						this.$beginNewTranslationCycle = this._$beginNewTranslationCycle = $.$beginNewTranslationCycle;
						this._$nlrName = $.$nlrName;
						this.$nlrName = dnuCatcher("$nlrName");
						this._$nlrValuePropertyName = $.$nlrValuePropertyName;
						this.$nlrValuePropertyName = dnuCatcher("$nlrValuePropertyName");
						this._$processIntrinsic$ = $.$processIntrinsic$;
						this.$processIntrinsic$ = dnuCatcher("$processIntrinsic$");
						this._$processIntrinsicArg$ = $.$processIntrinsicArg$;
						this.$processIntrinsicArg$ = dnuCatcher("$processIntrinsicArg$");
						this._$processLexicalSend$to$binding$ = $.$processLexicalSend$to$binding$;
						this.$processLexicalSend$to$binding$ = dnuCatcher("$processLexicalSend$to$binding$");
						this._$processOuterReceiverAtDepth$ = $.$processOuterReceiverAtDepth$;
						this.$processOuterReceiverAtDepth$ = dnuCatcher("$processOuterReceiverAtDepth$");
						this._$protectedMessage$ = $.$protectedMessage$;
						this.$protectedMessage$ = dnuCatcher("$protectedMessage$");
						this._$publicMessage$ = $.$publicMessage$;
						this.$publicMessage$ = dnuCatcher("$publicMessage$");
						this._$selfName = $.$selfName;
						this.$selfName = dnuCatcher("$selfName");
						this._$wrapBodyForNlrHandling$ = $.$wrapBodyForNlrHandling$;
						this.$wrapBodyForNlrHandling$ = dnuCatcher("$wrapBodyForNlrHandling$");
						this._$wrapBodyNoNlrHandling$ = $.$wrapBodyNoNlrHandling$;
						this.$wrapBodyNoNlrHandling$ = dnuCatcher("$wrapBodyNoNlrHandling$");
						this.$blockLocalReturnNode$ = this._$blockLocalReturnNode$ = $.$blockLocalReturnNode$;
						this.$blockNode$ = this._$blockNode$ = $.$blockNode$;
						this.$boolNode$ = this._$boolNode$ = $.$boolNode$;
						this.$cascadedSendNode$ = this._$cascadedSendNode$ = $.$cascadedSendNode$;
						this.$charNode$ = this._$charNode$ = $.$charNode$;
						this.$codeBodyNode$ = this._$codeBodyNode$ = $.$codeBodyNode$;
						this.$conditionalNode$ = this._$conditionalNode$ = $.$conditionalNode$;
						this.$contextNode$ = this._$contextNode$ = $.$contextNode$;
						this.$enclosingObjectNode$ = this._$enclosingObjectNode$ = $.$enclosingObjectNode$;
						this.$explicitOuterReceiverNode$ = this._$explicitOuterReceiverNode$ = $.$explicitOuterReceiverNode$;
						this.$implicitReceiverSendNode$ = this._$implicitReceiverSendNode$ = $.$implicitReceiverSendNode$;
						this.$inlinableAsExpressionConditionalNode$ = this._$inlinableAsExpressionConditionalNode$ = $.$inlinableAsExpressionConditionalNode$;
						this.$inlinableConditionalNode$ = this._$inlinableConditionalNode$ = $.$inlinableConditionalNode$;
						this.$inlinedOperatorNode$ = this._$inlinedOperatorNode$ = $.$inlinedOperatorNode$;
						this.$localReadNode$ = this._$localReadNode$ = $.$localReadNode$;
						this.$localWriteNode$ = this._$localWriteNode$ = $.$localWriteNode$;
						this.$loopNode$ = this._$loopNode$ = $.$loopNode$;
						this.$messageNode$ = this._$messageNode$ = $.$messageNode$;
						this.$messagePatternNode$ = this._$messagePatternNode$ = $.$messagePatternNode$;
						this.$methodLocalReturnNode$ = this._$methodLocalReturnNode$ = $.$methodLocalReturnNode$;
						this.$methodNode$ = this._$methodNode$ = $.$methodNode$;
						this.$nilNode$ = this._$nilNode$ = $.$nilNode$;
						this.$nonLocalReturnNode$ = this._$nonLocalReturnNode$ = $.$nonLocalReturnNode$;
						this.$numberNode$ = this._$numberNode$ = $.$numberNode$;
						this.$ordinarySendNode$ = this._$ordinarySendNode$ = $.$ordinarySendNode$;
						this.$outerSendNode$ = this._$outerSendNode$ = $.$outerSendNode$;
						this.$parameterDeclNode$ = this._$parameterDeclNode$ = $.$parameterDeclNode$;
						this.$propertyCallNode$ = this._$propertyCallNode$ = $.$propertyCallNode$;
						this.$receiverNode$ = this._$receiverNode$ = $.$receiverNode$;
						this.$returnStatNode$ = this._$returnStatNode$ = $.$returnStatNode$;
						this.$schedulerNode$ = this._$schedulerNode$ = $.$schedulerNode$;
						this.$selfSendNode$ = this._$selfSendNode$ = $.$selfSendNode$;
						this.$stringNode$ = this._$stringNode$ = $.$stringNode$;
						this.$superSendNode$ = this._$superSendNode$ = $.$superSendNode$;
						this.$symbolNode$ = this._$symbolNode$ = $.$symbolNode$;
						this.$temporaryDeclNode$ = this._$temporaryDeclNode$ = $.$temporaryDeclNode$;
						this.$tupleNode$ = this._$tupleNode$ = $.$tupleNode$;
						this.$varDeclNode$ = this._$varDeclNode$ = $.$varDeclNode$;
						this._$scopeStack = $.$scopeStack;
						this.$scopeStack = dnuCatcher("$scopeStack");
						this._$scopeStack$ = $.$scopeStack$;
						this.$scopeStack$ = dnuCatcher("$scopeStack$");
						this.$currentSelector = this._$currentSelector = $.$currentSelector;
						this.$currentSelector$ = this._$currentSelector$ = $.$currentSelector$;
						this._$containsNonLocalReturn = $.$containsNonLocalReturn;
						this.$containsNonLocalReturn = dnuCatcher("$containsNonLocalReturn");
						this._$containsNonLocalReturn$ = $.$containsNonLocalReturn$;
						this.$containsNonLocalReturn$ = dnuCatcher("$containsNonLocalReturn$");
						this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator = enclosingObjects;
						this.$super$Newspeak2V8Compilation$Compiler$Translator$slot = runtimeSuperclass;
						this["Newspeak2V8Compilation`Compiler`Translator"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$scopeStack$slot = nil;
							this.$currentSelector$slot = nil;
							this.$containsNonLocalReturn$slot = nil;
						});
						this.basicNew = this["Newspeak2V8Compilation`Compiler`Translator"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for Newspeak2V8Compilation`Compiler`Translator";
					this.slots = [];
					this.methods = [new MM("new", true, null)];
					this.nestedClasses = [];
					this.$new = (function () {
						return (new this.nonMeta.basicNew()).$instance$initializer();
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for Newspeak2V8Compilation`Compiler`Translator";
							this.$new = this._$new = $.$new;
							this.$enclosingObjects$Newspeak2V8Compilation$Compiler$Translator = enclosingObjects;
							this.$super$Newspeak2V8Compilation$Compiler$Translator = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$Newspeak2V8Compilation$Compiler$Rewriter.enclosingMixin = this;
			this.$Newspeak2V8Compilation$Compiler$ScopeBuilder.enclosingMixin = this;
			this.$Newspeak2V8Compilation$Compiler$Translator.enclosingMixin = this;
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Newspeak2V8Compilation`Compiler";
					this._$superInit$Newspeak2V8Compilation$Compiler = $.$superInit$Newspeak2V8Compilation$Compiler;
					this.$superInit$Newspeak2V8Compilation$Compiler = dnuCatcher("$superInit$Newspeak2V8Compilation$Compiler");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$accessorForNestedClassNamed$in$superCall$ = $.$accessorForNestedClassNamed$in$superCall$;
					this.$accessorForNestedClassNamed$in$superCall$ = dnuCatcher("$accessorForNestedClassNamed$in$superCall$");
					this._$accessorForSuperclass$inScope$ = $.$accessorForSuperclass$inScope$;
					this.$accessorForSuperclass$inScope$ = dnuCatcher("$accessorForSuperclass$inScope$");
					this._$checkForDuplicateNames$ = $.$checkForDuplicateNames$;
					this.$checkForDuplicateNames$ = dnuCatcher("$checkForDuplicateNames$");
					this._$classNode$ = $.$classNode$;
					this.$classNode$ = dnuCatcher("$classNode$");
					this.$compileClassSource$within$ = this._$compileClassSource$within$ = $.$compileClassSource$within$;
					this.$compileExpressionSource$inMixin$ = this._$compileExpressionSource$inMixin$ = $.$compileExpressionSource$inMixin$;
					this.$compileMethodSource$within$ = this._$compileMethodSource$within$ = $.$compileMethodSource$within$;
					this._$compileNestedClasses$within$ = $.$compileNestedClasses$within$;
					this.$compileNestedClasses$within$ = dnuCatcher("$compileNestedClasses$within$");
					this._$compileNestedClassesOf$within$ = $.$compileNestedClassesOf$within$;
					this.$compileNestedClassesOf$within$ = dnuCatcher("$compileNestedClassesOf$within$");
					this._$computeMethod$inScope$ = $.$computeMethod$inScope$;
					this.$computeMethod$inScope$ = dnuCatcher("$computeMethod$inScope$");
					this._$computeMixinFrom$ = $.$computeMixinFrom$;
					this.$computeMixinFrom$ = dnuCatcher("$computeMixinFrom$");
					this._$createNestedClassAccessorFrom$within$ = $.$createNestedClassAccessorFrom$within$;
					this.$createNestedClassAccessorFrom$within$ = dnuCatcher("$createNestedClassAccessorFrom$within$");
					this._$currentScope = $.$currentScope;
					this.$currentScope = dnuCatcher("$currentScope");
					this.$dnuHandlers = this._$dnuHandlers = $.$dnuHandlers;
					this._$generateSlotAccessorsFor$ = $.$generateSlotAccessorsFor$;
					this.$generateSlotAccessorsFor$ = dnuCatcher("$generateSlotAccessorsFor$");
					this._$hereNode = $.$hereNode;
					this.$hereNode = dnuCatcher("$hereNode");
					this._$hereSendFrom$ = $.$hereSendFrom$;
					this.$hereSendFrom$ = dnuCatcher("$hereSendFrom$");
					this._$initializerFor$ = $.$initializerFor$;
					this.$initializerFor$ = dnuCatcher("$initializerFor$");
					this._$language = $.$language;
					this.$language = dnuCatcher("$language");
					this._$methodNode$ = $.$methodNode$;
					this.$methodNode$ = dnuCatcher("$methodNode$");
					this._$nestScope$ = $.$nestScope$;
					this.$nestScope$ = dnuCatcher("$nestScope$");
					this._$nestedMixinWrapperFor$in$ = $.$nestedMixinWrapperFor$in$;
					this.$nestedMixinWrapperFor$in$ = dnuCatcher("$nestedMixinWrapperFor$in$");
					this._$popScope = $.$popScope;
					this.$popScope = dnuCatcher("$popScope");
					this._$processClassSideOf$ofMixin$ = $.$processClassSideOf$ofMixin$;
					this.$processClassSideOf$ofMixin$ = dnuCatcher("$processClassSideOf$ofMixin$");
					this._$processFactoryFor$in$ = $.$processFactoryFor$in$;
					this.$processFactoryFor$in$ = dnuCatcher("$processFactoryFor$in$");
					this._$processInitializerFor$in$ = $.$processInitializerFor$in$;
					this.$processInitializerFor$in$ = dnuCatcher("$processInitializerFor$in$");
					this._$processInstanceSideOf$ofMixin$ = $.$processInstanceSideOf$ofMixin$;
					this.$processInstanceSideOf$ofMixin$ = dnuCatcher("$processInstanceSideOf$ofMixin$");
					this._$processMethod$inScope$in$ = $.$processMethod$inScope$in$;
					this.$processMethod$inScope$in$ = dnuCatcher("$processMethod$inScope$in$");
					this._$processSide$ofMixin$ = $.$processSide$ofMixin$;
					this.$processSide$ofMixin$ = dnuCatcher("$processSide$ofMixin$");
					this._$pushScope$ = $.$pushScope$;
					this.$pushScope$ = dnuCatcher("$pushScope$");
					this._$selfNode = $.$selfNode;
					this.$selfNode = dnuCatcher("$selfNode");
					this._$setInput$ = $.$setInput$;
					this.$setInput$ = dnuCatcher("$setInput$");
					this._$setScopeFor$in$ = $.$setScopeFor$in$;
					this.$setScopeFor$in$ = dnuCatcher("$setScopeFor$in$");
					this._$setterSelectorFor$ = $.$setterSelectorFor$;
					this.$setterSelectorFor$ = dnuCatcher("$setterSelectorFor$");
					this._$sourceForNode$ = $.$sourceForNode$;
					this.$sourceForNode$ = dnuCatcher("$sourceForNode$");
					this._$superConstructorCallFor$ = $.$superConstructorCallFor$;
					this.$superConstructorCallFor$ = dnuCatcher("$superConstructorCallFor$");
					this._$superConstructorMethodFor$ = $.$superConstructorMethodFor$;
					this.$superConstructorMethodFor$ = dnuCatcher("$superConstructorMethodFor$");
					this._$superConstructorNameFor$ = $.$superConstructorNameFor$;
					this.$superConstructorNameFor$ = dnuCatcher("$superConstructorNameFor$");
					this._$scopeMap = $.$scopeMap;
					this.$scopeMap = dnuCatcher("$scopeMap");
					this._$Rewriter = $.$Rewriter;
					this.$Rewriter = dnuCatcher("$Rewriter");
					this._$ScopeBuilder = $.$ScopeBuilder;
					this.$ScopeBuilder = dnuCatcher("$ScopeBuilder");
					this._$Translator = $.$Translator;
					this.$Translator = dnuCatcher("$Translator");
					this._$scopeStack = $.$scopeStack;
					this.$scopeStack = dnuCatcher("$scopeStack");
					this._$scopeStack$ = $.$scopeStack$;
					this.$scopeStack$ = dnuCatcher("$scopeStack$");
					this._$input = $.$input;
					this.$input = dnuCatcher("$input");
					this._$input$ = $.$input$;
					this.$input$ = dnuCatcher("$input$");
					this._$sentSelectors = $.$sentSelectors;
					this.$sentSelectors = dnuCatcher("$sentSelectors");
					this._$sentSelectors$ = $.$sentSelectors$;
					this.$sentSelectors$ = dnuCatcher("$sentSelectors$");
					this._$rewriter = $.$rewriter;
					this.$rewriter = dnuCatcher("$rewriter");
					this._$setOnce$rewriter$ = $.$setOnce$rewriter$;
					this.$setOnce$rewriter$ = dnuCatcher("$setOnce$rewriter$");
					this._$translator = $.$translator;
					this.$translator = dnuCatcher("$translator");
					this._$setOnce$translator$ = $.$setOnce$translator$;
					this.$setOnce$translator$ = dnuCatcher("$setOnce$translator$");
					this._$currentDepth = $.$currentDepth;
					this.$currentDepth = dnuCatcher("$currentDepth");
					this._$currentDepth$ = $.$currentDepth$;
					this.$currentDepth$ = dnuCatcher("$currentDepth$");
					this._$currentMixinUID = $.$currentMixinUID;
					this.$currentMixinUID = dnuCatcher("$currentMixinUID");
					this._$currentMixinUID$ = $.$currentMixinUID$;
					this.$currentMixinUID$ = dnuCatcher("$currentMixinUID$");
					this._$jsWriter = $.$jsWriter;
					this.$jsWriter = dnuCatcher("$jsWriter");
					this._$setOnce$jsWriter$ = $.$setOnce$jsWriter$;
					this.$setOnce$jsWriter$ = dnuCatcher("$setOnce$jsWriter$");
					this._$supportDoesNotUnderstand = $.$supportDoesNotUnderstand;
					this.$supportDoesNotUnderstand = dnuCatcher("$supportDoesNotUnderstand");
					this._$supportDoesNotUnderstand$ = $.$supportDoesNotUnderstand$;
					this.$supportDoesNotUnderstand$ = dnuCatcher("$supportDoesNotUnderstand$");
					this._$inlineOperators = $.$inlineOperators;
					this.$inlineOperators = dnuCatcher("$inlineOperators");
					this._$inlineOperators$ = $.$inlineOperators$;
					this.$inlineOperators$ = dnuCatcher("$inlineOperators$");
					this._$enableIntrinsics = $.$enableIntrinsics;
					this.$enableIntrinsics = dnuCatcher("$enableIntrinsics");
					this._$enableIntrinsics$ = $.$enableIntrinsics$;
					this.$enableIntrinsics$ = dnuCatcher("$enableIntrinsics$");
					this.$Newspeak2V8Compilation$Compiler$Rewriter = this._$Newspeak2V8Compilation$Compiler$Rewriter = $.$Newspeak2V8Compilation$Compiler$Rewriter;
					this.$Newspeak2V8Compilation$Compiler$Rewriter$ = this._$Newspeak2V8Compilation$Compiler$Rewriter$ = $.$Newspeak2V8Compilation$Compiler$Rewriter$;
					this.$Newspeak2V8Compilation$Compiler$ScopeBuilder = this._$Newspeak2V8Compilation$Compiler$ScopeBuilder = $.$Newspeak2V8Compilation$Compiler$ScopeBuilder;
					this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$ = this._$Newspeak2V8Compilation$Compiler$ScopeBuilder$ = $.$Newspeak2V8Compilation$Compiler$ScopeBuilder$;
					this.$Newspeak2V8Compilation$Compiler$Translator = this._$Newspeak2V8Compilation$Compiler$Translator = $.$Newspeak2V8Compilation$Compiler$Translator;
					this.$Newspeak2V8Compilation$Compiler$Translator$ = this._$Newspeak2V8Compilation$Compiler$Translator$ = $.$Newspeak2V8Compilation$Compiler$Translator$;
					this.$enclosingObjects$Newspeak2V8Compilation$Compiler = enclosingObjects;
					this.$super$Newspeak2V8Compilation$Compiler$slot = runtimeSuperclass;
					this["Newspeak2V8Compilation`Compiler"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$scopeStack$slot = nil;
						this.$input$slot = nil;
						this.$sentSelectors$slot = nil;
						this.$rewriter$slot = nil;
						this.$translator$slot = nil;
						this.$currentDepth$slot = nil;
						this.$currentMixinUID$slot = nil;
						this.$jsWriter$slot = nil;
						this.$supportDoesNotUnderstand$slot = nil;
						this.$inlineOperators$slot = nil;
						this.$enableIntrinsics$slot = nil;
						this.$Newspeak2V8Compilation$Compiler$Rewriter$slot = nil;
						this.$Newspeak2V8Compilation$Compiler$ScopeBuilder$slot = nil;
						this.$Newspeak2V8Compilation$Compiler$Translator$slot = nil;
					});
					this.basicNew = this["Newspeak2V8Compilation`Compiler"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Newspeak2V8Compilation`Compiler";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Newspeak2V8Compilation`Compiler";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Newspeak2V8Compilation$Compiler = enclosingObjects;
						this.$super$Newspeak2V8Compilation$Compiler = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Newspeak2V8Compilation$MethodIR = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Newspeak2V8Compilation`MethodIR";
			this.name = "Newspeak2V8Compilation`MethodIR";
			this.header = "MethodIR named: n accessModifier: am function: f source: s = (|\r	public name = n.\r	public function = f.\r	public src = s.\r	public isSynthetic ::= false.\r	public isFactory ::= false.\r	public accessModifier = am.\r|assert: [(n includes: $$) not].\r	am isNil ifTrue: [halt])";
			this.slots = [
				new SM("name", false, false),
				new SM("function", false, false),
				new SM("src", false, false),
				new SM("isSynthetic", true, false),
				new SM("isFactory", true, false),
				new SM("accessModifier", false, false)
			];
			this.methods = [
				new MM("superInit`Newspeak2V8Compilation`MethodIR", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("isPrivate", false, "public isPrivate = (\r	^#private = accessModifier\r)"),
				new MM("isProtected", false, "public isProtected = (\r	^#protected = accessModifier\r)"),
				new MM("isPublic", false, "public isPublic = (\r	^#public = accessModifier\r)"),
				new MM("printOn:", false, "public printOn: stm = (\r	stm nextPutAll: 'MethodIR:'.\r	stm nextPutAll: name.\r)"),
				new MM("name", true, null),
				new MM("setOnce`name:", true, null),
				new MM("function", true, null),
				new MM("setOnce`function:", true, null),
				new MM("src", true, null),
				new MM("setOnce`src:", true, null),
				new MM("isSynthetic", true, null),
				new MM("isSynthetic:", true, null),
				new MM("isFactory", true, null),
				new MM("isFactory:", true, null),
				new MM("accessModifier", true, null),
				new MM("setOnce`accessModifier:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Newspeak2V8Compilation$MethodIR = (function ($n, $am, $f, $s) {
				var self = this;
				self.$super$Newspeak2V8Compilation$MethodIR$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($n, $am, $f, $s) {
				var self = this;
				self._$superInit$Newspeak2V8Compilation$MethodIR($n, $am, $f, $s);
				self._$setOnce$name$($n);
				self._$setOnce$function$($f);
				self._$setOnce$src$($s);
				self._$isSynthetic$(false);
				self._$isFactory$(false);
				self._$setOnce$accessModifier$($am);
				self.$enclosingObjects$Newspeak2V8Compilation$MethodIR[0]._$assert$((function () {
					return $n.$includes$("$").$not();
				}));
				if ($am.$isNil()) {
					self._$halt();
				} else {
					nil;
				};
				return self;
			});
			this.$isPrivate = (function () {
				var self = this;
				return ("private").$$equal(self._$accessModifier());
			});
			this.$isProtected = (function () {
				var self = this;
				return ("protected").$$equal(self._$accessModifier());
			});
			this.$isPublic = (function () {
				var self = this;
				return ("public").$$equal(self._$accessModifier());
			});
			this.$printOn$ = (function ($stm) {
				var self = this;
				$stm.$nextPutAll$("MethodIR:");
				$stm.$nextPutAll$(self._$name());
				return self;
			});
			this.$name = (function () {
				return this.$name$slot;
			});
			this.$setOnce$name$ = (function (v) {
				this.$name$slot = v;
				return this;
			});
			this.$function = (function () {
				return this.$function$slot;
			});
			this.$setOnce$function$ = (function (v) {
				this.$function$slot = v;
				return this;
			});
			this.$src = (function () {
				return this.$src$slot;
			});
			this.$setOnce$src$ = (function (v) {
				this.$src$slot = v;
				return this;
			});
			this.$isSynthetic = (function () {
				return this.$isSynthetic$slot;
			});
			this.$isSynthetic$ = (function (v) {
				this.$isSynthetic$slot = v;
				return this;
			});
			this.$isFactory = (function () {
				return this.$isFactory$slot;
			});
			this.$isFactory$ = (function (v) {
				this.$isFactory$slot = v;
				return this;
			});
			this.$accessModifier = (function () {
				return this.$accessModifier$slot;
			});
			this.$setOnce$accessModifier$ = (function (v) {
				this.$accessModifier$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Newspeak2V8Compilation`MethodIR";
					this._$superInit$Newspeak2V8Compilation$MethodIR = $.$superInit$Newspeak2V8Compilation$MethodIR;
					this.$superInit$Newspeak2V8Compilation$MethodIR = dnuCatcher("$superInit$Newspeak2V8Compilation$MethodIR");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isPrivate = this._$isPrivate = $.$isPrivate;
					this.$isProtected = this._$isProtected = $.$isProtected;
					this.$isPublic = this._$isPublic = $.$isPublic;
					this.$printOn$ = this._$printOn$ = $.$printOn$;
					this.$name = this._$name = $.$name;
					this.$setOnce$name$ = this._$setOnce$name$ = $.$setOnce$name$;
					this.$function = this._$function = $.$function;
					this.$setOnce$function$ = this._$setOnce$function$ = $.$setOnce$function$;
					this.$src = this._$src = $.$src;
					this.$setOnce$src$ = this._$setOnce$src$ = $.$setOnce$src$;
					this.$isSynthetic = this._$isSynthetic = $.$isSynthetic;
					this.$isSynthetic$ = this._$isSynthetic$ = $.$isSynthetic$;
					this.$isFactory = this._$isFactory = $.$isFactory;
					this.$isFactory$ = this._$isFactory$ = $.$isFactory$;
					this.$accessModifier = this._$accessModifier = $.$accessModifier;
					this.$setOnce$accessModifier$ = this._$setOnce$accessModifier$ = $.$setOnce$accessModifier$;
					this.$enclosingObjects$Newspeak2V8Compilation$MethodIR = enclosingObjects;
					this.$super$Newspeak2V8Compilation$MethodIR$slot = runtimeSuperclass;
					this["Newspeak2V8Compilation`MethodIR"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$name$slot = nil;
						this.$function$slot = nil;
						this.$src$slot = nil;
						this.$isSynthetic$slot = nil;
						this.$isFactory$slot = nil;
						this.$accessModifier$slot = nil;
					});
					this.basicNew = this["Newspeak2V8Compilation`MethodIR"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Newspeak2V8Compilation`MethodIR";
				this.slots = [];
				this.methods = [new MM("named:accessModifier:function:source:", true, null)];
				this.nestedClasses = [];
				this.$named$accessModifier$function$source$ = (function ($n, $am, $f, $s) {
					return (new this.nonMeta.basicNew()).$instance$initializer($n, $am, $f, $s);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Newspeak2V8Compilation`MethodIR";
						this.$named$accessModifier$function$source$ = this._$named$accessModifier$function$source$ = $.$named$accessModifier$function$source$;
						this.$enclosingObjects$Newspeak2V8Compilation$MethodIR = enclosingObjects;
						this.$super$Newspeak2V8Compilation$MethodIR = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Newspeak2V8Compilation$MixinIR = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Newspeak2V8Compilation`MixinIR";
			this.name = "Newspeak2V8Compilation`MixinIR";
			this.header = "MixinIR for: d isMeta: m = (|\r	public declaration = d.\r	public isMeta = m.\r	public slots = OrderedCollection new.\r	public methods = OrderedCollection new.\r	public nestedClasses = OrderedCollection new.\r|)";
			this.slots = [
				new SM("declaration", false, false),
				new SM("isMeta", false, false),
				new SM("slots", false, false),
				new SM("methods", false, false),
				new SM("nestedClasses", false, false)
			];
			this.methods = [
				new MM("superInit`Newspeak2V8Compilation`MixinIR", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("name", false, "public name = (\r	^declaration name\r)"),
				new MM("declaration", true, null),
				new MM("setOnce`declaration:", true, null),
				new MM("isMeta", true, null),
				new MM("setOnce`isMeta:", true, null),
				new MM("slots", true, null),
				new MM("setOnce`slots:", true, null),
				new MM("methods", true, null),
				new MM("setOnce`methods:", true, null),
				new MM("nestedClasses", true, null),
				new MM("setOnce`nestedClasses:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Newspeak2V8Compilation$MixinIR = (function ($d, $m) {
				var self = this;
				self.$super$Newspeak2V8Compilation$MixinIR$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($d, $m) {
				var self = this;
				self._$superInit$Newspeak2V8Compilation$MixinIR($d, $m);
				self._$setOnce$declaration$($d);
				self._$setOnce$isMeta$($m);
				self._$setOnce$slots$(self.$enclosingObjects$Newspeak2V8Compilation$MixinIR[0]._$OrderedCollection().$new());
				self._$setOnce$methods$(self.$enclosingObjects$Newspeak2V8Compilation$MixinIR[0]._$OrderedCollection().$new());
				self._$setOnce$nestedClasses$(self.$enclosingObjects$Newspeak2V8Compilation$MixinIR[0]._$OrderedCollection().$new());
				return self;
			});
			this.$name = (function () {
				var self = this;
				return self._$declaration().$name();
			});
			this.$declaration = (function () {
				return this.$declaration$slot;
			});
			this.$setOnce$declaration$ = (function (v) {
				this.$declaration$slot = v;
				return this;
			});
			this.$isMeta = (function () {
				return this.$isMeta$slot;
			});
			this.$setOnce$isMeta$ = (function (v) {
				this.$isMeta$slot = v;
				return this;
			});
			this.$slots = (function () {
				return this.$slots$slot;
			});
			this.$setOnce$slots$ = (function (v) {
				this.$slots$slot = v;
				return this;
			});
			this.$methods = (function () {
				return this.$methods$slot;
			});
			this.$setOnce$methods$ = (function (v) {
				this.$methods$slot = v;
				return this;
			});
			this.$nestedClasses = (function () {
				return this.$nestedClasses$slot;
			});
			this.$setOnce$nestedClasses$ = (function (v) {
				this.$nestedClasses$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Newspeak2V8Compilation`MixinIR";
					this._$superInit$Newspeak2V8Compilation$MixinIR = $.$superInit$Newspeak2V8Compilation$MixinIR;
					this.$superInit$Newspeak2V8Compilation$MixinIR = dnuCatcher("$superInit$Newspeak2V8Compilation$MixinIR");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$name = this._$name = $.$name;
					this.$declaration = this._$declaration = $.$declaration;
					this.$setOnce$declaration$ = this._$setOnce$declaration$ = $.$setOnce$declaration$;
					this.$isMeta = this._$isMeta = $.$isMeta;
					this.$setOnce$isMeta$ = this._$setOnce$isMeta$ = $.$setOnce$isMeta$;
					this.$slots = this._$slots = $.$slots;
					this.$setOnce$slots$ = this._$setOnce$slots$ = $.$setOnce$slots$;
					this.$methods = this._$methods = $.$methods;
					this.$setOnce$methods$ = this._$setOnce$methods$ = $.$setOnce$methods$;
					this.$nestedClasses = this._$nestedClasses = $.$nestedClasses;
					this.$setOnce$nestedClasses$ = this._$setOnce$nestedClasses$ = $.$setOnce$nestedClasses$;
					this.$enclosingObjects$Newspeak2V8Compilation$MixinIR = enclosingObjects;
					this.$super$Newspeak2V8Compilation$MixinIR$slot = runtimeSuperclass;
					this["Newspeak2V8Compilation`MixinIR"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$declaration$slot = nil;
						this.$isMeta$slot = nil;
						this.$slots$slot = nil;
						this.$methods$slot = nil;
						this.$nestedClasses$slot = nil;
					});
					this.basicNew = this["Newspeak2V8Compilation`MixinIR"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Newspeak2V8Compilation`MixinIR";
				this.slots = [];
				this.methods = [new MM("for:isMeta:", true, null)];
				this.nestedClasses = [];
				this.$for$isMeta$ = (function ($d, $m) {
					return (new this.nonMeta.basicNew()).$instance$initializer($d, $m);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Newspeak2V8Compilation`MixinIR";
						this.$for$isMeta$ = this._$for$isMeta$ = $.$for$isMeta$;
						this.$enclosingObjects$Newspeak2V8Compilation$MixinIR = enclosingObjects;
						this.$super$Newspeak2V8Compilation$MixinIR = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Newspeak2V8Compilation$NameMangler = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Newspeak2V8Compilation`NameMangler";
			this.name = "Newspeak2V8Compilation`NameMangler";
			this.header = "NameMangler = (|\r	private specialCharacterManglings = Dictionary new.\r|specialCharacterManglings\r		at: $+ put: '$plus';\r		at: $- put: '$minus';\r		at: $* put: '$times';\r		at: $/ put: '$over';\r		at: $\\ put: '$back';\r		at: $< put: '$less';\r		at: $> put: '$greater';\r		at: $~ put: '$tilde';\r		at: $= put: '$equal';\r		at: $@ put: '$at';\r		at: $% put: '$percent';\r		at: $| put: '$pipe';\r		at: $& put: '$amp';\r		at: $? put: '$question';\r		at: $! put: '$bang';\r		at: $, put: '$comma')";
			this.slots = [new SM("specialCharacterManglings", false, false)];
			this.methods = [
				new MM("superInit`Newspeak2V8Compilation`NameMangler", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("_mangleSelector:", false, "protected _mangleSelector: selector <String> ^ <String> = (\r	(* Convert a Newspeak selector into a JS identifer. *)\r\r	(* Binary *)\r	('+-*/\\<>~=@%|&?!,' includes: selector first) ifTrue: [\r		^(selector inject: '$' into: [:accum :next | \r			accum, (specialCharacterManglings at: next)]) asSymbol].\r\r	^((('$', selector)\r		replaceAll: $: with: $$) (* Keyword *)\r		replaceAll: $` with: $$) (* Qualified *)\r		replaceAll: $. with: $$ (* limit temp *)\r)"),
				new MM("fullyQualifiedNameToSimple:", false, "public fullyQualifiedNameToSimple: fullName <String> = (\r	| parts |\r	\r	parts:: splitFullyQualifiedName: fullName.\r	^parts last asSymbol\r)"),
				new MM("fullyQualifySimpleName:with:", false, "public fullyQualifySimpleName: simpleName <Symbol> with: fullyQualifiedPackage <Symbol> = (\r	^(fullyQualifiedPackage asString, syntheticNameSeparator, simpleName) asSymbol\r)"),
				new MM("mangleLocal:", false, "public mangleLocal: selector <String> ^ <String> = (\r	^_mangleSelector: selector\r)"),
				new MM("mangleProtected:", false, "public mangleProtected: selector = (\r	^'_', (_mangleSelector: selector)\r)"),
				new MM("manglePublic:", false, "public manglePublic: selector = (\r	^_mangleSelector: selector\r)"),
				new MM("mangleSlot:", false, "public mangleSlot: selector <String> ^ <String> = (\r	^(_mangleSelector: selector), '$slot'\r)"),
				new MM("mangleSynthetic:", false, "public mangleSynthetic: selector = (\r	^_mangleSelector: selector\r)"),
				new MM("privateDnu", false, "public privateDnu = (\r	^'dnu'\r)"),
				new MM("specialCharacterManglings", true, null),
				new MM("setOnce`specialCharacterManglings:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Newspeak2V8Compilation$NameMangler = (function () {
				var self = this;
				self.$super$Newspeak2V8Compilation$NameMangler$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Newspeak2V8Compilation$NameMangler();
				$1.$setOnce$specialCharacterManglings$.call(self, self.$enclosingObjects$Newspeak2V8Compilation$NameMangler[0]._$Dictionary().$new());
				(function (cascadeReceiver) {
					cascadeReceiver.$at$put$("+", "$plus");
					cascadeReceiver.$at$put$("-", "$minus");
					cascadeReceiver.$at$put$("*", "$times");
					cascadeReceiver.$at$put$("/", "$over");
					cascadeReceiver.$at$put$("\\", "$back");
					cascadeReceiver.$at$put$("<", "$less");
					cascadeReceiver.$at$put$(">", "$greater");
					cascadeReceiver.$at$put$("~", "$tilde");
					cascadeReceiver.$at$put$("=", "$equal");
					cascadeReceiver.$at$put$("@", "$at");
					cascadeReceiver.$at$put$("%", "$percent");
					cascadeReceiver.$at$put$("|", "$pipe");
					cascadeReceiver.$at$put$("&", "$amp");
					cascadeReceiver.$at$put$("?", "$question");
					cascadeReceiver.$at$put$("!", "$bang");
					return cascadeReceiver.$at$put$(",", "$comma");
				})($1.$specialCharacterManglings.call(self));
				return self;
			});
			this.$_mangleSelector$ = (function ($selector) {
				var self = this;
				if (("+-*/\\<>~=@%|&?!,").$includes$($selector.$first())) {
					return $selector.$inject$into$("$", (function ($accum, $next) {
						return $accum.$$comma($1.$specialCharacterManglings.call(self).$at$($next));
					})).$asSymbol();
				} else {
					nil;
				};
				return ("$").$$comma($selector).$replaceAll$with$(":", "$").$replaceAll$with$("`", "$").$replaceAll$with$(".", "$");
			});
			this.$fullyQualifiedNameToSimple$ = (function ($fullName) {
				var self = this;
				var $parts = nil;
				$parts = self.$enclosingObjects$Newspeak2V8Compilation$NameMangler[0]._$splitFullyQualifiedName$($fullName);
				return $parts.$last().$asSymbol();
			});
			this.$fullyQualifySimpleName$with$ = (function ($simpleName, $fullyQualifiedPackage) {
				var self = this;
				return $fullyQualifiedPackage.$asString().$$comma(self.$enclosingObjects$Newspeak2V8Compilation$NameMangler[0]._$syntheticNameSeparator()).$$comma($simpleName).$asSymbol();
			});
			this.$mangleLocal$ = (function ($selector) {
				var self = this;
				return self._$_mangleSelector$($selector);
			});
			this.$mangleProtected$ = (function ($selector) {
				var self = this;
				return ("_").$$comma(self._$_mangleSelector$($selector));
			});
			this.$manglePublic$ = (function ($selector) {
				var self = this;
				return self._$_mangleSelector$($selector);
			});
			this.$mangleSlot$ = (function ($selector) {
				var self = this;
				return self._$_mangleSelector$($selector).$$comma("$slot");
			});
			this.$mangleSynthetic$ = (function ($selector) {
				var self = this;
				return self._$_mangleSelector$($selector);
			});
			this.$privateDnu = (function () {
				var self = this;
				return "dnu";
			});
			this.$specialCharacterManglings = (function () {
				return this.$specialCharacterManglings$slot;
			});
			this.$setOnce$specialCharacterManglings$ = (function (v) {
				this.$specialCharacterManglings$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Newspeak2V8Compilation`NameMangler";
					this._$superInit$Newspeak2V8Compilation$NameMangler = $.$superInit$Newspeak2V8Compilation$NameMangler;
					this.$superInit$Newspeak2V8Compilation$NameMangler = dnuCatcher("$superInit$Newspeak2V8Compilation$NameMangler");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$_mangleSelector$ = $.$_mangleSelector$;
					this.$_mangleSelector$ = dnuCatcher("$_mangleSelector$");
					this.$fullyQualifiedNameToSimple$ = this._$fullyQualifiedNameToSimple$ = $.$fullyQualifiedNameToSimple$;
					this.$fullyQualifySimpleName$with$ = this._$fullyQualifySimpleName$with$ = $.$fullyQualifySimpleName$with$;
					this.$mangleLocal$ = this._$mangleLocal$ = $.$mangleLocal$;
					this.$mangleProtected$ = this._$mangleProtected$ = $.$mangleProtected$;
					this.$manglePublic$ = this._$manglePublic$ = $.$manglePublic$;
					this.$mangleSlot$ = this._$mangleSlot$ = $.$mangleSlot$;
					this.$mangleSynthetic$ = this._$mangleSynthetic$ = $.$mangleSynthetic$;
					this.$privateDnu = this._$privateDnu = $.$privateDnu;
					this.$enclosingObjects$Newspeak2V8Compilation$NameMangler = enclosingObjects;
					this.$super$Newspeak2V8Compilation$NameMangler$slot = runtimeSuperclass;
					this["Newspeak2V8Compilation`NameMangler"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$specialCharacterManglings$slot = nil;
					});
					this.basicNew = this["Newspeak2V8Compilation`NameMangler"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Newspeak2V8Compilation`NameMangler";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Newspeak2V8Compilation`NameMangler";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Newspeak2V8Compilation$NameMangler = enclosingObjects;
						this.$super$Newspeak2V8Compilation$NameMangler = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Newspeak2V8Compilation$ProgramBuilder = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Newspeak2V8Compilation`ProgramBuilder";
			this.name = "Newspeak2V8Compilation`ProgramBuilder";
			this.header = "ProgramBuilder = (|\rprivate compiler = Compiler new.\rprivate mixins <List[ClassDeclarationIR]> = OrderedCollection new.\rprivate sentSelectors = Set new.\rprivate runtimeConfiguration <ClassDeclarationIR>\rprivate applicationConfiguration <ClassDeclarationIR>\rprivate resources <List[Node]> = OrderedCollection new.\r|)";
			this.slots = [
				new SM("compiler", false, false),
				new SM("mixins", false, false),
				new SM("sentSelectors", false, false),
				new SM("runtimeConfiguration", true, false),
				new SM("applicationConfiguration", true, false),
				new SM("resources", false, false)
			];
			this.methods = [
				new MM("superInit`Newspeak2V8Compilation`ProgramBuilder", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("addImageResource:under:", false, "public addImageResource: relativeUrl under: name = (\r	| r i |\r	i:: js verbatim: \r	'vmmirror.kernel.$Future().$computing$(\r		function(){return vmmirror.platform.$aliens().$yourself()._$alienate$(\r			function(){ var i = new Image(); i.src =\"', relativeUrl,'\"; return i;}() );})'.\r	r:: js assign: (js propertyOf: (js ident: 'this') at: (js literal: (names manglePublic: name)))\r				toBe: (js functionOf: {} body: (js block: {js return: i})).\r	resources add: r.\r)"),
				new MM("addStringResource:under:", false, "public addStringResource: string under: name = (\r	| r |\r	r:: js assign: (js propertyOf: (js ident: 'this') at: (js literal: (names manglePublic: name)))\r				toBe: (js functionOf: {} body: (js block: {js return: (js literal: string)})).\r	resources add: r.\r)"),
				new MM("applicationSources:", false, "public applicationSources: sources <List[String]> = (\r	| results |\r	results:: sources collect: [:source | compileSource: source enableIntrinsics: false].\r	applicationConfiguration: results first.\r)"),
				new MM("compileSource:enableIntrinsics:", false, "compileSource: source <String> enableIntrinsics: flag <Boolean> ^<ClassDeclarationIR> = (\r	| compilation |\r	compilation:: cachedCompilations\r		at: {source. flag}\r		ifAbsentPut:\r			[ | newCompliation = CachedCompilation new. |\r			newCompliation source: source.\r			newCompliation enableIntrinsics: flag.\r			compiler enableIntrinsics: flag.\r			compiler sentSelectors: Set new.\r			newCompliation ir: (compiler compileClassSource: source readStream within: nil).\r			newCompliation sentSelectors: compiler sentSelectors].\r	mixins add: compilation ir.\r	sentSelectors addAll: compilation sentSelectors.\r	^compilation ir\r)"),
				new MM("main", false, "private main = (\r	^js verbatim: \r'var runtime = ns.$',runtimeConfiguration name,'().$packageUsing$(ns);\rvmmirror.platform = runtime.$using$(vmmirror);\rvar app = ns.$',applicationConfiguration name,'().$packageUsing$(ns);\rapp.$main$args$(vmmirror.platform, [])'\r)"),
				new MM("namespace", false, "private namespace = (\r	^js var: 'ns' value: (js new: (js functionOf: {} body: (js block: (\r		(mixins asArray collect: [:cd | \r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: (names mangleSlot: cd name))) \r				toBe: (js call: (js propertyOf: (js ident: 'vmmirror') at: (js literal: 'applyTopLevelMixin')) \r						with: {js propertyOf: (js ident: 'mixins') at: (js literal: (names manglePublic: cd name))})]),\r		(mixins asArray collect: [:cd | \r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: (names manglePublic: cd name)))\r				toBe: (js functionOf: {} body: (js block: {js return: \r					(js propertyOf: (js ident: 'this') at: (js literal: (names mangleSlot: cd name)))}))]),\r		resources asArray\r	))) with: {})\r)"),
				new MM("outputTo:", false, "public outputTo: stream = (\r	JavascriptWriter new generateSourceFor: script on: stream\r)"),
				new MM("runtimeMixinNamespace", false, "private runtimeMixinNamespace = (\r	^js new: (js functionOf: {} body: (js block: (\r		mixins collect: [:cd | \r			js assign: (js propertyOf: (js ident: 'this') at: (js literal: (names manglePublic: cd name))) toBe: cd runtimeMixin]\r	))) with: {}\r)"),
				new MM("runtimeSources:", false, "public runtimeSources: sources <List[String]> = (\r	| results |\r	results:: sources collect: [:source | compileSource: source enableIntrinsics: true].\r	runtimeConfiguration: results first.\r)"),
				new MM("script", false, "private script = (\r	compiler sentSelectors: sentSelectors.\r	^js script: \r		{js literal: 'use strict'.\r		js var: 'nil' value: (js literal: 'patch me with nil').\r		js var: 'theGlobalObject' value: (js ident: 'this').\r		js verbatim: 'function SM(n,m,s){this.name=n; this.isMutable=m; this.isSynthetic=s; }'.\r		js verbatim: 'function MM(n,sy,src){this.name=n; this.isSynthetic=sy; this.source=src; }'.\r		js verbatim: 'function dnuCatcher(s){ return function() {\rreturn this.dnu(vmmirror.kernel.$Message().$selector$arguments$(s, Array.prototype.slice.call(arguments)));\r} }'.\r		js var: 'mixins' value: runtimeMixinNamespace.\r		vmmirror.\r		namespace.\r		compiler dnuHandlers.\r		main}\r)"),
				new MM("vmmirror", false, "private vmmirror = (\r	^js verbatim: \r'\rvar vmmirror = new function(){\r	\r	this.ImplementationBase$slot = new function(){\r		this.debug = \"ImplementationBase\";\r		this.$runtimeClass$slot = new function(){\r			this.debug = \"Runtime class for ImplementationBase\";\r			this.basicNew = function(){};\r			this.$instance$initializer = function(){};\r			this._$instance$initializer = function(){};\r			this.toString = function(){ return this.$printString(); }\r		};\r	};\r	this.$ImplementationBase = function(){return this.ImplementationBase$slot;};\r	this.$Array = function(){return Array;};\r	this.$String = function(){return String;};\r	this.$printString = function(){return \"VMMirrorForV8\"};\r	\r	this.createKernel = function(){\r		\r		var enclosingObjects = [\"patch me with kernel\", \"patch me with nil\"];\r		var enclosingObjects2 = [\"patch me with nil\"];\r		\r		var Object$runtimeClass = mixins.$KernelForV8.$KernelForV8$Object.invoke(this.$ImplementationBase().$runtimeClass$slot, enclosingObjects);\r		var Class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Class.invoke(Object$runtimeClass, enclosingObjects);\r		var Metaclass$runtimeClass = mixins.$KernelForV8.$KernelForV8$Metaclass.invoke(Object$runtimeClass, enclosingObjects);\r		var Mixin$runtimeClass = mixins.$KernelForV8.$KernelForV8$Mixin.invoke(Object$runtimeClass, enclosingObjects);\r		var UndefinedObject$runtimeClass = mixins.$KernelForV8.$KernelForV8$UndefinedObject.invoke(Object$runtimeClass, enclosingObjects);\r		var Kernel$runtimeClass = mixins.$KernelForV8.invoke(Object$runtimeClass, enclosingObjects2);\r		\r		var Object$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Object.meta.invoke(Class$runtimeClass, enclosingObjects);\r		var Class$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Class.meta.invoke(Class$runtimeClass, enclosingObjects);\r		var Metaclass$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Metaclass.meta.invoke(Class$runtimeClass, enclosingObjects);\r		var Mixin$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Mixin.meta.invoke(Class$runtimeClass, enclosingObjects);\r		var UndefinedObject$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$UndefinedObject.meta.invoke(Class$runtimeClass, enclosingObjects);\r		var Kernel$class$runtimeClass = mixins.$KernelForV8.meta.invoke(Class$runtimeClass, enclosingObjects2);\r		\r		Object$runtimeClass.meta = Object$class$runtimeClass;\r		Class$runtimeClass.meta = Class$class$runtimeClass;\r		Metaclass$runtimeClass.meta = Metaclass$class$runtimeClass;\r		Mixin$runtimeClass.meta = Mixin$class$runtimeClass;\r		UndefinedObject$runtimeClass.meta = UndefinedObject$class$runtimeClass;\r		Kernel$runtimeClass.meta = Kernel$class$runtimeClass;\r		\r		Object$class$runtimeClass.nonMeta = Object$runtimeClass;\r		Class$class$runtimeClass.nonMeta = Class$runtimeClass;\r		Metaclass$class$runtimeClass.nonMeta = Metaclass$runtimeClass;\r		Mixin$class$runtimeClass.nonMeta = Mixin$runtimeClass;\r		UndefinedObject$class$runtimeClass.nonMeta = UndefinedObject$runtimeClass;\r		Kernel$class$runtimeClass.nonMeta = Kernel$runtimeClass;\r		\r		nil = new UndefinedObject$runtimeClass.basicNew();\r		\r		var Object = new Object$class$runtimeClass.basicNew();\r		var Class = new Class$class$runtimeClass.basicNew();\r		var Metaclass = new Metaclass$class$runtimeClass.basicNew();\r		var Mixin = new Mixin$class$runtimeClass.basicNew();\r		var UndefinedObject = new UndefinedObject$class$runtimeClass.basicNew();\r		var Kernel = new Kernel$class$runtimeClass.basicNew();\r		\r		var Object$class = new Metaclass$runtimeClass.basicNew();\r		var Class$class = new Metaclass$runtimeClass.basicNew();\r		var Metaclass$class = new Metaclass$runtimeClass.basicNew();\r		var Mixin$class = new Metaclass$runtimeClass.basicNew();\r		var UndefinedObject$class = new Metaclass$runtimeClass.basicNew();\r		var Kernel$class = new Metaclass$runtimeClass.basicNew();\r		\r		Object$class$runtimeClass.newspeakClass = Object$class;\r		Class$class$runtimeClass.newspeakClass = Class$class;\r		Metaclass$class$runtimeClass.newspeakClass = Metaclass$class;\r		Mixin$class$runtimeClass.newspeakClass = Mixin$class;\r		UndefinedObject$class$runtimeClass.newspeakClass = UndefinedObject$class;\r		Kernel$class$runtimeClass.newspeakClass = Kernel$class;\r		\r		Object$runtimeClass.newspeakClass = Object;\r		Class$runtimeClass.newspeakClass = Class;\r		Metaclass$runtimeClass.newspeakClass = Metaclass;\r		Mixin$runtimeClass.newspeakClass = Mixin;\r		UndefinedObject$runtimeClass.newspeakClass = UndefinedObject;\r		Kernel$runtimeClass.newspeakClass = Kernel;\r		\r		var kernel = Kernel.$usingVmMirror$(this);\r		\r		//superclass$slot\r		Object.$superclass$slot = nil;\r		Class.$superclass$slot = Object;\r		Metaclass.$superclass$slot = Object;\r		Mixin.$superclass$slot = Object;\r		UndefinedObject.$superclass$slot = Object;\r		Kernel.$superclass$slot = Object;\r		\r		Object$class.$superclass$slot = Class;\r		Class$class.$superclass$slot = Class;\r		Metaclass$class.$superclass$slot = Class;\r		Mixin$class.$superclass$slot = Class;\r		UndefinedObject$class.$superclass$slot = Class;\r		Kernel$class.$superclass$slot = Class;\r		\r		//mixin$slot\r		Object.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Object);\r		Class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Class);\r		Metaclass.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Metaclass);\r		Mixin.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Mixin);\r		UndefinedObject.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$UndefinedObject);\r		Kernel.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8);\r\r		Object$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Object.meta);\r		Class$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Class.meta);\r		Metaclass$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Metaclass.meta);\r		Mixin$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Mixin.meta);\r		UndefinedObject$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$UndefinedObject.meta);\r		Kernel$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.meta);\r		\r		//enclosingObject$slot\r		Object.$enclosingObject$slot = kernel;\r		Class.$enclosingObject$slot = kernel;\r		Metaclass.$enclosingObject$slot = kernel;\r		Mixin.$enclosingObject$slot = kernel;\r		UndefinedObject.$enclosingObject$slot = kernel;\r		Kernel.$enclosingObject$slot = nil;\r		\r		Object$class.$enclosingObject$slot = kernel;\r		Class$class.$enclosingObject$slot = kernel;\r		Metaclass$class.$enclosingObject$slot = kernel;\r		Mixin$class.$enclosingObject$slot = kernel;\r		UndefinedObject$class.$enclosingObject$slot = kernel;\r		Kernel$class.$enclosingObject$slot = nil;\r		\r		enclosingObjects[0] = kernel;\r		enclosingObjects[1] = nil;\r		enclosingObjects2[0] = nil;\r		\r		//name$slot\r		Object.$name$slot = \"Object\";\r		Class.$name$slot = \"Class\";\r		Metaclass.$name$slot = \"Metaclass\";\r		Mixin.$name$slot = \"Mixin\";\r		Kernel.$name$slot = \"Kernel\";\r		\r		Object$class.$name$slot = \"Object class\";\r		Class$class.$name$slot = \"Class class\";\r		Metaclass$class.$name$slot = \"Metaclass class\";\r		Mixin$class.$name$slot = \"Mixin class\";\r		Kernel$class.$name$slot = \"Kernel class\";\r		\r		//runtimeClass\r		Object.runtimeClass = Object$runtimeClass;\r		Class.runtimeClass = Class$runtimeClass;\r		Metaclass.runtimeClass = Metaclass$runtimeClass;\r		Mixin.runtimeClass = Mixin$runtimeClass;\r		Kernel.runtimeClass = Kernel$runtimeClass;\r		\r		Object$class.runtimeClass = Metaclass$runtimeClass;\r		Class$class.runtimeClass = Metaclass$runtimeClass;\r		Metaclass$class.runtimeClass = Metaclass$runtimeClass;\r		Mixin$class.runtimeClass = Metaclass$runtimeClass;\r		Kernel$class.runtimeClass = Metaclass$runtimeClass;\r		\r		//thisClass$slot\r		Object$class.$thisClass$slot = Object;\r		Class$class.$thisClass$slot = Class;\r		Metaclass$class.$thisClass$slot = Metaclass;\r		Mixin$class.$thisClass$slot = Mixin;\r		Kernel$class.$thisClass$slot = Kernel;\r		\r		kernel.$KernelForV8$Object$slot = Object;\r		kernel.$KernelForV8$Class$slot = Class;\r		kernel.$KernelForV8$Metaclass$slot = Metaclass;\r		kernel.$KernelForV8$Mixin$slot = Mixin;\r		\r		return kernel;\r	};\r	this.kernel = this.createKernel();\r	\r	this.applyTopLevelMixin = function(runtimeMixin){\r		return this.$applyMixin$toSuperclass$withEnclosingObjects$(runtimeMixin, this.kernel._$Object(), [nil]);\r	};\r	\r	this.$applyMixin$toSuperclass$withEnclosingObjects$ = function(runtimeMixin, newspeakSuperclass, enclosingObjects){\r		\r		var Class = this.kernel.$Class();\r		var Metaclass = this.kernel.$Metaclass();\r		var Mixin = this.kernel.$Mixin();\r		\r		var runtimeSuperclass = newspeakSuperclass.runtimeClass;\r		var runtimeClass = runtimeMixin.invoke(runtimeSuperclass, enclosingObjects);\r		var runtimeMetaclass = runtimeMixin.meta.invoke(Class.runtimeClass, enclosingObjects);\r		runtimeClass.meta = runtimeMetaclass;\r		runtimeMetaclass.nonMeta = runtimeClass;\r		\r		var newspeakMetaclass = Metaclass.$new();\r		var newspeakClass = new runtimeMetaclass.basicNew();\r		\r		runtimeClass.newspeakClass = newspeakClass;\r		runtimeMetaclass.newspeakClass = newspeakMetaclass;//Class;\r		\r		newspeakMetaclass.$superclass$slot = Class;\r		newspeakMetaclass.$mixin$slot = Mixin.$fromRuntimeMixin$(runtimeMixin.meta);\r		newspeakMetaclass.$enclosingObject$slot = enclosingObjects[0];\r		newspeakMetaclass.$enclosingObjects$slot = enclosingObjects;\r		newspeakMetaclass.$name$slot = runtimeMixin.name + \" class\";\r		newspeakMetaclass.$thisClass$slot = newspeakClass;\r		newspeakMetaclass.runtimeClass = runtimeMetaclass;\r		\r		newspeakClass.$superclass$slot = newspeakSuperclass;\r		newspeakClass.$mixin$slot = Mixin.$fromRuntimeMixin$(runtimeMixin);\r		newspeakClass.$enclosingObject$slot = enclosingObjects[0];\r		newspeakClass.$enclosingObjects$slot = enclosingObjects;\r		newspeakClass.$name$slot = runtimeMixin.name;\r		newspeakClass.runtimeClass = runtimeClass;\r\r		runtimeMixin.applications.push(runtimeClass);\r		return newspeakClass;\r	};\r	\r	var specialCharacters = new Object();\r	specialCharacters[\"plus\"] = \"+\";\r	specialCharacters[\"minus\"] = \"-\";\r	specialCharacters[\"times\"] = \"*\";\r	specialCharacters[\"over\"] = \"/\";\r	specialCharacters[\"back\"] = \"\\\\\";\r	specialCharacters[\"less\"] = \"<\";\r	specialCharacters[\"greater\"] = \">\";\r	specialCharacters[\"tilde\"] = \"~\";\r	specialCharacters[\"equal\"] = \"=\";\r	specialCharacters[\"at\"] = \"@\";\r	specialCharacters[\"percent\"] = \"%\";\r	specialCharacters[\"pipe\"] = \"|\";\r	specialCharacters[\"amp\"] = \"&\";\r	specialCharacters[\"question\"] = \"?\";\r	specialCharacters[\"bang\"] = \"!\";\r	specialCharacters[\"comma\"] = \",\";\r	\r	this.$unmangleSelector$ = function(s) {\r		if(s[0] != \"$\") return \"<jsSelector:\"+s+\">\";\r		if(s[s.length-1] == \"$\")\r			// Keyword\r			return s.substring(1).replace(/\\$/g,\":\");\r		if(s[1] == \"$\")\r			// Binary\r			return s.substring(2).split(\"$\").map(function(x) {return specialCharacters[x];}).join(\"\");\r		// Unary / qualified\r	   	return s.substring(1).replace(/\\$/g,\"`\");\r	};\r	\r	this.$mangleSelector$ = function(s) {\r		return \"$\" + s.replace(/\\:/g,\"$\").replace(/\\`/g,\"$\");\r	};\r};\r'\r)"),
				new MM("compiler", true, null),
				new MM("setOnce`compiler:", true, null),
				new MM("mixins", true, null),
				new MM("setOnce`mixins:", true, null),
				new MM("sentSelectors", true, null),
				new MM("setOnce`sentSelectors:", true, null),
				new MM("runtimeConfiguration", true, null),
				new MM("runtimeConfiguration:", true, null),
				new MM("applicationConfiguration", true, null),
				new MM("applicationConfiguration:", true, null),
				new MM("resources", true, null),
				new MM("setOnce`resources:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Newspeak2V8Compilation$ProgramBuilder = (function () {
				var self = this;
				self.$super$Newspeak2V8Compilation$ProgramBuilder$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Newspeak2V8Compilation$ProgramBuilder();
				$1.$setOnce$compiler$.call(self, self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$Compiler().$new());
				$1.$setOnce$mixins$.call(self, self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$OrderedCollection().$new());
				$1.$setOnce$sentSelectors$.call(self, self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$Set().$new());
				$1.$setOnce$resources$.call(self, self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$OrderedCollection().$new());
				return self;
			});
			this.$addImageResource$under$ = (function ($relativeUrl, $name) {
				var self = this;
				var $r = nil;
				var $i = nil;
				$i = self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$verbatim$(("vmmirror.kernel.$Future().$computing$(\r		function(){return vmmirror.platform.$aliens().$yourself()._$alienate$(\r			function(){ var i = new Image(); i.src =\"").$$comma($relativeUrl).$$comma("\"; return i;}() );})"));
				$r = self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$names().$manglePublic$($name))), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$return$($i)])));
				$1.$resources.call(self).$add$($r);
				return self;
			});
			this.$addStringResource$under$ = (function ($string, $name) {
				var self = this;
				var $r = nil;
				$r = self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$names().$manglePublic$($name))), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$return$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$($string))])));
				$1.$resources.call(self).$add$($r);
				return self;
			});
			this.$applicationSources$ = (function ($sources) {
				var self = this;
				var $results = nil;
				$results = $sources.$collect$((function ($source) {
					return self._$compileSource$enableIntrinsics$($source, false);
				}));
				$1.$applicationConfiguration$.call(self, $results.$first());
				return self;
			});
			this.$compileSource$enableIntrinsics$ = (function ($source, $flag) {
				var self = this;
				var $compilation = nil;
				$compilation = self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$cachedCompilations().$at$ifAbsentPut$([
					$source,
					$flag
				], (function () {
					var $newCompliation = nil;
					$newCompliation = self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$CachedCompilation().$new();
					$newCompliation.$source$($source);
					$newCompliation.$enableIntrinsics$($flag);
					$1.$compiler.call(self).$enableIntrinsics$($flag);
					$1.$compiler.call(self).$sentSelectors$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$Set().$new());
					$newCompliation.$ir$($1.$compiler.call(self).$compileClassSource$within$($source.$readStream(), nil));
					return $newCompliation.$sentSelectors$($1.$compiler.call(self).$sentSelectors());
				}));
				$1.$mixins.call(self).$add$($compilation.$ir());
				$1.$sentSelectors.call(self).$addAll$($compilation.$sentSelectors());
				return $compilation.$ir();
			});
			this.$main = (function () {
				var self = this;
				return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$verbatim$(("var runtime = ns.$").$$comma($1.$runtimeConfiguration.call(self).$name()).$$comma("().$packageUsing$(ns);\rvmmirror.platform = runtime.$using$(vmmirror);\rvar app = ns.$").$$comma($1.$applicationConfiguration.call(self).$name()).$$comma("().$packageUsing$(ns);\rapp.$main$args$(vmmirror.platform, [])"));
			});
			this.$namespace = (function () {
				var self = this;
				return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$var$value$("ns", self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$new$with$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$block$($1.$mixins.call(self).$asArray().$collect$((function ($cd) {
					return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$names().$mangleSlot$($cd.$name()))), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$call$with$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("vmmirror"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$("applyTopLevelMixin")), [self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("mixins"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$names().$manglePublic$($cd.$name())))]));
				})).$$comma($1.$mixins.call(self).$asArray().$collect$((function ($cd) {
					return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$names().$manglePublic$($cd.$name()))), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$block$([self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$return$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$names().$mangleSlot$($cd.$name()))))])));
				}))).$$comma($1.$resources.call(self).$asArray()))), []));
			});
			this.$outputTo$ = (function ($stream) {
				var self = this;
				self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$JavascriptWriter().$new().$generateSourceFor$on$($1.$script.call(self), $stream);
				return self;
			});
			this.$runtimeMixinNamespace = (function () {
				var self = this;
				return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$new$with$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$functionOf$body$([], self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$block$($1.$mixins.call(self).$collect$((function ($cd) {
					return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$assign$toBe$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$propertyOf$at$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("this"), self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$(self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$names().$manglePublic$($cd.$name()))), $cd.$runtimeMixin());
				})))), []);
			});
			this.$runtimeSources$ = (function ($sources) {
				var self = this;
				var $results = nil;
				$results = $sources.$collect$((function ($source) {
					return self._$compileSource$enableIntrinsics$($source, true);
				}));
				$1.$runtimeConfiguration$.call(self, $results.$first());
				return self;
			});
			this.$script = (function () {
				var self = this;
				$1.$compiler.call(self).$sentSelectors$($1.$sentSelectors.call(self));
				return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$script$([
					self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$("use strict"),
					self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$var$value$("nil", self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$literal$("patch me with nil")),
					self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$var$value$("theGlobalObject", self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$ident$("this")),
					self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$verbatim$("function SM(n,m,s){this.name=n; this.isMutable=m; this.isSynthetic=s; }"),
					self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$verbatim$("function MM(n,sy,src){this.name=n; this.isSynthetic=sy; this.source=src; }"),
					self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$verbatim$("function dnuCatcher(s){ return function() {\rreturn this.dnu(vmmirror.kernel.$Message().$selector$arguments$(s, Array.prototype.slice.call(arguments)));\r} }"),
					self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$var$value$("mixins", $1.$runtimeMixinNamespace.call(self)),
					$1.$vmmirror.call(self),
					$1.$namespace.call(self),
					$1.$compiler.call(self).$dnuHandlers(),
					$1.$main.call(self)
				]);
			});
			this.$vmmirror = (function () {
				var self = this;
				return self.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder[0]._$js().$verbatim$("\rvar vmmirror = new function(){\r	\r	this.ImplementationBase$slot = new function(){\r		this.debug = \"ImplementationBase\";\r		this.$runtimeClass$slot = new function(){\r			this.debug = \"Runtime class for ImplementationBase\";\r			this.basicNew = function(){};\r			this.$instance$initializer = function(){};\r			this._$instance$initializer = function(){};\r			this.toString = function(){ return this.$printString(); }\r		};\r	};\r	this.$ImplementationBase = function(){return this.ImplementationBase$slot;};\r	this.$Array = function(){return Array;};\r	this.$String = function(){return String;};\r	this.$printString = function(){return \"VMMirrorForV8\"};\r	\r	this.createKernel = function(){\r		\r		var enclosingObjects = [\"patch me with kernel\", \"patch me with nil\"];\r		var enclosingObjects2 = [\"patch me with nil\"];\r		\r		var Object$runtimeClass = mixins.$KernelForV8.$KernelForV8$Object.invoke(this.$ImplementationBase().$runtimeClass$slot, enclosingObjects);\r		var Class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Class.invoke(Object$runtimeClass, enclosingObjects);\r		var Metaclass$runtimeClass = mixins.$KernelForV8.$KernelForV8$Metaclass.invoke(Object$runtimeClass, enclosingObjects);\r		var Mixin$runtimeClass = mixins.$KernelForV8.$KernelForV8$Mixin.invoke(Object$runtimeClass, enclosingObjects);\r		var UndefinedObject$runtimeClass = mixins.$KernelForV8.$KernelForV8$UndefinedObject.invoke(Object$runtimeClass, enclosingObjects);\r		var Kernel$runtimeClass = mixins.$KernelForV8.invoke(Object$runtimeClass, enclosingObjects2);\r		\r		var Object$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Object.meta.invoke(Class$runtimeClass, enclosingObjects);\r		var Class$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Class.meta.invoke(Class$runtimeClass, enclosingObjects);\r		var Metaclass$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Metaclass.meta.invoke(Class$runtimeClass, enclosingObjects);\r		var Mixin$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Mixin.meta.invoke(Class$runtimeClass, enclosingObjects);\r		var UndefinedObject$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$UndefinedObject.meta.invoke(Class$runtimeClass, enclosingObjects);\r		var Kernel$class$runtimeClass = mixins.$KernelForV8.meta.invoke(Class$runtimeClass, enclosingObjects2);\r		\r		Object$runtimeClass.meta = Object$class$runtimeClass;\r		Class$runtimeClass.meta = Class$class$runtimeClass;\r		Metaclass$runtimeClass.meta = Metaclass$class$runtimeClass;\r		Mixin$runtimeClass.meta = Mixin$class$runtimeClass;\r		UndefinedObject$runtimeClass.meta = UndefinedObject$class$runtimeClass;\r		Kernel$runtimeClass.meta = Kernel$class$runtimeClass;\r		\r		Object$class$runtimeClass.nonMeta = Object$runtimeClass;\r		Class$class$runtimeClass.nonMeta = Class$runtimeClass;\r		Metaclass$class$runtimeClass.nonMeta = Metaclass$runtimeClass;\r		Mixin$class$runtimeClass.nonMeta = Mixin$runtimeClass;\r		UndefinedObject$class$runtimeClass.nonMeta = UndefinedObject$runtimeClass;\r		Kernel$class$runtimeClass.nonMeta = Kernel$runtimeClass;\r		\r		nil = new UndefinedObject$runtimeClass.basicNew();\r		\r		var Object = new Object$class$runtimeClass.basicNew();\r		var Class = new Class$class$runtimeClass.basicNew();\r		var Metaclass = new Metaclass$class$runtimeClass.basicNew();\r		var Mixin = new Mixin$class$runtimeClass.basicNew();\r		var UndefinedObject = new UndefinedObject$class$runtimeClass.basicNew();\r		var Kernel = new Kernel$class$runtimeClass.basicNew();\r		\r		var Object$class = new Metaclass$runtimeClass.basicNew();\r		var Class$class = new Metaclass$runtimeClass.basicNew();\r		var Metaclass$class = new Metaclass$runtimeClass.basicNew();\r		var Mixin$class = new Metaclass$runtimeClass.basicNew();\r		var UndefinedObject$class = new Metaclass$runtimeClass.basicNew();\r		var Kernel$class = new Metaclass$runtimeClass.basicNew();\r		\r		Object$class$runtimeClass.newspeakClass = Object$class;\r		Class$class$runtimeClass.newspeakClass = Class$class;\r		Metaclass$class$runtimeClass.newspeakClass = Metaclass$class;\r		Mixin$class$runtimeClass.newspeakClass = Mixin$class;\r		UndefinedObject$class$runtimeClass.newspeakClass = UndefinedObject$class;\r		Kernel$class$runtimeClass.newspeakClass = Kernel$class;\r		\r		Object$runtimeClass.newspeakClass = Object;\r		Class$runtimeClass.newspeakClass = Class;\r		Metaclass$runtimeClass.newspeakClass = Metaclass;\r		Mixin$runtimeClass.newspeakClass = Mixin;\r		UndefinedObject$runtimeClass.newspeakClass = UndefinedObject;\r		Kernel$runtimeClass.newspeakClass = Kernel;\r		\r		var kernel = Kernel.$usingVmMirror$(this);\r		\r		//superclass$slot\r		Object.$superclass$slot = nil;\r		Class.$superclass$slot = Object;\r		Metaclass.$superclass$slot = Object;\r		Mixin.$superclass$slot = Object;\r		UndefinedObject.$superclass$slot = Object;\r		Kernel.$superclass$slot = Object;\r		\r		Object$class.$superclass$slot = Class;\r		Class$class.$superclass$slot = Class;\r		Metaclass$class.$superclass$slot = Class;\r		Mixin$class.$superclass$slot = Class;\r		UndefinedObject$class.$superclass$slot = Class;\r		Kernel$class.$superclass$slot = Class;\r		\r		//mixin$slot\r		Object.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Object);\r		Class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Class);\r		Metaclass.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Metaclass);\r		Mixin.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Mixin);\r		UndefinedObject.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$UndefinedObject);\r		Kernel.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8);\r\r		Object$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Object.meta);\r		Class$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Class.meta);\r		Metaclass$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Metaclass.meta);\r		Mixin$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Mixin.meta);\r		UndefinedObject$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$UndefinedObject.meta);\r		Kernel$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.meta);\r		\r		//enclosingObject$slot\r		Object.$enclosingObject$slot = kernel;\r		Class.$enclosingObject$slot = kernel;\r		Metaclass.$enclosingObject$slot = kernel;\r		Mixin.$enclosingObject$slot = kernel;\r		UndefinedObject.$enclosingObject$slot = kernel;\r		Kernel.$enclosingObject$slot = nil;\r		\r		Object$class.$enclosingObject$slot = kernel;\r		Class$class.$enclosingObject$slot = kernel;\r		Metaclass$class.$enclosingObject$slot = kernel;\r		Mixin$class.$enclosingObject$slot = kernel;\r		UndefinedObject$class.$enclosingObject$slot = kernel;\r		Kernel$class.$enclosingObject$slot = nil;\r		\r		enclosingObjects[0] = kernel;\r		enclosingObjects[1] = nil;\r		enclosingObjects2[0] = nil;\r		\r		//name$slot\r		Object.$name$slot = \"Object\";\r		Class.$name$slot = \"Class\";\r		Metaclass.$name$slot = \"Metaclass\";\r		Mixin.$name$slot = \"Mixin\";\r		Kernel.$name$slot = \"Kernel\";\r		\r		Object$class.$name$slot = \"Object class\";\r		Class$class.$name$slot = \"Class class\";\r		Metaclass$class.$name$slot = \"Metaclass class\";\r		Mixin$class.$name$slot = \"Mixin class\";\r		Kernel$class.$name$slot = \"Kernel class\";\r		\r		//runtimeClass\r		Object.runtimeClass = Object$runtimeClass;\r		Class.runtimeClass = Class$runtimeClass;\r		Metaclass.runtimeClass = Metaclass$runtimeClass;\r		Mixin.runtimeClass = Mixin$runtimeClass;\r		Kernel.runtimeClass = Kernel$runtimeClass;\r		\r		Object$class.runtimeClass = Metaclass$runtimeClass;\r		Class$class.runtimeClass = Metaclass$runtimeClass;\r		Metaclass$class.runtimeClass = Metaclass$runtimeClass;\r		Mixin$class.runtimeClass = Metaclass$runtimeClass;\r		Kernel$class.runtimeClass = Metaclass$runtimeClass;\r		\r		//thisClass$slot\r		Object$class.$thisClass$slot = Object;\r		Class$class.$thisClass$slot = Class;\r		Metaclass$class.$thisClass$slot = Metaclass;\r		Mixin$class.$thisClass$slot = Mixin;\r		Kernel$class.$thisClass$slot = Kernel;\r		\r		kernel.$KernelForV8$Object$slot = Object;\r		kernel.$KernelForV8$Class$slot = Class;\r		kernel.$KernelForV8$Metaclass$slot = Metaclass;\r		kernel.$KernelForV8$Mixin$slot = Mixin;\r		\r		return kernel;\r	};\r	this.kernel = this.createKernel();\r	\r	this.applyTopLevelMixin = function(runtimeMixin){\r		return this.$applyMixin$toSuperclass$withEnclosingObjects$(runtimeMixin, this.kernel._$Object(), [nil]);\r	};\r	\r	this.$applyMixin$toSuperclass$withEnclosingObjects$ = function(runtimeMixin, newspeakSuperclass, enclosingObjects){\r		\r		var Class = this.kernel.$Class();\r		var Metaclass = this.kernel.$Metaclass();\r		var Mixin = this.kernel.$Mixin();\r		\r		var runtimeSuperclass = newspeakSuperclass.runtimeClass;\r		var runtimeClass = runtimeMixin.invoke(runtimeSuperclass, enclosingObjects);\r		var runtimeMetaclass = runtimeMixin.meta.invoke(Class.runtimeClass, enclosingObjects);\r		runtimeClass.meta = runtimeMetaclass;\r		runtimeMetaclass.nonMeta = runtimeClass;\r		\r		var newspeakMetaclass = Metaclass.$new();\r		var newspeakClass = new runtimeMetaclass.basicNew();\r		\r		runtimeClass.newspeakClass = newspeakClass;\r		runtimeMetaclass.newspeakClass = newspeakMetaclass;//Class;\r		\r		newspeakMetaclass.$superclass$slot = Class;\r		newspeakMetaclass.$mixin$slot = Mixin.$fromRuntimeMixin$(runtimeMixin.meta);\r		newspeakMetaclass.$enclosingObject$slot = enclosingObjects[0];\r		newspeakMetaclass.$enclosingObjects$slot = enclosingObjects;\r		newspeakMetaclass.$name$slot = runtimeMixin.name + \" class\";\r		newspeakMetaclass.$thisClass$slot = newspeakClass;\r		newspeakMetaclass.runtimeClass = runtimeMetaclass;\r		\r		newspeakClass.$superclass$slot = newspeakSuperclass;\r		newspeakClass.$mixin$slot = Mixin.$fromRuntimeMixin$(runtimeMixin);\r		newspeakClass.$enclosingObject$slot = enclosingObjects[0];\r		newspeakClass.$enclosingObjects$slot = enclosingObjects;\r		newspeakClass.$name$slot = runtimeMixin.name;\r		newspeakClass.runtimeClass = runtimeClass;\r\r		runtimeMixin.applications.push(runtimeClass);\r		return newspeakClass;\r	};\r	\r	var specialCharacters = new Object();\r	specialCharacters[\"plus\"] = \"+\";\r	specialCharacters[\"minus\"] = \"-\";\r	specialCharacters[\"times\"] = \"*\";\r	specialCharacters[\"over\"] = \"/\";\r	specialCharacters[\"back\"] = \"\\\\\";\r	specialCharacters[\"less\"] = \"<\";\r	specialCharacters[\"greater\"] = \">\";\r	specialCharacters[\"tilde\"] = \"~\";\r	specialCharacters[\"equal\"] = \"=\";\r	specialCharacters[\"at\"] = \"@\";\r	specialCharacters[\"percent\"] = \"%\";\r	specialCharacters[\"pipe\"] = \"|\";\r	specialCharacters[\"amp\"] = \"&\";\r	specialCharacters[\"question\"] = \"?\";\r	specialCharacters[\"bang\"] = \"!\";\r	specialCharacters[\"comma\"] = \",\";\r	\r	this.$unmangleSelector$ = function(s) {\r		if(s[0] != \"$\") return \"<jsSelector:\"+s+\">\";\r		if(s[s.length-1] == \"$\")\r			// Keyword\r			return s.substring(1).replace(/\\$/g,\":\");\r		if(s[1] == \"$\")\r			// Binary\r			return s.substring(2).split(\"$\").map(function(x) {return specialCharacters[x];}).join(\"\");\r		// Unary / qualified\r	   	return s.substring(1).replace(/\\$/g,\"`\");\r	};\r	\r	this.$mangleSelector$ = function(s) {\r		return \"$\" + s.replace(/\\:/g,\"$\").replace(/\\`/g,\"$\");\r	};\r};\r");
			});
			this.$compiler = (function () {
				return this.$compiler$slot;
			});
			this.$setOnce$compiler$ = (function (v) {
				this.$compiler$slot = v;
				return this;
			});
			this.$mixins = (function () {
				return this.$mixins$slot;
			});
			this.$setOnce$mixins$ = (function (v) {
				this.$mixins$slot = v;
				return this;
			});
			this.$sentSelectors = (function () {
				return this.$sentSelectors$slot;
			});
			this.$setOnce$sentSelectors$ = (function (v) {
				this.$sentSelectors$slot = v;
				return this;
			});
			this.$runtimeConfiguration = (function () {
				return this.$runtimeConfiguration$slot;
			});
			this.$runtimeConfiguration$ = (function (v) {
				this.$runtimeConfiguration$slot = v;
				return this;
			});
			this.$applicationConfiguration = (function () {
				return this.$applicationConfiguration$slot;
			});
			this.$applicationConfiguration$ = (function (v) {
				this.$applicationConfiguration$slot = v;
				return this;
			});
			this.$resources = (function () {
				return this.$resources$slot;
			});
			this.$setOnce$resources$ = (function (v) {
				this.$resources$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Newspeak2V8Compilation`ProgramBuilder";
					this._$superInit$Newspeak2V8Compilation$ProgramBuilder = $.$superInit$Newspeak2V8Compilation$ProgramBuilder;
					this.$superInit$Newspeak2V8Compilation$ProgramBuilder = dnuCatcher("$superInit$Newspeak2V8Compilation$ProgramBuilder");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$addImageResource$under$ = this._$addImageResource$under$ = $.$addImageResource$under$;
					this.$addStringResource$under$ = this._$addStringResource$under$ = $.$addStringResource$under$;
					this.$applicationSources$ = this._$applicationSources$ = $.$applicationSources$;
					this._$compileSource$enableIntrinsics$ = $.$compileSource$enableIntrinsics$;
					this.$compileSource$enableIntrinsics$ = dnuCatcher("$compileSource$enableIntrinsics$");
					this.$outputTo$ = this._$outputTo$ = $.$outputTo$;
					this.$runtimeSources$ = this._$runtimeSources$ = $.$runtimeSources$;
					this.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder = enclosingObjects;
					this.$super$Newspeak2V8Compilation$ProgramBuilder$slot = runtimeSuperclass;
					this["Newspeak2V8Compilation`ProgramBuilder"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$compiler$slot = nil;
						this.$mixins$slot = nil;
						this.$sentSelectors$slot = nil;
						this.$runtimeConfiguration$slot = nil;
						this.$applicationConfiguration$slot = nil;
						this.$resources$slot = nil;
					});
					this.basicNew = this["Newspeak2V8Compilation`ProgramBuilder"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Newspeak2V8Compilation`ProgramBuilder";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Newspeak2V8Compilation`ProgramBuilder";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Newspeak2V8Compilation$ProgramBuilder = enclosingObjects;
						this.$super$Newspeak2V8Compilation$ProgramBuilder = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Newspeak2V8Compilation$PropertyCallAST = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Newspeak2V8Compilation`PropertyCallAST";
			this.name = "Newspeak2V8Compilation`PropertyCallAST";
			this.header = "PropertyCallAST = MessageAST ((* Sepcialized node to represent applications of JS properties. In some cases (well, at least one) we need to generate ASTs that call javascript methods directly. These calls need to be translated slightly differently (their names must not be mangled). To distinguish these form normal message sends, we use this node. *))";
			this.slots = [];
			this.methods = [
				new MM("superInit`Newspeak2V8Compilation`PropertyCallAST", true, "MessageAST"),
				new MM("instance`initializer", true, "MessageAST"),
				new MM("apply:", false, "public apply: tool <ASTTool> = (\r	^tool propertyCallNode: self\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Newspeak2V8Compilation$PropertyCallAST = (function () {
				var self = this;
				self.$super$Newspeak2V8Compilation$PropertyCallAST$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$Newspeak2V8Compilation$PropertyCallAST();
				return self;
			});
			this.$apply$ = (function ($tool) {
				var self = this;
				return $tool.$propertyCallNode$(self);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Newspeak2V8Compilation`PropertyCallAST";
					this._$superInit$Newspeak2V8Compilation$PropertyCallAST = $.$superInit$Newspeak2V8Compilation$PropertyCallAST;
					this.$superInit$Newspeak2V8Compilation$PropertyCallAST = dnuCatcher("$superInit$Newspeak2V8Compilation$PropertyCallAST");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$apply$ = this._$apply$ = $.$apply$;
					this.$enclosingObjects$Newspeak2V8Compilation$PropertyCallAST = enclosingObjects;
					this.$super$Newspeak2V8Compilation$PropertyCallAST$slot = runtimeSuperclass;
					this["Newspeak2V8Compilation`PropertyCallAST"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["Newspeak2V8Compilation`PropertyCallAST"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Newspeak2V8Compilation`PropertyCallAST";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Newspeak2V8Compilation`PropertyCallAST";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$Newspeak2V8Compilation$PropertyCallAST = enclosingObjects;
						this.$super$Newspeak2V8Compilation$PropertyCallAST = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Newspeak2V8Compilation$SlotIR = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Newspeak2V8Compilation`SlotIR";
			this.name = "Newspeak2V8Compilation`SlotIR";
			this.header = "SlotIR named: n mutable: m accessModifier: am = (|\r	public name = n.\r	public isMutable = m.\r	public accessModifier = am.\r	public isSynthetic ::= false.\r|)";
			this.slots = [
				new SM("name", false, false),
				new SM("isMutable", false, false),
				new SM("accessModifier", false, false),
				new SM("isSynthetic", true, false)
			];
			this.methods = [
				new MM("superInit`Newspeak2V8Compilation`SlotIR", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("isMutableSlot", false, "public isMutableSlot = (\r	(* polymorphic with the AST *)\r	^isMutable\r)"),
				new MM("printOn:", false, "public printOn: stm = (\r	stm nextPutAll: 'SlotIR:'.\r	stm nextPutAll: name.\r)"),
				new MM("name", true, null),
				new MM("setOnce`name:", true, null),
				new MM("isMutable", true, null),
				new MM("setOnce`isMutable:", true, null),
				new MM("accessModifier", true, null),
				new MM("setOnce`accessModifier:", true, null),
				new MM("isSynthetic", true, null),
				new MM("isSynthetic:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$Newspeak2V8Compilation$SlotIR = (function ($n, $m, $am) {
				var self = this;
				self.$super$Newspeak2V8Compilation$SlotIR$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($n, $m, $am) {
				var self = this;
				self._$superInit$Newspeak2V8Compilation$SlotIR($n, $m, $am);
				self._$setOnce$name$($n);
				self._$setOnce$isMutable$($m);
				self._$setOnce$accessModifier$($am);
				self._$isSynthetic$(false);
				return self;
			});
			this.$isMutableSlot = (function () {
				var self = this;
				return self._$isMutable();
			});
			this.$printOn$ = (function ($stm) {
				var self = this;
				$stm.$nextPutAll$("SlotIR:");
				$stm.$nextPutAll$(self._$name());
				return self;
			});
			this.$name = (function () {
				return this.$name$slot;
			});
			this.$setOnce$name$ = (function (v) {
				this.$name$slot = v;
				return this;
			});
			this.$isMutable = (function () {
				return this.$isMutable$slot;
			});
			this.$setOnce$isMutable$ = (function (v) {
				this.$isMutable$slot = v;
				return this;
			});
			this.$accessModifier = (function () {
				return this.$accessModifier$slot;
			});
			this.$setOnce$accessModifier$ = (function (v) {
				this.$accessModifier$slot = v;
				return this;
			});
			this.$isSynthetic = (function () {
				return this.$isSynthetic$slot;
			});
			this.$isSynthetic$ = (function (v) {
				this.$isSynthetic$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Newspeak2V8Compilation`SlotIR";
					this._$superInit$Newspeak2V8Compilation$SlotIR = $.$superInit$Newspeak2V8Compilation$SlotIR;
					this.$superInit$Newspeak2V8Compilation$SlotIR = dnuCatcher("$superInit$Newspeak2V8Compilation$SlotIR");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isMutableSlot = this._$isMutableSlot = $.$isMutableSlot;
					this.$printOn$ = this._$printOn$ = $.$printOn$;
					this.$name = this._$name = $.$name;
					this.$setOnce$name$ = this._$setOnce$name$ = $.$setOnce$name$;
					this.$isMutable = this._$isMutable = $.$isMutable;
					this.$setOnce$isMutable$ = this._$setOnce$isMutable$ = $.$setOnce$isMutable$;
					this.$accessModifier = this._$accessModifier = $.$accessModifier;
					this.$setOnce$accessModifier$ = this._$setOnce$accessModifier$ = $.$setOnce$accessModifier$;
					this.$isSynthetic = this._$isSynthetic = $.$isSynthetic;
					this.$isSynthetic$ = this._$isSynthetic$ = $.$isSynthetic$;
					this.$enclosingObjects$Newspeak2V8Compilation$SlotIR = enclosingObjects;
					this.$super$Newspeak2V8Compilation$SlotIR$slot = runtimeSuperclass;
					this["Newspeak2V8Compilation`SlotIR"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$name$slot = nil;
						this.$isMutable$slot = nil;
						this.$accessModifier$slot = nil;
						this.$isSynthetic$slot = nil;
					});
					this.basicNew = this["Newspeak2V8Compilation`SlotIR"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Newspeak2V8Compilation`SlotIR";
				this.slots = [];
				this.methods = [new MM("named:mutable:accessModifier:", true, null)];
				this.nestedClasses = [];
				this.$named$mutable$accessModifier$ = (function ($n, $m, $am) {
					return (new this.nonMeta.basicNew()).$instance$initializer($n, $m, $am);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Newspeak2V8Compilation`SlotIR";
						this.$named$mutable$accessModifier$ = this._$named$mutable$accessModifier$ = $.$named$mutable$accessModifier$;
						this.$enclosingObjects$Newspeak2V8Compilation$SlotIR = enclosingObjects;
						this.$super$Newspeak2V8Compilation$SlotIR = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Newspeak2V8Compilation$CachedCompilation.enclosingMixin = this;
		this.$Newspeak2V8Compilation$ClassDeclarationIR.enclosingMixin = this;
		this.$Newspeak2V8Compilation$Compiler.enclosingMixin = this;
		this.$Newspeak2V8Compilation$MethodIR.enclosingMixin = this;
		this.$Newspeak2V8Compilation$MixinIR.enclosingMixin = this;
		this.$Newspeak2V8Compilation$NameMangler.enclosingMixin = this;
		this.$Newspeak2V8Compilation$ProgramBuilder.enclosingMixin = this;
		this.$Newspeak2V8Compilation$PropertyCallAST.enclosingMixin = this;
		this.$Newspeak2V8Compilation$SlotIR.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for Newspeak2V8Compilation";
				this._$superInit$Newspeak2V8Compilation = $.$superInit$Newspeak2V8Compilation;
				this.$superInit$Newspeak2V8Compilation = dnuCatcher("$superInit$Newspeak2V8Compilation");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this._$LocalEntry = $.$LocalEntry;
				this.$LocalEntry = dnuCatcher("$LocalEntry");
				this._$Scope = $.$Scope;
				this.$Scope = dnuCatcher("$Scope");
				this._$assert$ = $.$assert$;
				this.$assert$ = dnuCatcher("$assert$");
				this._$mixinNameOfClassNamed$ = $.$mixinNameOfClassNamed$;
				this.$mixinNameOfClassNamed$ = dnuCatcher("$mixinNameOfClassNamed$");
				this._$mixinSlotNameFor$ = $.$mixinSlotNameFor$;
				this.$mixinSlotNameFor$ = dnuCatcher("$mixinSlotNameFor$");
				this._$split$at$ = $.$split$at$;
				this.$split$at$ = dnuCatcher("$split$at$");
				this._$splitFullyQualifiedName$ = $.$splitFullyQualifiedName$;
				this.$splitFullyQualifiedName$ = dnuCatcher("$splitFullyQualifiedName$");
				this._$syntheticNameSeparator = $.$syntheticNameSeparator;
				this.$syntheticNameSeparator = dnuCatcher("$syntheticNameSeparator");
				this._$CachedCompilation = $.$CachedCompilation;
				this.$CachedCompilation = dnuCatcher("$CachedCompilation");
				this._$ClassDeclarationIR = $.$ClassDeclarationIR;
				this.$ClassDeclarationIR = dnuCatcher("$ClassDeclarationIR");
				this.$Compiler = this._$Compiler = $.$Compiler;
				this._$MethodIR = $.$MethodIR;
				this.$MethodIR = dnuCatcher("$MethodIR");
				this._$MixinIR = $.$MixinIR;
				this.$MixinIR = dnuCatcher("$MixinIR");
				this._$NameMangler = $.$NameMangler;
				this.$NameMangler = dnuCatcher("$NameMangler");
				this._$ProgramBuilder = $.$ProgramBuilder;
				this.$ProgramBuilder = dnuCatcher("$ProgramBuilder");
				this._$PropertyCallAST = $.$PropertyCallAST;
				this.$PropertyCallAST = dnuCatcher("$PropertyCallAST");
				this._$SlotIR = $.$SlotIR;
				this.$SlotIR = dnuCatcher("$SlotIR");
				this._$asts = $.$asts;
				this.$asts = dnuCatcher("$asts");
				this._$setOnce$asts$ = $.$setOnce$asts$;
				this.$setOnce$asts$ = dnuCatcher("$setOnce$asts$");
				this._$Collection = $.$Collection;
				this.$Collection = dnuCatcher("$Collection");
				this._$setOnce$Collection$ = $.$setOnce$Collection$;
				this.$setOnce$Collection$ = dnuCatcher("$setOnce$Collection$");
				this._$Dictionary = $.$Dictionary;
				this.$Dictionary = dnuCatcher("$Dictionary");
				this._$setOnce$Dictionary$ = $.$setOnce$Dictionary$;
				this.$setOnce$Dictionary$ = dnuCatcher("$setOnce$Dictionary$");
				this._$IdentityDictionary = $.$IdentityDictionary;
				this.$IdentityDictionary = dnuCatcher("$IdentityDictionary");
				this._$setOnce$IdentityDictionary$ = $.$setOnce$IdentityDictionary$;
				this.$setOnce$IdentityDictionary$ = dnuCatcher("$setOnce$IdentityDictionary$");
				this._$OrderedCollection = $.$OrderedCollection;
				this.$OrderedCollection = dnuCatcher("$OrderedCollection");
				this._$setOnce$OrderedCollection$ = $.$setOnce$OrderedCollection$;
				this.$setOnce$OrderedCollection$ = dnuCatcher("$setOnce$OrderedCollection$");
				this._$SortedList = $.$SortedList;
				this.$SortedList = dnuCatcher("$SortedList");
				this._$setOnce$SortedList$ = $.$setOnce$SortedList$;
				this.$setOnce$SortedList$ = dnuCatcher("$setOnce$SortedList$");
				this._$Set = $.$Set;
				this.$Set = dnuCatcher("$Set");
				this._$setOnce$Set$ = $.$setOnce$Set$;
				this.$setOnce$Set$ = dnuCatcher("$setOnce$Set$");
				this._$ReadStream = $.$ReadStream;
				this.$ReadStream = dnuCatcher("$ReadStream");
				this._$setOnce$ReadStream$ = $.$setOnce$ReadStream$;
				this.$setOnce$ReadStream$ = dnuCatcher("$setOnce$ReadStream$");
				this._$WriteStream = $.$WriteStream;
				this.$WriteStream = dnuCatcher("$WriteStream");
				this._$setOnce$WriteStream$ = $.$setOnce$WriteStream$;
				this.$setOnce$WriteStream$ = dnuCatcher("$setOnce$WriteStream$");
				this._$MutableString = $.$MutableString;
				this.$MutableString = dnuCatcher("$MutableString");
				this._$setOnce$MutableString$ = $.$setOnce$MutableString$;
				this.$setOnce$MutableString$ = dnuCatcher("$setOnce$MutableString$");
				this._$Parser = $.$Parser;
				this.$Parser = dnuCatcher("$Parser");
				this._$setOnce$Parser$ = $.$setOnce$Parser$;
				this.$setOnce$Parser$ = dnuCatcher("$setOnce$Parser$");
				this._$javascriptGeneration = $.$javascriptGeneration;
				this.$javascriptGeneration = dnuCatcher("$javascriptGeneration");
				this._$setOnce$javascriptGeneration$ = $.$setOnce$javascriptGeneration$;
				this.$setOnce$javascriptGeneration$ = dnuCatcher("$setOnce$javascriptGeneration$");
				this._$JavascriptWriter = $.$JavascriptWriter;
				this.$JavascriptWriter = dnuCatcher("$JavascriptWriter");
				this._$setOnce$JavascriptWriter$ = $.$setOnce$JavascriptWriter$;
				this.$setOnce$JavascriptWriter$ = dnuCatcher("$setOnce$JavascriptWriter$");
				this._$js = $.$js;
				this.$js = dnuCatcher("$js");
				this._$setOnce$js$ = $.$setOnce$js$;
				this.$setOnce$js$ = dnuCatcher("$setOnce$js$");
				this.$names = this._$names = $.$names;
				this.$setOnce$names$ = this._$setOnce$names$ = $.$setOnce$names$;
				this._$ASTTool = $.$ASTTool;
				this.$ASTTool = dnuCatcher("$ASTTool");
				this._$setOnce$ASTTool$ = $.$setOnce$ASTTool$;
				this.$setOnce$ASTTool$ = dnuCatcher("$setOnce$ASTTool$");
				this._$ASTCopier = $.$ASTCopier;
				this.$ASTCopier = dnuCatcher("$ASTCopier");
				this._$setOnce$ASTCopier$ = $.$setOnce$ASTCopier$;
				this.$setOnce$ASTCopier$ = dnuCatcher("$setOnce$ASTCopier$");
				this._$AST = $.$AST;
				this.$AST = dnuCatcher("$AST");
				this._$setOnce$AST$ = $.$setOnce$AST$;
				this.$setOnce$AST$ = dnuCatcher("$setOnce$AST$");
				this._$AssignmentAST = $.$AssignmentAST;
				this.$AssignmentAST = dnuCatcher("$AssignmentAST");
				this._$setOnce$AssignmentAST$ = $.$setOnce$AssignmentAST$;
				this.$setOnce$AssignmentAST$ = dnuCatcher("$setOnce$AssignmentAST$");
				this._$BlockAST = $.$BlockAST;
				this.$BlockAST = dnuCatcher("$BlockAST");
				this._$setOnce$BlockAST$ = $.$setOnce$BlockAST$;
				this.$setOnce$BlockAST$ = dnuCatcher("$setOnce$BlockAST$");
				this._$CascadedSendAST = $.$CascadedSendAST;
				this.$CascadedSendAST = dnuCatcher("$CascadedSendAST");
				this._$setOnce$CascadedSendAST$ = $.$setOnce$CascadedSendAST$;
				this.$setOnce$CascadedSendAST$ = dnuCatcher("$setOnce$CascadedSendAST$");
				this._$CodeBodyAST = $.$CodeBodyAST;
				this.$CodeBodyAST = dnuCatcher("$CodeBodyAST");
				this._$setOnce$CodeBodyAST$ = $.$setOnce$CodeBodyAST$;
				this.$setOnce$CodeBodyAST$ = dnuCatcher("$setOnce$CodeBodyAST$");
				this._$MessageAST = $.$MessageAST;
				this.$MessageAST = dnuCatcher("$MessageAST");
				this._$setOnce$MessageAST$ = $.$setOnce$MessageAST$;
				this.$setOnce$MessageAST$ = dnuCatcher("$setOnce$MessageAST$");
				this._$MessagePatternAST = $.$MessagePatternAST;
				this.$MessagePatternAST = dnuCatcher("$MessagePatternAST");
				this._$setOnce$MessagePatternAST$ = $.$setOnce$MessagePatternAST$;
				this.$setOnce$MessagePatternAST$ = dnuCatcher("$setOnce$MessagePatternAST$");
				this._$MethodAST = $.$MethodAST;
				this.$MethodAST = dnuCatcher("$MethodAST");
				this._$setOnce$MethodAST$ = $.$setOnce$MethodAST$;
				this.$setOnce$MethodAST$ = dnuCatcher("$setOnce$MethodAST$");
				this._$NormalSendAST = $.$NormalSendAST;
				this.$NormalSendAST = dnuCatcher("$NormalSendAST");
				this._$setOnce$NormalSendAST$ = $.$setOnce$NormalSendAST$;
				this.$setOnce$NormalSendAST$ = dnuCatcher("$setOnce$NormalSendAST$");
				this._$NumberAST = $.$NumberAST;
				this.$NumberAST = dnuCatcher("$NumberAST");
				this._$setOnce$NumberAST$ = $.$setOnce$NumberAST$;
				this.$setOnce$NumberAST$ = dnuCatcher("$setOnce$NumberAST$");
				this._$ReturnStatAST = $.$ReturnStatAST;
				this.$ReturnStatAST = dnuCatcher("$ReturnStatAST");
				this._$setOnce$ReturnStatAST$ = $.$setOnce$ReturnStatAST$;
				this.$setOnce$ReturnStatAST$ = dnuCatcher("$setOnce$ReturnStatAST$");
				this._$SendAST = $.$SendAST;
				this.$SendAST = dnuCatcher("$SendAST");
				this._$setOnce$SendAST$ = $.$setOnce$SendAST$;
				this.$setOnce$SendAST$ = dnuCatcher("$setOnce$SendAST$");
				this._$SymbolAST = $.$SymbolAST;
				this.$SymbolAST = dnuCatcher("$SymbolAST");
				this._$setOnce$SymbolAST$ = $.$setOnce$SymbolAST$;
				this.$setOnce$SymbolAST$ = dnuCatcher("$setOnce$SymbolAST$");
				this._$TupleAST = $.$TupleAST;
				this.$TupleAST = dnuCatcher("$TupleAST");
				this._$setOnce$TupleAST$ = $.$setOnce$TupleAST$;
				this.$setOnce$TupleAST$ = dnuCatcher("$setOnce$TupleAST$");
				this._$VarDeclAST = $.$VarDeclAST;
				this.$VarDeclAST = dnuCatcher("$VarDeclAST");
				this._$setOnce$VarDeclAST$ = $.$setOnce$VarDeclAST$;
				this.$setOnce$VarDeclAST$ = dnuCatcher("$setOnce$VarDeclAST$");
				this._$VariableAST = $.$VariableAST;
				this.$VariableAST = dnuCatcher("$VariableAST");
				this._$setOnce$VariableAST$ = $.$setOnce$VariableAST$;
				this.$setOnce$VariableAST$ = dnuCatcher("$setOnce$VariableAST$");
				this._$parser = $.$parser;
				this.$parser = dnuCatcher("$parser");
				this._$setOnce$parser$ = $.$setOnce$parser$;
				this.$setOnce$parser$ = dnuCatcher("$setOnce$parser$");
				this._$cachedCompilations = $.$cachedCompilations;
				this.$cachedCompilations = dnuCatcher("$cachedCompilations");
				this._$setOnce$cachedCompilations$ = $.$setOnce$cachedCompilations$;
				this.$setOnce$cachedCompilations$ = dnuCatcher("$setOnce$cachedCompilations$");
				this.$Newspeak2V8Compilation$CachedCompilation = this._$Newspeak2V8Compilation$CachedCompilation = $.$Newspeak2V8Compilation$CachedCompilation;
				this.$Newspeak2V8Compilation$CachedCompilation$ = this._$Newspeak2V8Compilation$CachedCompilation$ = $.$Newspeak2V8Compilation$CachedCompilation$;
				this.$Newspeak2V8Compilation$ClassDeclarationIR = this._$Newspeak2V8Compilation$ClassDeclarationIR = $.$Newspeak2V8Compilation$ClassDeclarationIR;
				this.$Newspeak2V8Compilation$ClassDeclarationIR$ = this._$Newspeak2V8Compilation$ClassDeclarationIR$ = $.$Newspeak2V8Compilation$ClassDeclarationIR$;
				this.$Newspeak2V8Compilation$Compiler = this._$Newspeak2V8Compilation$Compiler = $.$Newspeak2V8Compilation$Compiler;
				this.$Newspeak2V8Compilation$Compiler$ = this._$Newspeak2V8Compilation$Compiler$ = $.$Newspeak2V8Compilation$Compiler$;
				this.$Newspeak2V8Compilation$MethodIR = this._$Newspeak2V8Compilation$MethodIR = $.$Newspeak2V8Compilation$MethodIR;
				this.$Newspeak2V8Compilation$MethodIR$ = this._$Newspeak2V8Compilation$MethodIR$ = $.$Newspeak2V8Compilation$MethodIR$;
				this.$Newspeak2V8Compilation$MixinIR = this._$Newspeak2V8Compilation$MixinIR = $.$Newspeak2V8Compilation$MixinIR;
				this.$Newspeak2V8Compilation$MixinIR$ = this._$Newspeak2V8Compilation$MixinIR$ = $.$Newspeak2V8Compilation$MixinIR$;
				this.$Newspeak2V8Compilation$NameMangler = this._$Newspeak2V8Compilation$NameMangler = $.$Newspeak2V8Compilation$NameMangler;
				this.$Newspeak2V8Compilation$NameMangler$ = this._$Newspeak2V8Compilation$NameMangler$ = $.$Newspeak2V8Compilation$NameMangler$;
				this.$Newspeak2V8Compilation$ProgramBuilder = this._$Newspeak2V8Compilation$ProgramBuilder = $.$Newspeak2V8Compilation$ProgramBuilder;
				this.$Newspeak2V8Compilation$ProgramBuilder$ = this._$Newspeak2V8Compilation$ProgramBuilder$ = $.$Newspeak2V8Compilation$ProgramBuilder$;
				this.$Newspeak2V8Compilation$PropertyCallAST = this._$Newspeak2V8Compilation$PropertyCallAST = $.$Newspeak2V8Compilation$PropertyCallAST;
				this.$Newspeak2V8Compilation$PropertyCallAST$ = this._$Newspeak2V8Compilation$PropertyCallAST$ = $.$Newspeak2V8Compilation$PropertyCallAST$;
				this.$Newspeak2V8Compilation$SlotIR = this._$Newspeak2V8Compilation$SlotIR = $.$Newspeak2V8Compilation$SlotIR;
				this.$Newspeak2V8Compilation$SlotIR$ = this._$Newspeak2V8Compilation$SlotIR$ = $.$Newspeak2V8Compilation$SlotIR$;
				this.$enclosingObjects$Newspeak2V8Compilation = enclosingObjects;
				this.$super$Newspeak2V8Compilation$slot = runtimeSuperclass;
				this.Newspeak2V8Compilation = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$asts$slot = nil;
					this.$Collection$slot = nil;
					this.$Dictionary$slot = nil;
					this.$IdentityDictionary$slot = nil;
					this.$OrderedCollection$slot = nil;
					this.$SortedList$slot = nil;
					this.$Set$slot = nil;
					this.$ReadStream$slot = nil;
					this.$WriteStream$slot = nil;
					this.$MutableString$slot = nil;
					this.$Parser$slot = nil;
					this.$javascriptGeneration$slot = nil;
					this.$JavascriptWriter$slot = nil;
					this.$js$slot = nil;
					this.$names$slot = nil;
					this.$ASTTool$slot = nil;
					this.$ASTCopier$slot = nil;
					this.$AST$slot = nil;
					this.$AssignmentAST$slot = nil;
					this.$BlockAST$slot = nil;
					this.$CascadedSendAST$slot = nil;
					this.$CodeBodyAST$slot = nil;
					this.$MessageAST$slot = nil;
					this.$MessagePatternAST$slot = nil;
					this.$MethodAST$slot = nil;
					this.$NormalSendAST$slot = nil;
					this.$NumberAST$slot = nil;
					this.$ReturnStatAST$slot = nil;
					this.$SendAST$slot = nil;
					this.$SymbolAST$slot = nil;
					this.$TupleAST$slot = nil;
					this.$VarDeclAST$slot = nil;
					this.$VariableAST$slot = nil;
					this.$parser$slot = nil;
					this.$cachedCompilations$slot = nil;
					this.$Newspeak2V8Compilation$CachedCompilation$slot = nil;
					this.$Newspeak2V8Compilation$ClassDeclarationIR$slot = nil;
					this.$Newspeak2V8Compilation$Compiler$slot = nil;
					this.$Newspeak2V8Compilation$MethodIR$slot = nil;
					this.$Newspeak2V8Compilation$MixinIR$slot = nil;
					this.$Newspeak2V8Compilation$NameMangler$slot = nil;
					this.$Newspeak2V8Compilation$ProgramBuilder$slot = nil;
					this.$Newspeak2V8Compilation$PropertyCallAST$slot = nil;
					this.$Newspeak2V8Compilation$SlotIR$slot = nil;
				});
				this.basicNew = this.Newspeak2V8Compilation;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for Newspeak2V8Compilation";
			this.slots = [];
			this.methods = [new MM("usingPlatform:parsing:generation:mirrors:", true, null)];
			this.nestedClasses = [];
			this.$usingPlatform$parsing$generation$mirrors$ = (function ($platform, $parsing, $generation, $mirrors) {
				return (new this.nonMeta.basicNew()).$instance$initializer($platform, $parsing, $generation, $mirrors);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for Newspeak2V8Compilation";
					this.$usingPlatform$parsing$generation$mirrors$ = this._$usingPlatform$parsing$generation$mirrors$ = $.$usingPlatform$parsing$generation$mirrors$;
					this.$enclosingObjects$Newspeak2V8Compilation = enclosingObjects;
					this.$super$Newspeak2V8Compilation = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$NewspeakCompilation = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for NewspeakCompilation";
		this.name = "NewspeakCompilation";
		this.header = "NewspeakCompilation usingPlatform: p asts: asts = ((* Facilities common to each of the Newspeak compilers, such as scopes and the scope builder. A common Rewriter should eventually be located here as well.\r\rIt is intended that module definitions for each compilation target will be mixed-in to this module definition, and so inherit the facilities provided here. Until general mixin application is supported, the target-specific modules must use the same cheat used by BlocklessCombinatorialParsing of declaring a superclass clause matching the factory of the class it will be later mixed-in to.\r\r\rThis module is derived from Newspeak2SqueakCompilation, which is why the pre-2013 copyrights apply.\r\rCopyright 2008 Cadence Design Systems, Inc.\rCopyright 2010 Gilad Bracha, Felix Geller and Ryan Macnak\rCopyright 2011 Matthias Kleine, Ryan Macnak and Cadence Design Systems\rCopyright 2013 Ryan Macnak\r\rLicensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 *)|\r	protected Dictionary = p collections Dictionary.\r	protected OrderedCollection = p collections OrderedCollection.\r\r	protected AST = asts AST.\r	protected ASTTool = asts ASTTool.\r	protected BlockAST = asts BlockAST.\r	protected CascadedSendAST = asts CascadedSendAST.\r	protected CodeBodyAST = asts CodeBodyAST.\r	protected MessageAST = asts MessageAST.\r	protected MessagePatternAST = asts MessagePatternAST.\r	protected MethodAST = asts MethodAST.\r	protected NormalSendAST = asts NormalSendAST.\r	protected NumberAST = asts NumberAST.\r	protected ReturnStatAST = asts ReturnStatAST.\r	protected TupleAST = asts TupleAST.\r	protected VariableAST = asts VariableAST.\r	\r	public namer = Namer new.\r|)";
		this.slots = [
			new SM("Dictionary", false, false),
			new SM("OrderedCollection", false, false),
			new SM("AST", false, false),
			new SM("ASTTool", false, false),
			new SM("BlockAST", false, false),
			new SM("CascadedSendAST", false, false),
			new SM("CodeBodyAST", false, false),
			new SM("MessageAST", false, false),
			new SM("MessagePatternAST", false, false),
			new SM("MethodAST", false, false),
			new SM("NormalSendAST", false, false),
			new SM("NumberAST", false, false),
			new SM("ReturnStatAST", false, false),
			new SM("TupleAST", false, false),
			new SM("VariableAST", false, false),
			new SM("namer", false, false),
			new SM("NewspeakCompilation`ClassEntry", true, true),
			new SM("NewspeakCompilation`Compiler", true, true),
			new SM("NewspeakCompilation`LocalEntry", true, true),
			new SM("NewspeakCompilation`MethodEntry", true, true),
			new SM("NewspeakCompilation`Namer", true, true),
			new SM("NewspeakCompilation`Scope", true, true),
			new SM("NewspeakCompilation`SlotEntry", true, true),
			new SM("NewspeakCompilation`SymbolTableEntry", true, true)
		];
		this.methods = [
			new MM("superInit`NewspeakCompilation", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("ClassEntry", true, null),
			new MM("Compiler", true, null),
			new MM("LocalEntry", true, null),
			new MM("MethodEntry", true, null),
			new MM("Namer", true, null),
			new MM("Scope", true, null),
			new MM("SlotEntry", true, null),
			new MM("SymbolTableEntry", true, null),
			new MM("Dictionary", true, null),
			new MM("setOnce`Dictionary:", true, null),
			new MM("OrderedCollection", true, null),
			new MM("setOnce`OrderedCollection:", true, null),
			new MM("AST", true, null),
			new MM("setOnce`AST:", true, null),
			new MM("ASTTool", true, null),
			new MM("setOnce`ASTTool:", true, null),
			new MM("BlockAST", true, null),
			new MM("setOnce`BlockAST:", true, null),
			new MM("CascadedSendAST", true, null),
			new MM("setOnce`CascadedSendAST:", true, null),
			new MM("CodeBodyAST", true, null),
			new MM("setOnce`CodeBodyAST:", true, null),
			new MM("MessageAST", true, null),
			new MM("setOnce`MessageAST:", true, null),
			new MM("MessagePatternAST", true, null),
			new MM("setOnce`MessagePatternAST:", true, null),
			new MM("MethodAST", true, null),
			new MM("setOnce`MethodAST:", true, null),
			new MM("NormalSendAST", true, null),
			new MM("setOnce`NormalSendAST:", true, null),
			new MM("NumberAST", true, null),
			new MM("setOnce`NumberAST:", true, null),
			new MM("ReturnStatAST", true, null),
			new MM("setOnce`ReturnStatAST:", true, null),
			new MM("TupleAST", true, null),
			new MM("setOnce`TupleAST:", true, null),
			new MM("VariableAST", true, null),
			new MM("setOnce`VariableAST:", true, null),
			new MM("namer", true, null),
			new MM("setOnce`namer:", true, null),
			new MM("NewspeakCompilation`ClassEntry", true, null),
			new MM("NewspeakCompilation`ClassEntry:", true, null),
			new MM("NewspeakCompilation`Compiler", true, null),
			new MM("NewspeakCompilation`Compiler:", true, null),
			new MM("NewspeakCompilation`LocalEntry", true, null),
			new MM("NewspeakCompilation`LocalEntry:", true, null),
			new MM("NewspeakCompilation`MethodEntry", true, null),
			new MM("NewspeakCompilation`MethodEntry:", true, null),
			new MM("NewspeakCompilation`Namer", true, null),
			new MM("NewspeakCompilation`Namer:", true, null),
			new MM("NewspeakCompilation`Scope", true, null),
			new MM("NewspeakCompilation`Scope:", true, null),
			new MM("NewspeakCompilation`SlotEntry", true, null),
			new MM("NewspeakCompilation`SlotEntry:", true, null),
			new MM("NewspeakCompilation`SymbolTableEntry", true, null),
			new MM("NewspeakCompilation`SymbolTableEntry:", true, null)
		];
		this.nestedClasses = [
			"NewspeakCompilation`ClassEntry",
			"NewspeakCompilation`Compiler",
			"NewspeakCompilation`LocalEntry",
			"NewspeakCompilation`MethodEntry",
			"NewspeakCompilation`Namer",
			"NewspeakCompilation`Scope",
			"NewspeakCompilation`SlotEntry",
			"NewspeakCompilation`SymbolTableEntry"
		];
		this.applications = [];
		this.$superInit$NewspeakCompilation = (function ($p, $asts) {
			var self = this;
			self.$super$NewspeakCompilation$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($p, $asts) {
			var self = this;
			self._$superInit$NewspeakCompilation($p, $asts);
			self._$setOnce$Dictionary$($p.$collections().$Dictionary());
			self._$setOnce$OrderedCollection$($p.$collections().$OrderedCollection());
			self._$setOnce$AST$($asts.$AST());
			self._$setOnce$ASTTool$($asts.$ASTTool());
			self._$setOnce$BlockAST$($asts.$BlockAST());
			self._$setOnce$CascadedSendAST$($asts.$CascadedSendAST());
			self._$setOnce$CodeBodyAST$($asts.$CodeBodyAST());
			self._$setOnce$MessageAST$($asts.$MessageAST());
			self._$setOnce$MessagePatternAST$($asts.$MessagePatternAST());
			self._$setOnce$MethodAST$($asts.$MethodAST());
			self._$setOnce$NormalSendAST$($asts.$NormalSendAST());
			self._$setOnce$NumberAST$($asts.$NumberAST());
			self._$setOnce$ReturnStatAST$($asts.$ReturnStatAST());
			self._$setOnce$TupleAST$($asts.$TupleAST());
			self._$setOnce$VariableAST$($asts.$VariableAST());
			self._$setOnce$namer$(self._$Namer().$new());
			return self;
		});
		this.$ClassEntry = (function () {
			if (nil === this.$NewspeakCompilation$ClassEntry$slot) {
				var self = this;
				var superclass = self._$SymbolTableEntry();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation);
				var mixin = $.$NewspeakCompilation$ClassEntry;
				this.$NewspeakCompilation$ClassEntry$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakCompilation$ClassEntry$slot;
		});
		this.$Compiler = (function () {
			if (nil === this.$NewspeakCompilation$Compiler$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation);
				var mixin = $.$NewspeakCompilation$Compiler;
				this.$NewspeakCompilation$Compiler$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakCompilation$Compiler$slot;
		});
		this.$LocalEntry = (function () {
			if (nil === this.$NewspeakCompilation$LocalEntry$slot) {
				var self = this;
				var superclass = self._$SymbolTableEntry();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation);
				var mixin = $.$NewspeakCompilation$LocalEntry;
				this.$NewspeakCompilation$LocalEntry$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakCompilation$LocalEntry$slot;
		});
		this.$MethodEntry = (function () {
			if (nil === this.$NewspeakCompilation$MethodEntry$slot) {
				var self = this;
				var superclass = self._$SymbolTableEntry();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation);
				var mixin = $.$NewspeakCompilation$MethodEntry;
				this.$NewspeakCompilation$MethodEntry$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakCompilation$MethodEntry$slot;
		});
		this.$Namer = (function () {
			if (nil === this.$NewspeakCompilation$Namer$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation);
				var mixin = $.$NewspeakCompilation$Namer;
				this.$NewspeakCompilation$Namer$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakCompilation$Namer$slot;
		});
		this.$Scope = (function () {
			if (nil === this.$NewspeakCompilation$Scope$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation);
				var mixin = $.$NewspeakCompilation$Scope;
				this.$NewspeakCompilation$Scope$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakCompilation$Scope$slot;
		});
		this.$SlotEntry = (function () {
			if (nil === this.$NewspeakCompilation$SlotEntry$slot) {
				var self = this;
				var superclass = self._$SymbolTableEntry();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation);
				var mixin = $.$NewspeakCompilation$SlotEntry;
				this.$NewspeakCompilation$SlotEntry$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakCompilation$SlotEntry$slot;
		});
		this.$SymbolTableEntry = (function () {
			if (nil === this.$NewspeakCompilation$SymbolTableEntry$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation);
				var mixin = $.$NewspeakCompilation$SymbolTableEntry;
				this.$NewspeakCompilation$SymbolTableEntry$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$NewspeakCompilation$SymbolTableEntry$slot;
		});
		this.$Dictionary = (function () {
			return this.$Dictionary$slot;
		});
		this.$setOnce$Dictionary$ = (function (v) {
			this.$Dictionary$slot = v;
			return this;
		});
		this.$OrderedCollection = (function () {
			return this.$OrderedCollection$slot;
		});
		this.$setOnce$OrderedCollection$ = (function (v) {
			this.$OrderedCollection$slot = v;
			return this;
		});
		this.$AST = (function () {
			return this.$AST$slot;
		});
		this.$setOnce$AST$ = (function (v) {
			this.$AST$slot = v;
			return this;
		});
		this.$ASTTool = (function () {
			return this.$ASTTool$slot;
		});
		this.$setOnce$ASTTool$ = (function (v) {
			this.$ASTTool$slot = v;
			return this;
		});
		this.$BlockAST = (function () {
			return this.$BlockAST$slot;
		});
		this.$setOnce$BlockAST$ = (function (v) {
			this.$BlockAST$slot = v;
			return this;
		});
		this.$CascadedSendAST = (function () {
			return this.$CascadedSendAST$slot;
		});
		this.$setOnce$CascadedSendAST$ = (function (v) {
			this.$CascadedSendAST$slot = v;
			return this;
		});
		this.$CodeBodyAST = (function () {
			return this.$CodeBodyAST$slot;
		});
		this.$setOnce$CodeBodyAST$ = (function (v) {
			this.$CodeBodyAST$slot = v;
			return this;
		});
		this.$MessageAST = (function () {
			return this.$MessageAST$slot;
		});
		this.$setOnce$MessageAST$ = (function (v) {
			this.$MessageAST$slot = v;
			return this;
		});
		this.$MessagePatternAST = (function () {
			return this.$MessagePatternAST$slot;
		});
		this.$setOnce$MessagePatternAST$ = (function (v) {
			this.$MessagePatternAST$slot = v;
			return this;
		});
		this.$MethodAST = (function () {
			return this.$MethodAST$slot;
		});
		this.$setOnce$MethodAST$ = (function (v) {
			this.$MethodAST$slot = v;
			return this;
		});
		this.$NormalSendAST = (function () {
			return this.$NormalSendAST$slot;
		});
		this.$setOnce$NormalSendAST$ = (function (v) {
			this.$NormalSendAST$slot = v;
			return this;
		});
		this.$NumberAST = (function () {
			return this.$NumberAST$slot;
		});
		this.$setOnce$NumberAST$ = (function (v) {
			this.$NumberAST$slot = v;
			return this;
		});
		this.$ReturnStatAST = (function () {
			return this.$ReturnStatAST$slot;
		});
		this.$setOnce$ReturnStatAST$ = (function (v) {
			this.$ReturnStatAST$slot = v;
			return this;
		});
		this.$TupleAST = (function () {
			return this.$TupleAST$slot;
		});
		this.$setOnce$TupleAST$ = (function (v) {
			this.$TupleAST$slot = v;
			return this;
		});
		this.$VariableAST = (function () {
			return this.$VariableAST$slot;
		});
		this.$setOnce$VariableAST$ = (function (v) {
			this.$VariableAST$slot = v;
			return this;
		});
		this.$namer = (function () {
			return this.$namer$slot;
		});
		this.$setOnce$namer$ = (function (v) {
			this.$namer$slot = v;
			return this;
		});
		this.$NewspeakCompilation$ClassEntry = (function () {
			return this.$NewspeakCompilation$ClassEntry$slot;
		});
		this.$NewspeakCompilation$ClassEntry$ = (function (v) {
			this.$NewspeakCompilation$ClassEntry$slot = v;
			return this;
		});
		this.$NewspeakCompilation$Compiler = (function () {
			return this.$NewspeakCompilation$Compiler$slot;
		});
		this.$NewspeakCompilation$Compiler$ = (function (v) {
			this.$NewspeakCompilation$Compiler$slot = v;
			return this;
		});
		this.$NewspeakCompilation$LocalEntry = (function () {
			return this.$NewspeakCompilation$LocalEntry$slot;
		});
		this.$NewspeakCompilation$LocalEntry$ = (function (v) {
			this.$NewspeakCompilation$LocalEntry$slot = v;
			return this;
		});
		this.$NewspeakCompilation$MethodEntry = (function () {
			return this.$NewspeakCompilation$MethodEntry$slot;
		});
		this.$NewspeakCompilation$MethodEntry$ = (function (v) {
			this.$NewspeakCompilation$MethodEntry$slot = v;
			return this;
		});
		this.$NewspeakCompilation$Namer = (function () {
			return this.$NewspeakCompilation$Namer$slot;
		});
		this.$NewspeakCompilation$Namer$ = (function (v) {
			this.$NewspeakCompilation$Namer$slot = v;
			return this;
		});
		this.$NewspeakCompilation$Scope = (function () {
			return this.$NewspeakCompilation$Scope$slot;
		});
		this.$NewspeakCompilation$Scope$ = (function (v) {
			this.$NewspeakCompilation$Scope$slot = v;
			return this;
		});
		this.$NewspeakCompilation$SlotEntry = (function () {
			return this.$NewspeakCompilation$SlotEntry$slot;
		});
		this.$NewspeakCompilation$SlotEntry$ = (function (v) {
			this.$NewspeakCompilation$SlotEntry$slot = v;
			return this;
		});
		this.$NewspeakCompilation$SymbolTableEntry = (function () {
			return this.$NewspeakCompilation$SymbolTableEntry$slot;
		});
		this.$NewspeakCompilation$SymbolTableEntry$ = (function (v) {
			this.$NewspeakCompilation$SymbolTableEntry$slot = v;
			return this;
		});
		this.$NewspeakCompilation$ClassEntry = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakCompilation`ClassEntry";
			this.name = "NewspeakCompilation`ClassEntry";
			this.header = "ClassEntry forDeclaration: cd atDepth: d = SymbolTableEntry forAST: cd atDepth: d (|\rpublic enclosingClass <ClassEntry>\r|)";
			this.slots = [new SM("enclosingClass", true, false)];
			this.methods = [
				new MM("superInit`NewspeakCompilation`ClassEntry", true, "forAST: cd atDepth: d"),
				new MM("instance`initializer", true, "forAST: cd atDepth: d"),
				new MM("isClassBinding", false, "public isClassBinding ^<Boolean> = (\r	^true\r)"),
				new MM("name", false, "public name = (\r	^ast selector\r)"),
				new MM("enclosingClass", true, null),
				new MM("enclosingClass:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakCompilation$ClassEntry = (function ($cd, $d) {
				var self = this;
				self.$super$NewspeakCompilation$ClassEntry$slot._$instance$initializer.call(self, $cd, $d);
				return self;
			});
			this.$instance$initializer = (function ($cd, $d) {
				var self = this;
				self._$superInit$NewspeakCompilation$ClassEntry($cd, $d);
				return self;
			});
			this.$isClassBinding = (function () {
				var self = this;
				return true;
			});
			this.$name = (function () {
				var self = this;
				return self._$ast().$selector();
			});
			this.$enclosingClass = (function () {
				return this.$enclosingClass$slot;
			});
			this.$enclosingClass$ = (function (v) {
				this.$enclosingClass$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakCompilation`ClassEntry";
					this._$superInit$NewspeakCompilation$ClassEntry = $.$superInit$NewspeakCompilation$ClassEntry;
					this.$superInit$NewspeakCompilation$ClassEntry = dnuCatcher("$superInit$NewspeakCompilation$ClassEntry");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isClassBinding = this._$isClassBinding = $.$isClassBinding;
					this.$name = this._$name = $.$name;
					this.$enclosingClass = this._$enclosingClass = $.$enclosingClass;
					this.$enclosingClass$ = this._$enclosingClass$ = $.$enclosingClass$;
					this.$enclosingObjects$NewspeakCompilation$ClassEntry = enclosingObjects;
					this.$super$NewspeakCompilation$ClassEntry$slot = runtimeSuperclass;
					this["NewspeakCompilation`ClassEntry"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$enclosingClass$slot = nil;
					});
					this.basicNew = this["NewspeakCompilation`ClassEntry"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakCompilation`ClassEntry";
				this.slots = [];
				this.methods = [new MM("forDeclaration:atDepth:", true, null)];
				this.nestedClasses = [];
				this.$forDeclaration$atDepth$ = (function ($cd, $d) {
					return (new this.nonMeta.basicNew()).$instance$initializer($cd, $d);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakCompilation`ClassEntry";
						this.$forDeclaration$atDepth$ = this._$forDeclaration$atDepth$ = $.$forDeclaration$atDepth$;
						this.$enclosingObjects$NewspeakCompilation$ClassEntry = enclosingObjects;
						this.$super$NewspeakCompilation$ClassEntry = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakCompilation$Compiler = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakCompilation`Compiler";
			this.name = "NewspeakCompilation`Compiler";
			this.header = "Compiler = (| protected scopeMap <Dictionary[AST, Scope]> ::= Dictionary new. |)";
			this.slots = [
				new SM("scopeMap", true, false),
				new SM("NewspeakCompilation`Compiler`Rewriter", true, true),
				new SM("NewspeakCompilation`Compiler`ScopeBuilder", true, true)
			];
			this.methods = [
				new MM("superInit`NewspeakCompilation`Compiler", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("checkForReservedWord:", false, "checkForReservedWord: selector = (\r	(namer isReservedWord: selector) ifTrue:\r		[Error signal: '\"', selector, '\" is a reserved word'].\r)"),
				new MM("setterSelectorFor:", false, "setterSelectorFor: slot <SlotDefAST | InstanceVariableMirror> ^<Symbol> = (\r	subclassResponsibility\r)"),
				new MM("Rewriter", true, null),
				new MM("ScopeBuilder", true, null),
				new MM("scopeMap", true, null),
				new MM("scopeMap:", true, null),
				new MM("NewspeakCompilation`Compiler`Rewriter", true, null),
				new MM("NewspeakCompilation`Compiler`Rewriter:", true, null),
				new MM("NewspeakCompilation`Compiler`ScopeBuilder", true, null),
				new MM("NewspeakCompilation`Compiler`ScopeBuilder:", true, null)
			];
			this.nestedClasses = [
				"NewspeakCompilation`Compiler`Rewriter",
				"NewspeakCompilation`Compiler`ScopeBuilder"
			];
			this.applications = [];
			this.$superInit$NewspeakCompilation$Compiler = (function () {
				var self = this;
				self.$super$NewspeakCompilation$Compiler$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakCompilation$Compiler();
				self._$scopeMap$(self.$enclosingObjects$NewspeakCompilation$Compiler[0]._$Dictionary().$new());
				return self;
			});
			this.$checkForReservedWord$ = (function ($selector) {
				var self = this;
				if (self.$enclosingObjects$NewspeakCompilation$Compiler[0]._$namer().$isReservedWord$($selector)) {
					self._$Error().$signal$(("\"").$$comma($selector).$$comma("\" is a reserved word"));
				} else {
					nil;
				};
				return self;
			});
			this.$setterSelectorFor$ = (function ($slot) {
				var self = this;
				self._$subclassResponsibility();
				return self;
			});
			this.$Rewriter = (function () {
				if (nil === this.$NewspeakCompilation$Compiler$Rewriter$slot) {
					var self = this;
					var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler[0]._$ASTTool();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler);
					var mixin = $.$NewspeakCompilation$Compiler$Rewriter;
					this.$NewspeakCompilation$Compiler$Rewriter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$NewspeakCompilation$Compiler$Rewriter$slot;
			});
			this.$ScopeBuilder = (function () {
				if (nil === this.$NewspeakCompilation$Compiler$ScopeBuilder$slot) {
					var self = this;
					var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler[0]._$ASTTool();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler);
					var mixin = $.$NewspeakCompilation$Compiler$ScopeBuilder;
					this.$NewspeakCompilation$Compiler$ScopeBuilder$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$NewspeakCompilation$Compiler$ScopeBuilder$slot;
			});
			this.$scopeMap = (function () {
				return this.$scopeMap$slot;
			});
			this.$scopeMap$ = (function (v) {
				this.$scopeMap$slot = v;
				return this;
			});
			this.$NewspeakCompilation$Compiler$Rewriter = (function () {
				return this.$NewspeakCompilation$Compiler$Rewriter$slot;
			});
			this.$NewspeakCompilation$Compiler$Rewriter$ = (function (v) {
				this.$NewspeakCompilation$Compiler$Rewriter$slot = v;
				return this;
			});
			this.$NewspeakCompilation$Compiler$ScopeBuilder = (function () {
				return this.$NewspeakCompilation$Compiler$ScopeBuilder$slot;
			});
			this.$NewspeakCompilation$Compiler$ScopeBuilder$ = (function (v) {
				this.$NewspeakCompilation$Compiler$ScopeBuilder$slot = v;
				return this;
			});
			this.$NewspeakCompilation$Compiler$Rewriter = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter";
				this.name = "NewspeakCompilation`Compiler`Rewriter";
				this.header = "Rewriter = ASTTool ((* This class is intended to become a common rewriter for the Squeak, Dart and JavaScript compilers. It should handle\r\r*self/super/outer/implicitReceiver/ordinary send or local read/write.\r*local/non-local return.\r*implicit return self\r*[] is [nil]\r*slot initializers\r*simultaneous slots\r*setter temp\r*inlined messages\r*large tuples?\r\rThe common rewriter should be sufficient for Dart and JavaScript. Squeak will require a second rewrite phase for closure analysis, which should be simpler than the current implementation because determining which locals need to be indirected or copied down will be easier when the tree already has distinguished sends that are reads/writes to locals.\r*)|\r	scopeStack <OrderedCollection[Scope]> = OrderedCollection new.\r	valueExpected <Boolean> ::= true.\r	inClosure <Boolean> ::= false.\r|)";
				this.slots = [
					new SM("scopeStack", false, false),
					new SM("valueExpected", true, false),
					new SM("inClosure", true, false),
					new SM("NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`BooleanAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`ConditionalAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`ContextAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`LocalReadAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`LocalWriteAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`LoopAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`NilAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`OuterSendAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`ParameterAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`ReceiverAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`ReturnAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`SelfSendAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`SendAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`SuperSendAST", true, true),
					new SM("NewspeakCompilation`Compiler`Rewriter`TemporaryAST", true, true)
				];
				this.methods = [
					new MM("superInit`NewspeakCompilation`Compiler`Rewriter", true, "ASTTool"),
					new MM("instance`initializer", true, "ASTTool"),
					new MM("applyForEffectTo:", false, "applyForEffectTo: node <Node> = (\r	| original result |\r	original:: valueExpected.\r	valueExpected:: false.\r	result:: node apply: self.\r	valueExpected:: original.\r	^result\r)"),
					new MM("applyForValueTo:", false, "applyForValueTo: node <Node> = (\r	| original result |\r	original:: valueExpected.\r	valueExpected:: true.\r	result:: node apply: self.\r	valueExpected:: original.\r	^result\r)"),
					new MM("canInlineSeqexps", false, "canInlineSeqexps ^<Boolean> = (\r	^true (* No on JS and Dart *)\r)"),
					new MM("depthOfEnclosingClass:", false, "depthOfEnclosingClass: name <Symbol> ^<Integer> = (\r	| entry <ClassEntry> |\r	entry:: currentScope at: #'@currentClass'.\r	[entry isNil] whileFalse:\r		[entry name = name ifTrue: [\r			^entry depth].\r		entry:: entry enclosingClass].\r	Error signal: 'No enclosing class named \"', name, '\"'\r)"),
					new MM("emptyBody", false, "emptyBody = (\r	| body |\r	#BOGUS. (* Should be able to use immutable collections. *)\r	body:: CodeBodyAST new\r		parameters: OrderedCollection new;\r		temporaries: OrderedCollection new;\r		statements: (OrderedCollection with: NilAST new).\r	scopeMap at: body put: nil.\r	^body\r)"),
					new MM("futureFor:", false, "futureFor: expression <ExpressionAST> ^<ExpressionAST> = (\r	(* @here Future computing: [expression] *)\r	| \r	scope <Scope>\r	block <BlockAST>\r	codebody <CodeBodyAST>\r	futureExp <ExpressionAST>\r	|\r	\r	scope:: Scope new.\r	scope superScope: currentScope.\r	\r	futureExp:: NormalSendAST new\r		receiver: (NormalSendAST new\r			receiver: implicitReceiverNode;\r			message: (MessageAST new selector: #Future; arguments: {}));\r		message: (MessageAST new selector: #computing:; arguments: {\r			block:: BlockAST new body: (\r				 codebody:: CodeBodyAST new\r					parameters: OrderedCollection new;\r					temporaries: OrderedCollection new;\r					statements: {expression})}).\r\r	scopeMap at: codebody put: scope.\r	scopeMap at: block put: scope.\r	^futureExp\r)"),
					new MM("implicitReceiverNode", false, "implicitReceiverNode ^<VariableAST> = (\r	^VariableAST new name: #'@here'; start: 0; end: 0.\r)"),
					new MM("inClosureDuring:", false, "inClosureDuring: block = (\r	| original |\r	original:: inClosure.\r	inClosure:: true.\r	^block ensure: [inClosure:: original]\r)"),
					new MM("isImplicitReceiverNode:", false, "isImplicitReceiverNode: node <AST> ^<Boolean> = (\r	node isVariableNode ifFalse: [^false].\r	^node name = #'@here'\r)"),
					new MM("isInlineableConditional:", false, "isInlineableConditional: node <NormalSendAST> ^<Boolean> = (\r	canInlineSeqexps ifFalse: [valueExpected ifTrue: [^false]].\r	node message isEventual ifTrue: [^false].\r	({#ifTrue:. #ifFalse:. #ifTrue:ifFalse:. #ifFalse:ifTrue:} includes: node message selector)\r	     ifFalse: [^false].\r	node message arguments do: [:arg <AST> | (isRemovableBlock: arg withArgs: 0) ifFalse: [^false]].\r	^true\r)"),
					new MM("isInlineableLoop:", false, "isInlineableLoop: node <NormalSendAST> ^<Boolean>= (\r	| selector <Symbol>  args |\r	canInlineSeqexps ifFalse: [valueExpected ifTrue: [^false]].\r	node message isEventual ifTrue: [^false].\r	selector:: node message selector.\r	args:: node message arguments.\r	({#whileTrue. #whileFalse. #whileTrue:. #whileFalse:. #repeat} includes: selector) ifTrue:\r		[args do:\r			[:each |\r			(isRemovableBlock: each withArgs: 0) ifFalse: [^false]].\r		^isRemovableBlock: node receiver withArgs: 0].\r	\r	(selector = #timesRepeat:) ifTrue:[^isRemovableBlock: args last withArgs: 0].\r	({#to:do:. #to:by:do:} includes: selector) ifFalse: [^false].\r	(isRemovableBlock: args last withArgs: 1) ifFalse: [^false].\r	(selector = #to:do:) ifTrue: [^true].\r	^args size = 3\r)"),
					new MM("isOuterNode:", false, "isOuterNode: node <AST> ^<Boolean> = (\r	node isVariableNode ifFalse: [^false].\r	^node name = #outer\r)"),
					new MM("isRemovableBlock:withArgs:", false, "isRemovableBlock: block <BlockAST> withArgs: numArgs <Integer> ^<Boolean> = (\r	(* Answers true if block can be removed (inlined) within another block. *)\r	block isBlockNode ifFalse: [^false].\r	block parameters size = numArgs ifFalse: [^false].\r	^true\r)"),
					new MM("isSelfNode:", false, "isSelfNode: node <AST> ^<Boolean> = (\r	node isVariableNode ifFalse: [^false].\r	^node name = #self \r)"),
					new MM("isSuperNode:", false, "isSuperNode: node <AST> ^<Boolean> = (\r	node isVariableNode ifFalse: [^false].\r	^node name = #super \r)"),
					new MM("offsetOfEnclosingObjectForClass:", false, "offsetOfEnclosingObjectForClass: name <Symbol> ^<Integer> = (\r	| entry <ClassEntry> |\r	entry:: currentScope at: #'@currentClass'.\r	[entry isNil] whileFalse:\r		[entry name = name ifTrue: [\r			| offset = outer Compiler currentDepth - entry depth - 1. |\r			assert: [offset >= 0] message: 'Invalid enclosing object index'.\r			^offset].\r		entry:: entry enclosingClass].\r	Error signal: 'No enclosing class named \"', name, '\"'\r)"),
					new MM("offsetOfImplicitReceiverTarget:", false, "offsetOfImplicitReceiverTarget: binding <SymbolTableEntry> ^<Integer> = (\r	(* Note this calculation differs from the one used by explicit outer sends by a factor of one. This is because an explicit outer send needs the depth of the enclosing object with for a class whose name is a given selector, whereas an implicit receiver send needs the depth of the enclosing object for the class that defined a given selector. *)\r	| depth |\r	depth:: outer Compiler currentDepth - binding depth.\r	assert: [depth >= 0] message: 'Invalid enclosing object index'.\r	^depth\r)"),
					new MM("processEventualSend:", false, "processEventualSend: node <NormalSendAST> = (\r	subclassResponsibility\r)"),
					new MM("processImplicitReceiverSend:", false, "processImplicitReceiverSend: node <NormalSendAST> = (\r	| \r	message = node message.\r	selector = message selector. \r	binding <SymbolTableEntry>\r	|\r	\r	selector = #self \r		ifTrue: [^ReceiverAST new copyPositionFrom: message].\r	selector = #nil \r		ifTrue: [^NilAST new copyPositionFrom: message].\r	selector = #false\r		ifTrue: [^(BooleanAST withValue: false) copyPositionFrom: message].\r	selector = #true\r		ifTrue: [^(BooleanAST withValue: true) copyPositionFrom: message].\r	selector = #thisContext\r		ifTrue: [^ContextAST new copyPositionFrom: message].\r	\r	binding:: currentScope at: selector ifAbsent: [nil].\r	\r	binding isNil (* Nothing is lexically visible. *) \r		ifTrue: [^processImplicitReceiverSend: message binding: nil].\r	\r	binding isLocalBinding\r		ifTrue: [^processLocalAccess: message of: binding].\r\r	binding isDebugMappedLocalEntry\r		ifTrue: [^processMappedVariable: message decl: binding].\r	\r	assert: [binding isMethodBinding | binding isSlotBinding | binding isClassBinding]\r	message: 'Unknown binding type'.\r	^processImplicitReceiverSend: message binding: binding\r)"),
					new MM("processImplicitReceiverSend:binding:", false, "processImplicitReceiverSend: msg <MessageAST> binding: binding <ClassEntry | SlotEntry | MethodEntry> = (\r	| depth = binding isNil ifTrue: [0] ifFalse: [offsetOfImplicitReceiverTarget: binding]. |\r	^(ImplicitReceiverSendAST new\r		depth: depth;\r		binding: binding;\r		message: (msg apply: self))\r		copyPositionFrom: msg\r)"),
					new MM("processInlineableConditional:", false, "processInlineableConditional: node <NormalSendAST> = (\r	|\r	receiver = node receiver apply: self.\r	selector = node message selector.\r	numArgs = node message arguments size.\r	arg1 = numArgs > 0 ifTrue:\r		[(rewriteInlinedBlockNode: (node message arguments at: 1) forValue: valueExpected) body].\r	arg2 = numArgs > 1 ifTrue:\r		[(rewriteInlinedBlockNode: (node message arguments at: 2) forValue: valueExpected) body].\r	|\r	selector = #ifTrue:\r		ifTrue: [^ConditionalAST if: receiver is: true then: arg1].\r	selector = #ifFalse:\r		ifTrue: [^ConditionalAST if: receiver is: false then: arg1].\r	selector = #ifTrue:ifFalse:\r		ifTrue: [^ConditionalAST if: receiver is: true then: arg1 else: arg2].\r	selector = #ifFalse:ifTrue: \r		ifTrue: [^ConditionalAST if: receiver is: false then: arg1 else: arg2].\r	assert: [false] message: 'Unknown conditional selector'\r)"),
					new MM("processInlineableLoop:", false, "processInlineableLoop: node <NormalSendAST> ^<LoopAST> = (\r	|\r	rcvr = node receiver.\r	msg = node message.\r	sel = msg selector.\r	numArgs = msg arguments size.\r	arg1 = numArgs >= 1 ifTrue: [msg arguments at: 1].\r	arg2 = numArgs >= 2 ifTrue: [msg arguments at: 2].\r	arg3 = numArgs >= 3 ifTrue: [msg arguments at: 3].\r	|\r	\r	sel = #whileTrue ifTrue: [^LoopAST new\r		while: true\r		do: (rewriteInlinedBlockNode: rcvr forValue: true) body].\r	sel = #whileFalse ifTrue: [^LoopAST new\r		while: false\r		do: (rewriteInlinedBlockNode: rcvr forValue: true) body].\r	sel = #whileTrue: ifTrue: [^LoopAST new\r		while: (rewriteInlinedBlockNode: rcvr forValue: true) body\r		is: true\r		do: (rewriteInlinedBlockNode: arg1 forValue: false) body].\r	sel = #whileFalse: ifTrue: [^LoopAST new\r		while: (rewriteInlinedBlockNode: rcvr forValue: true) body\r		is: false\r		do: (rewriteInlinedBlockNode: arg1 forValue: false) body].\r	\r	sel = #repeat ifTrue: [^LoopAST new\r		repeat: (rewriteInlinedBlockNode: rcvr forValue: false) body].\r	\r	sel = #timesRepeat: ifTrue: [^LoopAST new\r		do: (rcvr apply: self)\r		timesRepeat: (rewriteInlinedBlockNode: arg1 forValue: false)].\r	\r	sel = #to:do: ifTrue: [^LoopAST new\r		from: (rcvr apply: self)\r		to: (arg1 apply: self)\r		do: (rewriteInlinedBlockNode: arg2 forValue: false)].\r	\r	sel = #to:by:do: ifTrue: [^LoopAST new\r		from: (rcvr apply: self)\r		to: (arg1 apply: self)\r		by: (arg2 apply: self)\r		do: (rewriteInlinedBlockNode: arg3 forValue: false)].\r	\r	assert: [false] message: 'Unknown loop selector'\r)"),
					new MM("processLocalAccess:of:", false, "processLocalAccess: msg <MessageAST> of: decl <SlotEntry> = (\r	^msg selector last = $:\r		ifTrue: [processLocalWrite: msg to: decl]\r		ifFalse: [processLocalRead: msg from: decl]\r)"),
					new MM("processLocalRead:from:", false, "processLocalRead: message <MessageAST> from: declaration <LocalEntry> = (\r	assert: [message arguments isEmpty] message: ''.\r	assert: [declaration isNil not] message: ''.\r	^(LocalReadAST of: declaration)\r		start: message start;\r		end: message end\r)"),
					new MM("processLocalWrite:to:", false, "processLocalWrite: message <MessageAST> to: declaration <LocalEntry> = (\r	assert: [message arguments size = 1] message: ''.\r	assert: [declaration isTemporaryAST] message: ''.\r	^(LocalWriteAST\r		to: declaration assign: (applyForValueTo: message arguments first))\r		copyPositionFrom: message\r)"),
					new MM("processOuterExpression:", false, "processOuterExpression: node <NormalSendAST> = (\r	^EnclosingObjectAST new\r		depth: (offsetOfEnclosingObjectForClass: node message selector);\r		start: node receiver start;\r		end: node message end\r)"),
					new MM("processOuterSend:", false, "processOuterSend: node <NormalSendAST> = (\r	(* +1 because we're looking for members of the enclosing class, not the siblings of the enclosing class. *)\r	| binding = currentScope\r		at: node message selector\r		depth: (depthOfEnclosingClass: node receiver message selector) + 1. |\r	^OuterSendAST new\r		depth: (offsetOfEnclosingObjectForClass: node receiver message selector);\r		binding: binding;\r		message: (node message apply: self);\r		start: node receiver receiver start;\r		end: node message end\r)"),
					new MM("processSelfSend:", false, "processSelfSend: node <NormalSendAST> = (\r	| binding = currentScope at: node message selector depth: outer Compiler currentDepth. |\r	^SelfSendAST new\r		message: (node message apply: self);\r		binding: binding;\r		copyPositionFrom: node\r)"),
					new MM("processSetterSend:binding:", false, "processSetterSend: node <SetterSendAST> binding: binding ^<AST> = (\r	|\r	setterTempBinding <LocalEntry>\r	setterTempRead\r	setterTempWrite\r	message <MessageAST> \r	send <NormalSendAST>\r	depth\r	body <CodeBodyAST>  \r	|\r	setterTempBinding:: currentScope at: namer setterTemp.\r	setterTempBinding used: true.\r	\r	(* t := exp *)\r	setterTempWrite:: LocalWriteAST\r		to: setterTempBinding\r		assign: (node message arguments first apply: self). \r\r	(* setter: t *)\r	setterTempRead:: LocalReadAST of: setterTempBinding. \r	message:: MessageAST new selector: node message selector; arguments: {setterTempRead}.\r	assert: [isImplicitReceiverNode: node receiver] message: 'Setter send receiver should be implicit'.\r	depth:: binding isNil ifTrue: [0] ifFalse: [offsetOfImplicitReceiverTarget: binding].\r	send:: ImplicitReceiverSendAST new\r		depth: depth;\r		binding: binding;\r		message: message. (* Do not rewrite message twice *)\r\r	(* t:=exp. setter: t. t *)\r	body:: CodeBodyAST new \r		parameters: OrderedCollection new;\r		temporaries: {};\r		statements: {setterTempWrite. send. setterTempRead}.\r	scopeMap at: body put: currentScope.\r	^body\r)"),
					new MM("processSuperSend:", false, "processSuperSend: node <NormalSendAST> = (\r	^SuperSendAST new\r		message: (node message apply: self);\r		copyPositionFrom: node\r)"),
					new MM("rewriteBlockNode:forValue:", false, "rewriteBlockNode: node <BlockAST> forValue: forValue <Boolean> ^ <BlockAST> = (\r(* An empty block evaluates to nil when called. This method performs the necessary transformation if the block is empty; otherwise it recursively rewrites the block body. This rewrite is done on all blocks, regardless of whether they are inlined. *)\r	| \r	rewrittenNode <BlockAST> \r      params <Collection[ParameterAST]>  \r      bodyScope <Scope> \r	| \r	(* this shouldn't be handled here, but I'm not sure where the block / codebody \r	comes from. *)\r	node body start isNumber\r		ifFalse: [node body start: node start. node body end: node end].\r	\r	params:: node parameters collect:\r		[:p <VarDeclAST> |\r		checkForReservedWord: p name.\r		(ParameterAST name: p name type: p type) start: p start; end: p end].\r	bodyScope:: scopeMap at: node body.\r	params do: [:each | (bodyScope at: each name) ast: each].\r	rewrittenNode:: BlockAST new body: \r		(forValue ifTrue: [applyForValueTo: node body] ifFalse: [applyForEffectTo: node body]).\r	rewrittenNode start: node start; end: node end.\r	rewrittenNode body parameters: params.\r	node body statements isEmpty ifTrue:\r		[rewrittenNode body statements add: (NilAST new start: node body start; end: node body end)].\r	scopeMap at: rewrittenNode put: (scopeMap at: node).\r	^rewrittenNode\r)"),
					new MM("rewriteInlinedBlockNode:forValue:", false, "rewriteInlinedBlockNode: node <BlockAST> forValue: forValue <Boolean> ^ <CodeBodyAST> = (\r(* An empty block evaluates to nil when called. This method performs the necessary transformation if the block is empty; otherwise it recursively rewrites the block body. This rewrite is done on all blocks, regardless of whether they are inlined. *)\r	^rewriteBlockNode: node forValue: forValue\r)"),
					new MM("blockNode:", false, "public blockNode: node <BlockAST> = (\r	| rewrittenBlock <BlockAST> last <AST> |\r	inClosureDuring:\r		[rewrittenBlock:: rewriteBlockNode: node forValue: true.\r		last:: rewrittenBlock body statements last.\r		(last isReturnStatNode or: [last isBlockLocalReturnAST]) ifFalse:\r			[(* The last expression in a block is returned by it. *)\r			rewrittenBlock body statements removeLast.\r			rewrittenBlock body statements add:\r				((BlockLocalReturnAST expression: last) copyPositionFrom: last)]].\r	^rewrittenBlock\r)"),
					new MM("cascadedSendNode:", false, "public cascadedSendNode: node <CascadedSendAST> = (\r	| prevSend msg |\r	prevSend:: node previousSend apply: self.\r	msg:: node message apply: self.\r	^CascadedSendAST new to: prevSend cascade: msg\r)"),
					new MM("charNode:", false, "public charNode: node <CharAST> = (\r	^node\r)"),
					new MM("codeBodyNode:", false, "public codeBodyNode: node <CodeBodyAST> = (\r	(* Move slot initializers to statements. Simultaneous slots. *)\r	\r	| bodyScope temporaries setterEntry statements result |\r	bodyScope:: pushScopeForNode: node.\r	\r	temporaries:: OrderedCollection new.\r	node temporaries do: \r		[:varDecl <VarDeclAST> | | t |\r		checkForReservedWord: varDecl name.\r		t:: TemporaryAST name: varDecl name type: varDecl type.\r		t copyPositionFrom: varDecl.\r		(bodyScope at: t name) ast: t.\r		temporaries add: t].\r\r	setterEntry:: LocalEntry forDeclaration: (TemporaryAST name: namer setterTemp type: nil) atDepth: nil.\r	bodyScope at: namer setterTemp put: setterEntry.\r	bodyScope at: (namer setterTemp, ':') asSymbol put: setterEntry.\r	temporaries add: setterEntry ast.\r	\r	statements:: OrderedCollection new.\r	node temporaries do: \r		[:varDecl <VarDeclAST> |\r		varDecl initializer ifNotNil: [:it <ExpressionAST> |\r			| rewrittenInit |\r			rewrittenInit:: self applyForValueTo: \r				(node isSeq ifTrue: [it] ifFalse: [futureFor: it]).\r			statements add: (LocalWriteAST\r				to: (bodyScope at: varDecl name)\r				assign: rewrittenInit)]].\r\r	node statements keysAndValuesDo:\r		[:index :statement | \r		| rewritten |\r		rewritten:: (index = node statements size and: [valueExpected])\r			ifTrue: [applyForValueTo: statement]\r			ifFalse: [applyForEffectTo: statement].\r		statements add: rewritten].\r	\r	setterEntry used ifFalse: \r		[bodyScope at: namer setterTemp put: nil.\r		bodyScope at: (namer setterTemp, ':') asSymbol put: nil.\r		temporaries remove: setterEntry ast].\r\r	popScope.\r	result:: CodeBodyAST new\r		parameters: node parameters\r		temporaries: temporaries\r		statements: statements.\r	result literalMessages: node literalMessages.\r	scopeMap at: result put: bodyScope.\r	^result\r)"),
					new MM("messageNode:", false, "public messageNode: node <MessageAST> ^<MessageAST> = (\r    ^MessageAST new\r		send: node selector\r		with: (node arguments collect: [:arg | applyForValueTo: arg]);\r		isEventual: node isEventual;\r		start: node start;\r		end: node end\r)"),
					new MM("messagePatternNode:", false, "public messagePatternNode: node <MessagePatternAST> ^<MessagePatternAST> = (\r	| params <OrderedCollection[ParameterAST]> patternScope <Scope> |\r	checkForReservedWord: node selector.\r	params:: node parameters collect:\r		[:p <VarDeclAST> | \r		checkForReservedWord: p name.\r		(ParameterAST name: p name type: p type)\r			start: p start;\r			end: p end].\r	patternScope:: scopeMap at: node.\r	params do: [:p | (patternScope at: p name) ast: p].\r	^MessagePatternAST new\r		selector: node selector parameters: params;\r		start: node start;\r		end: node end.\r)"),
					new MM("methodNode:", false, "public methodNode: node <MethodAST> = (\r	(* Need setter temp? Implicit ^self? *)\r	| pattern body accessModifier result |\r	pattern:: node pattern apply: self.\r	(* We add the implicit ^self before rewritting the body to ensure the last non-return statment is rewritten for effect. *)\r	(node body statements isEmpty or: [node body statements last isReturnStatNode not])\r		ifTrue:	[node body statements add:\r					(ReturnStatAST new expression: (VariableAST new name: #self))].\r	body:: node body apply: self.\r	body parameters: pattern parameters.\r	assert: [inClosure not] message: ''.\r	result:: MethodAST new\r		pattern: pattern\r		body: body\r		accessModifier: node accessModifier.\r	scopeMap at: result put: (scopeMap at: node).\r	^result\r)"),
					new MM("normalSendNode:", false, "public normalSendNode: node <NormalSendAST> ^<AST> = (\r	(node message isEventual)\r		ifTrue: [^processEventualSend: node].\r	(isImplicitReceiverNode: node receiver)\r		ifTrue: [^processImplicitReceiverSend: node].\r	(isSelfNode: node receiver)\r		ifTrue: [^processSelfSend: node].	\r	(isSuperNode: node receiver)\r		ifTrue: [^processSuperSend: node].	\r	(isOuterNode: node receiver)\r		ifTrue: [^processOuterExpression: node].\r	(node receiver isSendNode and: [isOuterNode: node receiver receiver])\r		ifTrue: [^processOuterSend: node].\r	(isInlineableConditional: node)\r		ifTrue: [^processInlineableConditional: node].\r	(isInlineableLoop: node)\r		ifTrue: [^processInlineableLoop: node].\r	\r	(* And lo, we really have a normal send. *)\r	^(OrdinarySendAST\r		to: (node receiver apply: self) send: (node message apply: self))\r		start: node start; end: node end\r)"),
					new MM("numberNode:", false, "public numberNode: node <NumberAST> = (\r	^node\r)"),
					new MM("returnStatNode:", false, "public returnStatNode: node <ReturnStatAST> = (\r	^((inClosure ifTrue: [NonlocalReturnAST] ifFalse: [MethodLocalReturnAST])\r		expression: (applyForValueTo: node expression))\r		copyPositionFrom: node\r)"),
					new MM("setterSendNode:", false, "public setterSendNode: node <SetterSendAST> ^<AST> = (\r	| \r	message = node message.\r	selector = message selector. \r	binding <SymbolTableEntry>\r	|\r	\r	binding:: currentScope at: selector ifAbsent: [nil].\r	\r	binding isNil (* Nothing is lexically visible. *) \r		ifTrue: [^processSetterSend: node binding: nil].\r	\r	binding isLocalBinding\r		ifTrue: [^processLocalAccess: message of: binding].\r\r	binding isDebugMappedLocalEntry\r		ifTrue: [^processMappedVariable: message decl: binding].\r	\r	^processSetterSend: node binding: binding\r)"),
					new MM("stringNode:", false, "public stringNode: node <StringAST> = (\r	^node\r)"),
					new MM("symbolNode:", false, "public symbolNode: node <SymbolAST> = (\r	^node\r)"),
					new MM("tupleNode:", false, "public tupleNode: node <TupleAST> = (\r	^TupleAST new elements: (node elements collect: [:e | applyForValueTo: e])\r)"),
					new MM("variableNode:", false, "public variableNode: aNode <VariableAST> = (\r	#BOGUS. (* Duplication with processLocalRead: *)\r	assert: [aNode start isNumber] message: ''.\r	aNode name = #self ifTrue:\r		[^ReceiverAST new copyPositionFrom: aNode].\r	aNode name = #nil ifTrue:\r		[^NilAST new copyPositionFrom: aNode].\r	aNode name = #true ifTrue:\r		[^(BooleanAST withValue: true) copyPositionFrom: aNode].\r	aNode name = #false ifTrue:\r		[^(BooleanAST withValue: false) copyPositionFrom: aNode].		\r	aNode name = #thisContext ifTrue:\r		[^ContextAST new copyPositionFrom: aNode].\r	(* recognize inst vars for accessor methods? handle temps etc. *)\r	assert: [(aNode name = #super) not] message: '\"super\" is not a valid expression'.\r	assert: [(aNode name = #outer) not] message: '\"outer\" is not a valid expression'.\r	halt.\r	^aNode\r)"),
					new MM("currentScope", false, "currentScope ^<Scope> = (\r	^scopeStack last\r)"),
					new MM("popScope", false, "public popScope ^<Scope> = (\r	^scopeStack removeLast\r)"),
					new MM("pushScope:", false, "public pushScope: scope <Scope> = (\r	^scopeStack addLast: scope\r)"),
					new MM("pushScopeForNode:", false, "pushScopeForNode: node <AST> = (\r	^pushScope: (scopeMap at: node)\r)"),
					new MM("BlockLocalReturnAST", true, null),
					new MM("BooleanAST", true, null),
					new MM("ConditionalAST", true, null),
					new MM("ContextAST", true, null),
					new MM("EnclosingObjectAST", true, null),
					new MM("ImplicitReceiverSendAST", true, null),
					new MM("LocalReadAST", true, null),
					new MM("LocalWriteAST", true, null),
					new MM("LoopAST", true, null),
					new MM("MethodLocalReturnAST", true, null),
					new MM("NilAST", true, null),
					new MM("NonlocalReturnAST", true, null),
					new MM("OrdinarySendAST", true, null),
					new MM("OuterSendAST", true, null),
					new MM("ParameterAST", true, null),
					new MM("ReceiverAST", true, null),
					new MM("ReturnAST", true, null),
					new MM("SelfSendAST", true, null),
					new MM("SendAST", true, null),
					new MM("SuperSendAST", true, null),
					new MM("TemporaryAST", true, null),
					new MM("scopeStack", true, null),
					new MM("setOnce`scopeStack:", true, null),
					new MM("valueExpected", true, null),
					new MM("valueExpected:", true, null),
					new MM("inClosure", true, null),
					new MM("inClosure:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`BooleanAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`BooleanAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`ConditionalAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`ConditionalAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`ContextAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`ContextAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`LocalReadAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`LocalReadAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`LocalWriteAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`LocalWriteAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`LoopAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`LoopAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`NilAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`NilAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`OuterSendAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`OuterSendAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`ParameterAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`ParameterAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`ReceiverAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`ReceiverAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`ReturnAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`ReturnAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`SelfSendAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`SelfSendAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`SendAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`SendAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`SuperSendAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`SuperSendAST:", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`TemporaryAST", true, null),
					new MM("NewspeakCompilation`Compiler`Rewriter`TemporaryAST:", true, null)
				];
				this.nestedClasses = [
					"NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST",
					"NewspeakCompilation`Compiler`Rewriter`BooleanAST",
					"NewspeakCompilation`Compiler`Rewriter`ConditionalAST",
					"NewspeakCompilation`Compiler`Rewriter`ContextAST",
					"NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST",
					"NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST",
					"NewspeakCompilation`Compiler`Rewriter`LocalReadAST",
					"NewspeakCompilation`Compiler`Rewriter`LocalWriteAST",
					"NewspeakCompilation`Compiler`Rewriter`LoopAST",
					"NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST",
					"NewspeakCompilation`Compiler`Rewriter`NilAST",
					"NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST",
					"NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST",
					"NewspeakCompilation`Compiler`Rewriter`OuterSendAST",
					"NewspeakCompilation`Compiler`Rewriter`ParameterAST",
					"NewspeakCompilation`Compiler`Rewriter`ReceiverAST",
					"NewspeakCompilation`Compiler`Rewriter`ReturnAST",
					"NewspeakCompilation`Compiler`Rewriter`SelfSendAST",
					"NewspeakCompilation`Compiler`Rewriter`SendAST",
					"NewspeakCompilation`Compiler`Rewriter`SuperSendAST",
					"NewspeakCompilation`Compiler`Rewriter`TemporaryAST"
				];
				this.applications = [];
				this.$superInit$NewspeakCompilation$Compiler$Rewriter = (function () {
					var self = this;
					self.$super$NewspeakCompilation$Compiler$Rewriter$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function () {
					var self = this;
					self._$superInit$NewspeakCompilation$Compiler$Rewriter();
					self._$setOnce$scopeStack$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new());
					self._$valueExpected$(true);
					self._$inClosure$(false);
					return self;
				});
				this.$applyForEffectTo$ = (function ($node) {
					var self = this;
					var $original = nil;
					var $result = nil;
					$original = self._$valueExpected();
					self._$valueExpected$(false);
					$result = $node.$apply$(self);
					self._$valueExpected$($original);
					return $result;
				});
				this.$applyForValueTo$ = (function ($node) {
					var self = this;
					var $original = nil;
					var $result = nil;
					$original = self._$valueExpected();
					self._$valueExpected$(true);
					$result = $node.$apply$(self);
					self._$valueExpected$($original);
					return $result;
				});
				this.$canInlineSeqexps = (function () {
					var self = this;
					return true;
				});
				this.$depthOfEnclosingClass$ = (function ($name) {
					var self = this;
					var $entry = nil;
					$entry = self._$currentScope().$at$("@currentClass");
					{
						nil;
						for (; !$entry.$isNil(); ) {
							if ($entry.$name().$$equal($name)) {
								return $entry.$depth();
							} else {
								nil;
							};
							$entry = $entry.$enclosingClass();
						};
					};
					self._$Error().$signal$(("No enclosing class named \"").$$comma($name).$$comma("\""));
					return self;
				});
				this.$emptyBody = (function () {
					var self = this;
					var $body = nil;
					"BOGUS";
					$body = (function (cascadeReceiver) {
						cascadeReceiver.$parameters$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new());
						cascadeReceiver.$temporaries$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new());
						return cascadeReceiver.$statements$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$with$(self._$NilAST().$new()));
					})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$CodeBodyAST().$new());
					self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($body, nil);
					return $body;
				});
				this.$futureFor$ = (function ($expression) {
					var self = this;
					var $scope = nil;
					var $block = nil;
					var $codebody = nil;
					var $futureExp = nil;
					$scope = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$Scope().$new();
					$scope.$superScope$(self._$currentScope());
					$futureExp = (function (cascadeReceiver) {
						cascadeReceiver.$receiver$((function (cascadeReceiver) {
							cascadeReceiver.$receiver$(self._$implicitReceiverNode());
							return cascadeReceiver.$message$((function (cascadeReceiver) {
								cascadeReceiver.$selector$("Future");
								return cascadeReceiver.$arguments$([]);
							})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$MessageAST().$new()));
						})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$NormalSendAST().$new()));
						return cascadeReceiver.$message$((function (cascadeReceiver) {
							cascadeReceiver.$selector$("computing:");
							return cascadeReceiver.$arguments$([$block = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$BlockAST().$new().$body$($codebody = (function (cascadeReceiver) {
								cascadeReceiver.$parameters$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new());
								cascadeReceiver.$temporaries$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new());
								return cascadeReceiver.$statements$([$expression]);
							})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$CodeBodyAST().$new()))]);
						})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$MessageAST().$new()));
					})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$NormalSendAST().$new());
					self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($codebody, $scope);
					self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($block, $scope);
					return $futureExp;
				});
				this.$implicitReceiverNode = (function () {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$name$("@here");
						cascadeReceiver.$start$(0);
						return cascadeReceiver.$end$(0);
					})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$VariableAST().$new());
				});
				this.$inClosureDuring$ = (function ($block) {
					var self = this;
					var $original = nil;
					$original = self._$inClosure();
					self._$inClosure$(true);
					return $block.$ensure$((function () {
						return ((function ($setter_arg) {
							self._$inClosure$($setter_arg);
							return $setter_arg;
						})).$value$($original);
					}));
				});
				this.$isImplicitReceiverNode$ = (function ($node) {
					var self = this;
					if (!$node.$isVariableNode()) {
						return false;
					} else {
						nil;
					};
					return $node.$name().$$equal("@here");
				});
				this.$isInlineableConditional$ = (function ($node) {
					var self = this;
					var NLR = new Object();
					try {
						if (!self._$canInlineSeqexps()) {
							if (self._$valueExpected()) {
								return false;
							} else {
								nil;
							};
						} else {
							nil;
						};
						if ($node.$message().$isEventual()) {
							return false;
						} else {
							nil;
						};
						if (!([
							"ifTrue:",
							"ifFalse:",
							"ifTrue:ifFalse:",
							"ifFalse:ifTrue:"
						]).$includes$($node.$message().$selector())) {
							return false;
						} else {
							nil;
						};
						$node.$message().$arguments().$do$((function ($arg) {
							return self._$isRemovableBlock$withArgs$($arg, 0).$ifFalse$((function () {
								{
									NLR.value = false;
									throw NLR;
								};
							}));
						}));
						return true;
					} catch (NLR_exception) {
						if (NLR === NLR_exception) {
							return NLR_exception.value;
						} else {
							throw NLR_exception;
						};
					};
				});
				this.$isInlineableLoop$ = (function ($node) {
					var self = this;
					var NLR = new Object();
					try {
						var $selector = nil;
						var $args = nil;
						if (!self._$canInlineSeqexps()) {
							if (self._$valueExpected()) {
								return false;
							} else {
								nil;
							};
						} else {
							nil;
						};
						if ($node.$message().$isEventual()) {
							return false;
						} else {
							nil;
						};
						$selector = $node.$message().$selector();
						$args = $node.$message().$arguments();
						if (([
							"whileTrue",
							"whileFalse",
							"whileTrue:",
							"whileFalse:",
							"repeat"
						]).$includes$($selector)) {
							$args.$do$((function ($each) {
								return self._$isRemovableBlock$withArgs$($each, 0).$ifFalse$((function () {
									{
										NLR.value = false;
										throw NLR;
									};
								}));
							}));
							return self._$isRemovableBlock$withArgs$($node.$receiver(), 0);
						} else {
							nil;
						};
						if ($selector.$$equal("timesRepeat:")) {
							return self._$isRemovableBlock$withArgs$($args.$last(), 0);
						} else {
							nil;
						};
						if (!([
							"to:do:",
							"to:by:do:"
						]).$includes$($selector)) {
							return false;
						} else {
							nil;
						};
						if (!self._$isRemovableBlock$withArgs$($args.$last(), 1)) {
							return false;
						} else {
							nil;
						};
						if ($selector.$$equal("to:do:")) {
							return true;
						} else {
							nil;
						};
						return $args.$size().$$equal(3);
					} catch (NLR_exception) {
						if (NLR === NLR_exception) {
							return NLR_exception.value;
						} else {
							throw NLR_exception;
						};
					};
				});
				this.$isOuterNode$ = (function ($node) {
					var self = this;
					if (!$node.$isVariableNode()) {
						return false;
					} else {
						nil;
					};
					return $node.$name().$$equal("outer");
				});
				this.$isRemovableBlock$withArgs$ = (function ($block, $numArgs) {
					var self = this;
					if (!$block.$isBlockNode()) {
						return false;
					} else {
						nil;
					};
					if (!$block.$parameters().$size().$$equal($numArgs)) {
						return false;
					} else {
						nil;
					};
					return true;
				});
				this.$isSelfNode$ = (function ($node) {
					var self = this;
					if (!$node.$isVariableNode()) {
						return false;
					} else {
						nil;
					};
					return $node.$name().$$equal("self");
				});
				this.$isSuperNode$ = (function ($node) {
					var self = this;
					if (!$node.$isVariableNode()) {
						return false;
					} else {
						nil;
					};
					return $node.$name().$$equal("super");
				});
				this.$offsetOfEnclosingObjectForClass$ = (function ($name) {
					var self = this;
					var $entry = nil;
					$entry = self._$currentScope().$at$("@currentClass");
					{
						nil;
						for (; !$entry.$isNil(); ) {
							if ($entry.$name().$$equal($name)) {
								var $offset = nil;
								$offset = (self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$currentDepth() - $entry.$depth()) - 1;
								self._$assert$message$((function () {
									return $offset >= 0;
								}), "Invalid enclosing object index");
								return $offset;
							} else {
								nil;
							};
							$entry = $entry.$enclosingClass();
						};
					};
					self._$Error().$signal$(("No enclosing class named \"").$$comma($name).$$comma("\""));
					return self;
				});
				this.$offsetOfImplicitReceiverTarget$ = (function ($binding) {
					var self = this;
					var $depth = nil;
					$depth = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$currentDepth() - $binding.$depth();
					self._$assert$message$((function () {
						return $depth >= 0;
					}), "Invalid enclosing object index");
					return $depth;
				});
				this.$processEventualSend$ = (function ($node) {
					var self = this;
					self._$subclassResponsibility();
					return self;
				});
				this.$processImplicitReceiverSend$ = (function ($node) {
					var self = this;
					var $message = nil;
					var $selector = nil;
					var $binding = nil;
					$message = $node.$message();
					$selector = $message.$selector();
					if ($selector.$$equal("self")) {
						return self._$ReceiverAST().$new().$copyPositionFrom$($message);
					} else {
						nil;
					};
					if ($selector.$$equal("nil")) {
						return self._$NilAST().$new().$copyPositionFrom$($message);
					} else {
						nil;
					};
					if ($selector.$$equal("false")) {
						return self._$BooleanAST().$withValue$(false).$copyPositionFrom$($message);
					} else {
						nil;
					};
					if ($selector.$$equal("true")) {
						return self._$BooleanAST().$withValue$(true).$copyPositionFrom$($message);
					} else {
						nil;
					};
					if ($selector.$$equal("thisContext")) {
						return self._$ContextAST().$new().$copyPositionFrom$($message);
					} else {
						nil;
					};
					$binding = self._$currentScope().$at$ifAbsent$($selector, (function () {
						return nil;
					}));
					if ($binding.$isNil()) {
						return self._$processImplicitReceiverSend$binding$($message, nil);
					} else {
						nil;
					};
					if ($binding.$isLocalBinding()) {
						return self._$processLocalAccess$of$($message, $binding);
					} else {
						nil;
					};
					if ($binding.$isDebugMappedLocalEntry()) {
						return self._$processMappedVariable$decl$($message, $binding);
					} else {
						nil;
					};
					self._$assert$message$((function () {
						return $binding.$isMethodBinding().$$pipe($binding.$isSlotBinding()).$$pipe($binding.$isClassBinding());
					}), "Unknown binding type");
					return self._$processImplicitReceiverSend$binding$($message, $binding);
				});
				this.$processImplicitReceiverSend$binding$ = (function ($msg, $binding) {
					var self = this;
					var $depth = nil;
					$depth = $binding.$isNil().$ifTrue$ifFalse$((function () {
						return 0;
					}), (function () {
						return self._$offsetOfImplicitReceiverTarget$($binding);
					}));
					return (function (cascadeReceiver) {
						cascadeReceiver.$depth$($depth);
						cascadeReceiver.$binding$($binding);
						return cascadeReceiver.$message$($msg.$apply$(self));
					})(self._$ImplicitReceiverSendAST().$new()).$copyPositionFrom$($msg);
				});
				this.$processInlineableConditional$ = (function ($node) {
					var self = this;
					var $receiver = nil;
					var $selector = nil;
					var $numArgs = nil;
					var $arg1 = nil;
					var $arg2 = nil;
					$receiver = $node.$receiver().$apply$(self);
					$selector = $node.$message().$selector();
					$numArgs = $node.$message().$arguments().$size();
					$arg1 = ($numArgs > 0).$ifTrue$((function () {
						return self._$rewriteInlinedBlockNode$forValue$($node.$message().$arguments().$at$(1), self._$valueExpected()).$body();
					}));
					$arg2 = ($numArgs > 1).$ifTrue$((function () {
						return self._$rewriteInlinedBlockNode$forValue$($node.$message().$arguments().$at$(2), self._$valueExpected()).$body();
					}));
					if ($selector.$$equal("ifTrue:")) {
						return self._$ConditionalAST().$if$is$then$($receiver, true, $arg1);
					} else {
						nil;
					};
					if ($selector.$$equal("ifFalse:")) {
						return self._$ConditionalAST().$if$is$then$($receiver, false, $arg1);
					} else {
						nil;
					};
					if ($selector.$$equal("ifTrue:ifFalse:")) {
						return self._$ConditionalAST().$if$is$then$else$($receiver, true, $arg1, $arg2);
					} else {
						nil;
					};
					if ($selector.$$equal("ifFalse:ifTrue:")) {
						return self._$ConditionalAST().$if$is$then$else$($receiver, false, $arg1, $arg2);
					} else {
						nil;
					};
					self._$assert$message$((function () {
						return false;
					}), "Unknown conditional selector");
					return self;
				});
				this.$processInlineableLoop$ = (function ($node) {
					var self = this;
					var $rcvr = nil;
					var $msg = nil;
					var $sel = nil;
					var $numArgs = nil;
					var $arg1 = nil;
					var $arg2 = nil;
					var $arg3 = nil;
					$rcvr = $node.$receiver();
					$msg = $node.$message();
					$sel = $msg.$selector();
					$numArgs = $msg.$arguments().$size();
					$arg1 = ($numArgs >= 1).$ifTrue$((function () {
						return $msg.$arguments().$at$(1);
					}));
					$arg2 = ($numArgs >= 2).$ifTrue$((function () {
						return $msg.$arguments().$at$(2);
					}));
					$arg3 = ($numArgs >= 3).$ifTrue$((function () {
						return $msg.$arguments().$at$(3);
					}));
					if ($sel.$$equal("whileTrue")) {
						return self._$LoopAST().$new().$while$do$(true, self._$rewriteInlinedBlockNode$forValue$($rcvr, true).$body());
					} else {
						nil;
					};
					if ($sel.$$equal("whileFalse")) {
						return self._$LoopAST().$new().$while$do$(false, self._$rewriteInlinedBlockNode$forValue$($rcvr, true).$body());
					} else {
						nil;
					};
					if ($sel.$$equal("whileTrue:")) {
						return self._$LoopAST().$new().$while$is$do$(self._$rewriteInlinedBlockNode$forValue$($rcvr, true).$body(), true, self._$rewriteInlinedBlockNode$forValue$($arg1, false).$body());
					} else {
						nil;
					};
					if ($sel.$$equal("whileFalse:")) {
						return self._$LoopAST().$new().$while$is$do$(self._$rewriteInlinedBlockNode$forValue$($rcvr, true).$body(), false, self._$rewriteInlinedBlockNode$forValue$($arg1, false).$body());
					} else {
						nil;
					};
					if ($sel.$$equal("repeat")) {
						return self._$LoopAST().$new().$repeat$(self._$rewriteInlinedBlockNode$forValue$($rcvr, false).$body());
					} else {
						nil;
					};
					if ($sel.$$equal("timesRepeat:")) {
						return self._$LoopAST().$new().$do$timesRepeat$($rcvr.$apply$(self), self._$rewriteInlinedBlockNode$forValue$($arg1, false));
					} else {
						nil;
					};
					if ($sel.$$equal("to:do:")) {
						return self._$LoopAST().$new().$from$to$do$($rcvr.$apply$(self), $arg1.$apply$(self), self._$rewriteInlinedBlockNode$forValue$($arg2, false));
					} else {
						nil;
					};
					if ($sel.$$equal("to:by:do:")) {
						return self._$LoopAST().$new().$from$to$by$do$($rcvr.$apply$(self), $arg1.$apply$(self), $arg2.$apply$(self), self._$rewriteInlinedBlockNode$forValue$($arg3, false));
					} else {
						nil;
					};
					self._$assert$message$((function () {
						return false;
					}), "Unknown loop selector");
					return self;
				});
				this.$processLocalAccess$of$ = (function ($msg, $decl) {
					var self = this;
					return $msg.$selector().$last().$$equal(":").$ifTrue$ifFalse$((function () {
						return self._$processLocalWrite$to$($msg, $decl);
					}), (function () {
						return self._$processLocalRead$from$($msg, $decl);
					}));
				});
				this.$processLocalRead$from$ = (function ($message, $declaration) {
					var self = this;
					self._$assert$message$((function () {
						return $message.$arguments().$isEmpty();
					}), "");
					self._$assert$message$((function () {
						return $declaration.$isNil().$not();
					}), "");
					return (function (cascadeReceiver) {
						cascadeReceiver.$start$($message.$start());
						return cascadeReceiver.$end$($message.$end());
					})(self._$LocalReadAST().$of$($declaration));
				});
				this.$processLocalWrite$to$ = (function ($message, $declaration) {
					var self = this;
					self._$assert$message$((function () {
						return $message.$arguments().$size().$$equal(1);
					}), "");
					self._$assert$message$((function () {
						return $declaration.$isTemporaryAST();
					}), "");
					return self._$LocalWriteAST().$to$assign$($declaration, self._$applyForValueTo$($message.$arguments().$first())).$copyPositionFrom$($message);
				});
				this.$processOuterExpression$ = (function ($node) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$depth$(self._$offsetOfEnclosingObjectForClass$($node.$message().$selector()));
						cascadeReceiver.$start$($node.$receiver().$start());
						return cascadeReceiver.$end$($node.$message().$end());
					})(self._$EnclosingObjectAST().$new());
				});
				this.$processOuterSend$ = (function ($node) {
					var self = this;
					var $binding = nil;
					$binding = self._$currentScope().$at$depth$($node.$message().$selector(), self._$depthOfEnclosingClass$($node.$receiver().$message().$selector()) + 1);
					return (function (cascadeReceiver) {
						cascadeReceiver.$depth$(self._$offsetOfEnclosingObjectForClass$($node.$receiver().$message().$selector()));
						cascadeReceiver.$binding$($binding);
						cascadeReceiver.$message$($node.$message().$apply$(self));
						cascadeReceiver.$start$($node.$receiver().$receiver().$start());
						return cascadeReceiver.$end$($node.$message().$end());
					})(self._$OuterSendAST().$new());
				});
				this.$processSelfSend$ = (function ($node) {
					var self = this;
					var $binding = nil;
					$binding = self._$currentScope().$at$depth$($node.$message().$selector(), self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$currentDepth());
					return (function (cascadeReceiver) {
						cascadeReceiver.$message$($node.$message().$apply$(self));
						cascadeReceiver.$binding$($binding);
						return cascadeReceiver.$copyPositionFrom$($node);
					})(self._$SelfSendAST().$new());
				});
				this.$processSetterSend$binding$ = (function ($node, $binding) {
					var self = this;
					var $setterTempBinding = nil;
					var $setterTempRead = nil;
					var $setterTempWrite = nil;
					var $message = nil;
					var $send = nil;
					var $depth = nil;
					var $body = nil;
					$setterTempBinding = self._$currentScope().$at$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$namer().$setterTemp());
					$setterTempBinding.$used$(true);
					$setterTempWrite = self._$LocalWriteAST().$to$assign$($setterTempBinding, $node.$message().$arguments().$first().$apply$(self));
					$setterTempRead = self._$LocalReadAST().$of$($setterTempBinding);
					$message = (function (cascadeReceiver) {
						cascadeReceiver.$selector$($node.$message().$selector());
						return cascadeReceiver.$arguments$([$setterTempRead]);
					})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$MessageAST().$new());
					self._$assert$message$((function () {
						return self._$isImplicitReceiverNode$($node.$receiver());
					}), "Setter send receiver should be implicit");
					$depth = $binding.$isNil().$ifTrue$ifFalse$((function () {
						return 0;
					}), (function () {
						return self._$offsetOfImplicitReceiverTarget$($binding);
					}));
					$send = (function (cascadeReceiver) {
						cascadeReceiver.$depth$($depth);
						cascadeReceiver.$binding$($binding);
						return cascadeReceiver.$message$($message);
					})(self._$ImplicitReceiverSendAST().$new());
					$body = (function (cascadeReceiver) {
						cascadeReceiver.$parameters$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new());
						cascadeReceiver.$temporaries$([]);
						return cascadeReceiver.$statements$([
							$setterTempWrite,
							$send,
							$setterTempRead
						]);
					})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$CodeBodyAST().$new());
					self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($body, self._$currentScope());
					return $body;
				});
				this.$processSuperSend$ = (function ($node) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$message$($node.$message().$apply$(self));
						return cascadeReceiver.$copyPositionFrom$($node);
					})(self._$SuperSendAST().$new());
				});
				this.$rewriteBlockNode$forValue$ = (function ($node, $forValue) {
					var self = this;
					var $rewrittenNode = nil;
					var $params = nil;
					var $bodyScope = nil;
					if (!$node.$body().$start().$isNumber()) {
						$node.$body().$start$($node.$start());
						$node.$body().$end$($node.$end());
					} else {
						nil;
					};
					$params = $node.$parameters().$collect$((function ($p) {
						self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$checkForReservedWord$($p.$name());
						return (function (cascadeReceiver) {
							cascadeReceiver.$start$($p.$start());
							return cascadeReceiver.$end$($p.$end());
						})(self._$ParameterAST().$name$type$($p.$name(), $p.$type()));
					}));
					$bodyScope = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$($node.$body());
					$params.$do$((function ($each) {
						return $bodyScope.$at$($each.$name()).$ast$($each);
					}));
					$rewrittenNode = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$BlockAST().$new().$body$($forValue.$ifTrue$ifFalse$((function () {
						return self._$applyForValueTo$($node.$body());
					}), (function () {
						return self._$applyForEffectTo$($node.$body());
					})));
					(function (cascadeReceiver) {
						cascadeReceiver.$start$($node.$start());
						return cascadeReceiver.$end$($node.$end());
					})($rewrittenNode);
					$rewrittenNode.$body().$parameters$($params);
					if ($node.$body().$statements().$isEmpty()) {
						$rewrittenNode.$body().$statements().$add$((function (cascadeReceiver) {
							cascadeReceiver.$start$($node.$body().$start());
							return cascadeReceiver.$end$($node.$body().$end());
						})(self._$NilAST().$new()));
					} else {
						nil;
					};
					self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($rewrittenNode, self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$($node));
					return $rewrittenNode;
				});
				this.$rewriteInlinedBlockNode$forValue$ = (function ($node, $forValue) {
					var self = this;
					return self._$rewriteBlockNode$forValue$($node, $forValue);
				});
				this.$blockNode$ = (function ($node) {
					var self = this;
					var $rewrittenBlock = nil;
					var $last = nil;
					self._$inClosureDuring$((function () {
						$rewrittenBlock = self._$rewriteBlockNode$forValue$($node, true);
						$last = $rewrittenBlock.$body().$statements().$last();
						return ($last.$isReturnStatNode() || $last.$isBlockLocalReturnAST()).$ifFalse$((function () {
							$rewrittenBlock.$body().$statements().$removeLast();
							return $rewrittenBlock.$body().$statements().$add$(self._$BlockLocalReturnAST().$expression$($last).$copyPositionFrom$($last));
						}));
					}));
					return $rewrittenBlock;
				});
				this.$cascadedSendNode$ = (function ($node) {
					var self = this;
					var $prevSend = nil;
					var $msg = nil;
					$prevSend = $node.$previousSend().$apply$(self);
					$msg = $node.$message().$apply$(self);
					return self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$CascadedSendAST().$new().$to$cascade$($prevSend, $msg);
				});
				this.$charNode$ = (function ($node) {
					var self = this;
					return $node;
				});
				this.$codeBodyNode$ = (function ($node) {
					var self = this;
					var $bodyScope = nil;
					var $temporaries = nil;
					var $setterEntry = nil;
					var $statements = nil;
					var $result = nil;
					$bodyScope = self._$pushScopeForNode$($node);
					$temporaries = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new();
					$node.$temporaries().$do$((function ($varDecl) {
						var $t = nil;
						self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$checkForReservedWord$($varDecl.$name());
						$t = self._$TemporaryAST().$name$type$($varDecl.$name(), $varDecl.$type());
						$t.$copyPositionFrom$($varDecl);
						$bodyScope.$at$($t.$name()).$ast$($t);
						return $temporaries.$add$($t);
					}));
					$setterEntry = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$LocalEntry().$forDeclaration$atDepth$(self._$TemporaryAST().$name$type$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$namer().$setterTemp(), nil), nil);
					$bodyScope.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$namer().$setterTemp(), $setterEntry);
					$bodyScope.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$namer().$setterTemp().$$comma(":").$asSymbol(), $setterEntry);
					$temporaries.$add$($setterEntry.$ast());
					$statements = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$OrderedCollection().$new();
					$node.$temporaries().$do$((function ($varDecl) {
						return $varDecl.$initializer().$ifNotNil$((function ($it) {
							var $rewrittenInit = nil;
							$rewrittenInit = self._$applyForValueTo$($node.$isSeq().$ifTrue$ifFalse$((function () {
								return $it;
							}), (function () {
								return self._$futureFor$($it);
							})));
							return $statements.$add$(self._$LocalWriteAST().$to$assign$($bodyScope.$at$($varDecl.$name()), $rewrittenInit));
						}));
					}));
					$node.$statements().$keysAndValuesDo$((function ($index, $statement) {
						var $rewritten = nil;
						$rewritten = ($index.$$equal($node.$statements().$size()) && self._$valueExpected()).$ifTrue$ifFalse$((function () {
							return self._$applyForValueTo$($statement);
						}), (function () {
							return self._$applyForEffectTo$($statement);
						}));
						return $statements.$add$($rewritten);
					}));
					if (!$setterEntry.$used()) {
						$bodyScope.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$namer().$setterTemp(), nil);
						$bodyScope.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$namer().$setterTemp().$$comma(":").$asSymbol(), nil);
						$temporaries.$remove$($setterEntry.$ast());
					} else {
						nil;
					};
					self._$popScope();
					$result = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$CodeBodyAST().$new().$parameters$temporaries$statements$($node.$parameters(), $temporaries, $statements);
					$result.$literalMessages$($node.$literalMessages());
					self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($result, $bodyScope);
					return $result;
				});
				this.$messageNode$ = (function ($node) {
					var self = this;
					return (function (cascadeReceiver) {
						cascadeReceiver.$send$with$($node.$selector(), $node.$arguments().$collect$((function ($arg) {
							return self._$applyForValueTo$($arg);
						})));
						cascadeReceiver.$isEventual$($node.$isEventual());
						cascadeReceiver.$start$($node.$start());
						return cascadeReceiver.$end$($node.$end());
					})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$MessageAST().$new());
				});
				this.$messagePatternNode$ = (function ($node) {
					var self = this;
					var $params = nil;
					var $patternScope = nil;
					self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$checkForReservedWord$($node.$selector());
					$params = $node.$parameters().$collect$((function ($p) {
						self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$checkForReservedWord$($p.$name());
						return (function (cascadeReceiver) {
							cascadeReceiver.$start$($p.$start());
							return cascadeReceiver.$end$($p.$end());
						})(self._$ParameterAST().$name$type$($p.$name(), $p.$type()));
					}));
					$patternScope = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$($node);
					$params.$do$((function ($p) {
						return $patternScope.$at$($p.$name()).$ast$($p);
					}));
					return (function (cascadeReceiver) {
						cascadeReceiver.$selector$parameters$($node.$selector(), $params);
						cascadeReceiver.$start$($node.$start());
						return cascadeReceiver.$end$($node.$end());
					})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$MessagePatternAST().$new());
				});
				this.$methodNode$ = (function ($node) {
					var self = this;
					var $pattern = nil;
					var $body = nil;
					var $accessModifier = nil;
					var $result = nil;
					$pattern = $node.$pattern().$apply$(self);
					if ($node.$body().$statements().$isEmpty() || $node.$body().$statements().$last().$isReturnStatNode().$not()) {
						$node.$body().$statements().$add$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$ReturnStatAST().$new().$expression$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$VariableAST().$new().$name$("self")));
					} else {
						nil;
					};
					$body = $node.$body().$apply$(self);
					$body.$parameters$($pattern.$parameters());
					self._$assert$message$((function () {
						return self._$inClosure().$not();
					}), "");
					$result = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$MethodAST().$new().$pattern$body$accessModifier$($pattern, $body, $node.$accessModifier());
					self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$put$($result, self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$($node));
					return $result;
				});
				this.$normalSendNode$ = (function ($node) {
					var self = this;
					if ($node.$message().$isEventual()) {
						return self._$processEventualSend$($node);
					} else {
						nil;
					};
					if (self._$isImplicitReceiverNode$($node.$receiver())) {
						return self._$processImplicitReceiverSend$($node);
					} else {
						nil;
					};
					if (self._$isSelfNode$($node.$receiver())) {
						return self._$processSelfSend$($node);
					} else {
						nil;
					};
					if (self._$isSuperNode$($node.$receiver())) {
						return self._$processSuperSend$($node);
					} else {
						nil;
					};
					if (self._$isOuterNode$($node.$receiver())) {
						return self._$processOuterExpression$($node);
					} else {
						nil;
					};
					if ($node.$receiver().$isSendNode() && self._$isOuterNode$($node.$receiver().$receiver())) {
						return self._$processOuterSend$($node);
					} else {
						nil;
					};
					if (self._$isInlineableConditional$($node)) {
						return self._$processInlineableConditional$($node);
					} else {
						nil;
					};
					if (self._$isInlineableLoop$($node)) {
						return self._$processInlineableLoop$($node);
					} else {
						nil;
					};
					return (function (cascadeReceiver) {
						cascadeReceiver.$start$($node.$start());
						return cascadeReceiver.$end$($node.$end());
					})(self._$OrdinarySendAST().$to$send$($node.$receiver().$apply$(self), $node.$message().$apply$(self)));
				});
				this.$numberNode$ = (function ($node) {
					var self = this;
					return $node;
				});
				this.$returnStatNode$ = (function ($node) {
					var self = this;
					return self._$inClosure().$ifTrue$ifFalse$((function () {
						return self._$NonlocalReturnAST();
					}), (function () {
						return self._$MethodLocalReturnAST();
					})).$expression$(self._$applyForValueTo$($node.$expression())).$copyPositionFrom$($node);
				});
				this.$setterSendNode$ = (function ($node) {
					var self = this;
					var $message = nil;
					var $selector = nil;
					var $binding = nil;
					$message = $node.$message();
					$selector = $message.$selector();
					$binding = self._$currentScope().$at$ifAbsent$($selector, (function () {
						return nil;
					}));
					if ($binding.$isNil()) {
						return self._$processSetterSend$binding$($node, nil);
					} else {
						nil;
					};
					if ($binding.$isLocalBinding()) {
						return self._$processLocalAccess$of$($message, $binding);
					} else {
						nil;
					};
					if ($binding.$isDebugMappedLocalEntry()) {
						return self._$processMappedVariable$decl$($message, $binding);
					} else {
						nil;
					};
					return self._$processSetterSend$binding$($node, $binding);
				});
				this.$stringNode$ = (function ($node) {
					var self = this;
					return $node;
				});
				this.$symbolNode$ = (function ($node) {
					var self = this;
					return $node;
				});
				this.$tupleNode$ = (function ($node) {
					var self = this;
					return self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$TupleAST().$new().$elements$($node.$elements().$collect$((function ($e) {
						return self._$applyForValueTo$($e);
					})));
				});
				this.$variableNode$ = (function ($aNode) {
					var self = this;
					"BOGUS";
					self._$assert$message$((function () {
						return $aNode.$start().$isNumber();
					}), "");
					if ($aNode.$name().$$equal("self")) {
						return self._$ReceiverAST().$new().$copyPositionFrom$($aNode);
					} else {
						nil;
					};
					if ($aNode.$name().$$equal("nil")) {
						return self._$NilAST().$new().$copyPositionFrom$($aNode);
					} else {
						nil;
					};
					if ($aNode.$name().$$equal("true")) {
						return self._$BooleanAST().$withValue$(true).$copyPositionFrom$($aNode);
					} else {
						nil;
					};
					if ($aNode.$name().$$equal("false")) {
						return self._$BooleanAST().$withValue$(false).$copyPositionFrom$($aNode);
					} else {
						nil;
					};
					if ($aNode.$name().$$equal("thisContext")) {
						return self._$ContextAST().$new().$copyPositionFrom$($aNode);
					} else {
						nil;
					};
					self._$assert$message$((function () {
						return $aNode.$name().$$equal("super").$not();
					}), "\"super\" is not a valid expression");
					self._$assert$message$((function () {
						return $aNode.$name().$$equal("outer").$not();
					}), "\"outer\" is not a valid expression");
					self._$halt();
					return $aNode;
				});
				this.$currentScope = (function () {
					var self = this;
					return self._$scopeStack().$last();
				});
				this.$popScope = (function () {
					var self = this;
					return self._$scopeStack().$removeLast();
				});
				this.$pushScope$ = (function ($scope) {
					var self = this;
					return self._$scopeStack().$addLast$($scope);
				});
				this.$pushScopeForNode$ = (function ($node) {
					var self = this;
					return self._$pushScope$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[0]._$scopeMap().$at$($node));
				});
				this.$BlockLocalReturnAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot) {
						var self = this;
						var superclass = self._$ReturnAST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST;
						this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot;
				});
				this.$BooleanAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot) {
						var self = this;
						var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$BooleanAST;
						this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot;
				});
				this.$ConditionalAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot) {
						var self = this;
						var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST;
						this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot;
				});
				this.$ContextAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$ContextAST$slot) {
						var self = this;
						var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$ContextAST;
						this.$NewspeakCompilation$Compiler$Rewriter$ContextAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$ContextAST$slot;
				});
				this.$EnclosingObjectAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot) {
						var self = this;
						var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST;
						this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot;
				});
				this.$ImplicitReceiverSendAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot) {
						var self = this;
						var superclass = self._$SendAST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST;
						this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot;
				});
				this.$LocalReadAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot) {
						var self = this;
						var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST;
						this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot;
				});
				this.$LocalWriteAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot) {
						var self = this;
						var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST;
						this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot;
				});
				this.$LoopAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot) {
						var self = this;
						var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$LoopAST;
						this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot;
				});
				this.$MethodLocalReturnAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot) {
						var self = this;
						var superclass = self._$ReturnAST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST;
						this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot;
				});
				this.$NilAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$NilAST$slot) {
						var self = this;
						var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$NilAST;
						this.$NewspeakCompilation$Compiler$Rewriter$NilAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$NilAST$slot;
				});
				this.$NonlocalReturnAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot) {
						var self = this;
						var superclass = self._$ReturnAST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST;
						this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot;
				});
				this.$OrdinarySendAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot) {
						var self = this;
						var superclass = self._$SendAST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST;
						this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot;
				});
				this.$OuterSendAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot) {
						var self = this;
						var superclass = self._$SendAST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST;
						this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot;
				});
				this.$ParameterAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot) {
						var self = this;
						var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$ParameterAST;
						this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot;
				});
				this.$ReceiverAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot) {
						var self = this;
						var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST;
						this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot;
				});
				this.$ReturnAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot) {
						var self = this;
						var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$ReturnAST;
						this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot;
				});
				this.$SelfSendAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot) {
						var self = this;
						var superclass = self._$SendAST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST;
						this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot;
				});
				this.$SendAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$SendAST$slot) {
						var self = this;
						var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$SendAST;
						this.$NewspeakCompilation$Compiler$Rewriter$SendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$SendAST$slot;
				});
				this.$SuperSendAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot) {
						var self = this;
						var superclass = self._$SendAST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST;
						this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot;
				});
				this.$TemporaryAST = (function () {
					if (nil === this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot) {
						var self = this;
						var superclass = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter[1]._$AST();
						var enclosingObjects = ([this]).concat(this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter);
						var mixin = $.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST;
						this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
					};
					return this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot;
				});
				this.$scopeStack = (function () {
					return this.$scopeStack$slot;
				});
				this.$setOnce$scopeStack$ = (function (v) {
					this.$scopeStack$slot = v;
					return this;
				});
				this.$valueExpected = (function () {
					return this.$valueExpected$slot;
				});
				this.$valueExpected$ = (function (v) {
					this.$valueExpected$slot = v;
					return this;
				});
				this.$inClosure = (function () {
					return this.$inClosure$slot;
				});
				this.$inClosure$ = (function (v) {
					this.$inClosure$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$ContextAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$ContextAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$ContextAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$ContextAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$LoopAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$NilAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$NilAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$NilAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$NilAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$SendAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$SendAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$SendAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$SendAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = (function () {
					return this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$ = (function (v) {
					this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot = v;
					return this;
				});
				this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST";
					this.header = "BlockLocalReturnAST expression: e = ReturnAST expression: e ()";
					this.slots = [];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST", true, "expression: e"),
						new MM("instance`initializer", true, "expression: e"),
						new MM("apply:", false, "public apply: visitor = (\r	^visitor blockLocalReturnNode: self\r)")
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = (function ($e) {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot._$instance$initializer.call(self, $e);
						return self;
					});
					this.$instance$initializer = (function ($e) {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST($e);
						return self;
					});
					this.$apply$ = (function ($visitor) {
						var self = this;
						return $visitor.$blockLocalReturnNode$(self);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST";
						this.slots = [];
						this.methods = [new MM("expression:", true, null)];
						this.nestedClasses = [];
						this.$expression$ = (function ($e) {
							return (new this.nonMeta.basicNew()).$instance$initializer($e);
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`BlockLocalReturnAST";
								this.$expression$ = this._$expression$ = $.$expression$;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`BooleanAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`BooleanAST";
					this.header = "BooleanAST withValue: b = AST (|\r	public value = b.\r|)";
					this.slots = [new SM("value", false, false)];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`BooleanAST", true, "AST"),
						new MM("instance`initializer", true, "AST"),
						new MM("apply:", false, "public apply: aTool <ASTTool > ^ <Self> = (\r	^aTool boolNode: self\r)"),
						new MM("isBoolNode", false, "public isBoolNode = (\r	^true\r)"),
						new MM("name", false, "name = (\r	^value printString asSymbol\r)"),
						new MM("printOn:", false, "public printOn: stream = (\r	stream nextPutAll: 'BooleanAST: '.\r	value printOn: stream.\r)"),
						new MM("value", true, null),
						new MM("setOnce`value:", true, null)
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$BooleanAST = (function ($b) {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function ($b) {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$BooleanAST($b);
						self._$setOnce$value$($b);
						return self;
					});
					this.$apply$ = (function ($aTool) {
						var self = this;
						return $aTool.$boolNode$(self);
					});
					this.$isBoolNode = (function () {
						var self = this;
						return true;
					});
					this.$name = (function () {
						var self = this;
						return self._$value().$printString().$asSymbol();
					});
					this.$printOn$ = (function ($stream) {
						var self = this;
						$stream.$nextPutAll$("BooleanAST: ");
						self._$value().$printOn$($stream);
						return self;
					});
					this.$value = (function () {
						return this.$value$slot;
					});
					this.$setOnce$value$ = (function (v) {
						this.$value$slot = v;
						return this;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`BooleanAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$BooleanAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$BooleanAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$BooleanAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$BooleanAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$isBoolNode = this._$isBoolNode = $.$isBoolNode;
							this._$name = $.$name;
							this.$name = dnuCatcher("$name");
							this.$printOn$ = this._$printOn$ = $.$printOn$;
							this.$value = this._$value = $.$value;
							this.$setOnce$value$ = this._$setOnce$value$ = $.$setOnce$value$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$BooleanAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`BooleanAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
								this.$value$slot = nil;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`BooleanAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`BooleanAST";
						this.slots = [];
						this.methods = [new MM("withValue:", true, null)];
						this.nestedClasses = [];
						this.$withValue$ = (function ($b) {
							return (new this.nonMeta.basicNew()).$instance$initializer($b);
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`BooleanAST";
								this.$withValue$ = this._$withValue$ = $.$withValue$;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$BooleanAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$BooleanAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`ConditionalAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`ConditionalAST";
					this.header = "ConditionalAST if: cond is: ifTrue_ then: t else: e = AST (|\r	public condition <ExpressionAST> = cond.\r	public ifTrue = ifTrue_.\r	public then <CodeBodyAST> = t.\r	public else <CodeBodyAST> = e.\r	public forValue <Boolean>\r|assert: [then isCodeBodyNode] message: ''.\r	assert: [else isCodeBodyNode] message: ''.\r	assert: [then parameters size = 0] message: ''.\r	assert: [else parameters size = 0] message: '')";
					this.slots = [
						new SM("condition", false, false),
						new SM("ifTrue", false, false),
						new SM("then", false, false),
						new SM("else", false, false),
						new SM("forValue", true, false)
					];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`ConditionalAST", true, "AST"),
						new MM("instance`initializer", true, "AST"),
						new MM("isExpressionNode", false, "public isExpressionNode ^<Boolean> = (\r	^forValue\r)"),
						new MM("apply:", false, "public apply: tool <ASTTool> = (\r	^tool conditionalNode: self\r)"),
						new MM("condition", true, null),
						new MM("setOnce`condition:", true, null),
						new MM("ifTrue", true, null),
						new MM("setOnce`ifTrue:", true, null),
						new MM("then", true, null),
						new MM("setOnce`then:", true, null),
						new MM("else", true, null),
						new MM("setOnce`else:", true, null),
						new MM("forValue", true, null),
						new MM("forValue:", true, null)
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = (function ($cond, $ifTrue_, $t, $e) {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function ($cond, $ifTrue_, $t, $e) {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$ConditionalAST($cond, $ifTrue_, $t, $e);
						self._$setOnce$condition$($cond);
						self._$setOnce$ifTrue$($ifTrue_);
						self._$setOnce$then$($t);
						self._$setOnce$else$($e);
						self._$assert$message$((function () {
							return self._$then().$isCodeBodyNode();
						}), "");
						self._$assert$message$((function () {
							return self._$else().$isCodeBodyNode();
						}), "");
						self._$assert$message$((function () {
							return self._$then().$parameters().$size().$$equal(0);
						}), "");
						self._$assert$message$((function () {
							return self._$else().$parameters().$size().$$equal(0);
						}), "");
						return self;
					});
					this.$isExpressionNode = (function () {
						var self = this;
						return self._$forValue();
					});
					this.$apply$ = (function ($tool) {
						var self = this;
						return $tool.$conditionalNode$(self);
					});
					this.$condition = (function () {
						return this.$condition$slot;
					});
					this.$setOnce$condition$ = (function (v) {
						this.$condition$slot = v;
						return this;
					});
					this.$ifTrue = (function () {
						return this.$ifTrue$slot;
					});
					this.$setOnce$ifTrue$ = (function (v) {
						this.$ifTrue$slot = v;
						return this;
					});
					this.$then = (function () {
						return this.$then$slot;
					});
					this.$setOnce$then$ = (function (v) {
						this.$then$slot = v;
						return this;
					});
					this.$else = (function () {
						return this.$else$slot;
					});
					this.$setOnce$else$ = (function (v) {
						this.$else$slot = v;
						return this;
					});
					this.$forValue = (function () {
						return this.$forValue$slot;
					});
					this.$forValue$ = (function (v) {
						this.$forValue$slot = v;
						return this;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`ConditionalAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$ConditionalAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$ConditionalAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$condition = this._$condition = $.$condition;
							this.$setOnce$condition$ = this._$setOnce$condition$ = $.$setOnce$condition$;
							this.$ifTrue = this._$ifTrue = $.$ifTrue;
							this.$setOnce$ifTrue$ = this._$setOnce$ifTrue$ = $.$setOnce$ifTrue$;
							this.$then = this._$then = $.$then;
							this.$setOnce$then$ = this._$setOnce$then$ = $.$setOnce$then$;
							this.$else = this._$else = $.$else;
							this.$setOnce$else$ = this._$setOnce$else$ = $.$setOnce$else$;
							this.$forValue = this._$forValue = $.$forValue;
							this.$forValue$ = this._$forValue$ = $.$forValue$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`ConditionalAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
								this.$condition$slot = nil;
								this.$ifTrue$slot = nil;
								this.$then$slot = nil;
								this.$else$slot = nil;
								this.$forValue$slot = nil;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`ConditionalAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`ConditionalAST";
						this.slots = [];
						this.methods = [
							new MM("if:is:then:else:", true, null),
							new MM("if:is:then:", false, "public if: cond <ExpressionAST> is: val <Boolean> then: t <BlockAST> ^<Instance> = (\r	^self if: cond is: val then: t else: emptyBody\r)")
						];
						this.nestedClasses = [];
						this.$if$is$then$else$ = (function ($cond, $ifTrue_, $t, $e) {
							return (new this.nonMeta.basicNew()).$instance$initializer($cond, $ifTrue_, $t, $e);
						});
						this.$if$is$then$ = (function ($cond, $val, $t) {
							var self = this;
							return self._$if$is$then$else$($cond, $val, $t, self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ConditionalAST[0]._$emptyBody());
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`ConditionalAST";
								this.$if$is$then$else$ = this._$if$is$then$else$ = $.$if$is$then$else$;
								this.$if$is$then$ = this._$if$is$then$ = $.$if$is$then$;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$ContextAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`ContextAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`ContextAST";
					this.header = "ContextAST = AST ()";
					this.slots = [];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`ContextAST", true, "AST"),
						new MM("instance`initializer", true, "AST"),
						new MM("apply:", false, "public apply: tool <ASTTool > ^ <Self> = (\r	^tool contextNode: self\r)"),
						new MM("isContextNode", false, "public isContextNode = (\r	^true\r)"),
						new MM("printOn:", false, "public printOn: stream = (\r	stream nextPutAll: 'ContextAST'\r)")
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$ContextAST = (function () {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$ContextAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function () {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$ContextAST();
						return self;
					});
					this.$apply$ = (function ($tool) {
						var self = this;
						return $tool.$contextNode$(self);
					});
					this.$isContextNode = (function () {
						var self = this;
						return true;
					});
					this.$printOn$ = (function ($stream) {
						var self = this;
						$stream.$nextPutAll$("ContextAST");
						return self;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`ContextAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$ContextAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$ContextAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$ContextAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$ContextAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$isContextNode = this._$isContextNode = $.$isContextNode;
							this.$printOn$ = this._$printOn$ = $.$printOn$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ContextAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$ContextAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`ContextAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`ContextAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`ContextAST";
						this.slots = [];
						this.methods = [new MM("new", true, null)];
						this.nestedClasses = [];
						this.$new = (function () {
							return (new this.nonMeta.basicNew()).$instance$initializer();
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`ContextAST";
								this.$new = this._$new = $.$new;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ContextAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$ContextAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST";
					this.header = "EnclosingObjectAST = AST ((* See mailing list for debate over 'outer Foo' as an expression. *)| \r	public depth <Integer>\r|)";
					this.slots = [new SM("depth", true, false)];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST", true, "AST"),
						new MM("instance`initializer", true, "AST"),
						new MM("isExplicitRcvrNode", false, "public isExplicitRcvrNode = (\r	^true\r)"),
						new MM("isExpressionNode", false, "public isExpressionNode ^<Boolean> = (\r	^true\r)"),
						new MM("apply:", false, "public apply: tool <ASTTool> = (\r	^tool enclosingObjectNode: self\r)"),
						new MM("depth", true, null),
						new MM("depth:", true, null)
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = (function () {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function () {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST();
						return self;
					});
					this.$isExplicitRcvrNode = (function () {
						var self = this;
						return true;
					});
					this.$isExpressionNode = (function () {
						var self = this;
						return true;
					});
					this.$apply$ = (function ($tool) {
						var self = this;
						return $tool.$enclosingObjectNode$(self);
					});
					this.$depth = (function () {
						return this.$depth$slot;
					});
					this.$depth$ = (function (v) {
						this.$depth$slot = v;
						return this;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$isExplicitRcvrNode = this._$isExplicitRcvrNode = $.$isExplicitRcvrNode;
							this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$depth = this._$depth = $.$depth;
							this.$depth$ = this._$depth$ = $.$depth$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
								this.$depth$slot = nil;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST";
						this.slots = [];
						this.methods = [new MM("new", true, null)];
						this.nestedClasses = [];
						this.$new = (function () {
							return (new this.nonMeta.basicNew()).$instance$initializer();
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`EnclosingObjectAST";
								this.$new = this._$new = $.$new;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST";
					this.header = "ImplicitReceiverSendAST = SendAST (|\rpublic depth <Integer> (* Used on targets that don't have implicit receiver lookup at runtime. *)\rpublic binding <ClassEntry | SlotEntry | MethodEntry>\r|)";
					this.slots = [
						new SM("depth", true, false),
						new SM("binding", true, false)
					];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST", true, "SendAST"),
						new MM("instance`initializer", true, "SendAST"),
						new MM("isImplicitReceiverSendNode", false, "public isImplicitReceiverSendNode ^<Boolean> = (\r	^true\r)"),
						new MM("apply:", false, "public apply: tool <ASTTool> = (\r	^tool implicitReceiverSendNode: self\r)"),
						new MM("depth", true, null),
						new MM("depth:", true, null),
						new MM("binding", true, null),
						new MM("binding:", true, null)
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = (function () {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function () {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST();
						return self;
					});
					this.$isImplicitReceiverSendNode = (function () {
						var self = this;
						return true;
					});
					this.$apply$ = (function ($tool) {
						var self = this;
						return $tool.$implicitReceiverSendNode$(self);
					});
					this.$depth = (function () {
						return this.$depth$slot;
					});
					this.$depth$ = (function (v) {
						this.$depth$slot = v;
						return this;
					});
					this.$binding = (function () {
						return this.$binding$slot;
					});
					this.$binding$ = (function (v) {
						this.$binding$slot = v;
						return this;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$isImplicitReceiverSendNode = this._$isImplicitReceiverSendNode = $.$isImplicitReceiverSendNode;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$depth = this._$depth = $.$depth;
							this.$depth$ = this._$depth$ = $.$depth$;
							this.$binding = this._$binding = $.$binding;
							this.$binding$ = this._$binding$ = $.$binding$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
								this.$depth$slot = nil;
								this.$binding$slot = nil;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST";
						this.slots = [];
						this.methods = [new MM("new", true, null)];
						this.nestedClasses = [];
						this.$new = (function () {
							return (new this.nonMeta.basicNew()).$instance$initializer();
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`ImplicitReceiverSendAST";
								this.$new = this._$new = $.$new;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`LocalReadAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`LocalReadAST";
					this.header = "LocalReadAST of: var = AST (|\r	public variable = var.\r|)";
					this.slots = [new SM("variable", false, false)];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`LocalReadAST", true, "AST"),
						new MM("instance`initializer", true, "AST"),
						new MM("apply:", false, "public apply: visitor = (\r	^visitor localReadNode: self\r)"),
						new MM("isExpressionNode", false, "public isExpressionNode ^<Boolean> = (\r	^true\r)"),
						new MM("name", false, "public name = (\r	^variable ast name\r)"),
						new MM("variable", true, null),
						new MM("setOnce`variable:", true, null)
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = (function ($var) {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function ($var) {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$LocalReadAST($var);
						self._$setOnce$variable$($var);
						return self;
					});
					this.$apply$ = (function ($visitor) {
						var self = this;
						return $visitor.$localReadNode$(self);
					});
					this.$isExpressionNode = (function () {
						var self = this;
						return true;
					});
					this.$name = (function () {
						var self = this;
						return self._$variable().$ast().$name();
					});
					this.$variable = (function () {
						return this.$variable$slot;
					});
					this.$setOnce$variable$ = (function (v) {
						this.$variable$slot = v;
						return this;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`LocalReadAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$LocalReadAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$LocalReadAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
							this.$name = this._$name = $.$name;
							this.$variable = this._$variable = $.$variable;
							this.$setOnce$variable$ = this._$setOnce$variable$ = $.$setOnce$variable$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`LocalReadAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
								this.$variable$slot = nil;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`LocalReadAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`LocalReadAST";
						this.slots = [];
						this.methods = [new MM("of:", true, null)];
						this.nestedClasses = [];
						this.$of$ = (function ($var) {
							return (new this.nonMeta.basicNew()).$instance$initializer($var);
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`LocalReadAST";
								this.$of$ = this._$of$ = $.$of$;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`LocalWriteAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`LocalWriteAST";
					this.header = "LocalWriteAST to: var assign: val = AST (|\r	public variable = var.\r	public value = val.\r|)";
					this.slots = [
						new SM("variable", false, false),
						new SM("value", false, false)
					];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`LocalWriteAST", true, "AST"),
						new MM("instance`initializer", true, "AST"),
						new MM("apply:", false, "public apply: visitor = (\r	^visitor localWriteNode: self\r)"),
						new MM("isExpressionNode", false, "public isExpressionNode ^<Boolean> = (\r	^true\r)"),
						new MM("name", false, "public name = (\r	^variable ast name\r)"),
						new MM("variable", true, null),
						new MM("setOnce`variable:", true, null),
						new MM("value", true, null),
						new MM("setOnce`value:", true, null)
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = (function ($var, $val) {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function ($var, $val) {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST($var, $val);
						self._$setOnce$variable$($var);
						self._$setOnce$value$($val);
						return self;
					});
					this.$apply$ = (function ($visitor) {
						var self = this;
						return $visitor.$localWriteNode$(self);
					});
					this.$isExpressionNode = (function () {
						var self = this;
						return true;
					});
					this.$name = (function () {
						var self = this;
						return self._$variable().$ast().$name();
					});
					this.$variable = (function () {
						return this.$variable$slot;
					});
					this.$setOnce$variable$ = (function (v) {
						this.$variable$slot = v;
						return this;
					});
					this.$value = (function () {
						return this.$value$slot;
					});
					this.$setOnce$value$ = (function (v) {
						this.$value$slot = v;
						return this;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`LocalWriteAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
							this.$name = this._$name = $.$name;
							this.$variable = this._$variable = $.$variable;
							this.$setOnce$variable$ = this._$setOnce$variable$ = $.$setOnce$variable$;
							this.$value = this._$value = $.$value;
							this.$setOnce$value$ = this._$setOnce$value$ = $.$setOnce$value$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`LocalWriteAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
								this.$variable$slot = nil;
								this.$value$slot = nil;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`LocalWriteAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`LocalWriteAST";
						this.slots = [];
						this.methods = [new MM("to:assign:", true, null)];
						this.nestedClasses = [];
						this.$to$assign$ = (function ($var, $val) {
							return (new this.nonMeta.basicNew()).$instance$initializer($var, $val);
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`LocalWriteAST";
								this.$to$assign$ = this._$to$assign$ = $.$to$assign$;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$LoopAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`LoopAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`LoopAST";
					this.header = "LoopAST = AST ((* This node represents a while loop. The general form of the loop is:\r\rprologue; while (cond = whileTrue) { body}\r\r*)|\r	public prologue <CodeBodyAST> ::= emptyBody.\r	public condition <CodeBodyAST>\r	public isWhileTrue <Boolean>\r	public body <CodeBodyAST>\r	public forValue <Boolean>\r|)";
					this.slots = [
						new SM("prologue", true, false),
						new SM("condition", true, false),
						new SM("isWhileTrue", true, false),
						new SM("body", true, false),
						new SM("forValue", true, false)
					];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`LoopAST", true, "AST"),
						new MM("instance`initializer", true, "AST"),
						new MM("do:timesRepeat:", false, "public do: n <Integer> timesRepeat: b <BlockAST> = (\r	|\r	skope <Scope>\r	loopVarName <Symbol>\r	var <ParameterAST>\r	|\r	skope:: scopeMap at: b.\r\r	(* introduce counter variable *)\r	loopVarName:: '.i' asSymbol.\r	var:: (ParameterAST name: loopVarName type: nil)\r		start: b start; end: b end.	\r	skope\r		at: loopVarName\r		put: (LocalEntry forDeclaration: var atDepth: 0)\r		ifThere: [ halt ].\r	assert: [b parameters isEmpty].\r	b parameters add: var.\r\r	(* translate n timesRepeat: [blockBody]\r	into 1 to: n do: [ :.i | blockBody] *)\r	from: (NumberAST new value: 1; start: b start; end: b end) to: n do: b\r)"),
						new MM("from:to:by:do:", false, "public from: first <AST> to: last <AST> by: step <AST> do: block <BlockAST> = (\r	|\r	blockScope		<Scope>	\r	counterVar		<TemporaryAST>\r	counterEntry	\r	counter		<TemporaryVariableAST>\r	limitNeeded		<Boolean>\r	limitName		<Symbol>\r	limitVar		<TemporaryAST>\r	limitEntry\r	limit			<LiteralAST | VariableAST>\r	condSel			<Symbol>\r	condArg		<MutableList[ExpressionAST]>\r	condExpr		<ExpressionAST>\r	condBody		<CodeBodyAST>\r	condStats		<MutableList[StatementAST]>\r	incArg			<MutableList[ExpressionAST]>\r	incExpr			<ExpressionAST>\r	incStat			<StatementAST>\r	|\r	(* preliminaries *)\r	assert: [ step isNumberNode and: [step value isInteger] ].\r	assert: [ block isBlockNode ].\r	blockScope:: scopeMap at: block body.\r\r	(* loop counter (= block parameter) *)\r	counterVar:: TemporaryAST name: block parameters removeFirst name type: nil.\r	counterEntry:: LocalEntry forDeclaration: counterVar atDepth: nil.\r	counter:: (LocalReadAST of: counterEntry) start: block start; end: block end.\r	\r	(* introduce counter limit variable if needed *)\r	(limitNeeded:: last isLiteralNode not)\r		ifFalse:\r			[(* no limit variable needed - use last directly since there's no computation involved *)\r			limit:: last]\r		ifTrue:\r			[limitName:: '.limit' asSymbol.\r			 limitVar:: TemporaryAST name: limitName type: nil.\r			 limitVar start: block start; end: block end.\r			 limitEntry:: LocalEntry forDeclaration: limitVar atDepth: nil.\r			 prologue temporaries add: limitVar.\r			 blockScope at: limitName put: limitEntry ifThere: [ assert: [false] ].\r			 limit:: (LocalReadAST of: limitEntry) start: block start; end: block end].\r	\r	(* setup loop condition => introduce condition block for whileTrue: loop *)\r	condSel:: step value < 0 ifTrue: [ #<= ] ifFalse: [ #>= ].\r	condArg:: OrderedCollection new add: counter; yourself.\r	condExpr:: OrdinarySendAST to: limit send: (MessageAST new send: condSel with: condArg).\r	(* limit <= counter OR limit >= counter *)\r	condStats:: OrderedCollection new add: condExpr ; yourself.\r	condBody::\r		CodeBodyAST new\r			parameters: OrderedCollection new;\r			temporaries: OrderedCollection new;\r			statements: condStats;\r			start: block start; end: block end.\r	scopeMap at: condBody put: nil.\r\r	(* add counter increment to loop body *)\r	incArg:: OrderedCollection new add: counter ; yourself.\r	incExpr:: OrdinarySendAST to: step send: (MessageAST new send: #+ with: incArg).\r	incExpr start: block start; end: block end.\r	(* step + counter *)\r	incStat:: LocalWriteAST to: counterEntry assign: incExpr. \r	incStat start: block start; end: block end.\r	(* counter := step + counter *)\r	block body statements add: incStat.\r\r	(* setup prologue *)\r	prologue temporaries add: counterVar.\r	prologue statements add: (LocalWriteAST to: counterEntry assign: first).\r	(* counter := first *)\r	limitNeeded ifTrue: [\r		(* initialize limit variable - note that this must be done *after* setting up the counter because of possible side effects *)\r		prologue statements add: (LocalWriteAST to: limitEntry assign: last). (* .limit := last *)\r	].\r	\r	(* initialize loop instance variables *)\r	condition:: condBody.\r	isWhileTrue:: true.\r	body:: block body\r)"),
						new MM("from:to:do:", false, "public from: first <AST> to: last <AST> do: block <BlockAST> = (\r	from: first to: last by: (NumberAST new value: 1) do: block\r)"),
						new MM("repeat:", false, "public repeat: b = (\r    assert: [b isCodeBodyNode].\r    condition:: b.\r    condition statements add: ((BooleanAST withValue: true) start: condition end; end: condition end).\r    isWhileTrue:: true.\r    body:: emptyBody.\r)"),
						new MM("while:do:", false, "public while: v <Boolean> do: b <BlockAST> = (\r    assert: [b isCodeBodyNode].\r    condition:: b.\r    isWhileTrue:: v.\r    body:: emptyBody\r)"),
						new MM("while:is:do:", false, "public while: b1  is: v <Boolean> do: b2 = (\r    assert: [b1 isCodeBodyNode].\r    assert: [b2 isCodeBodyNode].\r    condition:: b1.\r    isWhileTrue:: v.\r    body:: b2.\r)"),
						new MM("isExpressionNode", false, "public isExpressionNode ^<Boolean> = (\r	^forValue\r)"),
						new MM("apply:", false, "public apply: aTool <ASTTool> = (\r	^aTool loopNode: self\r)"),
						new MM("prologue", true, null),
						new MM("prologue:", true, null),
						new MM("condition", true, null),
						new MM("condition:", true, null),
						new MM("isWhileTrue", true, null),
						new MM("isWhileTrue:", true, null),
						new MM("body", true, null),
						new MM("body:", true, null),
						new MM("forValue", true, null),
						new MM("forValue:", true, null)
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$LoopAST = (function () {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function () {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$LoopAST();
						self._$prologue$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$emptyBody());
						return self;
					});
					this.$do$timesRepeat$ = (function ($n, $b) {
						var self = this;
						var $skope = nil;
						var $loopVarName = nil;
						var $var = nil;
						$skope = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[1]._$scopeMap().$at$($b);
						$loopVarName = (".i").$asSymbol();
						$var = (function (cascadeReceiver) {
							cascadeReceiver.$start$($b.$start());
							return cascadeReceiver.$end$($b.$end());
						})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$ParameterAST().$name$type$($loopVarName, nil));
						$skope.$at$put$ifThere$($loopVarName, self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$LocalEntry().$forDeclaration$atDepth$($var, 0), (function () {
							return self._$halt();
						}));
						self._$assert$((function () {
							return $b.$parameters().$isEmpty();
						}));
						$b.$parameters().$add$($var);
						self._$from$to$do$((function (cascadeReceiver) {
							cascadeReceiver.$value$(1);
							cascadeReceiver.$start$($b.$start());
							return cascadeReceiver.$end$($b.$end());
						})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$NumberAST().$new()), $n, $b);
						return self;
					});
					this.$from$to$by$do$ = (function ($first, $last, $step, $block) {
						var self = this;
						var $blockScope = nil;
						var $counterVar = nil;
						var $counterEntry = nil;
						var $counter = nil;
						var $limitNeeded = nil;
						var $limitName = nil;
						var $limitVar = nil;
						var $limitEntry = nil;
						var $limit = nil;
						var $condSel = nil;
						var $condArg = nil;
						var $condExpr = nil;
						var $condBody = nil;
						var $condStats = nil;
						var $incArg = nil;
						var $incExpr = nil;
						var $incStat = nil;
						self._$assert$((function () {
							return $step.$isNumberNode() && $step.$value().$isInteger();
						}));
						self._$assert$((function () {
							return $block.$isBlockNode();
						}));
						$blockScope = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[1]._$scopeMap().$at$($block.$body());
						$counterVar = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$TemporaryAST().$name$type$($block.$parameters().$removeFirst().$name(), nil);
						$counterEntry = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$LocalEntry().$forDeclaration$atDepth$($counterVar, nil);
						$counter = (function (cascadeReceiver) {
							cascadeReceiver.$start$($block.$start());
							return cascadeReceiver.$end$($block.$end());
						})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$LocalReadAST().$of$($counterEntry));
						if (!($limitNeeded = $last.$isLiteralNode().$not())) {
							$limit = $last;
						} else {
							$limitName = (".limit").$asSymbol();
							$limitVar = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$TemporaryAST().$name$type$($limitName, nil);
							(function (cascadeReceiver) {
								cascadeReceiver.$start$($block.$start());
								return cascadeReceiver.$end$($block.$end());
							})($limitVar);
							$limitEntry = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$LocalEntry().$forDeclaration$atDepth$($limitVar, nil);
							self._$prologue().$temporaries().$add$($limitVar);
							$blockScope.$at$put$ifThere$($limitName, $limitEntry, (function () {
								return self._$assert$((function () {
									return false;
								}));
							}));
							$limit = (function (cascadeReceiver) {
								cascadeReceiver.$start$($block.$start());
								return cascadeReceiver.$end$($block.$end());
							})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$LocalReadAST().$of$($limitEntry));
						};
						$condSel = ($step.$value() < 0).$ifTrue$ifFalse$((function () {
							return "<=";
						}), (function () {
							return ">=";
						}));
						$condArg = (function (cascadeReceiver) {
							cascadeReceiver.$add$($counter);
							return cascadeReceiver.$yourself();
						})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$OrderedCollection().$new());
						$condExpr = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$OrdinarySendAST().$to$send$($limit, self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$MessageAST().$new().$send$with$($condSel, $condArg));
						$condStats = (function (cascadeReceiver) {
							cascadeReceiver.$add$($condExpr);
							return cascadeReceiver.$yourself();
						})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$OrderedCollection().$new());
						$condBody = (function (cascadeReceiver) {
							cascadeReceiver.$parameters$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$OrderedCollection().$new());
							cascadeReceiver.$temporaries$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$OrderedCollection().$new());
							cascadeReceiver.$statements$($condStats);
							cascadeReceiver.$start$($block.$start());
							return cascadeReceiver.$end$($block.$end());
						})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$CodeBodyAST().$new());
						self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[1]._$scopeMap().$at$put$($condBody, nil);
						$incArg = (function (cascadeReceiver) {
							cascadeReceiver.$add$($counter);
							return cascadeReceiver.$yourself();
						})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$OrderedCollection().$new());
						$incExpr = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$OrdinarySendAST().$to$send$($step, self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$MessageAST().$new().$send$with$("+", $incArg));
						(function (cascadeReceiver) {
							cascadeReceiver.$start$($block.$start());
							return cascadeReceiver.$end$($block.$end());
						})($incExpr);
						$incStat = self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$LocalWriteAST().$to$assign$($counterEntry, $incExpr);
						(function (cascadeReceiver) {
							cascadeReceiver.$start$($block.$start());
							return cascadeReceiver.$end$($block.$end());
						})($incStat);
						$block.$body().$statements().$add$($incStat);
						self._$prologue().$temporaries().$add$($counterVar);
						self._$prologue().$statements().$add$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$LocalWriteAST().$to$assign$($counterEntry, $first));
						if ($limitNeeded) {
							self._$prologue().$statements().$add$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$LocalWriteAST().$to$assign$($limitEntry, $last));
						} else {
							nil;
						};
						self._$condition$($condBody);
						self._$isWhileTrue$(true);
						self._$body$($block.$body());
						return self;
					});
					this.$from$to$do$ = (function ($first, $last, $block) {
						var self = this;
						self._$from$to$by$do$($first, $last, self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[2]._$NumberAST().$new().$value$(1), $block);
						return self;
					});
					this.$repeat$ = (function ($b) {
						var self = this;
						self._$assert$((function () {
							return $b.$isCodeBodyNode();
						}));
						self._$condition$($b);
						self._$condition().$statements().$add$((function (cascadeReceiver) {
							cascadeReceiver.$start$(self._$condition().$end());
							return cascadeReceiver.$end$(self._$condition().$end());
						})(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$BooleanAST().$withValue$(true)));
						self._$isWhileTrue$(true);
						self._$body$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$emptyBody());
						return self;
					});
					this.$while$do$ = (function ($v, $b) {
						var self = this;
						self._$assert$((function () {
							return $b.$isCodeBodyNode();
						}));
						self._$condition$($b);
						self._$isWhileTrue$($v);
						self._$body$(self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST[0]._$emptyBody());
						return self;
					});
					this.$while$is$do$ = (function ($b1, $v, $b2) {
						var self = this;
						self._$assert$((function () {
							return $b1.$isCodeBodyNode();
						}));
						self._$assert$((function () {
							return $b2.$isCodeBodyNode();
						}));
						self._$condition$($b1);
						self._$isWhileTrue$($v);
						self._$body$($b2);
						return self;
					});
					this.$isExpressionNode = (function () {
						var self = this;
						return self._$forValue();
					});
					this.$apply$ = (function ($aTool) {
						var self = this;
						return $aTool.$loopNode$(self);
					});
					this.$prologue = (function () {
						return this.$prologue$slot;
					});
					this.$prologue$ = (function (v) {
						this.$prologue$slot = v;
						return this;
					});
					this.$condition = (function () {
						return this.$condition$slot;
					});
					this.$condition$ = (function (v) {
						this.$condition$slot = v;
						return this;
					});
					this.$isWhileTrue = (function () {
						return this.$isWhileTrue$slot;
					});
					this.$isWhileTrue$ = (function (v) {
						this.$isWhileTrue$slot = v;
						return this;
					});
					this.$body = (function () {
						return this.$body$slot;
					});
					this.$body$ = (function (v) {
						this.$body$slot = v;
						return this;
					});
					this.$forValue = (function () {
						return this.$forValue$slot;
					});
					this.$forValue$ = (function (v) {
						this.$forValue$slot = v;
						return this;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`LoopAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$LoopAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$LoopAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$LoopAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$LoopAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$do$timesRepeat$ = this._$do$timesRepeat$ = $.$do$timesRepeat$;
							this.$from$to$by$do$ = this._$from$to$by$do$ = $.$from$to$by$do$;
							this.$from$to$do$ = this._$from$to$do$ = $.$from$to$do$;
							this.$repeat$ = this._$repeat$ = $.$repeat$;
							this.$while$do$ = this._$while$do$ = $.$while$do$;
							this.$while$is$do$ = this._$while$is$do$ = $.$while$is$do$;
							this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$prologue = this._$prologue = $.$prologue;
							this.$prologue$ = this._$prologue$ = $.$prologue$;
							this.$condition = this._$condition = $.$condition;
							this.$condition$ = this._$condition$ = $.$condition$;
							this.$isWhileTrue = this._$isWhileTrue = $.$isWhileTrue;
							this.$isWhileTrue$ = this._$isWhileTrue$ = $.$isWhileTrue$;
							this.$body = this._$body = $.$body;
							this.$body$ = this._$body$ = $.$body$;
							this.$forValue = this._$forValue = $.$forValue;
							this.$forValue$ = this._$forValue$ = $.$forValue$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`LoopAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
								this.$prologue$slot = nil;
								this.$condition$slot = nil;
								this.$isWhileTrue$slot = nil;
								this.$body$slot = nil;
								this.$forValue$slot = nil;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`LoopAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`LoopAST";
						this.slots = [];
						this.methods = [new MM("new", true, null)];
						this.nestedClasses = [];
						this.$new = (function () {
							return (new this.nonMeta.basicNew()).$instance$initializer();
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`LoopAST";
								this.$new = this._$new = $.$new;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$LoopAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$LoopAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST";
					this.header = "MethodLocalReturnAST expression: e = ReturnAST expression: e ()";
					this.slots = [];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST", true, "expression: e"),
						new MM("instance`initializer", true, "expression: e"),
						new MM("apply:", false, "public apply: visitor = (\r	^visitor methodLocalReturnNode: self\r)")
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = (function ($e) {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot._$instance$initializer.call(self, $e);
						return self;
					});
					this.$instance$initializer = (function ($e) {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST($e);
						return self;
					});
					this.$apply$ = (function ($visitor) {
						var self = this;
						return $visitor.$methodLocalReturnNode$(self);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST";
						this.slots = [];
						this.methods = [new MM("expression:", true, null)];
						this.nestedClasses = [];
						this.$expression$ = (function ($e) {
							return (new this.nonMeta.basicNew()).$instance$initializer($e);
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`MethodLocalReturnAST";
								this.$expression$ = this._$expression$ = $.$expression$;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$NilAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`NilAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`NilAST";
					this.header = "NilAST = AST ()";
					this.slots = [];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`NilAST", true, "AST"),
						new MM("instance`initializer", true, "AST"),
						new MM("apply:", false, "public apply: tool <ASTTool > = (\r	^tool nilNode: self\r)"),
						new MM("isNilNode", false, "public isNilNode = (\r	^true\r)"),
						new MM("name", false, "public name = (\r	^#nil\r)")
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$NilAST = (function () {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$NilAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function () {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$NilAST();
						return self;
					});
					this.$apply$ = (function ($tool) {
						var self = this;
						return $tool.$nilNode$(self);
					});
					this.$isNilNode = (function () {
						var self = this;
						return true;
					});
					this.$name = (function () {
						var self = this;
						return "nil";
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`NilAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$NilAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$NilAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$NilAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$NilAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$isNilNode = this._$isNilNode = $.$isNilNode;
							this.$name = this._$name = $.$name;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$NilAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$NilAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`NilAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`NilAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`NilAST";
						this.slots = [];
						this.methods = [new MM("new", true, null)];
						this.nestedClasses = [];
						this.$new = (function () {
							return (new this.nonMeta.basicNew()).$instance$initializer();
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`NilAST";
								this.$new = this._$new = $.$new;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$NilAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$NilAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST";
					this.header = "NonlocalReturnAST expression: e = ReturnAST expression: e ()";
					this.slots = [];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST", true, "expression: e"),
						new MM("instance`initializer", true, "expression: e"),
						new MM("apply:", false, "public apply: visitor = (\r	^visitor nonLocalReturnNode: self\r)")
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = (function ($e) {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot._$instance$initializer.call(self, $e);
						return self;
					});
					this.$instance$initializer = (function ($e) {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST($e);
						return self;
					});
					this.$apply$ = (function ($visitor) {
						var self = this;
						return $visitor.$nonLocalReturnNode$(self);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST";
						this.slots = [];
						this.methods = [new MM("expression:", true, null)];
						this.nestedClasses = [];
						this.$expression$ = (function ($e) {
							return (new this.nonMeta.basicNew()).$instance$initializer($e);
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`NonlocalReturnAST";
								this.$expression$ = this._$expression$ = $.$expression$;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST";
					this.header = "OrdinarySendAST to: rcvr send: msg = SendAST (|\r	public receiver = rcvr.\r	public message = msg.\r|)";
					this.slots = [
						new SM("receiver", false, false),
						new SM("message", false, false)
					];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST", true, "SendAST"),
						new MM("instance`initializer", true, "SendAST"),
						new MM("apply:", false, "public apply: aTool <ASTTool> = (\r	^aTool ordinarySendNode: self\r)"),
						new MM("isNormalSendNode", false, "public isNormalSendNode = (\r	^true\r)"),
						new MM("receiver", true, null),
						new MM("setOnce`receiver:", true, null),
						new MM("message", true, null),
						new MM("setOnce`message:", true, null)
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = (function ($rcvr, $msg) {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function ($rcvr, $msg) {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST($rcvr, $msg);
						self._$setOnce$receiver$($rcvr);
						self._$setOnce$message$($msg);
						return self;
					});
					this.$apply$ = (function ($aTool) {
						var self = this;
						return $aTool.$ordinarySendNode$(self);
					});
					this.$isNormalSendNode = (function () {
						var self = this;
						return true;
					});
					this.$receiver = (function () {
						return this.$receiver$slot;
					});
					this.$setOnce$receiver$ = (function (v) {
						this.$receiver$slot = v;
						return this;
					});
					this.$message = (function () {
						return this.$message$slot;
					});
					this.$setOnce$message$ = (function (v) {
						this.$message$slot = v;
						return this;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$isNormalSendNode = this._$isNormalSendNode = $.$isNormalSendNode;
							this.$receiver = this._$receiver = $.$receiver;
							this.$setOnce$receiver$ = this._$setOnce$receiver$ = $.$setOnce$receiver$;
							this.$message = this._$message = $.$message;
							this.$setOnce$message$ = this._$setOnce$message$ = $.$setOnce$message$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
								this.$receiver$slot = nil;
								this.$message$slot = nil;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST";
						this.slots = [];
						this.methods = [new MM("to:send:", true, null)];
						this.nestedClasses = [];
						this.$to$send$ = (function ($rcvr, $msg) {
							return (new this.nonMeta.basicNew()).$instance$initializer($rcvr, $msg);
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`OrdinarySendAST";
								this.$to$send$ = this._$to$send$ = $.$to$send$;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`OuterSendAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`OuterSendAST";
					this.header = "OuterSendAST = SendAST (|\rpublic depth <Integer>\rpublic binding <ClassEntry | SlotEntry | MethodEntry>\r|)";
					this.slots = [
						new SM("depth", true, false),
						new SM("binding", true, false)
					];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`OuterSendAST", true, "SendAST"),
						new MM("instance`initializer", true, "SendAST"),
						new MM("isOuterSendNode", false, "public isOuterSendNode ^<Boolean> = (\r	^true\r)"),
						new MM("apply:", false, "public apply: tool <ASTTool> = (\r	^tool outerSendNode: self\r)"),
						new MM("depth", true, null),
						new MM("depth:", true, null),
						new MM("binding", true, null),
						new MM("binding:", true, null)
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = (function () {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function () {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$OuterSendAST();
						return self;
					});
					this.$isOuterSendNode = (function () {
						var self = this;
						return true;
					});
					this.$apply$ = (function ($tool) {
						var self = this;
						return $tool.$outerSendNode$(self);
					});
					this.$depth = (function () {
						return this.$depth$slot;
					});
					this.$depth$ = (function (v) {
						this.$depth$slot = v;
						return this;
					});
					this.$binding = (function () {
						return this.$binding$slot;
					});
					this.$binding$ = (function (v) {
						this.$binding$slot = v;
						return this;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`OuterSendAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$OuterSendAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$OuterSendAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$isOuterSendNode = this._$isOuterSendNode = $.$isOuterSendNode;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$depth = this._$depth = $.$depth;
							this.$depth$ = this._$depth$ = $.$depth$;
							this.$binding = this._$binding = $.$binding;
							this.$binding$ = this._$binding$ = $.$binding$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`OuterSendAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
								this.$depth$slot = nil;
								this.$binding$slot = nil;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`OuterSendAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`OuterSendAST";
						this.slots = [];
						this.methods = [new MM("new", true, null)];
						this.nestedClasses = [];
						this.$new = (function () {
							return (new this.nonMeta.basicNew()).$instance$initializer();
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`OuterSendAST";
								this.$new = this._$new = $.$new;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`ParameterAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`ParameterAST";
					this.header = "ParameterAST name: n type: t = AST (|\r	public name = n.\r	public type = t.\r|)";
					this.slots = [
						new SM("name", false, false),
						new SM("type", false, false)
					];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`ParameterAST", true, "AST"),
						new MM("instance`initializer", true, "AST"),
						new MM("apply:", false, "public apply: visitor = (\r	^visitor parameterDeclNode: self\r)"),
						new MM("isVarDeclNode", false, "public isVarDeclNode ^<Boolean> = (\r	^true\r)"),
						new MM("name", true, null),
						new MM("setOnce`name:", true, null),
						new MM("type", true, null),
						new MM("setOnce`type:", true, null)
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$ParameterAST = (function ($n, $t) {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function ($n, $t) {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$ParameterAST($n, $t);
						self._$setOnce$name$($n);
						self._$setOnce$type$($t);
						return self;
					});
					this.$apply$ = (function ($visitor) {
						var self = this;
						return $visitor.$parameterDeclNode$(self);
					});
					this.$isVarDeclNode = (function () {
						var self = this;
						return true;
					});
					this.$name = (function () {
						return this.$name$slot;
					});
					this.$setOnce$name$ = (function (v) {
						this.$name$slot = v;
						return this;
					});
					this.$type = (function () {
						return this.$type$slot;
					});
					this.$setOnce$type$ = (function (v) {
						this.$type$slot = v;
						return this;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`ParameterAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$ParameterAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$ParameterAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$ParameterAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$ParameterAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$isVarDeclNode = this._$isVarDeclNode = $.$isVarDeclNode;
							this.$name = this._$name = $.$name;
							this.$setOnce$name$ = this._$setOnce$name$ = $.$setOnce$name$;
							this.$type = this._$type = $.$type;
							this.$setOnce$type$ = this._$setOnce$type$ = $.$setOnce$type$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ParameterAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`ParameterAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
								this.$name$slot = nil;
								this.$type$slot = nil;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`ParameterAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`ParameterAST";
						this.slots = [];
						this.methods = [new MM("name:type:", true, null)];
						this.nestedClasses = [];
						this.$name$type$ = (function ($n, $t) {
							return (new this.nonMeta.basicNew()).$instance$initializer($n, $t);
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`ParameterAST";
								this.$name$type$ = this._$name$type$ = $.$name$type$;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ParameterAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$ParameterAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`ReceiverAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`ReceiverAST";
					this.header = "ReceiverAST = AST ()";
					this.slots = [];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`ReceiverAST", true, "AST"),
						new MM("instance`initializer", true, "AST"),
						new MM("apply:", false, "public apply: tool = (\r	^tool receiverNode: self\r)"),
						new MM("isExpressionNode", false, "public isExpressionNode = (\r	^true\r)")
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = (function () {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function () {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$ReceiverAST();
						return self;
					});
					this.$apply$ = (function ($tool) {
						var self = this;
						return $tool.$receiverNode$(self);
					});
					this.$isExpressionNode = (function () {
						var self = this;
						return true;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`ReceiverAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$ReceiverAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$ReceiverAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`ReceiverAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`ReceiverAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`ReceiverAST";
						this.slots = [];
						this.methods = [new MM("new", true, null)];
						this.nestedClasses = [];
						this.$new = (function () {
							return (new this.nonMeta.basicNew()).$instance$initializer();
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`ReceiverAST";
								this.$new = this._$new = $.$new;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`ReturnAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`ReturnAST";
					this.header = "ReturnAST expression: e = AST (|\r	public expression <AST> = e.\r|)";
					this.slots = [new SM("expression", false, false)];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`ReturnAST", true, "AST"),
						new MM("instance`initializer", true, "AST"),
						new MM("isExpressionNode", false, "public isExpressionNode = (\r	^false\r)"),
						new MM("isReturnStatNode", false, "public isReturnStatNode = (\r	^true\r)"),
						new MM("expression", true, null),
						new MM("setOnce`expression:", true, null)
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$ReturnAST = (function ($e) {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function ($e) {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$ReturnAST($e);
						self._$setOnce$expression$($e);
						return self;
					});
					this.$isExpressionNode = (function () {
						var self = this;
						return false;
					});
					this.$isReturnStatNode = (function () {
						var self = this;
						return true;
					});
					this.$expression = (function () {
						return this.$expression$slot;
					});
					this.$setOnce$expression$ = (function (v) {
						this.$expression$slot = v;
						return this;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`ReturnAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$ReturnAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$ReturnAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$ReturnAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$ReturnAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
							this.$isReturnStatNode = this._$isReturnStatNode = $.$isReturnStatNode;
							this.$expression = this._$expression = $.$expression;
							this.$setOnce$expression$ = this._$setOnce$expression$ = $.$setOnce$expression$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ReturnAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`ReturnAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
								this.$expression$slot = nil;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`ReturnAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`ReturnAST";
						this.slots = [];
						this.methods = [new MM("expression:", true, null)];
						this.nestedClasses = [];
						this.$expression$ = (function ($e) {
							return (new this.nonMeta.basicNew()).$instance$initializer($e);
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`ReturnAST";
								this.$expression$ = this._$expression$ = $.$expression$;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$ReturnAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$ReturnAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`SelfSendAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`SelfSendAST";
					this.header = "SelfSendAST = SendAST (|\rpublic binding <ClassEntry | SlotEntry | MethodEntry>\r|)";
					this.slots = [new SM("binding", true, false)];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`SelfSendAST", true, "SendAST"),
						new MM("instance`initializer", true, "SendAST"),
						new MM("isSelfSendNode", false, "public isSelfSendNode ^<Boolean> = (\r	^true\r)"),
						new MM("receiver", false, "public receiver = (\r	^ReceiverAST new\r)"),
						new MM("apply:", false, "public apply: tool <ASTTool> = (\r	^tool selfSendNode: self\r)"),
						new MM("binding", true, null),
						new MM("binding:", true, null)
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = (function () {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function () {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$SelfSendAST();
						return self;
					});
					this.$isSelfSendNode = (function () {
						var self = this;
						return true;
					});
					this.$receiver = (function () {
						var self = this;
						return self.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$SelfSendAST[0]._$ReceiverAST().$new();
					});
					this.$apply$ = (function ($tool) {
						var self = this;
						return $tool.$selfSendNode$(self);
					});
					this.$binding = (function () {
						return this.$binding$slot;
					});
					this.$binding$ = (function (v) {
						this.$binding$slot = v;
						return this;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`SelfSendAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$SelfSendAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$SelfSendAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$isSelfSendNode = this._$isSelfSendNode = $.$isSelfSendNode;
							this.$receiver = this._$receiver = $.$receiver;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$binding = this._$binding = $.$binding;
							this.$binding$ = this._$binding$ = $.$binding$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`SelfSendAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
								this.$binding$slot = nil;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`SelfSendAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`SelfSendAST";
						this.slots = [];
						this.methods = [new MM("new", true, null)];
						this.nestedClasses = [];
						this.$new = (function () {
							return (new this.nonMeta.basicNew()).$instance$initializer();
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`SelfSendAST";
								this.$new = this._$new = $.$new;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$SendAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`SendAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`SendAST";
					this.header = "SendAST = AST (|\r	public message <MessageAST>\r|)";
					this.slots = [new SM("message", true, false)];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`SendAST", true, "AST"),
						new MM("instance`initializer", true, "AST"),
						new MM("isExpressionNode", false, "public isExpressionNode = (\r	^true\r)"),
						new MM("isSendNode", false, "public isSendNode = (^true)"),
						new MM("message", true, null),
						new MM("message:", true, null)
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$SendAST = (function () {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$SendAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function () {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$SendAST();
						return self;
					});
					this.$isExpressionNode = (function () {
						var self = this;
						return true;
					});
					this.$isSendNode = (function () {
						var self = this;
						return true;
					});
					this.$message = (function () {
						return this.$message$slot;
					});
					this.$message$ = (function (v) {
						this.$message$slot = v;
						return this;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`SendAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$SendAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$SendAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$SendAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$SendAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$isExpressionNode = this._$isExpressionNode = $.$isExpressionNode;
							this.$isSendNode = this._$isSendNode = $.$isSendNode;
							this.$message = this._$message = $.$message;
							this.$message$ = this._$message$ = $.$message$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$SendAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$SendAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`SendAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
								this.$message$slot = nil;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`SendAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`SendAST";
						this.slots = [];
						this.methods = [new MM("new", true, null)];
						this.nestedClasses = [];
						this.$new = (function () {
							return (new this.nonMeta.basicNew()).$instance$initializer();
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`SendAST";
								this.$new = this._$new = $.$new;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$SendAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$SendAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`SuperSendAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`SuperSendAST";
					this.header = "SuperSendAST = SendAST ()";
					this.slots = [];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`SuperSendAST", true, "SendAST"),
						new MM("instance`initializer", true, "SendAST"),
						new MM("isSuperSendNode", false, "public isSuperSendNode = (\r	^true\r)"),
						new MM("apply:", false, "public apply: tool <ASTTool> = (\r	^tool superSendNode: self\r)")
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = (function () {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function () {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$SuperSendAST();
						return self;
					});
					this.$isSuperSendNode = (function () {
						var self = this;
						return true;
					});
					this.$apply$ = (function ($tool) {
						var self = this;
						return $tool.$superSendNode$(self);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`SuperSendAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$SuperSendAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$SuperSendAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$isSuperSendNode = this._$isSuperSendNode = $.$isSuperSendNode;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`SuperSendAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`SuperSendAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`SuperSendAST";
						this.slots = [];
						this.methods = [new MM("new", true, null)];
						this.nestedClasses = [];
						this.$new = (function () {
							return (new this.nonMeta.basicNew()).$instance$initializer();
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`SuperSendAST";
								this.$new = this._$new = $.$new;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = new (function () {
					var $ = this;
					var $3 = this;
					this.debug = "Runtime mixin for NewspeakCompilation`Compiler`Rewriter`TemporaryAST";
					this.name = "NewspeakCompilation`Compiler`Rewriter`TemporaryAST";
					this.header = "TemporaryAST name: n type: t = AST (|\r	public name = n.\r	public type = t.\r|)";
					this.slots = [
						new SM("name", false, false),
						new SM("type", false, false)
					];
					this.methods = [
						new MM("superInit`NewspeakCompilation`Compiler`Rewriter`TemporaryAST", true, "AST"),
						new MM("instance`initializer", true, "AST"),
						new MM("apply:", false, "public apply: visitor = (\r	^visitor temporaryDeclNode: self\r)"),
						new MM("isTemporaryAST", false, "public isTemporaryAST = (\r	#BOGUS.\r	^true\r)"),
						new MM("isVarDeclNode", false, "public isVarDeclNode ^<Boolean> = (\r	^true\r)"),
						new MM("name", true, null),
						new MM("setOnce`name:", true, null),
						new MM("type", true, null),
						new MM("setOnce`type:", true, null)
					];
					this.nestedClasses = [];
					this.applications = [];
					this.$superInit$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = (function ($n, $t) {
						var self = this;
						self.$super$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot._$instance$initializer.call(self);
						return self;
					});
					this.$instance$initializer = (function ($n, $t) {
						var self = this;
						self._$superInit$NewspeakCompilation$Compiler$Rewriter$TemporaryAST($n, $t);
						self._$setOnce$name$($n);
						self._$setOnce$type$($t);
						return self;
					});
					this.$apply$ = (function ($visitor) {
						var self = this;
						return $visitor.$temporaryDeclNode$(self);
					});
					this.$isTemporaryAST = (function () {
						var self = this;
						"BOGUS";
						return true;
					});
					this.$isVarDeclNode = (function () {
						var self = this;
						return true;
					});
					this.$name = (function () {
						return this.$name$slot;
					});
					this.$setOnce$name$ = (function (v) {
						this.$name$slot = v;
						return this;
					});
					this.$type = (function () {
						return this.$type$slot;
					});
					this.$setOnce$type$ = (function (v) {
						this.$type$slot = v;
						return this;
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter`TemporaryAST";
							this._$superInit$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = $.$superInit$NewspeakCompilation$Compiler$Rewriter$TemporaryAST;
							this.$superInit$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter$TemporaryAST");
							this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
							this.$apply$ = this._$apply$ = $.$apply$;
							this.$isTemporaryAST = this._$isTemporaryAST = $.$isTemporaryAST;
							this.$isVarDeclNode = this._$isVarDeclNode = $.$isVarDeclNode;
							this.$name = this._$name = $.$name;
							this.$setOnce$name$ = this._$setOnce$name$ = $.$setOnce$name$;
							this.$type = this._$type = $.$type;
							this.$setOnce$type$ = this._$setOnce$type$ = $.$setOnce$type$;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot = runtimeSuperclass;
							this["NewspeakCompilation`Compiler`Rewriter`TemporaryAST"] = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
								this.$name$slot = nil;
								this.$type$slot = nil;
							});
							this.basicNew = this["NewspeakCompilation`Compiler`Rewriter`TemporaryAST"];
							this.basicNew.prototype = this;
							this.meta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
					this.meta = new (function () {
						var $ = this;
						this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter`TemporaryAST";
						this.slots = [];
						this.methods = [new MM("name:type:", true, null)];
						this.nestedClasses = [];
						this.$name$type$ = (function ($n, $t) {
							return (new this.nonMeta.basicNew()).$instance$initializer($n, $t);
						});
						this.invoke = (function (runtimeSuperclass, enclosingObjects) {
							function constructRuntimeClass (superBasicNew) {
								this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter`TemporaryAST";
								this.$name$type$ = this._$name$type$ = $.$name$type$;
								this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = enclosingObjects;
								this.$super$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = runtimeSuperclass;
								this.basicNew = (function () {
									superBasicNew.call(this);
									this.hashCode = 0;
								});
								this.basicNew.prototype = this;
								this.nonMeta = null;
								this.newspeakClass = null;
							};
							constructRuntimeClass.prototype = runtimeSuperclass;
							return new constructRuntimeClass(runtimeSuperclass.basicNew);
						});
					})();
					this.meta.nonMeta = this;
				})();
				this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$ContextAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$LoopAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$NilAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$SendAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST.enclosingMixin = this;
				this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST.enclosingMixin = this;
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for NewspeakCompilation`Compiler`Rewriter";
						this._$superInit$NewspeakCompilation$Compiler$Rewriter = $.$superInit$NewspeakCompilation$Compiler$Rewriter;
						this.$superInit$NewspeakCompilation$Compiler$Rewriter = dnuCatcher("$superInit$NewspeakCompilation$Compiler$Rewriter");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this._$applyForEffectTo$ = $.$applyForEffectTo$;
						this.$applyForEffectTo$ = dnuCatcher("$applyForEffectTo$");
						this._$applyForValueTo$ = $.$applyForValueTo$;
						this.$applyForValueTo$ = dnuCatcher("$applyForValueTo$");
						this._$canInlineSeqexps = $.$canInlineSeqexps;
						this.$canInlineSeqexps = dnuCatcher("$canInlineSeqexps");
						this._$depthOfEnclosingClass$ = $.$depthOfEnclosingClass$;
						this.$depthOfEnclosingClass$ = dnuCatcher("$depthOfEnclosingClass$");
						this._$emptyBody = $.$emptyBody;
						this.$emptyBody = dnuCatcher("$emptyBody");
						this._$futureFor$ = $.$futureFor$;
						this.$futureFor$ = dnuCatcher("$futureFor$");
						this._$implicitReceiverNode = $.$implicitReceiverNode;
						this.$implicitReceiverNode = dnuCatcher("$implicitReceiverNode");
						this._$inClosureDuring$ = $.$inClosureDuring$;
						this.$inClosureDuring$ = dnuCatcher("$inClosureDuring$");
						this._$isImplicitReceiverNode$ = $.$isImplicitReceiverNode$;
						this.$isImplicitReceiverNode$ = dnuCatcher("$isImplicitReceiverNode$");
						this._$isInlineableConditional$ = $.$isInlineableConditional$;
						this.$isInlineableConditional$ = dnuCatcher("$isInlineableConditional$");
						this._$isInlineableLoop$ = $.$isInlineableLoop$;
						this.$isInlineableLoop$ = dnuCatcher("$isInlineableLoop$");
						this._$isOuterNode$ = $.$isOuterNode$;
						this.$isOuterNode$ = dnuCatcher("$isOuterNode$");
						this._$isRemovableBlock$withArgs$ = $.$isRemovableBlock$withArgs$;
						this.$isRemovableBlock$withArgs$ = dnuCatcher("$isRemovableBlock$withArgs$");
						this._$isSelfNode$ = $.$isSelfNode$;
						this.$isSelfNode$ = dnuCatcher("$isSelfNode$");
						this._$isSuperNode$ = $.$isSuperNode$;
						this.$isSuperNode$ = dnuCatcher("$isSuperNode$");
						this._$offsetOfEnclosingObjectForClass$ = $.$offsetOfEnclosingObjectForClass$;
						this.$offsetOfEnclosingObjectForClass$ = dnuCatcher("$offsetOfEnclosingObjectForClass$");
						this._$offsetOfImplicitReceiverTarget$ = $.$offsetOfImplicitReceiverTarget$;
						this.$offsetOfImplicitReceiverTarget$ = dnuCatcher("$offsetOfImplicitReceiverTarget$");
						this._$processEventualSend$ = $.$processEventualSend$;
						this.$processEventualSend$ = dnuCatcher("$processEventualSend$");
						this._$processImplicitReceiverSend$ = $.$processImplicitReceiverSend$;
						this.$processImplicitReceiverSend$ = dnuCatcher("$processImplicitReceiverSend$");
						this._$processImplicitReceiverSend$binding$ = $.$processImplicitReceiverSend$binding$;
						this.$processImplicitReceiverSend$binding$ = dnuCatcher("$processImplicitReceiverSend$binding$");
						this._$processInlineableConditional$ = $.$processInlineableConditional$;
						this.$processInlineableConditional$ = dnuCatcher("$processInlineableConditional$");
						this._$processInlineableLoop$ = $.$processInlineableLoop$;
						this.$processInlineableLoop$ = dnuCatcher("$processInlineableLoop$");
						this._$processLocalAccess$of$ = $.$processLocalAccess$of$;
						this.$processLocalAccess$of$ = dnuCatcher("$processLocalAccess$of$");
						this._$processLocalRead$from$ = $.$processLocalRead$from$;
						this.$processLocalRead$from$ = dnuCatcher("$processLocalRead$from$");
						this._$processLocalWrite$to$ = $.$processLocalWrite$to$;
						this.$processLocalWrite$to$ = dnuCatcher("$processLocalWrite$to$");
						this._$processOuterExpression$ = $.$processOuterExpression$;
						this.$processOuterExpression$ = dnuCatcher("$processOuterExpression$");
						this._$processOuterSend$ = $.$processOuterSend$;
						this.$processOuterSend$ = dnuCatcher("$processOuterSend$");
						this._$processSelfSend$ = $.$processSelfSend$;
						this.$processSelfSend$ = dnuCatcher("$processSelfSend$");
						this._$processSetterSend$binding$ = $.$processSetterSend$binding$;
						this.$processSetterSend$binding$ = dnuCatcher("$processSetterSend$binding$");
						this._$processSuperSend$ = $.$processSuperSend$;
						this.$processSuperSend$ = dnuCatcher("$processSuperSend$");
						this._$rewriteBlockNode$forValue$ = $.$rewriteBlockNode$forValue$;
						this.$rewriteBlockNode$forValue$ = dnuCatcher("$rewriteBlockNode$forValue$");
						this._$rewriteInlinedBlockNode$forValue$ = $.$rewriteInlinedBlockNode$forValue$;
						this.$rewriteInlinedBlockNode$forValue$ = dnuCatcher("$rewriteInlinedBlockNode$forValue$");
						this.$blockNode$ = this._$blockNode$ = $.$blockNode$;
						this.$cascadedSendNode$ = this._$cascadedSendNode$ = $.$cascadedSendNode$;
						this.$charNode$ = this._$charNode$ = $.$charNode$;
						this.$codeBodyNode$ = this._$codeBodyNode$ = $.$codeBodyNode$;
						this.$messageNode$ = this._$messageNode$ = $.$messageNode$;
						this.$messagePatternNode$ = this._$messagePatternNode$ = $.$messagePatternNode$;
						this.$methodNode$ = this._$methodNode$ = $.$methodNode$;
						this.$normalSendNode$ = this._$normalSendNode$ = $.$normalSendNode$;
						this.$numberNode$ = this._$numberNode$ = $.$numberNode$;
						this.$returnStatNode$ = this._$returnStatNode$ = $.$returnStatNode$;
						this.$setterSendNode$ = this._$setterSendNode$ = $.$setterSendNode$;
						this.$stringNode$ = this._$stringNode$ = $.$stringNode$;
						this.$symbolNode$ = this._$symbolNode$ = $.$symbolNode$;
						this.$tupleNode$ = this._$tupleNode$ = $.$tupleNode$;
						this.$variableNode$ = this._$variableNode$ = $.$variableNode$;
						this._$currentScope = $.$currentScope;
						this.$currentScope = dnuCatcher("$currentScope");
						this.$popScope = this._$popScope = $.$popScope;
						this.$pushScope$ = this._$pushScope$ = $.$pushScope$;
						this._$pushScopeForNode$ = $.$pushScopeForNode$;
						this.$pushScopeForNode$ = dnuCatcher("$pushScopeForNode$");
						this._$BlockLocalReturnAST = $.$BlockLocalReturnAST;
						this.$BlockLocalReturnAST = dnuCatcher("$BlockLocalReturnAST");
						this._$BooleanAST = $.$BooleanAST;
						this.$BooleanAST = dnuCatcher("$BooleanAST");
						this._$ConditionalAST = $.$ConditionalAST;
						this.$ConditionalAST = dnuCatcher("$ConditionalAST");
						this._$ContextAST = $.$ContextAST;
						this.$ContextAST = dnuCatcher("$ContextAST");
						this._$EnclosingObjectAST = $.$EnclosingObjectAST;
						this.$EnclosingObjectAST = dnuCatcher("$EnclosingObjectAST");
						this._$ImplicitReceiverSendAST = $.$ImplicitReceiverSendAST;
						this.$ImplicitReceiverSendAST = dnuCatcher("$ImplicitReceiverSendAST");
						this._$LocalReadAST = $.$LocalReadAST;
						this.$LocalReadAST = dnuCatcher("$LocalReadAST");
						this._$LocalWriteAST = $.$LocalWriteAST;
						this.$LocalWriteAST = dnuCatcher("$LocalWriteAST");
						this._$LoopAST = $.$LoopAST;
						this.$LoopAST = dnuCatcher("$LoopAST");
						this._$MethodLocalReturnAST = $.$MethodLocalReturnAST;
						this.$MethodLocalReturnAST = dnuCatcher("$MethodLocalReturnAST");
						this._$NilAST = $.$NilAST;
						this.$NilAST = dnuCatcher("$NilAST");
						this._$NonlocalReturnAST = $.$NonlocalReturnAST;
						this.$NonlocalReturnAST = dnuCatcher("$NonlocalReturnAST");
						this._$OrdinarySendAST = $.$OrdinarySendAST;
						this.$OrdinarySendAST = dnuCatcher("$OrdinarySendAST");
						this._$OuterSendAST = $.$OuterSendAST;
						this.$OuterSendAST = dnuCatcher("$OuterSendAST");
						this._$ParameterAST = $.$ParameterAST;
						this.$ParameterAST = dnuCatcher("$ParameterAST");
						this._$ReceiverAST = $.$ReceiverAST;
						this.$ReceiverAST = dnuCatcher("$ReceiverAST");
						this._$ReturnAST = $.$ReturnAST;
						this.$ReturnAST = dnuCatcher("$ReturnAST");
						this._$SelfSendAST = $.$SelfSendAST;
						this.$SelfSendAST = dnuCatcher("$SelfSendAST");
						this._$SendAST = $.$SendAST;
						this.$SendAST = dnuCatcher("$SendAST");
						this._$SuperSendAST = $.$SuperSendAST;
						this.$SuperSendAST = dnuCatcher("$SuperSendAST");
						this._$TemporaryAST = $.$TemporaryAST;
						this.$TemporaryAST = dnuCatcher("$TemporaryAST");
						this._$scopeStack = $.$scopeStack;
						this.$scopeStack = dnuCatcher("$scopeStack");
						this._$setOnce$scopeStack$ = $.$setOnce$scopeStack$;
						this.$setOnce$scopeStack$ = dnuCatcher("$setOnce$scopeStack$");
						this._$valueExpected = $.$valueExpected;
						this.$valueExpected = dnuCatcher("$valueExpected");
						this._$valueExpected$ = $.$valueExpected$;
						this.$valueExpected$ = dnuCatcher("$valueExpected$");
						this._$inClosure = $.$inClosure;
						this.$inClosure = dnuCatcher("$inClosure");
						this._$inClosure$ = $.$inClosure$;
						this.$inClosure$ = dnuCatcher("$inClosure$");
						this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = this._$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST = $.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST;
						this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$ = this._$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$ = $.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST = this._$NewspeakCompilation$Compiler$Rewriter$BooleanAST = $.$NewspeakCompilation$Compiler$Rewriter$BooleanAST;
						this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$ = this._$NewspeakCompilation$Compiler$Rewriter$BooleanAST$ = $.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = this._$NewspeakCompilation$Compiler$Rewriter$ConditionalAST = $.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST;
						this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$ = this._$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$ = $.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$ContextAST = this._$NewspeakCompilation$Compiler$Rewriter$ContextAST = $.$NewspeakCompilation$Compiler$Rewriter$ContextAST;
						this.$NewspeakCompilation$Compiler$Rewriter$ContextAST$ = this._$NewspeakCompilation$Compiler$Rewriter$ContextAST$ = $.$NewspeakCompilation$Compiler$Rewriter$ContextAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = this._$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST = $.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST;
						this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$ = this._$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$ = $.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = this._$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST = $.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST;
						this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$ = this._$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$ = $.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = this._$NewspeakCompilation$Compiler$Rewriter$LocalReadAST = $.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST;
						this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$ = this._$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$ = $.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = this._$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST = $.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST;
						this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$ = this._$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$ = $.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$LoopAST = this._$NewspeakCompilation$Compiler$Rewriter$LoopAST = $.$NewspeakCompilation$Compiler$Rewriter$LoopAST;
						this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$ = this._$NewspeakCompilation$Compiler$Rewriter$LoopAST$ = $.$NewspeakCompilation$Compiler$Rewriter$LoopAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = this._$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST = $.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST;
						this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$ = this._$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$ = $.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$NilAST = this._$NewspeakCompilation$Compiler$Rewriter$NilAST = $.$NewspeakCompilation$Compiler$Rewriter$NilAST;
						this.$NewspeakCompilation$Compiler$Rewriter$NilAST$ = this._$NewspeakCompilation$Compiler$Rewriter$NilAST$ = $.$NewspeakCompilation$Compiler$Rewriter$NilAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = this._$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST = $.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST;
						this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$ = this._$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$ = $.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = this._$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST = $.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST;
						this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$ = this._$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$ = $.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = this._$NewspeakCompilation$Compiler$Rewriter$OuterSendAST = $.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST;
						this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$ = this._$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$ = $.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST = this._$NewspeakCompilation$Compiler$Rewriter$ParameterAST = $.$NewspeakCompilation$Compiler$Rewriter$ParameterAST;
						this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$ = this._$NewspeakCompilation$Compiler$Rewriter$ParameterAST$ = $.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = this._$NewspeakCompilation$Compiler$Rewriter$ReceiverAST = $.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST;
						this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$ = this._$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$ = $.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST = this._$NewspeakCompilation$Compiler$Rewriter$ReturnAST = $.$NewspeakCompilation$Compiler$Rewriter$ReturnAST;
						this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$ = this._$NewspeakCompilation$Compiler$Rewriter$ReturnAST$ = $.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = this._$NewspeakCompilation$Compiler$Rewriter$SelfSendAST = $.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST;
						this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$ = this._$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$ = $.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$SendAST = this._$NewspeakCompilation$Compiler$Rewriter$SendAST = $.$NewspeakCompilation$Compiler$Rewriter$SendAST;
						this.$NewspeakCompilation$Compiler$Rewriter$SendAST$ = this._$NewspeakCompilation$Compiler$Rewriter$SendAST$ = $.$NewspeakCompilation$Compiler$Rewriter$SendAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = this._$NewspeakCompilation$Compiler$Rewriter$SuperSendAST = $.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST;
						this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$ = this._$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$ = $.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$;
						this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = this._$NewspeakCompilation$Compiler$Rewriter$TemporaryAST = $.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST;
						this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$ = this._$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$ = $.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$;
						this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter = enclosingObjects;
						this.$super$NewspeakCompilation$Compiler$Rewriter$slot = runtimeSuperclass;
						this["NewspeakCompilation`Compiler`Rewriter"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$scopeStack$slot = nil;
							this.$valueExpected$slot = nil;
							this.$inClosure$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$BooleanAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$ConditionalAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$ContextAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$LocalReadAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$LoopAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$NilAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$OuterSendAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$ParameterAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$ReceiverAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$ReturnAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$SelfSendAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$SendAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$SuperSendAST$slot = nil;
							this.$NewspeakCompilation$Compiler$Rewriter$TemporaryAST$slot = nil;
						});
						this.basicNew = this["NewspeakCompilation`Compiler`Rewriter"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`Rewriter";
					this.slots = [];
					this.methods = [new MM("new", true, null)];
					this.nestedClasses = [];
					this.$new = (function () {
						return (new this.nonMeta.basicNew()).$instance$initializer();
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for NewspeakCompilation`Compiler`Rewriter";
							this.$new = this._$new = $.$new;
							this.$enclosingObjects$NewspeakCompilation$Compiler$Rewriter = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$Rewriter = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$NewspeakCompilation$Compiler$ScopeBuilder = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for NewspeakCompilation`Compiler`ScopeBuilder";
				this.name = "NewspeakCompilation`Compiler`ScopeBuilder";
				this.header = "ScopeBuilder nestedIn: initialScope <Scope> atLevel: initialDepth <Integer> = ASTTool ((* The scope builder is a visitor on the AST. It computes a tree of scopes that shadows the AST itself. More precisely, it computes a mapping from ASTs to their scopes. This allows us to get to the appropriate scope for an abstract syntax node without polluting the AST with extraneous data like scopes.\r\rWe could associate each node in the AST with the scope in which it is found, but this would be overkill. Instead, only nodes that actually introduce new scopes (such as class sides, message patterns, code bodies and blocks) actually get mapped in this manner. The intent is that later phases of compilation will visit the tree and look up the scopes at the points where they are introduced.\r\rThe builder starts at a given node, in the context of some mixin, described by a mirror. This is because, in an incremental environment, we may not have the complete AST for a module, but instead be asked to process a part of that module, such as a nested class, slot definition or method. The surrounding scope can be computed from the mirror representing the immediately enclosing mixin.\r\rThen we traverse the tree, creating and populating new scopes as needed. We maintain a stack of scopes (scopeStack) that initially contains only the surrounding scope. Scopes get pushed on to the stack when we encounter a node that introduces a scope, and popped when we finish with that node. The scopes are chained to their super scopes (the scope below them on the stack).\r\rA possible optimization is to avoid a traversal of an entire side of a class.\rOne can process only a side without its subtrees (i.e., methods and nested classes). These can be visited later, as long as we ensure that the processing of the subtree begins with a proper super scope on top of the scope stack. *)| \rscopeStack <OrderedCollection[Scope]> = OrderedCollection new.\rcurrentDepth <Integer> ::= initialDepth. (* The lexical nesting level of the class declaration currently being visited; top-level classes are level 0. *)\r|pushScope: initialScope)";
				this.slots = [
					new SM("scopeStack", false, false),
					new SM("currentDepth", true, false)
				];
				this.methods = [
					new MM("superInit`NewspeakCompilation`Compiler`ScopeBuilder", true, "ASTTool"),
					new MM("instance`initializer", true, "ASTTool"),
					new MM("buildScopeFor:", false, "public buildScopeFor: mm <MixinMirror> ^<Scope> = (\r	assert: [mm isMixinMirror] message: ''.\r	^incrementalScopeFor: mm.\r)"),
					new MM("incrementalScopeFor:", false, "incrementalScopeFor: mm <MixinMirror> ^<Scope> = (\r	|\r	enclosingScope <Scope>\r	scope <Scope>\r	currentClass <ClassEntry>\r	depth\r	|\r	mm declaration enclosingClass \r		ifNil: [enclosingScope:: Scope new]\r		ifNotNil: [:it | enclosingScope:: incrementalScopeFor: it instanceSide].\r	scope:: Scope new superScope: enclosingScope.\r	depth:: scope depth.\r	currentClass:: ClassEntry \r		forDeclaration: (MessagePatternAST new selector: mm declaration simpleName)\r		atDepth: depth.\r	currentClass enclosingClass: (scope at: #'@currentClass' ifAbsent: [nil]).\r	scope at: #'@currentClass' put: currentClass.\r	depth:: depth + 1.\r	mm slots do: [:s <SlotMirror> | \r		| se = SlotEntry\r			forDeclaration: (MessagePatternAST new selector: s name; accessModifier: s accessModifier)\r			atDepth: depth. |\r		scope at: s name put: se. (* getter *)\r		scope at: (namer setterSelectorFor: s) put: se. (* setter *)].\r	mm methods do: [:m <MethodMirror> | \r		| me = MethodEntry\r			forDeclaration: (MessagePatternAST new selector: m name; accessModifier: m accessModifier)\r			atDepth: depth. |\r		scope at: m name put: me].\r	mm nestedClasses do: [:c <ClassDeclarationMirror> | \r		| ce = ClassEntry\r			forDeclaration: (MessagePatternAST new selector: c simpleName; accessModifier: c accessModifier)\r			atDepth: depth. |\r		ce enclosingClass: currentClass.\r		scope at: c simpleName put: ce].\r	^scope\r)"),
					new MM("blockNode:", false, "public blockNode: aNode <BlockAST> = (\r	| parameterScope <Scope> |\r	parameterScope:: Scope new.\r	(* establish parameter scope *)\r	aNode parameters do:\r		[:parameter <VarDeclAST> | \r			parameterScope\r			at: parameter name\r			put: (LocalEntry\r				forDeclaration: parameter\r				atDepth: currentDepth)].\r	nestScope: parameterScope.\r	\r	(* visit body *)\r	aNode body apply: self.\r	scopeMap at: aNode put: (scopeMap at: aNode body).\r	\r	popScope (* pop the parameter scope, ps *)\r)"),
					new MM("cascadedSendNode:", false, "public cascadedSendNode: aNode <CascadedSendAST> = (\r\r	(* generic traversal code *)\r	(* visit receiver and messages *)\r	aNode previousSend apply: self.\r	aNode message apply: self.\r)"),
					new MM("charNode:", false, "public charNode: aNode <CharAST> = (\r	(* leaf, do nothing *)\r)"),
					new MM("classHeaderNode:", false, "public classHeaderNode: aNode = (\r\r	aNode constructor apply: self.\r	aNode slots do: [:s | s initializer ifNotNil: [:i | i apply: self]].\r	aNode initExprs do: [:e | e apply: self].\r)"),
					new MM("classNode:", false, "public classNode: aNode <ClassDeclarationAST> = (\r	| thisClass <ClassEntry> vs <Scope> |\r	\r	thisClass:: ClassEntry\r		forDeclaration: (MessagePatternAST new selector: aNode name; accessModifier: aNode accessModifier)\r		atDepth: currentDepth.\r	thisClass enclosingClass: (currentScope at: #'@currentClass' ifAbsent: [nil]).\r	\r	currentScope at: aNode name put: thisClass.\r		\r	vs:: Scope new. (* establish instance side scope *)\r	currentDepth:: currentDepth + 1.\r	aNode header slots do: [:v <SlotDeclAST> | \r		| se = SlotEntry\r			forDeclaration: (MessagePatternAST new selector: v name; accessModifier: v accessModifier)\r			atDepth: currentDepth. |\r		vs at: v name put: se. (* getter *)\r		vs at: (namer setterSelectorFor: v) put: se. (* setter *)].\r		\r	self nestScope: vs.\r		currentScope at: #'@currentClass' put: thisClass.\r  		aNode instanceSide apply: self.\r	popScope.\r	self nestScope: Scope new. (* establish class side scope *)\r		currentScope at: #'@currentClass' put: thisClass.\r  		aNode classSide apply: self.\r	popScope.\r	currentDepth:: currentDepth - 1.\r)"),
					new MM("codeBodyNode:", false, "public codeBodyNode: aNode <CodeBodyAST> = (\r	| ts <Scope> |\r	(* establish local slot scope *)\r\r	ts:: Scope new.\r	aNode temporaries do:[:t <SlotDefAST> | \r		|svd|\r		svd:: LocalEntry forDeclaration: t slotDecl atDepth: currentDepth.\r		ts at: t name put: svd. (* getter *)\r		ts at: (setterSelectorFor: t) put: svd. (* setter *)\r		ts at: ('setOnce`',t name) asSymbol put: svd. (* trick so lookups of the initializer for immutables will find the right slot *)].\r\r	nestScope: ts.\r	scopeMap at: aNode put: ts.\r	(* visit statements *)\r	aNode temporaries do: [:t | t initializer isNil ifFalse: [t initializer apply: self]].\r	aNode statements do: [:statement | statement apply: self].\r	popScope.\r)"),
					new MM("keywordPatternNode:", false, "public keywordPatternNode: n = (\r	(* leaf, do nothing *)\r)"),
					new MM("literalPatternNode:", false, "public literalPatternNode: n = (\r	(* leaf, do nothing *)\r)"),
					new MM("messageNode:", false, "public messageNode: aNode <MessageAST> = (\r	(* generic traversal code *)\r	(* visit arguments *)\r	aNode arguments do: [:arg <ExpressionAST> | arg apply: self]\r)"),
					new MM("messagePatternNode:", false, "public messagePatternNode: aNode <MessagePatternAST> = (\r\r	| parameterScope <Scope> |\r	parameterScope:: Scope new.\r	(* establish parameter scope *)\r	aNode parameters do:\r		[:parameter <VarDeclAST> | \r		parameterScope\r		at: parameter name\r		put: (LocalEntry\r			forDeclaration: parameter\r			atDepth: currentDepth)].\r	\r	nestScope: parameterScope.\r	scopeMap at: aNode put: parameterScope.\r	(* the pattern scope, ps, must be popped by the caller *)\r	(* establish type parameter scope - skip for now *)\r)"),
					new MM("methodNode:", false, "public methodNode: aNode <MethodAST> = (\r\r	(* register method in current scope *)\r	currentScope\r		at: aNode pattern selector\r		put: (MethodEntry\r			forDeclaration: (MessagePatternAST new selector: aNode selector; accessModifier: aNode accessModifier)\r			atDepth: currentDepth).\r\r	(* visit pattern *)\r	aNode pattern apply: self.\r	\r	(* visit body *)\r	aNode body apply: self.\r	scopeMap at: aNode put: (scopeMap at: aNode body).\r\r	popScope (* Pop pattern scope *)\r)"),
					new MM("mixinApplication:", false, "public mixinApplication: node <MixinApplicationAST> = (\r\r	node mixinExpr apply: self.\r	node superclassExpr apply: self\r)"),
					new MM("mixinApplicationClass:", false, "public mixinApplicationClass: aNode <MixinApplicationClassAST> = (\r	| thisClass <ClassEntry> vs <Scope> |\r	#BOGUS yourself. (* WIP *)\r	thisClass:: ClassEntry\r		forDeclaration: (MessagePatternAST new selector: aNode name)\r		atDepth: currentDepth.\r	thisClass enclosingClass: (currentScope at: #'@currentClass' ifAbsent: [nil]).\r	\r	currentScope at: aNode name put: thisClass.\r	scopeMap at: aNode put: currentScope.\r)"),
					new MM("mixinClassNode:", false, "public mixinClassNode: aNode = (\r	(* leaf, do nothing *)\r)"),
					new MM("normalSendNode:", false, "public normalSendNode: aNode <NormalSendAST> = (\r	(* generic traversal code *)\r	(* visit recvr and msg *)\r	aNode receiver apply: self.\r	aNode message apply: self.\r)"),
					new MM("numberNode:", false, "public numberNode: aNode <NumberAST> = (\r	(* leaf, do nothing *)\r)"),
					new MM("returnStatNode:", false, "public returnStatNode: aNode <ReturnStatAST> = (\r	(* generic traversal code *)\r	(* visit expression *)\r	aNode expression apply: self\r)"),
					new MM("setterSendNode:", false, "public setterSendNode: aNode <SetterSendAST> = (\r	(* visit recvr and msg *)\r	aNode receiver apply: self.\r	aNode message apply: self.\r)"),
					new MM("sideNode:", false, "public sideNode: aNode <SideAST> = (\r\r	scopeMap at: aNode put: currentScope.\r\r	(* visit methods *)\r	aNode categories do:\r		[:c <CategoryAST> | \r		c methods do:\r			[:m <MethodAST> | m apply: self]].\r	\r	(* visit nested classes *)\r	aNode nestedClasses do:\r		[:nc <ClassDeclarationAST> | nc apply: self].\r)"),
					new MM("stringNode:", false, "public stringNode: aNode <StringAST> = (\r	(* leaf, do nothing *)\r)"),
					new MM("symbolNode:", false, "public symbolNode: aNode <SymbolAST> = (\r	(* leaf, do nothing *)\r)"),
					new MM("tupleNode:", false, "public tupleNode: aNode <TupleAST> = (\r	(* visit elements *)\r	aNode elements do: [:e <ExpressionAST> | e apply: self]\r)"),
					new MM("varDeclNode:", false, "public varDeclNode: aNode <VarDeclAST> = (\r	(* Do nothing. It could arguably add aNode's data to current scope - but in practice, the context knows better how to do this. *)\r)"),
					new MM("variableNode:", false, "public variableNode: aNode <VariableAST> = (\r	assert: [aNode name = #'@here' or: [isPseudoVariableNode: aNode]]\r	message: 'Unexpected variable name'.\r)"),
					new MM("wildcardPatternNode:", false, "public wildcardPatternNode: node = (\r	(* leaf, do nothing *)\r)"),
					new MM("currentScope", false, "currentScope ^ <Scope> = (\r	^scopeStack last\r)"),
					new MM("isPseudoVariableNode:", false, "isPseudoVariableNode: aNode <VariableAST> ^<Boolean> = (\r	^aNode name = #self\r		or: [aNode name = #super\r		or: [aNode name = #outer\r		or: [aNode name = #thisContext]]]\r)"),
					new MM("nestScope:", false, "nestScope: s <Scope> = (\r	(* Hook up a new lexically nested scope, and push onto the scope stack *)\r	s superScope: currentScope.\r	pushScope: s\r)"),
					new MM("popScope", false, "popScope ^<Scope> = (\r	^scopeStack removeLast\r)"),
					new MM("pushScope:", false, "pushScope: s <Scope> = (\r	scopeStack addLast: s\r)"),
					new MM("scopeStack", true, null),
					new MM("setOnce`scopeStack:", true, null),
					new MM("currentDepth", true, null),
					new MM("currentDepth:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$NewspeakCompilation$Compiler$ScopeBuilder = (function ($initialScope, $initialDepth) {
					var self = this;
					self.$super$NewspeakCompilation$Compiler$ScopeBuilder$slot._$instance$initializer.call(self);
					return self;
				});
				this.$instance$initializer = (function ($initialScope, $initialDepth) {
					var self = this;
					self._$superInit$NewspeakCompilation$Compiler$ScopeBuilder($initialScope, $initialDepth);
					self._$setOnce$scopeStack$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$OrderedCollection().$new());
					self._$currentDepth$($initialDepth);
					self._$pushScope$($initialScope);
					return self;
				});
				this.$buildScopeFor$ = (function ($mm) {
					var self = this;
					self._$assert$message$((function () {
						return $mm.$isMixinMirror();
					}), "");
					return self._$incrementalScopeFor$($mm);
				});
				this.$incrementalScopeFor$ = (function ($mm) {
					var self = this;
					var $enclosingScope = nil;
					var $scope = nil;
					var $currentClass = nil;
					var $depth = nil;
					$mm.$declaration().$enclosingClass().$ifNil$ifNotNil$((function () {
						return $enclosingScope = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$Scope().$new();
					}), (function ($it) {
						return $enclosingScope = self._$incrementalScopeFor$($it.$instanceSide());
					}));
					$scope = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$Scope().$new().$superScope$($enclosingScope);
					$depth = $scope.$depth();
					$currentClass = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$ClassEntry().$forDeclaration$atDepth$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MessagePatternAST().$new().$selector$($mm.$declaration().$simpleName()), $depth);
					$currentClass.$enclosingClass$($scope.$at$ifAbsent$("@currentClass", (function () {
						return nil;
					})));
					$scope.$at$put$("@currentClass", $currentClass);
					$depth = $depth + 1;
					$mm.$slots().$do$((function ($s) {
						var $se = nil;
						$se = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$SlotEntry().$forDeclaration$atDepth$((function (cascadeReceiver) {
							cascadeReceiver.$selector$($s.$name());
							return cascadeReceiver.$accessModifier$($s.$accessModifier());
						})(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MessagePatternAST().$new()), $depth);
						$scope.$at$put$($s.$name(), $se);
						return $scope.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$namer().$setterSelectorFor$($s), $se);
					}));
					$mm.$methods().$do$((function ($m) {
						var $me = nil;
						$me = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MethodEntry().$forDeclaration$atDepth$((function (cascadeReceiver) {
							cascadeReceiver.$selector$($m.$name());
							return cascadeReceiver.$accessModifier$($m.$accessModifier());
						})(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MessagePatternAST().$new()), $depth);
						return $scope.$at$put$($m.$name(), $me);
					}));
					$mm.$nestedClasses().$do$((function ($c) {
						var $ce = nil;
						$ce = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$ClassEntry().$forDeclaration$atDepth$((function (cascadeReceiver) {
							cascadeReceiver.$selector$($c.$simpleName());
							return cascadeReceiver.$accessModifier$($c.$accessModifier());
						})(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MessagePatternAST().$new()), $depth);
						$ce.$enclosingClass$($currentClass);
						return $scope.$at$put$($c.$simpleName(), $ce);
					}));
					return $scope;
				});
				this.$blockNode$ = (function ($aNode) {
					var self = this;
					var $parameterScope = nil;
					$parameterScope = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$Scope().$new();
					$aNode.$parameters().$do$((function ($parameter) {
						return $parameterScope.$at$put$($parameter.$name(), self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$LocalEntry().$forDeclaration$atDepth$($parameter, self._$currentDepth()));
					}));
					self._$nestScope$($parameterScope);
					$aNode.$body().$apply$(self);
					self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$scopeMap().$at$put$($aNode, self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$scopeMap().$at$($aNode.$body()));
					self._$popScope();
					return self;
				});
				this.$cascadedSendNode$ = (function ($aNode) {
					var self = this;
					$aNode.$previousSend().$apply$(self);
					$aNode.$message().$apply$(self);
					return self;
				});
				this.$charNode$ = (function ($aNode) {
					var self = this;
					return self;
				});
				this.$classHeaderNode$ = (function ($aNode) {
					var self = this;
					$aNode.$constructor().$apply$(self);
					$aNode.$slots().$do$((function ($s) {
						return $s.$initializer().$ifNotNil$((function ($i) {
							return $i.$apply$(self);
						}));
					}));
					$aNode.$initExprs().$do$((function ($e) {
						return $e.$apply$(self);
					}));
					return self;
				});
				this.$classNode$ = (function ($aNode) {
					var self = this;
					var $thisClass = nil;
					var $vs = nil;
					$thisClass = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$ClassEntry().$forDeclaration$atDepth$((function (cascadeReceiver) {
						cascadeReceiver.$selector$($aNode.$name());
						return cascadeReceiver.$accessModifier$($aNode.$accessModifier());
					})(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MessagePatternAST().$new()), self._$currentDepth());
					$thisClass.$enclosingClass$(self._$currentScope().$at$ifAbsent$("@currentClass", (function () {
						return nil;
					})));
					self._$currentScope().$at$put$($aNode.$name(), $thisClass);
					$vs = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$Scope().$new();
					self._$currentDepth$(self._$currentDepth() + 1);
					$aNode.$header().$slots().$do$((function ($v) {
						var $se = nil;
						$se = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$SlotEntry().$forDeclaration$atDepth$((function (cascadeReceiver) {
							cascadeReceiver.$selector$($v.$name());
							return cascadeReceiver.$accessModifier$($v.$accessModifier());
						})(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MessagePatternAST().$new()), self._$currentDepth());
						$vs.$at$put$($v.$name(), $se);
						return $vs.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$namer().$setterSelectorFor$($v), $se);
					}));
					self._$nestScope$($vs);
					self._$currentScope().$at$put$("@currentClass", $thisClass);
					$aNode.$instanceSide().$apply$(self);
					self._$popScope();
					self._$nestScope$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$Scope().$new());
					self._$currentScope().$at$put$("@currentClass", $thisClass);
					$aNode.$classSide().$apply$(self);
					self._$popScope();
					self._$currentDepth$(self._$currentDepth() - 1);
					return self;
				});
				this.$codeBodyNode$ = (function ($aNode) {
					var self = this;
					var $ts = nil;
					$ts = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$Scope().$new();
					$aNode.$temporaries().$do$((function ($t) {
						var $svd = nil;
						$svd = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$LocalEntry().$forDeclaration$atDepth$($t.$slotDecl(), self._$currentDepth());
						$ts.$at$put$($t.$name(), $svd);
						$ts.$at$put$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$setterSelectorFor$($t), $svd);
						return $ts.$at$put$(("setOnce`").$$comma($t.$name()).$asSymbol(), $svd);
					}));
					self._$nestScope$($ts);
					self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$scopeMap().$at$put$($aNode, $ts);
					$aNode.$temporaries().$do$((function ($t) {
						return $t.$initializer().$isNil().$ifFalse$((function () {
							return $t.$initializer().$apply$(self);
						}));
					}));
					$aNode.$statements().$do$((function ($statement) {
						return $statement.$apply$(self);
					}));
					self._$popScope();
					return self;
				});
				this.$keywordPatternNode$ = (function ($n) {
					var self = this;
					return self;
				});
				this.$literalPatternNode$ = (function ($n) {
					var self = this;
					return self;
				});
				this.$messageNode$ = (function ($aNode) {
					var self = this;
					$aNode.$arguments().$do$((function ($arg) {
						return $arg.$apply$(self);
					}));
					return self;
				});
				this.$messagePatternNode$ = (function ($aNode) {
					var self = this;
					var $parameterScope = nil;
					$parameterScope = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$Scope().$new();
					$aNode.$parameters().$do$((function ($parameter) {
						return $parameterScope.$at$put$($parameter.$name(), self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$LocalEntry().$forDeclaration$atDepth$($parameter, self._$currentDepth()));
					}));
					self._$nestScope$($parameterScope);
					self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$scopeMap().$at$put$($aNode, $parameterScope);
					return self;
				});
				this.$methodNode$ = (function ($aNode) {
					var self = this;
					self._$currentScope().$at$put$($aNode.$pattern().$selector(), self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MethodEntry().$forDeclaration$atDepth$((function (cascadeReceiver) {
						cascadeReceiver.$selector$($aNode.$selector());
						return cascadeReceiver.$accessModifier$($aNode.$accessModifier());
					})(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MessagePatternAST().$new()), self._$currentDepth()));
					$aNode.$pattern().$apply$(self);
					$aNode.$body().$apply$(self);
					self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$scopeMap().$at$put$($aNode, self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$scopeMap().$at$($aNode.$body()));
					self._$popScope();
					return self;
				});
				this.$mixinApplication$ = (function ($node) {
					var self = this;
					$node.$mixinExpr().$apply$(self);
					$node.$superclassExpr().$apply$(self);
					return self;
				});
				this.$mixinApplicationClass$ = (function ($aNode) {
					var self = this;
					var $thisClass = nil;
					var $vs = nil;
					("BOGUS").$yourself();
					$thisClass = self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$ClassEntry().$forDeclaration$atDepth$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$MessagePatternAST().$new().$selector$($aNode.$name()), self._$currentDepth());
					$thisClass.$enclosingClass$(self._$currentScope().$at$ifAbsent$("@currentClass", (function () {
						return nil;
					})));
					self._$currentScope().$at$put$($aNode.$name(), $thisClass);
					self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$scopeMap().$at$put$($aNode, self._$currentScope());
					return self;
				});
				this.$mixinClassNode$ = (function ($aNode) {
					var self = this;
					return self;
				});
				this.$normalSendNode$ = (function ($aNode) {
					var self = this;
					$aNode.$receiver().$apply$(self);
					$aNode.$message().$apply$(self);
					return self;
				});
				this.$numberNode$ = (function ($aNode) {
					var self = this;
					return self;
				});
				this.$returnStatNode$ = (function ($aNode) {
					var self = this;
					$aNode.$expression().$apply$(self);
					return self;
				});
				this.$setterSendNode$ = (function ($aNode) {
					var self = this;
					$aNode.$receiver().$apply$(self);
					$aNode.$message().$apply$(self);
					return self;
				});
				this.$sideNode$ = (function ($aNode) {
					var self = this;
					self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[0]._$scopeMap().$at$put$($aNode, self._$currentScope());
					$aNode.$categories().$do$((function ($c) {
						return $c.$methods().$do$((function ($m) {
							return $m.$apply$(self);
						}));
					}));
					$aNode.$nestedClasses().$do$((function ($nc) {
						return $nc.$apply$(self);
					}));
					return self;
				});
				this.$stringNode$ = (function ($aNode) {
					var self = this;
					return self;
				});
				this.$symbolNode$ = (function ($aNode) {
					var self = this;
					return self;
				});
				this.$tupleNode$ = (function ($aNode) {
					var self = this;
					$aNode.$elements().$do$((function ($e) {
						return $e.$apply$(self);
					}));
					return self;
				});
				this.$varDeclNode$ = (function ($aNode) {
					var self = this;
					return self;
				});
				this.$variableNode$ = (function ($aNode) {
					var self = this;
					self._$assert$message$((function () {
						return $aNode.$name().$$equal("@here") || self._$isPseudoVariableNode$($aNode);
					}), "Unexpected variable name");
					return self;
				});
				this.$wildcardPatternNode$ = (function ($node) {
					var self = this;
					return self;
				});
				this.$currentScope = (function () {
					var self = this;
					return self._$scopeStack().$last();
				});
				this.$isPseudoVariableNode$ = (function ($aNode) {
					var self = this;
					return $aNode.$name().$$equal("self") || ($aNode.$name().$$equal("super") || ($aNode.$name().$$equal("outer") || $aNode.$name().$$equal("thisContext")));
				});
				this.$nestScope$ = (function ($s) {
					var self = this;
					$s.$superScope$(self._$currentScope());
					self._$pushScope$($s);
					return self;
				});
				this.$popScope = (function () {
					var self = this;
					return self._$scopeStack().$removeLast();
				});
				this.$pushScope$ = (function ($s) {
					var self = this;
					self._$scopeStack().$addLast$($s);
					return self;
				});
				this.$scopeStack = (function () {
					return this.$scopeStack$slot;
				});
				this.$setOnce$scopeStack$ = (function (v) {
					this.$scopeStack$slot = v;
					return this;
				});
				this.$currentDepth = (function () {
					return this.$currentDepth$slot;
				});
				this.$currentDepth$ = (function (v) {
					this.$currentDepth$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for NewspeakCompilation`Compiler`ScopeBuilder";
						this._$superInit$NewspeakCompilation$Compiler$ScopeBuilder = $.$superInit$NewspeakCompilation$Compiler$ScopeBuilder;
						this.$superInit$NewspeakCompilation$Compiler$ScopeBuilder = dnuCatcher("$superInit$NewspeakCompilation$Compiler$ScopeBuilder");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this.$buildScopeFor$ = this._$buildScopeFor$ = $.$buildScopeFor$;
						this._$incrementalScopeFor$ = $.$incrementalScopeFor$;
						this.$incrementalScopeFor$ = dnuCatcher("$incrementalScopeFor$");
						this.$blockNode$ = this._$blockNode$ = $.$blockNode$;
						this.$cascadedSendNode$ = this._$cascadedSendNode$ = $.$cascadedSendNode$;
						this.$charNode$ = this._$charNode$ = $.$charNode$;
						this.$classHeaderNode$ = this._$classHeaderNode$ = $.$classHeaderNode$;
						this.$classNode$ = this._$classNode$ = $.$classNode$;
						this.$codeBodyNode$ = this._$codeBodyNode$ = $.$codeBodyNode$;
						this.$keywordPatternNode$ = this._$keywordPatternNode$ = $.$keywordPatternNode$;
						this.$literalPatternNode$ = this._$literalPatternNode$ = $.$literalPatternNode$;
						this.$messageNode$ = this._$messageNode$ = $.$messageNode$;
						this.$messagePatternNode$ = this._$messagePatternNode$ = $.$messagePatternNode$;
						this.$methodNode$ = this._$methodNode$ = $.$methodNode$;
						this.$mixinApplication$ = this._$mixinApplication$ = $.$mixinApplication$;
						this.$mixinApplicationClass$ = this._$mixinApplicationClass$ = $.$mixinApplicationClass$;
						this.$mixinClassNode$ = this._$mixinClassNode$ = $.$mixinClassNode$;
						this.$normalSendNode$ = this._$normalSendNode$ = $.$normalSendNode$;
						this.$numberNode$ = this._$numberNode$ = $.$numberNode$;
						this.$returnStatNode$ = this._$returnStatNode$ = $.$returnStatNode$;
						this.$setterSendNode$ = this._$setterSendNode$ = $.$setterSendNode$;
						this.$sideNode$ = this._$sideNode$ = $.$sideNode$;
						this.$stringNode$ = this._$stringNode$ = $.$stringNode$;
						this.$symbolNode$ = this._$symbolNode$ = $.$symbolNode$;
						this.$tupleNode$ = this._$tupleNode$ = $.$tupleNode$;
						this.$varDeclNode$ = this._$varDeclNode$ = $.$varDeclNode$;
						this.$variableNode$ = this._$variableNode$ = $.$variableNode$;
						this.$wildcardPatternNode$ = this._$wildcardPatternNode$ = $.$wildcardPatternNode$;
						this._$currentScope = $.$currentScope;
						this.$currentScope = dnuCatcher("$currentScope");
						this._$isPseudoVariableNode$ = $.$isPseudoVariableNode$;
						this.$isPseudoVariableNode$ = dnuCatcher("$isPseudoVariableNode$");
						this._$nestScope$ = $.$nestScope$;
						this.$nestScope$ = dnuCatcher("$nestScope$");
						this._$popScope = $.$popScope;
						this.$popScope = dnuCatcher("$popScope");
						this._$pushScope$ = $.$pushScope$;
						this.$pushScope$ = dnuCatcher("$pushScope$");
						this._$scopeStack = $.$scopeStack;
						this.$scopeStack = dnuCatcher("$scopeStack");
						this._$setOnce$scopeStack$ = $.$setOnce$scopeStack$;
						this.$setOnce$scopeStack$ = dnuCatcher("$setOnce$scopeStack$");
						this._$currentDepth = $.$currentDepth;
						this.$currentDepth = dnuCatcher("$currentDepth");
						this._$currentDepth$ = $.$currentDepth$;
						this.$currentDepth$ = dnuCatcher("$currentDepth$");
						this.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder = enclosingObjects;
						this.$super$NewspeakCompilation$Compiler$ScopeBuilder$slot = runtimeSuperclass;
						this["NewspeakCompilation`Compiler`ScopeBuilder"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$scopeStack$slot = nil;
							this.$currentDepth$slot = nil;
						});
						this.basicNew = this["NewspeakCompilation`Compiler`ScopeBuilder"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler`ScopeBuilder";
					this.slots = [];
					this.methods = [
						new MM("nestedIn:atLevel:", true, null),
						new MM("new", false, "public new ^<Instance> = (\r	^self nestedIn: Scope new atLevel: 0\r)")
					];
					this.nestedClasses = [];
					this.$nestedIn$atLevel$ = (function ($initialScope, $initialDepth) {
						return (new this.nonMeta.basicNew()).$instance$initializer($initialScope, $initialDepth);
					});
					this.$new = (function () {
						var self = this;
						return self._$nestedIn$atLevel$(self.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder[1]._$Scope().$new(), 0);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for NewspeakCompilation`Compiler`ScopeBuilder";
							this.$nestedIn$atLevel$ = this._$nestedIn$atLevel$ = $.$nestedIn$atLevel$;
							this.$new = this._$new = $.$new;
							this.$enclosingObjects$NewspeakCompilation$Compiler$ScopeBuilder = enclosingObjects;
							this.$super$NewspeakCompilation$Compiler$ScopeBuilder = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$NewspeakCompilation$Compiler$Rewriter.enclosingMixin = this;
			this.$NewspeakCompilation$Compiler$ScopeBuilder.enclosingMixin = this;
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakCompilation`Compiler";
					this._$superInit$NewspeakCompilation$Compiler = $.$superInit$NewspeakCompilation$Compiler;
					this.$superInit$NewspeakCompilation$Compiler = dnuCatcher("$superInit$NewspeakCompilation$Compiler");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$checkForReservedWord$ = $.$checkForReservedWord$;
					this.$checkForReservedWord$ = dnuCatcher("$checkForReservedWord$");
					this._$setterSelectorFor$ = $.$setterSelectorFor$;
					this.$setterSelectorFor$ = dnuCatcher("$setterSelectorFor$");
					this._$Rewriter = $.$Rewriter;
					this.$Rewriter = dnuCatcher("$Rewriter");
					this._$ScopeBuilder = $.$ScopeBuilder;
					this.$ScopeBuilder = dnuCatcher("$ScopeBuilder");
					this._$scopeMap = $.$scopeMap;
					this.$scopeMap = dnuCatcher("$scopeMap");
					this._$scopeMap$ = $.$scopeMap$;
					this.$scopeMap$ = dnuCatcher("$scopeMap$");
					this.$NewspeakCompilation$Compiler$Rewriter = this._$NewspeakCompilation$Compiler$Rewriter = $.$NewspeakCompilation$Compiler$Rewriter;
					this.$NewspeakCompilation$Compiler$Rewriter$ = this._$NewspeakCompilation$Compiler$Rewriter$ = $.$NewspeakCompilation$Compiler$Rewriter$;
					this.$NewspeakCompilation$Compiler$ScopeBuilder = this._$NewspeakCompilation$Compiler$ScopeBuilder = $.$NewspeakCompilation$Compiler$ScopeBuilder;
					this.$NewspeakCompilation$Compiler$ScopeBuilder$ = this._$NewspeakCompilation$Compiler$ScopeBuilder$ = $.$NewspeakCompilation$Compiler$ScopeBuilder$;
					this.$enclosingObjects$NewspeakCompilation$Compiler = enclosingObjects;
					this.$super$NewspeakCompilation$Compiler$slot = runtimeSuperclass;
					this["NewspeakCompilation`Compiler"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$scopeMap$slot = nil;
						this.$NewspeakCompilation$Compiler$Rewriter$slot = nil;
						this.$NewspeakCompilation$Compiler$ScopeBuilder$slot = nil;
					});
					this.basicNew = this["NewspeakCompilation`Compiler"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakCompilation`Compiler";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakCompilation`Compiler";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakCompilation$Compiler = enclosingObjects;
						this.$super$NewspeakCompilation$Compiler = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakCompilation$LocalEntry = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakCompilation`LocalEntry";
			this.name = "NewspeakCompilation`LocalEntry";
			this.header = "LocalEntry forDeclaration: decl <VarDeclAST> atDepth: d <Integer> = SymbolTableEntry forAST: decl atDepth: d ((* Semantic info for a parameter or temporary. *)|\rpublic offset <Integer>\rpublic remote <Boolean> ::= false.\rpublic remoteVector <LocalEntry>\r\rpublic used ::= false.\r|)";
			this.slots = [
				new SM("offset", true, false),
				new SM("remote", true, false),
				new SM("remoteVector", true, false),
				new SM("used", true, false)
			];
			this.methods = [
				new MM("superInit`NewspeakCompilation`LocalEntry", true, "forAST: decl atDepth: d"),
				new MM("instance`initializer", true, "forAST: decl atDepth: d"),
				new MM("isLocalBinding", false, "public isLocalBinding ^<Boolean> = (\r	^true\r)"),
				new MM("isTemporaryAST", false, "public isTemporaryAST ^<Boolean> = (\r	^ast isTemporaryAST\r)"),
				new MM("name", false, "public name = (\r	^ast name\r)"),
				new MM("offset", true, null),
				new MM("offset:", true, null),
				new MM("remote", true, null),
				new MM("remote:", true, null),
				new MM("remoteVector", true, null),
				new MM("remoteVector:", true, null),
				new MM("used", true, null),
				new MM("used:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakCompilation$LocalEntry = (function ($decl, $d) {
				var self = this;
				self.$super$NewspeakCompilation$LocalEntry$slot._$instance$initializer.call(self, $decl, $d);
				return self;
			});
			this.$instance$initializer = (function ($decl, $d) {
				var self = this;
				self._$superInit$NewspeakCompilation$LocalEntry($decl, $d);
				self._$remote$(false);
				self._$used$(false);
				return self;
			});
			this.$isLocalBinding = (function () {
				var self = this;
				return true;
			});
			this.$isTemporaryAST = (function () {
				var self = this;
				return self._$ast().$isTemporaryAST();
			});
			this.$name = (function () {
				var self = this;
				return self._$ast().$name();
			});
			this.$offset = (function () {
				return this.$offset$slot;
			});
			this.$offset$ = (function (v) {
				this.$offset$slot = v;
				return this;
			});
			this.$remote = (function () {
				return this.$remote$slot;
			});
			this.$remote$ = (function (v) {
				this.$remote$slot = v;
				return this;
			});
			this.$remoteVector = (function () {
				return this.$remoteVector$slot;
			});
			this.$remoteVector$ = (function (v) {
				this.$remoteVector$slot = v;
				return this;
			});
			this.$used = (function () {
				return this.$used$slot;
			});
			this.$used$ = (function (v) {
				this.$used$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakCompilation`LocalEntry";
					this._$superInit$NewspeakCompilation$LocalEntry = $.$superInit$NewspeakCompilation$LocalEntry;
					this.$superInit$NewspeakCompilation$LocalEntry = dnuCatcher("$superInit$NewspeakCompilation$LocalEntry");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isLocalBinding = this._$isLocalBinding = $.$isLocalBinding;
					this.$isTemporaryAST = this._$isTemporaryAST = $.$isTemporaryAST;
					this.$name = this._$name = $.$name;
					this.$offset = this._$offset = $.$offset;
					this.$offset$ = this._$offset$ = $.$offset$;
					this.$remote = this._$remote = $.$remote;
					this.$remote$ = this._$remote$ = $.$remote$;
					this.$remoteVector = this._$remoteVector = $.$remoteVector;
					this.$remoteVector$ = this._$remoteVector$ = $.$remoteVector$;
					this.$used = this._$used = $.$used;
					this.$used$ = this._$used$ = $.$used$;
					this.$enclosingObjects$NewspeakCompilation$LocalEntry = enclosingObjects;
					this.$super$NewspeakCompilation$LocalEntry$slot = runtimeSuperclass;
					this["NewspeakCompilation`LocalEntry"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$offset$slot = nil;
						this.$remote$slot = nil;
						this.$remoteVector$slot = nil;
						this.$used$slot = nil;
					});
					this.basicNew = this["NewspeakCompilation`LocalEntry"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakCompilation`LocalEntry";
				this.slots = [];
				this.methods = [new MM("forDeclaration:atDepth:", true, null)];
				this.nestedClasses = [];
				this.$forDeclaration$atDepth$ = (function ($decl, $d) {
					return (new this.nonMeta.basicNew()).$instance$initializer($decl, $d);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakCompilation`LocalEntry";
						this.$forDeclaration$atDepth$ = this._$forDeclaration$atDepth$ = $.$forDeclaration$atDepth$;
						this.$enclosingObjects$NewspeakCompilation$LocalEntry = enclosingObjects;
						this.$super$NewspeakCompilation$LocalEntry = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakCompilation$MethodEntry = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakCompilation`MethodEntry";
			this.name = "NewspeakCompilation`MethodEntry";
			this.header = "MethodEntry forDeclaration: decl atDepth: d = SymbolTableEntry forAST: decl atDepth: d (|\r|)";
			this.slots = [];
			this.methods = [
				new MM("superInit`NewspeakCompilation`MethodEntry", true, "forAST: decl atDepth: d"),
				new MM("instance`initializer", true, "forAST: decl atDepth: d"),
				new MM("isMethodBinding", false, "public isMethodBinding ^<Boolean> = (\r	^true\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakCompilation$MethodEntry = (function ($decl, $d) {
				var self = this;
				self.$super$NewspeakCompilation$MethodEntry$slot._$instance$initializer.call(self, $decl, $d);
				return self;
			});
			this.$instance$initializer = (function ($decl, $d) {
				var self = this;
				self._$superInit$NewspeakCompilation$MethodEntry($decl, $d);
				return self;
			});
			this.$isMethodBinding = (function () {
				var self = this;
				return true;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakCompilation`MethodEntry";
					this._$superInit$NewspeakCompilation$MethodEntry = $.$superInit$NewspeakCompilation$MethodEntry;
					this.$superInit$NewspeakCompilation$MethodEntry = dnuCatcher("$superInit$NewspeakCompilation$MethodEntry");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isMethodBinding = this._$isMethodBinding = $.$isMethodBinding;
					this.$enclosingObjects$NewspeakCompilation$MethodEntry = enclosingObjects;
					this.$super$NewspeakCompilation$MethodEntry$slot = runtimeSuperclass;
					this["NewspeakCompilation`MethodEntry"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["NewspeakCompilation`MethodEntry"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakCompilation`MethodEntry";
				this.slots = [];
				this.methods = [new MM("forDeclaration:atDepth:", true, null)];
				this.nestedClasses = [];
				this.$forDeclaration$atDepth$ = (function ($decl, $d) {
					return (new this.nonMeta.basicNew()).$instance$initializer($decl, $d);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakCompilation`MethodEntry";
						this.$forDeclaration$atDepth$ = this._$forDeclaration$atDepth$ = $.$forDeclaration$atDepth$;
						this.$enclosingObjects$NewspeakCompilation$MethodEntry = enclosingObjects;
						this.$super$NewspeakCompilation$MethodEntry = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakCompilation$Namer = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakCompilation`Namer";
			this.name = "NewspeakCompilation`Namer";
			this.header = "Namer = ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`NewspeakCompilation`Namer", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("fullyQualifySimpleName:with:", false, "public fullyQualifySimpleName: sn with: fqp = (\r	^(fqp, syntheticNameSeparator, sn) asSymbol\r)"),
				new MM("isReservedWord:", false, "public isReservedWord: selector = (\r	^{#self. #super. #outer. #true. #false. #nil. #thisContext} includes: selector\r)"),
				new MM("mixinNameOfClassNamed:", false, "public mixinNameOfClassNamed: className = (\r	|\r	simpleNames\r	rawNames\r	|\r	rawNames:: className subStrings: syntheticNameSeparator. \r	rawNames size =1 ifTrue:[^className].\r	simpleNames:: rawNames select: [:n | n initialIntegerOrNil isNil].\r	assert: [simpleNames size >= 2] message: ''.\r	^(simpleNames fold: [:sn1 :sn2 | sn1, syntheticNameSeparator, sn2]) asSymbol\r)"),
				new MM("mixinSlotNameFor:", false, "public mixinSlotNameFor: nestedName = (\r	| mixinName |\r	mixinName:: self mixinNameOfClassNamed: nestedName.\r	^(mixinName, syntheticNameSeparator, 'slot') asSymbol\r)"),
				new MM("setterSelectorFor:", false, "public setterSelectorFor: slot <SlotDefAST | InstanceVariableMirror> ^<Symbol> = (\r	^((slot isMutableSlot ifTrue: [ '' ] ifFalse: [ 'setOnce`' ]), slot name, ':') asSymbol.\r)"),
				new MM("setterTemp", false, "public setterTemp = (\r	^#'@setterTemp'\r)"),
				new MM("slotNameForNestedClassNamed:within:", false, "public slotNameForNestedClassNamed: ncn <String> within: outerName <String> ^ <String> = (\r	^mixinSlotNameFor: (fullyQualifySimpleName: ncn with: outerName).\r)"),
				new MM("syntheticNameSeparator", false, "public syntheticNameSeparator = (\r	^'`'\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakCompilation$Namer = (function () {
				var self = this;
				self.$super$NewspeakCompilation$Namer$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakCompilation$Namer();
				return self;
			});
			this.$fullyQualifySimpleName$with$ = (function ($sn, $fqp) {
				var self = this;
				return $fqp.$$comma(self._$syntheticNameSeparator()).$$comma($sn).$asSymbol();
			});
			this.$isReservedWord$ = (function ($selector) {
				var self = this;
				return ([
					"self",
					"super",
					"outer",
					"true",
					"false",
					"nil",
					"thisContext"
				]).$includes$($selector);
			});
			this.$mixinNameOfClassNamed$ = (function ($className) {
				var self = this;
				var $simpleNames = nil;
				var $rawNames = nil;
				$rawNames = $className.$subStrings$(self._$syntheticNameSeparator());
				if ($rawNames.$size().$$equal(1)) {
					return $className;
				} else {
					nil;
				};
				$simpleNames = $rawNames.$select$((function ($n) {
					return $n.$initialIntegerOrNil().$isNil();
				}));
				self._$assert$message$((function () {
					return $simpleNames.$size() >= 2;
				}), "");
				return $simpleNames.$fold$((function ($sn1, $sn2) {
					return $sn1.$$comma(self._$syntheticNameSeparator()).$$comma($sn2);
				})).$asSymbol();
			});
			this.$mixinSlotNameFor$ = (function ($nestedName) {
				var self = this;
				var $mixinName = nil;
				$mixinName = self._$mixinNameOfClassNamed$($nestedName);
				return $mixinName.$$comma(self._$syntheticNameSeparator()).$$comma("slot").$asSymbol();
			});
			this.$setterSelectorFor$ = (function ($slot) {
				var self = this;
				return $slot.$isMutableSlot().$ifTrue$ifFalse$((function () {
					return "";
				}), (function () {
					return "setOnce`";
				})).$$comma($slot.$name()).$$comma(":").$asSymbol();
			});
			this.$setterTemp = (function () {
				var self = this;
				return "@setterTemp";
			});
			this.$slotNameForNestedClassNamed$within$ = (function ($ncn, $outerName) {
				var self = this;
				return self._$mixinSlotNameFor$(self._$fullyQualifySimpleName$with$($ncn, $outerName));
			});
			this.$syntheticNameSeparator = (function () {
				var self = this;
				return "`";
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakCompilation`Namer";
					this._$superInit$NewspeakCompilation$Namer = $.$superInit$NewspeakCompilation$Namer;
					this.$superInit$NewspeakCompilation$Namer = dnuCatcher("$superInit$NewspeakCompilation$Namer");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$fullyQualifySimpleName$with$ = this._$fullyQualifySimpleName$with$ = $.$fullyQualifySimpleName$with$;
					this.$isReservedWord$ = this._$isReservedWord$ = $.$isReservedWord$;
					this.$mixinNameOfClassNamed$ = this._$mixinNameOfClassNamed$ = $.$mixinNameOfClassNamed$;
					this.$mixinSlotNameFor$ = this._$mixinSlotNameFor$ = $.$mixinSlotNameFor$;
					this.$setterSelectorFor$ = this._$setterSelectorFor$ = $.$setterSelectorFor$;
					this.$setterTemp = this._$setterTemp = $.$setterTemp;
					this.$slotNameForNestedClassNamed$within$ = this._$slotNameForNestedClassNamed$within$ = $.$slotNameForNestedClassNamed$within$;
					this.$syntheticNameSeparator = this._$syntheticNameSeparator = $.$syntheticNameSeparator;
					this.$enclosingObjects$NewspeakCompilation$Namer = enclosingObjects;
					this.$super$NewspeakCompilation$Namer$slot = runtimeSuperclass;
					this["NewspeakCompilation`Namer"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["NewspeakCompilation`Namer"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakCompilation`Namer";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakCompilation`Namer";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakCompilation$Namer = enclosingObjects;
						this.$super$NewspeakCompilation$Namer = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakCompilation$Scope = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakCompilation`Scope";
			this.name = "NewspeakCompilation`Scope";
			this.header = "Scope = ((* A generic scope facility. *)|\rpublic superScope <Scope>\rbindings <Map[Symbol, SymbolTableEntry]> = Dictionary new.\r|)";
			this.slots = [
				new SM("superScope", true, false),
				new SM("bindings", false, false)
			];
			this.methods = [
				new MM("superInit`NewspeakCompilation`Scope", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("at:", false, "public at: key <Symbol> ^<SymbolTableEntry> = (\r	(* Answers the value associated with aKey in this or one the super scopes or fails if aKey is absent. *)\r	^self at: key ifAbsent: [Error signal: 'Key ', key, ' not found!']\r)"),
				new MM("at:depth:", false, "public at: key depth: d = (\r	depth = d ifFalse: [\r		superScope isNil\r			ifTrue: [^nil]\r			ifFalse: [^superScope at: key depth: d]].\r	^bindings at: key ifAbsent: [nil]\r)"),
				new MM("at:ifAbsent:", false, "public at: key <Symbol> ifAbsent: blk <[X def]> ^<SymbolTableEntry | X> = (\r	(* Answers the value associated with aKey in this or one of the superScopes or the value of aBlock if aKey is absent. *)\r	(* Optimization note: This is written using [nil] blocks to avoid passing non-clean blocks dynamically down the scope structure. *)\r\r	| val <T> |\r	(val:: self bindings at: key ifAbsent: [ nil ]) notNil\r		ifTrue: [ ^val ].\r	self superScope isNil\r		ifTrue: [ ^blk value ].\r	(val:: self superScope at: key ifAbsent: [ nil ]) notNil\r		ifTrue: [ ^val ].\r	^blk value\r)"),
				new MM("at:put:", false, "public at: key <Symbol> put: value <SymbolTableEntry> = (\r	^self bindings at: key put: value\r)"),
				new MM("at:put:ifThere:", false, "public at: key <Symbol> put: value <SymbolTableEntry> ifThere: aBlock <[X def]> ^<SymbolTableEntry | X>= (\r\r	(* Associates aValue with aKey and answers aValue if aKey\r    was absent. Otherwise answers the value of aBlock. *)\r	| wasAbsent ::= false. |\r	bindings at: key ifAbsent: [bindings at: key put: value. wasAbsent:: true].\r	^wasAbsent\r		ifTrue: [value]\r		ifFalse: [aBlock value]\r)"),
				new MM("depth", false, "public depth ^<Integer> = (\r	superScope isNil ifTrue: [^0].\r	^superScope depth + 1.\r)"),
				new MM("printOn:", false, "public printOn: stm = (\r	stm nextPutAll: 'Scope('.\r	bindings keys\r		do: [:key | stm nextPutAll: key]\r		separatedBy: [ stm nextPutAll: ', '].\r	stm nextPutAll: ') in '.\r	superScope printOn: stm.\r)"),
				new MM("setSuperScope:", false, "public setSuperScope: sc = (\r	superScope isNil\r		ifTrue: [superScope: sc]\r		ifFalse: [superScope setSuperScope: sc]\r)"),
				new MM("superScope", true, null),
				new MM("superScope:", true, null),
				new MM("bindings", true, null),
				new MM("setOnce`bindings:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakCompilation$Scope = (function () {
				var self = this;
				self.$super$NewspeakCompilation$Scope$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function () {
				var self = this;
				self._$superInit$NewspeakCompilation$Scope();
				self._$setOnce$bindings$(self.$enclosingObjects$NewspeakCompilation$Scope[0]._$Dictionary().$new());
				return self;
			});
			this.$at$ = (function ($key) {
				var self = this;
				return self._$at$ifAbsent$($key, (function () {
					return self._$Error().$signal$(("Key ").$$comma($key).$$comma(" not found!"));
				}));
			});
			this.$at$depth$ = (function ($key, $d) {
				var self = this;
				if (!self._$depth().$$equal($d)) {
					if (self._$superScope().$isNil()) {
						return nil;
					} else {
						return self._$superScope().$at$depth$($key, $d);
					};
				} else {
					nil;
				};
				return self._$bindings().$at$ifAbsent$($key, (function () {
					return nil;
				}));
			});
			this.$at$ifAbsent$ = (function ($key, $blk) {
				var self = this;
				var $val = nil;
				if (($val = self._$bindings().$at$ifAbsent$($key, (function () {
					return nil;
				}))).$notNil()) {
					return $val;
				} else {
					nil;
				};
				if (self._$superScope().$isNil()) {
					return $blk.$value();
				} else {
					nil;
				};
				if (($val = self._$superScope().$at$ifAbsent$($key, (function () {
					return nil;
				}))).$notNil()) {
					return $val;
				} else {
					nil;
				};
				return $blk.$value();
			});
			this.$at$put$ = (function ($key, $value) {
				var self = this;
				return self._$bindings().$at$put$($key, $value);
			});
			this.$at$put$ifThere$ = (function ($key, $value, $aBlock) {
				var self = this;
				var $wasAbsent = nil;
				$wasAbsent = false;
				self._$bindings().$at$ifAbsent$($key, (function () {
					self._$bindings().$at$put$($key, $value);
					return $wasAbsent = true;
				}));
				return $wasAbsent.$ifTrue$ifFalse$((function () {
					return $value;
				}), (function () {
					return $aBlock.$value();
				}));
			});
			this.$depth = (function () {
				var self = this;
				if (self._$superScope().$isNil()) {
					return 0;
				} else {
					nil;
				};
				return self._$superScope().$depth() + 1;
			});
			this.$printOn$ = (function ($stm) {
				var self = this;
				$stm.$nextPutAll$("Scope(");
				self._$bindings().$keys().$do$separatedBy$((function ($key) {
					return $stm.$nextPutAll$($key);
				}), (function () {
					return $stm.$nextPutAll$(", ");
				}));
				$stm.$nextPutAll$(") in ");
				self._$superScope().$printOn$($stm);
				return self;
			});
			this.$setSuperScope$ = (function ($sc) {
				var self = this;
				if (self._$superScope().$isNil()) {
					self._$superScope$($sc);
				} else {
					self._$superScope().$setSuperScope$($sc);
				};
				return self;
			});
			this.$superScope = (function () {
				return this.$superScope$slot;
			});
			this.$superScope$ = (function (v) {
				this.$superScope$slot = v;
				return this;
			});
			this.$bindings = (function () {
				return this.$bindings$slot;
			});
			this.$setOnce$bindings$ = (function (v) {
				this.$bindings$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakCompilation`Scope";
					this._$superInit$NewspeakCompilation$Scope = $.$superInit$NewspeakCompilation$Scope;
					this.$superInit$NewspeakCompilation$Scope = dnuCatcher("$superInit$NewspeakCompilation$Scope");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$at$ = this._$at$ = $.$at$;
					this.$at$depth$ = this._$at$depth$ = $.$at$depth$;
					this.$at$ifAbsent$ = this._$at$ifAbsent$ = $.$at$ifAbsent$;
					this.$at$put$ = this._$at$put$ = $.$at$put$;
					this.$at$put$ifThere$ = this._$at$put$ifThere$ = $.$at$put$ifThere$;
					this.$depth = this._$depth = $.$depth;
					this.$printOn$ = this._$printOn$ = $.$printOn$;
					this.$setSuperScope$ = this._$setSuperScope$ = $.$setSuperScope$;
					this.$superScope = this._$superScope = $.$superScope;
					this.$superScope$ = this._$superScope$ = $.$superScope$;
					this._$bindings = $.$bindings;
					this.$bindings = dnuCatcher("$bindings");
					this._$setOnce$bindings$ = $.$setOnce$bindings$;
					this.$setOnce$bindings$ = dnuCatcher("$setOnce$bindings$");
					this.$enclosingObjects$NewspeakCompilation$Scope = enclosingObjects;
					this.$super$NewspeakCompilation$Scope$slot = runtimeSuperclass;
					this["NewspeakCompilation`Scope"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$superScope$slot = nil;
						this.$bindings$slot = nil;
					});
					this.basicNew = this["NewspeakCompilation`Scope"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakCompilation`Scope";
				this.slots = [];
				this.methods = [new MM("new", true, null)];
				this.nestedClasses = [];
				this.$new = (function () {
					return (new this.nonMeta.basicNew()).$instance$initializer();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakCompilation`Scope";
						this.$new = this._$new = $.$new;
						this.$enclosingObjects$NewspeakCompilation$Scope = enclosingObjects;
						this.$super$NewspeakCompilation$Scope = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakCompilation$SlotEntry = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakCompilation`SlotEntry";
			this.name = "NewspeakCompilation`SlotEntry";
			this.header = "SlotEntry forDeclaration: decl <VarDeclAST> atDepth: d <Integer> = SymbolTableEntry forAST: decl atDepth: d ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`NewspeakCompilation`SlotEntry", true, "forAST: decl atDepth: d"),
				new MM("instance`initializer", true, "forAST: decl atDepth: d"),
				new MM("isSlotBinding", false, "public isSlotBinding ^<Boolean> = (\r	^true\r)"),
				new MM("name", false, "public name = (\r	^ast name\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakCompilation$SlotEntry = (function ($decl, $d) {
				var self = this;
				self.$super$NewspeakCompilation$SlotEntry$slot._$instance$initializer.call(self, $decl, $d);
				return self;
			});
			this.$instance$initializer = (function ($decl, $d) {
				var self = this;
				self._$superInit$NewspeakCompilation$SlotEntry($decl, $d);
				return self;
			});
			this.$isSlotBinding = (function () {
				var self = this;
				return true;
			});
			this.$name = (function () {
				var self = this;
				return self._$ast().$name();
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakCompilation`SlotEntry";
					this._$superInit$NewspeakCompilation$SlotEntry = $.$superInit$NewspeakCompilation$SlotEntry;
					this.$superInit$NewspeakCompilation$SlotEntry = dnuCatcher("$superInit$NewspeakCompilation$SlotEntry");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isSlotBinding = this._$isSlotBinding = $.$isSlotBinding;
					this.$name = this._$name = $.$name;
					this.$enclosingObjects$NewspeakCompilation$SlotEntry = enclosingObjects;
					this.$super$NewspeakCompilation$SlotEntry$slot = runtimeSuperclass;
					this["NewspeakCompilation`SlotEntry"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["NewspeakCompilation`SlotEntry"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakCompilation`SlotEntry";
				this.slots = [];
				this.methods = [new MM("forDeclaration:atDepth:", true, null)];
				this.nestedClasses = [];
				this.$forDeclaration$atDepth$ = (function ($decl, $d) {
					return (new this.nonMeta.basicNew()).$instance$initializer($decl, $d);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakCompilation`SlotEntry";
						this.$forDeclaration$atDepth$ = this._$forDeclaration$atDepth$ = $.$forDeclaration$atDepth$;
						this.$enclosingObjects$NewspeakCompilation$SlotEntry = enclosingObjects;
						this.$super$NewspeakCompilation$SlotEntry = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakCompilation$SymbolTableEntry = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for NewspeakCompilation`SymbolTableEntry";
			this.name = "NewspeakCompilation`SymbolTableEntry";
			this.header = "SymbolTableEntry forAST: tree atDepth: d = ((* An entry in a scope. *)|\rpublic ast <AST> ::= tree. (* Should investigate mutators of this slot and make immutable if possible. *)\rpublic depth <Integer> = d.\r|)";
			this.slots = [
				new SM("ast", true, false),
				new SM("depth", false, false)
			];
			this.methods = [
				new MM("superInit`NewspeakCompilation`SymbolTableEntry", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("isMessagePatternNode", false, "public isMessagePatternNode ^<Boolean> = (\r	^self ast isMessagePatternNode\r)"),
				new MM("isVarDeclNode", false, "public isVarDeclNode ^<Boolean> = (\r	^self ast isVarDeclNode\r)"),
				new MM("ast", true, null),
				new MM("ast:", true, null),
				new MM("depth", true, null),
				new MM("setOnce`depth:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$NewspeakCompilation$SymbolTableEntry = (function ($tree, $d) {
				var self = this;
				self.$super$NewspeakCompilation$SymbolTableEntry$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($tree, $d) {
				var self = this;
				self._$superInit$NewspeakCompilation$SymbolTableEntry($tree, $d);
				self._$ast$($tree);
				self._$setOnce$depth$($d);
				return self;
			});
			this.$isMessagePatternNode = (function () {
				var self = this;
				return self._$ast().$isMessagePatternNode();
			});
			this.$isVarDeclNode = (function () {
				var self = this;
				return self._$ast().$isVarDeclNode();
			});
			this.$ast = (function () {
				return this.$ast$slot;
			});
			this.$ast$ = (function (v) {
				this.$ast$slot = v;
				return this;
			});
			this.$depth = (function () {
				return this.$depth$slot;
			});
			this.$setOnce$depth$ = (function (v) {
				this.$depth$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for NewspeakCompilation`SymbolTableEntry";
					this._$superInit$NewspeakCompilation$SymbolTableEntry = $.$superInit$NewspeakCompilation$SymbolTableEntry;
					this.$superInit$NewspeakCompilation$SymbolTableEntry = dnuCatcher("$superInit$NewspeakCompilation$SymbolTableEntry");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$isMessagePatternNode = this._$isMessagePatternNode = $.$isMessagePatternNode;
					this.$isVarDeclNode = this._$isVarDeclNode = $.$isVarDeclNode;
					this.$ast = this._$ast = $.$ast;
					this.$ast$ = this._$ast$ = $.$ast$;
					this.$depth = this._$depth = $.$depth;
					this.$setOnce$depth$ = this._$setOnce$depth$ = $.$setOnce$depth$;
					this.$enclosingObjects$NewspeakCompilation$SymbolTableEntry = enclosingObjects;
					this.$super$NewspeakCompilation$SymbolTableEntry$slot = runtimeSuperclass;
					this["NewspeakCompilation`SymbolTableEntry"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$ast$slot = nil;
						this.$depth$slot = nil;
					});
					this.basicNew = this["NewspeakCompilation`SymbolTableEntry"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for NewspeakCompilation`SymbolTableEntry";
				this.slots = [];
				this.methods = [new MM("forAST:atDepth:", true, null)];
				this.nestedClasses = [];
				this.$forAST$atDepth$ = (function ($tree, $d) {
					return (new this.nonMeta.basicNew()).$instance$initializer($tree, $d);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for NewspeakCompilation`SymbolTableEntry";
						this.$forAST$atDepth$ = this._$forAST$atDepth$ = $.$forAST$atDepth$;
						this.$enclosingObjects$NewspeakCompilation$SymbolTableEntry = enclosingObjects;
						this.$super$NewspeakCompilation$SymbolTableEntry = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$NewspeakCompilation$ClassEntry.enclosingMixin = this;
		this.$NewspeakCompilation$Compiler.enclosingMixin = this;
		this.$NewspeakCompilation$LocalEntry.enclosingMixin = this;
		this.$NewspeakCompilation$MethodEntry.enclosingMixin = this;
		this.$NewspeakCompilation$Namer.enclosingMixin = this;
		this.$NewspeakCompilation$Scope.enclosingMixin = this;
		this.$NewspeakCompilation$SlotEntry.enclosingMixin = this;
		this.$NewspeakCompilation$SymbolTableEntry.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for NewspeakCompilation";
				this._$superInit$NewspeakCompilation = $.$superInit$NewspeakCompilation;
				this.$superInit$NewspeakCompilation = dnuCatcher("$superInit$NewspeakCompilation");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this._$ClassEntry = $.$ClassEntry;
				this.$ClassEntry = dnuCatcher("$ClassEntry");
				this._$Compiler = $.$Compiler;
				this.$Compiler = dnuCatcher("$Compiler");
				this._$LocalEntry = $.$LocalEntry;
				this.$LocalEntry = dnuCatcher("$LocalEntry");
				this._$MethodEntry = $.$MethodEntry;
				this.$MethodEntry = dnuCatcher("$MethodEntry");
				this._$Namer = $.$Namer;
				this.$Namer = dnuCatcher("$Namer");
				this._$Scope = $.$Scope;
				this.$Scope = dnuCatcher("$Scope");
				this._$SlotEntry = $.$SlotEntry;
				this.$SlotEntry = dnuCatcher("$SlotEntry");
				this._$SymbolTableEntry = $.$SymbolTableEntry;
				this.$SymbolTableEntry = dnuCatcher("$SymbolTableEntry");
				this._$Dictionary = $.$Dictionary;
				this.$Dictionary = dnuCatcher("$Dictionary");
				this._$setOnce$Dictionary$ = $.$setOnce$Dictionary$;
				this.$setOnce$Dictionary$ = dnuCatcher("$setOnce$Dictionary$");
				this._$OrderedCollection = $.$OrderedCollection;
				this.$OrderedCollection = dnuCatcher("$OrderedCollection");
				this._$setOnce$OrderedCollection$ = $.$setOnce$OrderedCollection$;
				this.$setOnce$OrderedCollection$ = dnuCatcher("$setOnce$OrderedCollection$");
				this._$AST = $.$AST;
				this.$AST = dnuCatcher("$AST");
				this._$setOnce$AST$ = $.$setOnce$AST$;
				this.$setOnce$AST$ = dnuCatcher("$setOnce$AST$");
				this._$ASTTool = $.$ASTTool;
				this.$ASTTool = dnuCatcher("$ASTTool");
				this._$setOnce$ASTTool$ = $.$setOnce$ASTTool$;
				this.$setOnce$ASTTool$ = dnuCatcher("$setOnce$ASTTool$");
				this._$BlockAST = $.$BlockAST;
				this.$BlockAST = dnuCatcher("$BlockAST");
				this._$setOnce$BlockAST$ = $.$setOnce$BlockAST$;
				this.$setOnce$BlockAST$ = dnuCatcher("$setOnce$BlockAST$");
				this._$CascadedSendAST = $.$CascadedSendAST;
				this.$CascadedSendAST = dnuCatcher("$CascadedSendAST");
				this._$setOnce$CascadedSendAST$ = $.$setOnce$CascadedSendAST$;
				this.$setOnce$CascadedSendAST$ = dnuCatcher("$setOnce$CascadedSendAST$");
				this._$CodeBodyAST = $.$CodeBodyAST;
				this.$CodeBodyAST = dnuCatcher("$CodeBodyAST");
				this._$setOnce$CodeBodyAST$ = $.$setOnce$CodeBodyAST$;
				this.$setOnce$CodeBodyAST$ = dnuCatcher("$setOnce$CodeBodyAST$");
				this._$MessageAST = $.$MessageAST;
				this.$MessageAST = dnuCatcher("$MessageAST");
				this._$setOnce$MessageAST$ = $.$setOnce$MessageAST$;
				this.$setOnce$MessageAST$ = dnuCatcher("$setOnce$MessageAST$");
				this._$MessagePatternAST = $.$MessagePatternAST;
				this.$MessagePatternAST = dnuCatcher("$MessagePatternAST");
				this._$setOnce$MessagePatternAST$ = $.$setOnce$MessagePatternAST$;
				this.$setOnce$MessagePatternAST$ = dnuCatcher("$setOnce$MessagePatternAST$");
				this._$MethodAST = $.$MethodAST;
				this.$MethodAST = dnuCatcher("$MethodAST");
				this._$setOnce$MethodAST$ = $.$setOnce$MethodAST$;
				this.$setOnce$MethodAST$ = dnuCatcher("$setOnce$MethodAST$");
				this._$NormalSendAST = $.$NormalSendAST;
				this.$NormalSendAST = dnuCatcher("$NormalSendAST");
				this._$setOnce$NormalSendAST$ = $.$setOnce$NormalSendAST$;
				this.$setOnce$NormalSendAST$ = dnuCatcher("$setOnce$NormalSendAST$");
				this._$NumberAST = $.$NumberAST;
				this.$NumberAST = dnuCatcher("$NumberAST");
				this._$setOnce$NumberAST$ = $.$setOnce$NumberAST$;
				this.$setOnce$NumberAST$ = dnuCatcher("$setOnce$NumberAST$");
				this._$ReturnStatAST = $.$ReturnStatAST;
				this.$ReturnStatAST = dnuCatcher("$ReturnStatAST");
				this._$setOnce$ReturnStatAST$ = $.$setOnce$ReturnStatAST$;
				this.$setOnce$ReturnStatAST$ = dnuCatcher("$setOnce$ReturnStatAST$");
				this._$TupleAST = $.$TupleAST;
				this.$TupleAST = dnuCatcher("$TupleAST");
				this._$setOnce$TupleAST$ = $.$setOnce$TupleAST$;
				this.$setOnce$TupleAST$ = dnuCatcher("$setOnce$TupleAST$");
				this._$VariableAST = $.$VariableAST;
				this.$VariableAST = dnuCatcher("$VariableAST");
				this._$setOnce$VariableAST$ = $.$setOnce$VariableAST$;
				this.$setOnce$VariableAST$ = dnuCatcher("$setOnce$VariableAST$");
				this.$namer = this._$namer = $.$namer;
				this.$setOnce$namer$ = this._$setOnce$namer$ = $.$setOnce$namer$;
				this.$NewspeakCompilation$ClassEntry = this._$NewspeakCompilation$ClassEntry = $.$NewspeakCompilation$ClassEntry;
				this.$NewspeakCompilation$ClassEntry$ = this._$NewspeakCompilation$ClassEntry$ = $.$NewspeakCompilation$ClassEntry$;
				this.$NewspeakCompilation$Compiler = this._$NewspeakCompilation$Compiler = $.$NewspeakCompilation$Compiler;
				this.$NewspeakCompilation$Compiler$ = this._$NewspeakCompilation$Compiler$ = $.$NewspeakCompilation$Compiler$;
				this.$NewspeakCompilation$LocalEntry = this._$NewspeakCompilation$LocalEntry = $.$NewspeakCompilation$LocalEntry;
				this.$NewspeakCompilation$LocalEntry$ = this._$NewspeakCompilation$LocalEntry$ = $.$NewspeakCompilation$LocalEntry$;
				this.$NewspeakCompilation$MethodEntry = this._$NewspeakCompilation$MethodEntry = $.$NewspeakCompilation$MethodEntry;
				this.$NewspeakCompilation$MethodEntry$ = this._$NewspeakCompilation$MethodEntry$ = $.$NewspeakCompilation$MethodEntry$;
				this.$NewspeakCompilation$Namer = this._$NewspeakCompilation$Namer = $.$NewspeakCompilation$Namer;
				this.$NewspeakCompilation$Namer$ = this._$NewspeakCompilation$Namer$ = $.$NewspeakCompilation$Namer$;
				this.$NewspeakCompilation$Scope = this._$NewspeakCompilation$Scope = $.$NewspeakCompilation$Scope;
				this.$NewspeakCompilation$Scope$ = this._$NewspeakCompilation$Scope$ = $.$NewspeakCompilation$Scope$;
				this.$NewspeakCompilation$SlotEntry = this._$NewspeakCompilation$SlotEntry = $.$NewspeakCompilation$SlotEntry;
				this.$NewspeakCompilation$SlotEntry$ = this._$NewspeakCompilation$SlotEntry$ = $.$NewspeakCompilation$SlotEntry$;
				this.$NewspeakCompilation$SymbolTableEntry = this._$NewspeakCompilation$SymbolTableEntry = $.$NewspeakCompilation$SymbolTableEntry;
				this.$NewspeakCompilation$SymbolTableEntry$ = this._$NewspeakCompilation$SymbolTableEntry$ = $.$NewspeakCompilation$SymbolTableEntry$;
				this.$enclosingObjects$NewspeakCompilation = enclosingObjects;
				this.$super$NewspeakCompilation$slot = runtimeSuperclass;
				this.NewspeakCompilation = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$Dictionary$slot = nil;
					this.$OrderedCollection$slot = nil;
					this.$AST$slot = nil;
					this.$ASTTool$slot = nil;
					this.$BlockAST$slot = nil;
					this.$CascadedSendAST$slot = nil;
					this.$CodeBodyAST$slot = nil;
					this.$MessageAST$slot = nil;
					this.$MessagePatternAST$slot = nil;
					this.$MethodAST$slot = nil;
					this.$NormalSendAST$slot = nil;
					this.$NumberAST$slot = nil;
					this.$ReturnStatAST$slot = nil;
					this.$TupleAST$slot = nil;
					this.$VariableAST$slot = nil;
					this.$namer$slot = nil;
					this.$NewspeakCompilation$ClassEntry$slot = nil;
					this.$NewspeakCompilation$Compiler$slot = nil;
					this.$NewspeakCompilation$LocalEntry$slot = nil;
					this.$NewspeakCompilation$MethodEntry$slot = nil;
					this.$NewspeakCompilation$Namer$slot = nil;
					this.$NewspeakCompilation$Scope$slot = nil;
					this.$NewspeakCompilation$SlotEntry$slot = nil;
					this.$NewspeakCompilation$SymbolTableEntry$slot = nil;
				});
				this.basicNew = this.NewspeakCompilation;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for NewspeakCompilation";
			this.slots = [];
			this.methods = [new MM("usingPlatform:asts:", true, null)];
			this.nestedClasses = [];
			this.$usingPlatform$asts$ = (function ($p, $asts) {
				return (new this.nonMeta.basicNew()).$instance$initializer($p, $asts);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for NewspeakCompilation";
					this.$usingPlatform$asts$ = this._$usingPlatform$asts$ = $.$usingPlatform$asts$;
					this.$enclosingObjects$NewspeakCompilation = enclosingObjects;
					this.$super$NewspeakCompilation = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$Literate = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for Literate";
		this.name = "Literate";
		this.header = "Literate packageUsing: manifest = (\r| BrowsingForHTML = manifest BrowsingForHTML.  |\r)";
		this.slots = [
			new SM("BrowsingForHTML", false, false),
			new SM("Literate`Evaluators", true, true)
		];
		this.methods = [
			new MM("superInit`Literate", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("main:args:", false, "public main: platform args: args = (\r	|\r	browsing = BrowsingForHTML usingPlatform: platform.\r	evaluators = Evaluators usingPlatform: platform browsing: browsing.\r	document = platform aliens global at: 'document'.\r	elements = document getElementsByClassName: 'evaluator'.\r	|\r	\r	1 to: (elements at: 'length') do: [:i |\r		|\r		element = elements at: i - 1.\r		expression = element getAttribute: 'expression'.\r		|\r		platform hopscotch core HopscotchWindow\r			into: element\r			openSubject: (evaluators SnippetSubject onModel: expression)\r	].\r)"),
			new MM("Evaluators", true, null),
			new MM("BrowsingForHTML", true, null),
			new MM("setOnce`BrowsingForHTML:", true, null),
			new MM("Literate`Evaluators", true, null),
			new MM("Literate`Evaluators:", true, null)
		];
		this.nestedClasses = ["Literate`Evaluators"];
		this.applications = [];
		this.$superInit$Literate = (function ($manifest) {
			var self = this;
			self.$super$Literate$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($manifest) {
			var self = this;
			self._$superInit$Literate($manifest);
			self._$setOnce$BrowsingForHTML$($manifest.$BrowsingForHTML());
			return self;
		});
		this.$main$args$ = (function ($platform, $args) {
			var self = this;
			var $browsing = nil;
			var $evaluators = nil;
			var $document = nil;
			var $elements = nil;
			$browsing = self._$BrowsingForHTML().$usingPlatform$($platform);
			$evaluators = self._$Evaluators().$usingPlatform$browsing$($platform, $browsing);
			$document = $platform.$aliens().$global().$at$("document");
			$elements = $document.$getElementsByClassName$("evaluator");
			{
				var $$limit = nil;
				var $i = nil;
				nil;
				$i = 1;
				$$limit = $elements.$at$("length");
				for (; $$limit.$$greater$equal($i); ) {
					var $element = nil;
					var $expression = nil;
					$element = $elements.$at$($i - 1);
					$expression = $element.$getAttribute$("expression");
					$platform.$hopscotch().$core().$HopscotchWindow().$into$openSubject$($element, $evaluators.$SnippetSubject().$onModel$($expression));
					$i = (1).$$plus($i);
				};
			};
			return self;
		});
		this.$Evaluators = (function () {
			if (nil === this.$Literate$Evaluators$slot) {
				var self = this;
				var superclass = self._$Object();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$Literate);
				var mixin = $.$Literate$Evaluators;
				this.$Literate$Evaluators$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$Literate$Evaluators$slot;
		});
		this.$BrowsingForHTML = (function () {
			return this.$BrowsingForHTML$slot;
		});
		this.$setOnce$BrowsingForHTML$ = (function (v) {
			this.$BrowsingForHTML$slot = v;
			return this;
		});
		this.$Literate$Evaluators = (function () {
			return this.$Literate$Evaluators$slot;
		});
		this.$Literate$Evaluators$ = (function (v) {
			this.$Literate$Evaluators$slot = v;
			return this;
		});
		this.$Literate$Evaluators = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for Literate`Evaluators";
			this.name = "Literate`Evaluators";
			this.header = "Evaluators usingPlatform: p browsing: b = (|\r	Subject = p hopscotch core Subject.\r	Presenter = p hopscotch core Presenter.\r	ObjectSubject = b ObjectSubject.\r	TextEditorFragment = p hopscotch fragments TextEditorFragment.\r	Color = p graphics Color.\r	Gradient = p hopscotch Gradient.\r	List = p collections OrderedCollection.\r	ObjectMirror = p mirrors ObjectMirror.\r	MixinBuilder = p mirrors MixinBuilder.\r	platformMirror = ObjectMirror reflecting: p.\r|)";
			this.slots = [
				new SM("Subject", false, false),
				new SM("Presenter", false, false),
				new SM("ObjectSubject", false, false),
				new SM("TextEditorFragment", false, false),
				new SM("Color", false, false),
				new SM("Gradient", false, false),
				new SM("List", false, false),
				new SM("ObjectMirror", false, false),
				new SM("MixinBuilder", false, false),
				new SM("platformMirror", false, false),
				new SM("Literate`Evaluators`SnippetPresenter", true, true),
				new SM("Literate`Evaluators`SnippetSubject", true, true)
			];
			this.methods = [
				new MM("superInit`Literate`Evaluators", true, " "),
				new MM("instance`initializer", true, " "),
				new MM("SnippetPresenter", true, null),
				new MM("SnippetSubject", true, null),
				new MM("Subject", true, null),
				new MM("setOnce`Subject:", true, null),
				new MM("Presenter", true, null),
				new MM("setOnce`Presenter:", true, null),
				new MM("ObjectSubject", true, null),
				new MM("setOnce`ObjectSubject:", true, null),
				new MM("TextEditorFragment", true, null),
				new MM("setOnce`TextEditorFragment:", true, null),
				new MM("Color", true, null),
				new MM("setOnce`Color:", true, null),
				new MM("Gradient", true, null),
				new MM("setOnce`Gradient:", true, null),
				new MM("List", true, null),
				new MM("setOnce`List:", true, null),
				new MM("ObjectMirror", true, null),
				new MM("setOnce`ObjectMirror:", true, null),
				new MM("MixinBuilder", true, null),
				new MM("setOnce`MixinBuilder:", true, null),
				new MM("platformMirror", true, null),
				new MM("setOnce`platformMirror:", true, null),
				new MM("Literate`Evaluators`SnippetPresenter", true, null),
				new MM("Literate`Evaluators`SnippetPresenter:", true, null),
				new MM("Literate`Evaluators`SnippetSubject", true, null),
				new MM("Literate`Evaluators`SnippetSubject:", true, null)
			];
			this.nestedClasses = [
				"Literate`Evaluators`SnippetPresenter",
				"Literate`Evaluators`SnippetSubject"
			];
			this.applications = [];
			this.$superInit$Literate$Evaluators = (function ($p, $b) {
				var self = this;
				self.$super$Literate$Evaluators$slot._$instance$initializer.call(self);
				return self;
			});
			this.$instance$initializer = (function ($p, $b) {
				var self = this;
				self._$superInit$Literate$Evaluators($p, $b);
				self._$setOnce$Subject$($p.$hopscotch().$core().$Subject());
				self._$setOnce$Presenter$($p.$hopscotch().$core().$Presenter());
				self._$setOnce$ObjectSubject$($b.$ObjectSubject());
				self._$setOnce$TextEditorFragment$($p.$hopscotch().$fragments().$TextEditorFragment());
				self._$setOnce$Color$($p.$graphics().$Color());
				self._$setOnce$Gradient$($p.$hopscotch().$Gradient());
				self._$setOnce$List$($p.$collections().$OrderedCollection());
				self._$setOnce$ObjectMirror$($p.$mirrors().$ObjectMirror());
				self._$setOnce$MixinBuilder$($p.$mirrors().$MixinBuilder());
				self._$setOnce$platformMirror$(self._$ObjectMirror().$reflecting$($p));
				return self;
			});
			this.$SnippetPresenter = (function () {
				if (nil === this.$Literate$Evaluators$SnippetPresenter$slot) {
					var self = this;
					var superclass = self._$Presenter();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$Literate$Evaluators);
					var mixin = $.$Literate$Evaluators$SnippetPresenter;
					this.$Literate$Evaluators$SnippetPresenter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$Literate$Evaluators$SnippetPresenter$slot;
			});
			this.$SnippetSubject = (function () {
				if (nil === this.$Literate$Evaluators$SnippetSubject$slot) {
					var self = this;
					var superclass = self._$Subject();
					var enclosingObjects = ([this]).concat(this.$enclosingObjects$Literate$Evaluators);
					var mixin = $.$Literate$Evaluators$SnippetSubject;
					this.$Literate$Evaluators$SnippetSubject$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
				};
				return this.$Literate$Evaluators$SnippetSubject$slot;
			});
			this.$Subject = (function () {
				return this.$Subject$slot;
			});
			this.$setOnce$Subject$ = (function (v) {
				this.$Subject$slot = v;
				return this;
			});
			this.$Presenter = (function () {
				return this.$Presenter$slot;
			});
			this.$setOnce$Presenter$ = (function (v) {
				this.$Presenter$slot = v;
				return this;
			});
			this.$ObjectSubject = (function () {
				return this.$ObjectSubject$slot;
			});
			this.$setOnce$ObjectSubject$ = (function (v) {
				this.$ObjectSubject$slot = v;
				return this;
			});
			this.$TextEditorFragment = (function () {
				return this.$TextEditorFragment$slot;
			});
			this.$setOnce$TextEditorFragment$ = (function (v) {
				this.$TextEditorFragment$slot = v;
				return this;
			});
			this.$Color = (function () {
				return this.$Color$slot;
			});
			this.$setOnce$Color$ = (function (v) {
				this.$Color$slot = v;
				return this;
			});
			this.$Gradient = (function () {
				return this.$Gradient$slot;
			});
			this.$setOnce$Gradient$ = (function (v) {
				this.$Gradient$slot = v;
				return this;
			});
			this.$List = (function () {
				return this.$List$slot;
			});
			this.$setOnce$List$ = (function (v) {
				this.$List$slot = v;
				return this;
			});
			this.$ObjectMirror = (function () {
				return this.$ObjectMirror$slot;
			});
			this.$setOnce$ObjectMirror$ = (function (v) {
				this.$ObjectMirror$slot = v;
				return this;
			});
			this.$MixinBuilder = (function () {
				return this.$MixinBuilder$slot;
			});
			this.$setOnce$MixinBuilder$ = (function (v) {
				this.$MixinBuilder$slot = v;
				return this;
			});
			this.$platformMirror = (function () {
				return this.$platformMirror$slot;
			});
			this.$setOnce$platformMirror$ = (function (v) {
				this.$platformMirror$slot = v;
				return this;
			});
			this.$Literate$Evaluators$SnippetPresenter = (function () {
				return this.$Literate$Evaluators$SnippetPresenter$slot;
			});
			this.$Literate$Evaluators$SnippetPresenter$ = (function (v) {
				this.$Literate$Evaluators$SnippetPresenter$slot = v;
				return this;
			});
			this.$Literate$Evaluators$SnippetSubject = (function () {
				return this.$Literate$Evaluators$SnippetSubject$slot;
			});
			this.$Literate$Evaluators$SnippetSubject$ = (function (v) {
				this.$Literate$Evaluators$SnippetSubject$slot = v;
				return this;
			});
			this.$Literate$Evaluators$SnippetPresenter = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for Literate`Evaluators`SnippetPresenter";
				this.name = "Literate`Evaluators`SnippetPresenter";
				this.header = "SnippetPresenter onSubject: s = Presenter onSubject: s (\r| resultHolder |)";
				this.slots = [new SM("resultHolder", true, false)];
				this.methods = [
					new MM("superInit`Literate`Evaluators`SnippetPresenter", true, "onSubject: s"),
					new MM("instance`initializer", true, "onSubject: s"),
					new MM("definition", false, "definition = (\r	| result |\r	^column: {\r		TextEditorFragment new\r			text: subject snippet;\r			changeResponse: [:editor | result content: (evaluate: editor textBeingAccepted asString)].\r		result:: holder: [evaluate: subject snippet].\r	}\r)"),
					new MM("evaluate:", false, "evaluate: expression = (\r	| s |\r	s:: platformMirror\r		evaluate: (withoutNbsp: expression)\r		ifCompilerError: [:e | ^label: 'compile-time error: ', e printString]\r		ifError: [:e | ^label: 'runtime error: ', e printString].\r	^\r		(link: s reflectee printString\r		action: [enterSubject:: ObjectSubject onModel: s]).\r)"),
					new MM("withoutNbsp:", false, "withoutNbsp: string = (\r	|\r	nonbreakingSpace = [String fromCharCode: 160] on: Error do: [String value: 160].\r	space = [String fromCharCode: 32] on: Error do: [String value: 32].\r	|\r	^string replaceAll: nonbreakingSpace with: space.\r)"),
					new MM("resultHolder", true, null),
					new MM("resultHolder:", true, null)
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$Literate$Evaluators$SnippetPresenter = (function ($s) {
					var self = this;
					self.$super$Literate$Evaluators$SnippetPresenter$slot._$instance$initializer.call(self, $s);
					return self;
				});
				this.$instance$initializer = (function ($s) {
					var self = this;
					self._$superInit$Literate$Evaluators$SnippetPresenter($s);
					return self;
				});
				this.$definition = (function () {
					var self = this;
					var $result = nil;
					return self._$column$([
						(function (cascadeReceiver) {
							cascadeReceiver.$text$(self._$subject().$snippet());
							return cascadeReceiver.$changeResponse$((function ($editor) {
								return $result.$content$(self._$evaluate$($editor.$textBeingAccepted().$asString()));
							}));
						})(self.$enclosingObjects$Literate$Evaluators$SnippetPresenter[0]._$TextEditorFragment().$new()),
						$result = self._$holder$((function () {
							return self._$evaluate$(self._$subject().$snippet());
						}))
					]);
				});
				this.$evaluate$ = (function ($expression) {
					var self = this;
					var NLR = new Object();
					try {
						var $s = nil;
						$s = self.$enclosingObjects$Literate$Evaluators$SnippetPresenter[0]._$platformMirror().$evaluate$ifCompilerError$ifError$(self._$withoutNbsp$($expression), (function ($e) {
							{
								NLR.value = self._$label$(("compile-time error: ").$$comma($e.$printString()));
								throw NLR;
							};
						}), (function ($e) {
							{
								NLR.value = self._$label$(("runtime error: ").$$comma($e.$printString()));
								throw NLR;
							};
						}));
						return self._$link$action$($s.$reflectee().$printString(), (function () {
							return ((function ($setter_arg) {
								self._$enterSubject$($setter_arg);
								return $setter_arg;
							})).$value$(self.$enclosingObjects$Literate$Evaluators$SnippetPresenter[0]._$ObjectSubject().$onModel$($s));
						}));
					} catch (NLR_exception) {
						if (NLR === NLR_exception) {
							return NLR_exception.value;
						} else {
							throw NLR_exception;
						};
					};
				});
				this.$withoutNbsp$ = (function ($string) {
					var self = this;
					var $nonbreakingSpace = nil;
					var $space = nil;
					$nonbreakingSpace = ((function () {
						return self._$String().$fromCharCode$(160);
					})).$on$do$(self._$Error(), (function () {
						return self._$String().$value$(160);
					}));
					$space = ((function () {
						return self._$String().$fromCharCode$(32);
					})).$on$do$(self._$Error(), (function () {
						return self._$String().$value$(32);
					}));
					return $string.$replaceAll$with$($nonbreakingSpace, $space);
				});
				this.$resultHolder = (function () {
					return this.$resultHolder$slot;
				});
				this.$resultHolder$ = (function (v) {
					this.$resultHolder$slot = v;
					return this;
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for Literate`Evaluators`SnippetPresenter";
						this._$superInit$Literate$Evaluators$SnippetPresenter = $.$superInit$Literate$Evaluators$SnippetPresenter;
						this.$superInit$Literate$Evaluators$SnippetPresenter = dnuCatcher("$superInit$Literate$Evaluators$SnippetPresenter");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this._$definition = $.$definition;
						this.$definition = dnuCatcher("$definition");
						this._$evaluate$ = $.$evaluate$;
						this.$evaluate$ = dnuCatcher("$evaluate$");
						this._$withoutNbsp$ = $.$withoutNbsp$;
						this.$withoutNbsp$ = dnuCatcher("$withoutNbsp$");
						this._$resultHolder = $.$resultHolder;
						this.$resultHolder = dnuCatcher("$resultHolder");
						this._$resultHolder$ = $.$resultHolder$;
						this.$resultHolder$ = dnuCatcher("$resultHolder$");
						this.$enclosingObjects$Literate$Evaluators$SnippetPresenter = enclosingObjects;
						this.$super$Literate$Evaluators$SnippetPresenter$slot = runtimeSuperclass;
						this["Literate`Evaluators`SnippetPresenter"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
							this.$resultHolder$slot = nil;
						});
						this.basicNew = this["Literate`Evaluators`SnippetPresenter"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for Literate`Evaluators`SnippetPresenter";
					this.slots = [];
					this.methods = [new MM("onSubject:", true, null)];
					this.nestedClasses = [];
					this.$onSubject$ = (function ($s) {
						return (new this.nonMeta.basicNew()).$instance$initializer($s);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for Literate`Evaluators`SnippetPresenter";
							this.$onSubject$ = this._$onSubject$ = $.$onSubject$;
							this.$enclosingObjects$Literate$Evaluators$SnippetPresenter = enclosingObjects;
							this.$super$Literate$Evaluators$SnippetPresenter = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$Literate$Evaluators$SnippetSubject = new (function () {
				var $ = this;
				var $2 = this;
				this.debug = "Runtime mixin for Literate`Evaluators`SnippetSubject";
				this.name = "Literate`Evaluators`SnippetSubject";
				this.header = "SnippetSubject onModel: m = Subject onModel: m ()";
				this.slots = [];
				this.methods = [
					new MM("superInit`Literate`Evaluators`SnippetSubject", true, "onModel: m"),
					new MM("instance`initializer", true, "onModel: m"),
					new MM("createPresenter", false, "createPresenter = (\r	^SnippetPresenter onSubject: self\r)"),
					new MM("snippet", false, "public snippet = (\r	^model\r)")
				];
				this.nestedClasses = [];
				this.applications = [];
				this.$superInit$Literate$Evaluators$SnippetSubject = (function ($m) {
					var self = this;
					self.$super$Literate$Evaluators$SnippetSubject$slot._$instance$initializer.call(self, $m);
					return self;
				});
				this.$instance$initializer = (function ($m) {
					var self = this;
					self._$superInit$Literate$Evaluators$SnippetSubject($m);
					return self;
				});
				this.$createPresenter = (function () {
					var self = this;
					return self.$enclosingObjects$Literate$Evaluators$SnippetSubject[0]._$SnippetPresenter().$onSubject$(self);
				});
				this.$snippet = (function () {
					var self = this;
					return self._$model();
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime class for Literate`Evaluators`SnippetSubject";
						this._$superInit$Literate$Evaluators$SnippetSubject = $.$superInit$Literate$Evaluators$SnippetSubject;
						this.$superInit$Literate$Evaluators$SnippetSubject = dnuCatcher("$superInit$Literate$Evaluators$SnippetSubject");
						this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
						this._$createPresenter = $.$createPresenter;
						this.$createPresenter = dnuCatcher("$createPresenter");
						this.$snippet = this._$snippet = $.$snippet;
						this.$enclosingObjects$Literate$Evaluators$SnippetSubject = enclosingObjects;
						this.$super$Literate$Evaluators$SnippetSubject$slot = runtimeSuperclass;
						this["Literate`Evaluators`SnippetSubject"] = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew = this["Literate`Evaluators`SnippetSubject"];
						this.basicNew.prototype = this;
						this.meta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
				this.meta = new (function () {
					var $ = this;
					this.debug = "Runtime meta mixin for Literate`Evaluators`SnippetSubject";
					this.slots = [];
					this.methods = [new MM("onModel:", true, null)];
					this.nestedClasses = [];
					this.$onModel$ = (function ($m) {
						return (new this.nonMeta.basicNew()).$instance$initializer($m);
					});
					this.invoke = (function (runtimeSuperclass, enclosingObjects) {
						function constructRuntimeClass (superBasicNew) {
							this.debug = "Runtime meta class for Literate`Evaluators`SnippetSubject";
							this.$onModel$ = this._$onModel$ = $.$onModel$;
							this.$enclosingObjects$Literate$Evaluators$SnippetSubject = enclosingObjects;
							this.$super$Literate$Evaluators$SnippetSubject = runtimeSuperclass;
							this.basicNew = (function () {
								superBasicNew.call(this);
								this.hashCode = 0;
							});
							this.basicNew.prototype = this;
							this.nonMeta = null;
							this.newspeakClass = null;
						};
						constructRuntimeClass.prototype = runtimeSuperclass;
						return new constructRuntimeClass(runtimeSuperclass.basicNew);
					});
				})();
				this.meta.nonMeta = this;
			})();
			this.$Literate$Evaluators$SnippetPresenter.enclosingMixin = this;
			this.$Literate$Evaluators$SnippetSubject.enclosingMixin = this;
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for Literate`Evaluators";
					this._$superInit$Literate$Evaluators = $.$superInit$Literate$Evaluators;
					this.$superInit$Literate$Evaluators = dnuCatcher("$superInit$Literate$Evaluators");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$SnippetPresenter = $.$SnippetPresenter;
					this.$SnippetPresenter = dnuCatcher("$SnippetPresenter");
					this.$SnippetSubject = this._$SnippetSubject = $.$SnippetSubject;
					this._$Subject = $.$Subject;
					this.$Subject = dnuCatcher("$Subject");
					this._$setOnce$Subject$ = $.$setOnce$Subject$;
					this.$setOnce$Subject$ = dnuCatcher("$setOnce$Subject$");
					this._$Presenter = $.$Presenter;
					this.$Presenter = dnuCatcher("$Presenter");
					this._$setOnce$Presenter$ = $.$setOnce$Presenter$;
					this.$setOnce$Presenter$ = dnuCatcher("$setOnce$Presenter$");
					this._$ObjectSubject = $.$ObjectSubject;
					this.$ObjectSubject = dnuCatcher("$ObjectSubject");
					this._$setOnce$ObjectSubject$ = $.$setOnce$ObjectSubject$;
					this.$setOnce$ObjectSubject$ = dnuCatcher("$setOnce$ObjectSubject$");
					this._$TextEditorFragment = $.$TextEditorFragment;
					this.$TextEditorFragment = dnuCatcher("$TextEditorFragment");
					this._$setOnce$TextEditorFragment$ = $.$setOnce$TextEditorFragment$;
					this.$setOnce$TextEditorFragment$ = dnuCatcher("$setOnce$TextEditorFragment$");
					this._$Color = $.$Color;
					this.$Color = dnuCatcher("$Color");
					this._$setOnce$Color$ = $.$setOnce$Color$;
					this.$setOnce$Color$ = dnuCatcher("$setOnce$Color$");
					this._$Gradient = $.$Gradient;
					this.$Gradient = dnuCatcher("$Gradient");
					this._$setOnce$Gradient$ = $.$setOnce$Gradient$;
					this.$setOnce$Gradient$ = dnuCatcher("$setOnce$Gradient$");
					this._$List = $.$List;
					this.$List = dnuCatcher("$List");
					this._$setOnce$List$ = $.$setOnce$List$;
					this.$setOnce$List$ = dnuCatcher("$setOnce$List$");
					this._$ObjectMirror = $.$ObjectMirror;
					this.$ObjectMirror = dnuCatcher("$ObjectMirror");
					this._$setOnce$ObjectMirror$ = $.$setOnce$ObjectMirror$;
					this.$setOnce$ObjectMirror$ = dnuCatcher("$setOnce$ObjectMirror$");
					this._$MixinBuilder = $.$MixinBuilder;
					this.$MixinBuilder = dnuCatcher("$MixinBuilder");
					this._$setOnce$MixinBuilder$ = $.$setOnce$MixinBuilder$;
					this.$setOnce$MixinBuilder$ = dnuCatcher("$setOnce$MixinBuilder$");
					this._$platformMirror = $.$platformMirror;
					this.$platformMirror = dnuCatcher("$platformMirror");
					this._$setOnce$platformMirror$ = $.$setOnce$platformMirror$;
					this.$setOnce$platformMirror$ = dnuCatcher("$setOnce$platformMirror$");
					this.$Literate$Evaluators$SnippetPresenter = this._$Literate$Evaluators$SnippetPresenter = $.$Literate$Evaluators$SnippetPresenter;
					this.$Literate$Evaluators$SnippetPresenter$ = this._$Literate$Evaluators$SnippetPresenter$ = $.$Literate$Evaluators$SnippetPresenter$;
					this.$Literate$Evaluators$SnippetSubject = this._$Literate$Evaluators$SnippetSubject = $.$Literate$Evaluators$SnippetSubject;
					this.$Literate$Evaluators$SnippetSubject$ = this._$Literate$Evaluators$SnippetSubject$ = $.$Literate$Evaluators$SnippetSubject$;
					this.$enclosingObjects$Literate$Evaluators = enclosingObjects;
					this.$super$Literate$Evaluators$slot = runtimeSuperclass;
					this["Literate`Evaluators"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$Subject$slot = nil;
						this.$Presenter$slot = nil;
						this.$ObjectSubject$slot = nil;
						this.$TextEditorFragment$slot = nil;
						this.$Color$slot = nil;
						this.$Gradient$slot = nil;
						this.$List$slot = nil;
						this.$ObjectMirror$slot = nil;
						this.$MixinBuilder$slot = nil;
						this.$platformMirror$slot = nil;
						this.$Literate$Evaluators$SnippetPresenter$slot = nil;
						this.$Literate$Evaluators$SnippetSubject$slot = nil;
					});
					this.basicNew = this["Literate`Evaluators"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for Literate`Evaluators";
				this.slots = [];
				this.methods = [new MM("usingPlatform:browsing:", true, null)];
				this.nestedClasses = [];
				this.$usingPlatform$browsing$ = (function ($p, $b) {
					return (new this.nonMeta.basicNew()).$instance$initializer($p, $b);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for Literate`Evaluators";
						this.$usingPlatform$browsing$ = this._$usingPlatform$browsing$ = $.$usingPlatform$browsing$;
						this.$enclosingObjects$Literate$Evaluators = enclosingObjects;
						this.$super$Literate$Evaluators = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$Literate$Evaluators.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for Literate";
				this._$superInit$Literate = $.$superInit$Literate;
				this.$superInit$Literate = dnuCatcher("$superInit$Literate");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this.$main$args$ = this._$main$args$ = $.$main$args$;
				this._$Evaluators = $.$Evaluators;
				this.$Evaluators = dnuCatcher("$Evaluators");
				this._$BrowsingForHTML = $.$BrowsingForHTML;
				this.$BrowsingForHTML = dnuCatcher("$BrowsingForHTML");
				this._$setOnce$BrowsingForHTML$ = $.$setOnce$BrowsingForHTML$;
				this.$setOnce$BrowsingForHTML$ = dnuCatcher("$setOnce$BrowsingForHTML$");
				this.$Literate$Evaluators = this._$Literate$Evaluators = $.$Literate$Evaluators;
				this.$Literate$Evaluators$ = this._$Literate$Evaluators$ = $.$Literate$Evaluators$;
				this.$enclosingObjects$Literate = enclosingObjects;
				this.$super$Literate$slot = runtimeSuperclass;
				this.Literate = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$BrowsingForHTML$slot = nil;
					this.$Literate$Evaluators$slot = nil;
				});
				this.basicNew = this.Literate;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for Literate";
			this.slots = [];
			this.methods = [new MM("packageUsing:", true, null)];
			this.nestedClasses = [];
			this.$packageUsing$ = (function ($manifest) {
				return (new this.nonMeta.basicNew()).$instance$initializer($manifest);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for Literate";
					this.$packageUsing$ = this._$packageUsing$ = $.$packageUsing$;
					this.$enclosingObjects$Literate = enclosingObjects;
					this.$super$Literate = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
	this.$BrowsingForHTML = new (function () {
		var $ = this;
		var $0 = this;
		this.debug = "Runtime mixin for BrowsingForHTML";
		this.name = "BrowsingForHTML";
		this.header = "BrowsingForHTML usingPlatform: p = (|\r	Subject = p hopscotch core Subject.\r	Presenter = p hopscotch core Presenter.\r	TextEditorFragment = p hopscotch fragments TextEditorFragment.\r	Color = p graphics Color.\r	Gradient = p hopscotch Gradient.\r	List = p collections OrderedCollection.\r	ObjectMirror = p mirrors ObjectMirror.\r	MixinBuilder = p mirrors MixinBuilder.\r	\r	detailAreaRatio = 1.6.\r	captionColor = Color h: 240 s: 0.05 v: 0.9.\r|)";
		this.slots = [
			new SM("Subject", false, false),
			new SM("Presenter", false, false),
			new SM("TextEditorFragment", false, false),
			new SM("Color", false, false),
			new SM("Gradient", false, false),
			new SM("List", false, false),
			new SM("ObjectMirror", false, false),
			new SM("MixinBuilder", false, false),
			new SM("detailAreaRatio", false, false),
			new SM("captionColor", false, false),
			new SM("BrowsingForHTML`ClassPresenter", true, true),
			new SM("BrowsingForHTML`ClassSubject", true, true),
			new SM("BrowsingForHTML`ObjectPresenter", true, true),
			new SM("BrowsingForHTML`ObjectSubject", true, true)
		];
		this.methods = [
			new MM("superInit`BrowsingForHTML", true, " "),
			new MM("instance`initializer", true, " "),
			new MM("ClassPresenter", true, null),
			new MM("ClassSubject", true, null),
			new MM("ObjectPresenter", true, null),
			new MM("ObjectSubject", true, null),
			new MM("Subject", true, null),
			new MM("setOnce`Subject:", true, null),
			new MM("Presenter", true, null),
			new MM("setOnce`Presenter:", true, null),
			new MM("TextEditorFragment", true, null),
			new MM("setOnce`TextEditorFragment:", true, null),
			new MM("Color", true, null),
			new MM("setOnce`Color:", true, null),
			new MM("Gradient", true, null),
			new MM("setOnce`Gradient:", true, null),
			new MM("List", true, null),
			new MM("setOnce`List:", true, null),
			new MM("ObjectMirror", true, null),
			new MM("setOnce`ObjectMirror:", true, null),
			new MM("MixinBuilder", true, null),
			new MM("setOnce`MixinBuilder:", true, null),
			new MM("detailAreaRatio", true, null),
			new MM("setOnce`detailAreaRatio:", true, null),
			new MM("captionColor", true, null),
			new MM("setOnce`captionColor:", true, null),
			new MM("BrowsingForHTML`ClassPresenter", true, null),
			new MM("BrowsingForHTML`ClassPresenter:", true, null),
			new MM("BrowsingForHTML`ClassSubject", true, null),
			new MM("BrowsingForHTML`ClassSubject:", true, null),
			new MM("BrowsingForHTML`ObjectPresenter", true, null),
			new MM("BrowsingForHTML`ObjectPresenter:", true, null),
			new MM("BrowsingForHTML`ObjectSubject", true, null),
			new MM("BrowsingForHTML`ObjectSubject:", true, null)
		];
		this.nestedClasses = [
			"BrowsingForHTML`ClassPresenter",
			"BrowsingForHTML`ClassSubject",
			"BrowsingForHTML`ObjectPresenter",
			"BrowsingForHTML`ObjectSubject"
		];
		this.applications = [];
		this.$superInit$BrowsingForHTML = (function ($p) {
			var self = this;
			self.$super$BrowsingForHTML$slot._$instance$initializer.call(self);
			return self;
		});
		this.$instance$initializer = (function ($p) {
			var self = this;
			self._$superInit$BrowsingForHTML($p);
			self._$setOnce$Subject$($p.$hopscotch().$core().$Subject());
			self._$setOnce$Presenter$($p.$hopscotch().$core().$Presenter());
			self._$setOnce$TextEditorFragment$($p.$hopscotch().$fragments().$TextEditorFragment());
			self._$setOnce$Color$($p.$graphics().$Color());
			self._$setOnce$Gradient$($p.$hopscotch().$Gradient());
			self._$setOnce$List$($p.$collections().$OrderedCollection());
			self._$setOnce$ObjectMirror$($p.$mirrors().$ObjectMirror());
			self._$setOnce$MixinBuilder$($p.$mirrors().$MixinBuilder());
			self._$setOnce$detailAreaRatio$((8/5));
			self._$setOnce$captionColor$(self._$Color().$h$s$v$(240, (1/20), (9/10)));
			return self;
		});
		this.$ClassPresenter = (function () {
			if (nil === this.$BrowsingForHTML$ClassPresenter$slot) {
				var self = this;
				var superclass = self._$Presenter();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$BrowsingForHTML);
				var mixin = $.$BrowsingForHTML$ClassPresenter;
				this.$BrowsingForHTML$ClassPresenter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$BrowsingForHTML$ClassPresenter$slot;
		});
		this.$ClassSubject = (function () {
			if (nil === this.$BrowsingForHTML$ClassSubject$slot) {
				var self = this;
				var superclass = self._$Subject();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$BrowsingForHTML);
				var mixin = $.$BrowsingForHTML$ClassSubject;
				this.$BrowsingForHTML$ClassSubject$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$BrowsingForHTML$ClassSubject$slot;
		});
		this.$ObjectPresenter = (function () {
			if (nil === this.$BrowsingForHTML$ObjectPresenter$slot) {
				var self = this;
				var superclass = self._$Presenter();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$BrowsingForHTML);
				var mixin = $.$BrowsingForHTML$ObjectPresenter;
				this.$BrowsingForHTML$ObjectPresenter$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$BrowsingForHTML$ObjectPresenter$slot;
		});
		this.$ObjectSubject = (function () {
			if (nil === this.$BrowsingForHTML$ObjectSubject$slot) {
				var self = this;
				var superclass = self._$Subject();
				var enclosingObjects = ([this]).concat(this.$enclosingObjects$BrowsingForHTML);
				var mixin = $.$BrowsingForHTML$ObjectSubject;
				this.$BrowsingForHTML$ObjectSubject$slot = vmmirror.$applyMixin$toSuperclass$withEnclosingObjects$(mixin, superclass, enclosingObjects);
			};
			return this.$BrowsingForHTML$ObjectSubject$slot;
		});
		this.$Subject = (function () {
			return this.$Subject$slot;
		});
		this.$setOnce$Subject$ = (function (v) {
			this.$Subject$slot = v;
			return this;
		});
		this.$Presenter = (function () {
			return this.$Presenter$slot;
		});
		this.$setOnce$Presenter$ = (function (v) {
			this.$Presenter$slot = v;
			return this;
		});
		this.$TextEditorFragment = (function () {
			return this.$TextEditorFragment$slot;
		});
		this.$setOnce$TextEditorFragment$ = (function (v) {
			this.$TextEditorFragment$slot = v;
			return this;
		});
		this.$Color = (function () {
			return this.$Color$slot;
		});
		this.$setOnce$Color$ = (function (v) {
			this.$Color$slot = v;
			return this;
		});
		this.$Gradient = (function () {
			return this.$Gradient$slot;
		});
		this.$setOnce$Gradient$ = (function (v) {
			this.$Gradient$slot = v;
			return this;
		});
		this.$List = (function () {
			return this.$List$slot;
		});
		this.$setOnce$List$ = (function (v) {
			this.$List$slot = v;
			return this;
		});
		this.$ObjectMirror = (function () {
			return this.$ObjectMirror$slot;
		});
		this.$setOnce$ObjectMirror$ = (function (v) {
			this.$ObjectMirror$slot = v;
			return this;
		});
		this.$MixinBuilder = (function () {
			return this.$MixinBuilder$slot;
		});
		this.$setOnce$MixinBuilder$ = (function (v) {
			this.$MixinBuilder$slot = v;
			return this;
		});
		this.$detailAreaRatio = (function () {
			return this.$detailAreaRatio$slot;
		});
		this.$setOnce$detailAreaRatio$ = (function (v) {
			this.$detailAreaRatio$slot = v;
			return this;
		});
		this.$captionColor = (function () {
			return this.$captionColor$slot;
		});
		this.$setOnce$captionColor$ = (function (v) {
			this.$captionColor$slot = v;
			return this;
		});
		this.$BrowsingForHTML$ClassPresenter = (function () {
			return this.$BrowsingForHTML$ClassPresenter$slot;
		});
		this.$BrowsingForHTML$ClassPresenter$ = (function (v) {
			this.$BrowsingForHTML$ClassPresenter$slot = v;
			return this;
		});
		this.$BrowsingForHTML$ClassSubject = (function () {
			return this.$BrowsingForHTML$ClassSubject$slot;
		});
		this.$BrowsingForHTML$ClassSubject$ = (function (v) {
			this.$BrowsingForHTML$ClassSubject$slot = v;
			return this;
		});
		this.$BrowsingForHTML$ObjectPresenter = (function () {
			return this.$BrowsingForHTML$ObjectPresenter$slot;
		});
		this.$BrowsingForHTML$ObjectPresenter$ = (function (v) {
			this.$BrowsingForHTML$ObjectPresenter$slot = v;
			return this;
		});
		this.$BrowsingForHTML$ObjectSubject = (function () {
			return this.$BrowsingForHTML$ObjectSubject$slot;
		});
		this.$BrowsingForHTML$ObjectSubject$ = (function (v) {
			this.$BrowsingForHTML$ObjectSubject$slot = v;
			return this;
		});
		this.$BrowsingForHTML$ClassPresenter = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for BrowsingForHTML`ClassPresenter";
			this.name = "BrowsingForHTML`ClassPresenter";
			this.header = "ClassPresenter onSubject: s = Presenter onSubject: s ()";
			this.slots = [];
			this.methods = [
				new MM("superInit`BrowsingForHTML`ClassPresenter", true, "onSubject: s"),
				new MM("instance`initializer", true, "onSubject: s"),
				new MM("collapsedHeadingDefinition", false, "collapsedHeadingDefinition = (\r	^link: subject name action: [enterSubject:: ClassSubject onModel: subject classMirror (* Why do we need a copy? *)].\r)"),
				new MM("crToLf:", false, "crToLf: string = (\r	|\r	cr = [String fromCharCode: 13] on: Error do: [String value: 13].\r	lf = [String fromCharCode: 10] on: Error do: [String value: 10].\r	|\r	^string replaceAll: cr with: lf.\r)"),
				new MM("definition", false, "definition = (\r	^column: {\r		headingDefinition.\r		minorClassHeadingBlock: (label: 'Classes').\r		column: (subject classMirror instanceSide nestedClasses collect: [:ea | nestedClass: ea]).\r		minorClassHeadingBlock: (label: 'Methods').\r		column: (subject classMirror instanceSide methods collect: [:ea | method: ea]).\r		minorClassHeadingBlock: (label: 'Class Methods').\r		column: (subject classMirror classSide methods collect: [:ea | method: ea]).\r	}\r)"),
				new MM("expandedHeadingDefinition", false, "expandedHeadingDefinition = (\r	| parts |\r	parts:: List new.\r	subject enclosingClassSubjects\r		do: [:ecs | parts add: (link: ecs name action: [enterSubject:: ecs])]\r		separatedBy: [parts add: ( label: ' in ')].\r	^column: {\r		blank: 5.\r		row: parts.\r		inspectSelf.\r		label: 'Slots'.\r		row: {\r			mediumBlank.\r			column: (subject classMirror instanceSide slots collect: [:ea | label: ea name]).\r		}.\r	}\r)"),
				new MM("headingDefinition", false, "headingDefinition = (\r	^(column: {\r		expanded: [expandedHeadingDefinition]\r		collapsed: [collapsedHeadingDefinition].\r	}) color: (Color h: 240 s: 0.05 v: 0.9).\r)"),
				new MM("inspectSelf", false, "inspectSelf = (\r	^row:{filler. link:  'Inspect Presenter' action: [enterSubject:: ObjectSubject onModel: (ObjectMirror reflecting: self)]}\r)"),
				new MM("method:", false, "method: mm = (\r	| toggle |\r	toggle:: \r		collapsed: [(link: mm name action: [toggle expand]) color: Color black]\r		expanded: [column: {\r			(link: mm name action: [toggle collapse]) color: Color black.\r			TextEditorFragment new\r				text: (crToLf: mm source);\r				acceptResponse: [:ed | \r					| b = MixinBuilder reflecting: mm definingMixin reflectee. |\r					b methods addFromSource: ed textBeingAccepted.\r					b declaration install.\r					ed defaultAcceptResponse.\r				]\r		}].\r	^toggle\r)"),
				new MM("minorClassHeadingBlock:", false, "minorClassHeadingBlock: body = (\r	^(padded: body with: {10. 5. 5. 5.})\r		color: minorClassHeadingColor\r)"),
				new MM("minorClassHeadingColor", false, "minorClassHeadingColor = (\r	^Gradient \r		from: (Color h: 240 s: 0.02 v: 0.94) \r		to: (Color h: 240 s: 0.02 v: 0.9)\r)"),
				new MM("nestedClass:", false, "nestedClass: cdm = (\r	^collapsed: [link: cdm simpleName action: [enterSubject:: ClassSubject onModel: cdm]]\r	expanded: [(ClassSubject onModel: cdm) presenter]\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$BrowsingForHTML$ClassPresenter = (function ($s) {
				var self = this;
				self.$super$BrowsingForHTML$ClassPresenter$slot._$instance$initializer.call(self, $s);
				return self;
			});
			this.$instance$initializer = (function ($s) {
				var self = this;
				self._$superInit$BrowsingForHTML$ClassPresenter($s);
				return self;
			});
			this.$collapsedHeadingDefinition = (function () {
				var self = this;
				return self._$link$action$(self._$subject().$name(), (function () {
					return ((function ($setter_arg) {
						self._$enterSubject$($setter_arg);
						return $setter_arg;
					})).$value$(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$ClassSubject().$onModel$(self._$subject().$classMirror()));
				}));
			});
			this.$crToLf$ = (function ($string) {
				var self = this;
				var $cr = nil;
				var $lf = nil;
				$cr = ((function () {
					return self._$String().$fromCharCode$(13);
				})).$on$do$(self._$Error(), (function () {
					return self._$String().$value$(13);
				}));
				$lf = ((function () {
					return self._$String().$fromCharCode$(10);
				})).$on$do$(self._$Error(), (function () {
					return self._$String().$value$(10);
				}));
				return $string.$replaceAll$with$($cr, $lf);
			});
			this.$definition = (function () {
				var self = this;
				return self._$column$([
					self._$headingDefinition(),
					self._$minorClassHeadingBlock$(self._$label$("Classes")),
					self._$column$(self._$subject().$classMirror().$instanceSide().$nestedClasses().$collect$((function ($ea) {
						return self._$nestedClass$($ea);
					}))),
					self._$minorClassHeadingBlock$(self._$label$("Methods")),
					self._$column$(self._$subject().$classMirror().$instanceSide().$methods().$collect$((function ($ea) {
						return self._$method$($ea);
					}))),
					self._$minorClassHeadingBlock$(self._$label$("Class Methods")),
					self._$column$(self._$subject().$classMirror().$classSide().$methods().$collect$((function ($ea) {
						return self._$method$($ea);
					})))
				]);
			});
			this.$expandedHeadingDefinition = (function () {
				var self = this;
				var $parts = nil;
				$parts = self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$List().$new();
				self._$subject().$enclosingClassSubjects().$do$separatedBy$((function ($ecs) {
					return $parts.$add$(self._$link$action$($ecs.$name(), (function () {
						return ((function ($setter_arg) {
							self._$enterSubject$($setter_arg);
							return $setter_arg;
						})).$value$($ecs);
					})));
				}), (function () {
					return $parts.$add$(self._$label$(" in "));
				}));
				return self._$column$([
					self._$blank$(5),
					self._$row$($parts),
					self._$inspectSelf(),
					self._$label$("Slots"),
					self._$row$([
						self._$mediumBlank(),
						self._$column$(self._$subject().$classMirror().$instanceSide().$slots().$collect$((function ($ea) {
							return self._$label$($ea.$name());
						})))
					])
				]);
			});
			this.$headingDefinition = (function () {
				var self = this;
				return self._$column$([self._$expanded$collapsed$((function () {
					return self._$expandedHeadingDefinition();
				}), (function () {
					return self._$collapsedHeadingDefinition();
				}))]).$color$(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$Color().$h$s$v$(240, (1/20), (9/10)));
			});
			this.$inspectSelf = (function () {
				var self = this;
				return self._$row$([
					self._$filler(),
					self._$link$action$("Inspect Presenter", (function () {
						return ((function ($setter_arg) {
							self._$enterSubject$($setter_arg);
							return $setter_arg;
						})).$value$(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$ObjectSubject().$onModel$(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$ObjectMirror().$reflecting$(self)));
					}))
				]);
			});
			this.$method$ = (function ($mm) {
				var self = this;
				var $toggle = nil;
				$toggle = self._$collapsed$expanded$((function () {
					return self._$link$action$($mm.$name(), (function () {
						return $toggle.$expand();
					})).$color$(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$Color().$black());
				}), (function () {
					return self._$column$([
						self._$link$action$($mm.$name(), (function () {
							return $toggle.$collapse();
						})).$color$(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$Color().$black()),
						(function (cascadeReceiver) {
							cascadeReceiver.$text$(self._$crToLf$($mm.$source()));
							return cascadeReceiver.$acceptResponse$((function ($ed) {
								var $b = nil;
								$b = self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$MixinBuilder().$reflecting$($mm.$definingMixin().$reflectee());
								$b.$methods().$addFromSource$($ed.$textBeingAccepted());
								$b.$declaration().$install();
								return $ed.$defaultAcceptResponse();
							}));
						})(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$TextEditorFragment().$new())
					]);
				}));
				return $toggle;
			});
			this.$minorClassHeadingBlock$ = (function ($body) {
				var self = this;
				return self._$padded$with$($body, [
					10,
					5,
					5,
					5
				]).$color$(self._$minorClassHeadingColor());
			});
			this.$minorClassHeadingColor = (function () {
				var self = this;
				return self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$Gradient().$from$to$(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$Color().$h$s$v$(240, (1/50), (47/50)), self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$Color().$h$s$v$(240, (1/50), (9/10)));
			});
			this.$nestedClass$ = (function ($cdm) {
				var self = this;
				return self._$collapsed$expanded$((function () {
					return self._$link$action$($cdm.$simpleName(), (function () {
						return ((function ($setter_arg) {
							self._$enterSubject$($setter_arg);
							return $setter_arg;
						})).$value$(self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$ClassSubject().$onModel$($cdm));
					}));
				}), (function () {
					return self.$enclosingObjects$BrowsingForHTML$ClassPresenter[0]._$ClassSubject().$onModel$($cdm).$presenter();
				}));
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for BrowsingForHTML`ClassPresenter";
					this._$superInit$BrowsingForHTML$ClassPresenter = $.$superInit$BrowsingForHTML$ClassPresenter;
					this.$superInit$BrowsingForHTML$ClassPresenter = dnuCatcher("$superInit$BrowsingForHTML$ClassPresenter");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$collapsedHeadingDefinition = $.$collapsedHeadingDefinition;
					this.$collapsedHeadingDefinition = dnuCatcher("$collapsedHeadingDefinition");
					this._$crToLf$ = $.$crToLf$;
					this.$crToLf$ = dnuCatcher("$crToLf$");
					this._$definition = $.$definition;
					this.$definition = dnuCatcher("$definition");
					this._$expandedHeadingDefinition = $.$expandedHeadingDefinition;
					this.$expandedHeadingDefinition = dnuCatcher("$expandedHeadingDefinition");
					this._$headingDefinition = $.$headingDefinition;
					this.$headingDefinition = dnuCatcher("$headingDefinition");
					this._$inspectSelf = $.$inspectSelf;
					this.$inspectSelf = dnuCatcher("$inspectSelf");
					this._$method$ = $.$method$;
					this.$method$ = dnuCatcher("$method$");
					this._$minorClassHeadingBlock$ = $.$minorClassHeadingBlock$;
					this.$minorClassHeadingBlock$ = dnuCatcher("$minorClassHeadingBlock$");
					this._$minorClassHeadingColor = $.$minorClassHeadingColor;
					this.$minorClassHeadingColor = dnuCatcher("$minorClassHeadingColor");
					this._$nestedClass$ = $.$nestedClass$;
					this.$nestedClass$ = dnuCatcher("$nestedClass$");
					this.$enclosingObjects$BrowsingForHTML$ClassPresenter = enclosingObjects;
					this.$super$BrowsingForHTML$ClassPresenter$slot = runtimeSuperclass;
					this["BrowsingForHTML`ClassPresenter"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["BrowsingForHTML`ClassPresenter"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for BrowsingForHTML`ClassPresenter";
				this.slots = [];
				this.methods = [new MM("onSubject:", true, null)];
				this.nestedClasses = [];
				this.$onSubject$ = (function ($s) {
					return (new this.nonMeta.basicNew()).$instance$initializer($s);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for BrowsingForHTML`ClassPresenter";
						this.$onSubject$ = this._$onSubject$ = $.$onSubject$;
						this.$enclosingObjects$BrowsingForHTML$ClassPresenter = enclosingObjects;
						this.$super$BrowsingForHTML$ClassPresenter = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$BrowsingForHTML$ClassSubject = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for BrowsingForHTML`ClassSubject";
			this.name = "BrowsingForHTML`ClassSubject";
			this.header = "ClassSubject onModel: m = Subject onModel: m (|\r|)";
			this.slots = [];
			this.methods = [
				new MM("superInit`BrowsingForHTML`ClassSubject", true, "onModel: m"),
				new MM("instance`initializer", true, "onModel: m"),
				new MM("classMirror", false, "public classMirror = (\r	^model\r)"),
				new MM("createPresenter", false, "public createPresenter = (\r	^ClassPresenter onSubject: self\r)"),
				new MM("enclosingClassSubjects", false, "public enclosingClassSubjects = (\r	| them = List new. c |\r	c:: model.\r	[c isNil] whileFalse: [them add: (ClassSubject onModel: c). c:: c enclosingClass].\r	^them\r)"),
				new MM("name", false, "public name = (\r	^model simpleName\r)"),
				new MM("title", false, "public title = (\r	^name\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$BrowsingForHTML$ClassSubject = (function ($m) {
				var self = this;
				self.$super$BrowsingForHTML$ClassSubject$slot._$instance$initializer.call(self, $m);
				return self;
			});
			this.$instance$initializer = (function ($m) {
				var self = this;
				self._$superInit$BrowsingForHTML$ClassSubject($m);
				return self;
			});
			this.$classMirror = (function () {
				var self = this;
				return self._$model();
			});
			this.$createPresenter = (function () {
				var self = this;
				return self.$enclosingObjects$BrowsingForHTML$ClassSubject[0]._$ClassPresenter().$onSubject$(self);
			});
			this.$enclosingClassSubjects = (function () {
				var self = this;
				var $them = nil;
				var $c = nil;
				$them = self.$enclosingObjects$BrowsingForHTML$ClassSubject[0]._$List().$new();
				$c = self._$model();
				{
					nil;
					for (; !$c.$isNil(); ) {
						$them.$add$(self.$enclosingObjects$BrowsingForHTML$ClassSubject[0]._$ClassSubject().$onModel$($c));
						$c = $c.$enclosingClass();
					};
				};
				return $them;
			});
			this.$name = (function () {
				var self = this;
				return self._$model().$simpleName();
			});
			this.$title = (function () {
				var self = this;
				return self._$name();
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for BrowsingForHTML`ClassSubject";
					this._$superInit$BrowsingForHTML$ClassSubject = $.$superInit$BrowsingForHTML$ClassSubject;
					this.$superInit$BrowsingForHTML$ClassSubject = dnuCatcher("$superInit$BrowsingForHTML$ClassSubject");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$classMirror = this._$classMirror = $.$classMirror;
					this.$createPresenter = this._$createPresenter = $.$createPresenter;
					this.$enclosingClassSubjects = this._$enclosingClassSubjects = $.$enclosingClassSubjects;
					this.$name = this._$name = $.$name;
					this.$title = this._$title = $.$title;
					this.$enclosingObjects$BrowsingForHTML$ClassSubject = enclosingObjects;
					this.$super$BrowsingForHTML$ClassSubject$slot = runtimeSuperclass;
					this["BrowsingForHTML`ClassSubject"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["BrowsingForHTML`ClassSubject"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for BrowsingForHTML`ClassSubject";
				this.slots = [];
				this.methods = [new MM("onModel:", true, null)];
				this.nestedClasses = [];
				this.$onModel$ = (function ($m) {
					return (new this.nonMeta.basicNew()).$instance$initializer($m);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for BrowsingForHTML`ClassSubject";
						this.$onModel$ = this._$onModel$ = $.$onModel$;
						this.$enclosingObjects$BrowsingForHTML$ClassSubject = enclosingObjects;
						this.$super$BrowsingForHTML$ClassSubject = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$BrowsingForHTML$ObjectPresenter = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for BrowsingForHTML`ObjectPresenter";
			this.name = "BrowsingForHTML`ObjectPresenter";
			this.header = "ObjectPresenter onSubject: s = Presenter onSubject: s (|\r	resultHolder\r|)";
			this.slots = [new SM("resultHolder", true, false)];
			this.methods = [
				new MM("superInit`BrowsingForHTML`ObjectPresenter", true, "onSubject: s"),
				new MM("instance`initializer", true, "onSubject: s"),
				new MM("captionBar:", false, "captionBar: body = (\r	^(column: {\r		smallBlank.\r		row: {\r			mediumBlank.\r			body elasticity: 1.\r			smallBlank\r			}.\r	}) color: captionColor\r)"),
				new MM("classInfoLine", false, "classInfoLine = (\r	^row: {\r		(label: 'class') width: 0 elasticity: 1.\r		(row: {\r			link: subject className action: [enterSubject: subject classSubject].\r		}) width: 0 elasticity: detailAreaRatio.\r	}\r)"),
				new MM("definition", false, "definition = (\r	^column: {\r		captionBar: (column: {\r			selfInfoLine.\r			enclosingInfoLine.\r			classInfoLine.\r			smallBlank.\r			inspectSelf.\r			TextEditorFragment new\r				changeResponse: [:editor | evaluate: editor textBeingAccepted asString].\r			smallBlank.\r			resultHolder:: holder: [nothing].\r		}).\r		objectDetails.\r	}\r)"),
				new MM("enclosingInfoLine", false, "enclosingInfoLine = (\r	^row: {\r		(label: 'enclosingObject') width: 0 elasticity: 1.\r		(row: {\r			link: subject enclosingObjectName action: [enterSubject:: ObjectSubject onModel: subject classMirror enclosingObject].\r		}) width: 0 elasticity: detailAreaRatio.\r	}\r)"),
				new MM("evaluate:", false, "evaluate: expression = (\r	| s |\r	s:: subject objectMirror \r		evaluate: (withoutNbsp: expression)\r		ifCompilerError: [:e | ^resultHolder content: (label: 'compile-time error: ', e printString)]\r		ifError: [:e | ^resultHolder content: (label: 'runtime error: ', e printString)].\r	resultHolder content: \r		(link: s reflectee printString\r		action: [enterSubject:: ObjectSubject onModel: s]).\r)"),
				new MM("goToSelf", false, "goToSelf = (\r	enterSubject: (ObjectSubject onModel: subject objectMirror)\r)"),
				new MM("inspectSelf", false, "inspectSelf = (\r	^row:{filler. link:  'Inspect Presenter' action: [enterSubject:: ObjectSubject onModel: (ObjectMirror reflecting: self)]}\r)"),
				new MM("objectDetails", false, "objectDetails = (\r	^row: {\r	mediumBlank.\r	(column: ((subject objectMirror getClassIfFail: []) slots collect: [:slot |\r		| val = subject objectMirror getSlot: slot name ifFail: []. |\r		row: {\r			(label: slot name) width: 0 elasticity: 1.\r			(row: {\r				link: val reflectee printString action: [enterSubject:: ObjectSubject onModel: val].\r			}) width: 0 elasticity: detailAreaRatio.\r		}\r	])) elasticity: 1.\r	smallBlank\r	}\r)"),
				new MM("selfCaption", false, "selfCaption = (\r	^'self'\r)"),
				new MM("selfInfoLine", false, "selfInfoLine = (\r	^row: {\r		(label: selfCaption (*asText allBold*)) width: 0 elasticity: 1.\r		(row: {\r			(link: subject title action: [goToSelf]) compressibility: 1.\r			filler compressibility: 0.\r			mediumBlank.\r			(*dropDownMenu: [actionsMenu]*)\r		}) width: 0 elasticity: detailAreaRatio.\r	}\r)"),
				new MM("smallBlank", false, "smallBlank = (\r	^blank: 5\r)"),
				new MM("withoutNbsp:", false, "withoutNbsp: string = (\r	|\r	nonbreakingSpace = [String fromCharCode: 160] on: Error do: [String value: 160].\r	space = [String fromCharCode: 32] on: Error do: [String value: 32].\r	|\r	^string replaceAll: nonbreakingSpace with: space.\r)"),
				new MM("resultHolder", true, null),
				new MM("resultHolder:", true, null)
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$BrowsingForHTML$ObjectPresenter = (function ($s) {
				var self = this;
				self.$super$BrowsingForHTML$ObjectPresenter$slot._$instance$initializer.call(self, $s);
				return self;
			});
			this.$instance$initializer = (function ($s) {
				var self = this;
				self._$superInit$BrowsingForHTML$ObjectPresenter($s);
				return self;
			});
			this.$captionBar$ = (function ($body) {
				var self = this;
				return self._$column$([
					self._$smallBlank(),
					self._$row$([
						self._$mediumBlank(),
						$body.$elasticity$(1),
						self._$smallBlank()
					])
				]).$color$(self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$captionColor());
			});
			this.$classInfoLine = (function () {
				var self = this;
				return self._$row$([
					self._$label$("class").$width$elasticity$(0, 1),
					self._$row$([self._$link$action$(self._$subject().$className(), (function () {
						return self._$enterSubject$(self._$subject().$classSubject());
					}))]).$width$elasticity$(0, self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$detailAreaRatio())
				]);
			});
			this.$definition = (function () {
				var self = this;
				return self._$column$([
					self._$captionBar$(self._$column$([
						self._$selfInfoLine(),
						self._$enclosingInfoLine(),
						self._$classInfoLine(),
						self._$smallBlank(),
						self._$inspectSelf(),
						self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$TextEditorFragment().$new().$changeResponse$((function ($editor) {
							return self._$evaluate$($editor.$textBeingAccepted().$asString());
						})),
						self._$smallBlank(),
						((function ($setter_arg) {
							self._$resultHolder$($setter_arg);
							return $setter_arg;
						})).$value$(self._$holder$((function () {
							return self._$nothing();
						})))
					])),
					self._$objectDetails()
				]);
			});
			this.$enclosingInfoLine = (function () {
				var self = this;
				return self._$row$([
					self._$label$("enclosingObject").$width$elasticity$(0, 1),
					self._$row$([self._$link$action$(self._$subject().$enclosingObjectName(), (function () {
						return ((function ($setter_arg) {
							self._$enterSubject$($setter_arg);
							return $setter_arg;
						})).$value$(self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$ObjectSubject().$onModel$(self._$subject().$classMirror().$enclosingObject()));
					}))]).$width$elasticity$(0, self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$detailAreaRatio())
				]);
			});
			this.$evaluate$ = (function ($expression) {
				var self = this;
				var NLR = new Object();
				try {
					var $s = nil;
					$s = self._$subject().$objectMirror().$evaluate$ifCompilerError$ifError$(self._$withoutNbsp$($expression), (function ($e) {
						{
							NLR.value = self._$resultHolder().$content$(self._$label$(("compile-time error: ").$$comma($e.$printString())));
							throw NLR;
						};
					}), (function ($e) {
						{
							NLR.value = self._$resultHolder().$content$(self._$label$(("runtime error: ").$$comma($e.$printString())));
							throw NLR;
						};
					}));
					self._$resultHolder().$content$(self._$link$action$($s.$reflectee().$printString(), (function () {
						return ((function ($setter_arg) {
							self._$enterSubject$($setter_arg);
							return $setter_arg;
						})).$value$(self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$ObjectSubject().$onModel$($s));
					})));
					return self;
				} catch (NLR_exception) {
					if (NLR === NLR_exception) {
						return NLR_exception.value;
					} else {
						throw NLR_exception;
					};
				};
			});
			this.$goToSelf = (function () {
				var self = this;
				self._$enterSubject$(self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$ObjectSubject().$onModel$(self._$subject().$objectMirror()));
				return self;
			});
			this.$inspectSelf = (function () {
				var self = this;
				return self._$row$([
					self._$filler(),
					self._$link$action$("Inspect Presenter", (function () {
						return ((function ($setter_arg) {
							self._$enterSubject$($setter_arg);
							return $setter_arg;
						})).$value$(self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$ObjectSubject().$onModel$(self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$ObjectMirror().$reflecting$(self)));
					}))
				]);
			});
			this.$objectDetails = (function () {
				var self = this;
				return self._$row$([
					self._$mediumBlank(),
					self._$column$(self._$subject().$objectMirror().$getClassIfFail$((function () {
						return nil;
					})).$slots().$collect$((function ($slot) {
						var $val = nil;
						$val = self._$subject().$objectMirror().$getSlot$ifFail$($slot.$name(), (function () {
							return nil;
						}));
						return self._$row$([
							self._$label$($slot.$name()).$width$elasticity$(0, 1),
							self._$row$([self._$link$action$($val.$reflectee().$printString(), (function () {
								return ((function ($setter_arg) {
									self._$enterSubject$($setter_arg);
									return $setter_arg;
								})).$value$(self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$ObjectSubject().$onModel$($val));
							}))]).$width$elasticity$(0, self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$detailAreaRatio())
						]);
					}))).$elasticity$(1),
					self._$smallBlank()
				]);
			});
			this.$selfCaption = (function () {
				var self = this;
				return "self";
			});
			this.$selfInfoLine = (function () {
				var self = this;
				return self._$row$([
					self._$label$(self._$selfCaption()).$width$elasticity$(0, 1),
					self._$row$([
						self._$link$action$(self._$subject().$title(), (function () {
							return self._$goToSelf();
						})).$compressibility$(1),
						self._$filler().$compressibility$(0),
						self._$mediumBlank()
					]).$width$elasticity$(0, self.$enclosingObjects$BrowsingForHTML$ObjectPresenter[0]._$detailAreaRatio())
				]);
			});
			this.$smallBlank = (function () {
				var self = this;
				return self._$blank$(5);
			});
			this.$withoutNbsp$ = (function ($string) {
				var self = this;
				var $nonbreakingSpace = nil;
				var $space = nil;
				$nonbreakingSpace = ((function () {
					return self._$String().$fromCharCode$(160);
				})).$on$do$(self._$Error(), (function () {
					return self._$String().$value$(160);
				}));
				$space = ((function () {
					return self._$String().$fromCharCode$(32);
				})).$on$do$(self._$Error(), (function () {
					return self._$String().$value$(32);
				}));
				return $string.$replaceAll$with$($nonbreakingSpace, $space);
			});
			this.$resultHolder = (function () {
				return this.$resultHolder$slot;
			});
			this.$resultHolder$ = (function (v) {
				this.$resultHolder$slot = v;
				return this;
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for BrowsingForHTML`ObjectPresenter";
					this._$superInit$BrowsingForHTML$ObjectPresenter = $.$superInit$BrowsingForHTML$ObjectPresenter;
					this.$superInit$BrowsingForHTML$ObjectPresenter = dnuCatcher("$superInit$BrowsingForHTML$ObjectPresenter");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this._$captionBar$ = $.$captionBar$;
					this.$captionBar$ = dnuCatcher("$captionBar$");
					this._$classInfoLine = $.$classInfoLine;
					this.$classInfoLine = dnuCatcher("$classInfoLine");
					this._$definition = $.$definition;
					this.$definition = dnuCatcher("$definition");
					this._$enclosingInfoLine = $.$enclosingInfoLine;
					this.$enclosingInfoLine = dnuCatcher("$enclosingInfoLine");
					this._$evaluate$ = $.$evaluate$;
					this.$evaluate$ = dnuCatcher("$evaluate$");
					this._$goToSelf = $.$goToSelf;
					this.$goToSelf = dnuCatcher("$goToSelf");
					this._$inspectSelf = $.$inspectSelf;
					this.$inspectSelf = dnuCatcher("$inspectSelf");
					this._$objectDetails = $.$objectDetails;
					this.$objectDetails = dnuCatcher("$objectDetails");
					this._$selfCaption = $.$selfCaption;
					this.$selfCaption = dnuCatcher("$selfCaption");
					this._$selfInfoLine = $.$selfInfoLine;
					this.$selfInfoLine = dnuCatcher("$selfInfoLine");
					this._$smallBlank = $.$smallBlank;
					this.$smallBlank = dnuCatcher("$smallBlank");
					this._$withoutNbsp$ = $.$withoutNbsp$;
					this.$withoutNbsp$ = dnuCatcher("$withoutNbsp$");
					this._$resultHolder = $.$resultHolder;
					this.$resultHolder = dnuCatcher("$resultHolder");
					this._$resultHolder$ = $.$resultHolder$;
					this.$resultHolder$ = dnuCatcher("$resultHolder$");
					this.$enclosingObjects$BrowsingForHTML$ObjectPresenter = enclosingObjects;
					this.$super$BrowsingForHTML$ObjectPresenter$slot = runtimeSuperclass;
					this["BrowsingForHTML`ObjectPresenter"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
						this.$resultHolder$slot = nil;
					});
					this.basicNew = this["BrowsingForHTML`ObjectPresenter"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for BrowsingForHTML`ObjectPresenter";
				this.slots = [];
				this.methods = [new MM("onSubject:", true, null)];
				this.nestedClasses = [];
				this.$onSubject$ = (function ($s) {
					return (new this.nonMeta.basicNew()).$instance$initializer($s);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for BrowsingForHTML`ObjectPresenter";
						this.$onSubject$ = this._$onSubject$ = $.$onSubject$;
						this.$enclosingObjects$BrowsingForHTML$ObjectPresenter = enclosingObjects;
						this.$super$BrowsingForHTML$ObjectPresenter = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$BrowsingForHTML$ObjectSubject = new (function () {
			var $ = this;
			var $1 = this;
			this.debug = "Runtime mixin for BrowsingForHTML`ObjectSubject";
			this.name = "BrowsingForHTML`ObjectSubject";
			this.header = "ObjectSubject onModel: m = Subject onModel: m (|\r|)";
			this.slots = [];
			this.methods = [
				new MM("superInit`BrowsingForHTML`ObjectSubject", true, "onModel: m"),
				new MM("instance`initializer", true, "onModel: m"),
				new MM("classMirror", false, "public classMirror ^<ClassMirror> = (\r	^model getClassIfFail: [halt]\r)"),
				new MM("className", false, "public className ^<String> = (\r	^classMirror simpleName\r)"),
				new MM("classSubject", false, "public classSubject = (\r	^ClassSubject onModel: classMirror mixin declaration\r)"),
				new MM("createPresenter", false, "public createPresenter = (\r	^ObjectPresenter onSubject: self\r)"),
				new MM("enclosingObjectName", false, "public enclosingObjectName = (\r	^classMirror enclosingObject reflectee printString\r)"),
				new MM("objectMirror", false, "public objectMirror ^<ObjectMIrror> = (\r	^model\r)"),
				new MM("title", false, "public title = (\r	^model reflectee printString\r)")
			];
			this.nestedClasses = [];
			this.applications = [];
			this.$superInit$BrowsingForHTML$ObjectSubject = (function ($m) {
				var self = this;
				self.$super$BrowsingForHTML$ObjectSubject$slot._$instance$initializer.call(self, $m);
				return self;
			});
			this.$instance$initializer = (function ($m) {
				var self = this;
				self._$superInit$BrowsingForHTML$ObjectSubject($m);
				return self;
			});
			this.$classMirror = (function () {
				var self = this;
				return self._$model().$getClassIfFail$((function () {
					return self._$halt();
				}));
			});
			this.$className = (function () {
				var self = this;
				return self._$classMirror().$simpleName();
			});
			this.$classSubject = (function () {
				var self = this;
				return self.$enclosingObjects$BrowsingForHTML$ObjectSubject[0]._$ClassSubject().$onModel$(self._$classMirror().$mixin().$declaration());
			});
			this.$createPresenter = (function () {
				var self = this;
				return self.$enclosingObjects$BrowsingForHTML$ObjectSubject[0]._$ObjectPresenter().$onSubject$(self);
			});
			this.$enclosingObjectName = (function () {
				var self = this;
				return self._$classMirror().$enclosingObject().$reflectee().$printString();
			});
			this.$objectMirror = (function () {
				var self = this;
				return self._$model();
			});
			this.$title = (function () {
				var self = this;
				return self._$model().$reflectee().$printString();
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime class for BrowsingForHTML`ObjectSubject";
					this._$superInit$BrowsingForHTML$ObjectSubject = $.$superInit$BrowsingForHTML$ObjectSubject;
					this.$superInit$BrowsingForHTML$ObjectSubject = dnuCatcher("$superInit$BrowsingForHTML$ObjectSubject");
					this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
					this.$classMirror = this._$classMirror = $.$classMirror;
					this.$className = this._$className = $.$className;
					this.$classSubject = this._$classSubject = $.$classSubject;
					this.$createPresenter = this._$createPresenter = $.$createPresenter;
					this.$enclosingObjectName = this._$enclosingObjectName = $.$enclosingObjectName;
					this.$objectMirror = this._$objectMirror = $.$objectMirror;
					this.$title = this._$title = $.$title;
					this.$enclosingObjects$BrowsingForHTML$ObjectSubject = enclosingObjects;
					this.$super$BrowsingForHTML$ObjectSubject$slot = runtimeSuperclass;
					this["BrowsingForHTML`ObjectSubject"] = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew = this["BrowsingForHTML`ObjectSubject"];
					this.basicNew.prototype = this;
					this.meta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
			this.meta = new (function () {
				var $ = this;
				this.debug = "Runtime meta mixin for BrowsingForHTML`ObjectSubject";
				this.slots = [];
				this.methods = [new MM("onModel:", true, null)];
				this.nestedClasses = [];
				this.$onModel$ = (function ($m) {
					return (new this.nonMeta.basicNew()).$instance$initializer($m);
				});
				this.invoke = (function (runtimeSuperclass, enclosingObjects) {
					function constructRuntimeClass (superBasicNew) {
						this.debug = "Runtime meta class for BrowsingForHTML`ObjectSubject";
						this.$onModel$ = this._$onModel$ = $.$onModel$;
						this.$enclosingObjects$BrowsingForHTML$ObjectSubject = enclosingObjects;
						this.$super$BrowsingForHTML$ObjectSubject = runtimeSuperclass;
						this.basicNew = (function () {
							superBasicNew.call(this);
							this.hashCode = 0;
						});
						this.basicNew.prototype = this;
						this.nonMeta = null;
						this.newspeakClass = null;
					};
					constructRuntimeClass.prototype = runtimeSuperclass;
					return new constructRuntimeClass(runtimeSuperclass.basicNew);
				});
			})();
			this.meta.nonMeta = this;
		})();
		this.$BrowsingForHTML$ClassPresenter.enclosingMixin = this;
		this.$BrowsingForHTML$ClassSubject.enclosingMixin = this;
		this.$BrowsingForHTML$ObjectPresenter.enclosingMixin = this;
		this.$BrowsingForHTML$ObjectSubject.enclosingMixin = this;
		this.invoke = (function (runtimeSuperclass, enclosingObjects) {
			function constructRuntimeClass (superBasicNew) {
				this.debug = "Runtime class for BrowsingForHTML";
				this._$superInit$BrowsingForHTML = $.$superInit$BrowsingForHTML;
				this.$superInit$BrowsingForHTML = dnuCatcher("$superInit$BrowsingForHTML");
				this.$instance$initializer = this._$instance$initializer = $.$instance$initializer;
				this._$ClassPresenter = $.$ClassPresenter;
				this.$ClassPresenter = dnuCatcher("$ClassPresenter");
				this.$ClassSubject = this._$ClassSubject = $.$ClassSubject;
				this._$ObjectPresenter = $.$ObjectPresenter;
				this.$ObjectPresenter = dnuCatcher("$ObjectPresenter");
				this.$ObjectSubject = this._$ObjectSubject = $.$ObjectSubject;
				this._$Subject = $.$Subject;
				this.$Subject = dnuCatcher("$Subject");
				this._$setOnce$Subject$ = $.$setOnce$Subject$;
				this.$setOnce$Subject$ = dnuCatcher("$setOnce$Subject$");
				this._$Presenter = $.$Presenter;
				this.$Presenter = dnuCatcher("$Presenter");
				this._$setOnce$Presenter$ = $.$setOnce$Presenter$;
				this.$setOnce$Presenter$ = dnuCatcher("$setOnce$Presenter$");
				this._$TextEditorFragment = $.$TextEditorFragment;
				this.$TextEditorFragment = dnuCatcher("$TextEditorFragment");
				this._$setOnce$TextEditorFragment$ = $.$setOnce$TextEditorFragment$;
				this.$setOnce$TextEditorFragment$ = dnuCatcher("$setOnce$TextEditorFragment$");
				this._$Color = $.$Color;
				this.$Color = dnuCatcher("$Color");
				this._$setOnce$Color$ = $.$setOnce$Color$;
				this.$setOnce$Color$ = dnuCatcher("$setOnce$Color$");
				this._$Gradient = $.$Gradient;
				this.$Gradient = dnuCatcher("$Gradient");
				this._$setOnce$Gradient$ = $.$setOnce$Gradient$;
				this.$setOnce$Gradient$ = dnuCatcher("$setOnce$Gradient$");
				this._$List = $.$List;
				this.$List = dnuCatcher("$List");
				this._$setOnce$List$ = $.$setOnce$List$;
				this.$setOnce$List$ = dnuCatcher("$setOnce$List$");
				this._$ObjectMirror = $.$ObjectMirror;
				this.$ObjectMirror = dnuCatcher("$ObjectMirror");
				this._$setOnce$ObjectMirror$ = $.$setOnce$ObjectMirror$;
				this.$setOnce$ObjectMirror$ = dnuCatcher("$setOnce$ObjectMirror$");
				this._$MixinBuilder = $.$MixinBuilder;
				this.$MixinBuilder = dnuCatcher("$MixinBuilder");
				this._$setOnce$MixinBuilder$ = $.$setOnce$MixinBuilder$;
				this.$setOnce$MixinBuilder$ = dnuCatcher("$setOnce$MixinBuilder$");
				this._$detailAreaRatio = $.$detailAreaRatio;
				this.$detailAreaRatio = dnuCatcher("$detailAreaRatio");
				this._$setOnce$detailAreaRatio$ = $.$setOnce$detailAreaRatio$;
				this.$setOnce$detailAreaRatio$ = dnuCatcher("$setOnce$detailAreaRatio$");
				this._$captionColor = $.$captionColor;
				this.$captionColor = dnuCatcher("$captionColor");
				this._$setOnce$captionColor$ = $.$setOnce$captionColor$;
				this.$setOnce$captionColor$ = dnuCatcher("$setOnce$captionColor$");
				this.$BrowsingForHTML$ClassPresenter = this._$BrowsingForHTML$ClassPresenter = $.$BrowsingForHTML$ClassPresenter;
				this.$BrowsingForHTML$ClassPresenter$ = this._$BrowsingForHTML$ClassPresenter$ = $.$BrowsingForHTML$ClassPresenter$;
				this.$BrowsingForHTML$ClassSubject = this._$BrowsingForHTML$ClassSubject = $.$BrowsingForHTML$ClassSubject;
				this.$BrowsingForHTML$ClassSubject$ = this._$BrowsingForHTML$ClassSubject$ = $.$BrowsingForHTML$ClassSubject$;
				this.$BrowsingForHTML$ObjectPresenter = this._$BrowsingForHTML$ObjectPresenter = $.$BrowsingForHTML$ObjectPresenter;
				this.$BrowsingForHTML$ObjectPresenter$ = this._$BrowsingForHTML$ObjectPresenter$ = $.$BrowsingForHTML$ObjectPresenter$;
				this.$BrowsingForHTML$ObjectSubject = this._$BrowsingForHTML$ObjectSubject = $.$BrowsingForHTML$ObjectSubject;
				this.$BrowsingForHTML$ObjectSubject$ = this._$BrowsingForHTML$ObjectSubject$ = $.$BrowsingForHTML$ObjectSubject$;
				this.$enclosingObjects$BrowsingForHTML = enclosingObjects;
				this.$super$BrowsingForHTML$slot = runtimeSuperclass;
				this.BrowsingForHTML = (function () {
					superBasicNew.call(this);
					this.hashCode = 0;
					this.$Subject$slot = nil;
					this.$Presenter$slot = nil;
					this.$TextEditorFragment$slot = nil;
					this.$Color$slot = nil;
					this.$Gradient$slot = nil;
					this.$List$slot = nil;
					this.$ObjectMirror$slot = nil;
					this.$MixinBuilder$slot = nil;
					this.$detailAreaRatio$slot = nil;
					this.$captionColor$slot = nil;
					this.$BrowsingForHTML$ClassPresenter$slot = nil;
					this.$BrowsingForHTML$ClassSubject$slot = nil;
					this.$BrowsingForHTML$ObjectPresenter$slot = nil;
					this.$BrowsingForHTML$ObjectSubject$slot = nil;
				});
				this.basicNew = this.BrowsingForHTML;
				this.basicNew.prototype = this;
				this.meta = null;
				this.newspeakClass = null;
			};
			constructRuntimeClass.prototype = runtimeSuperclass;
			return new constructRuntimeClass(runtimeSuperclass.basicNew);
		});
		this.meta = new (function () {
			var $ = this;
			this.debug = "Runtime meta mixin for BrowsingForHTML";
			this.slots = [];
			this.methods = [new MM("usingPlatform:", true, null)];
			this.nestedClasses = [];
			this.$usingPlatform$ = (function ($p) {
				return (new this.nonMeta.basicNew()).$instance$initializer($p);
			});
			this.invoke = (function (runtimeSuperclass, enclosingObjects) {
				function constructRuntimeClass (superBasicNew) {
					this.debug = "Runtime meta class for BrowsingForHTML";
					this.$usingPlatform$ = this._$usingPlatform$ = $.$usingPlatform$;
					this.$enclosingObjects$BrowsingForHTML = enclosingObjects;
					this.$super$BrowsingForHTML = runtimeSuperclass;
					this.basicNew = (function () {
						superBasicNew.call(this);
						this.hashCode = 0;
					});
					this.basicNew.prototype = this;
					this.nonMeta = null;
					this.newspeakClass = null;
				};
				constructRuntimeClass.prototype = runtimeSuperclass;
				return new constructRuntimeClass(runtimeSuperclass.basicNew);
			});
		})();
		this.meta.nonMeta = this;
	})();
})();


var vmmirror = new function(){
	
	this.ImplementationBase$slot = new function(){
		this.debug = "ImplementationBase";
		this.$runtimeClass$slot = new function(){
			this.debug = "Runtime class for ImplementationBase";
			this.basicNew = function(){};
			this.$instance$initializer = function(){};
			this._$instance$initializer = function(){};
			this.toString = function(){ return this.$printString(); }
		};
	};
	this.$ImplementationBase = function(){return this.ImplementationBase$slot;};
	this.$Array = function(){return Array;};
	this.$String = function(){return String;};
	this.$printString = function(){return "VMMirrorForV8"};
	
	this.createKernel = function(){
		
		var enclosingObjects = ["patch me with kernel", "patch me with nil"];
		var enclosingObjects2 = ["patch me with nil"];
		
		var Object$runtimeClass = mixins.$KernelForV8.$KernelForV8$Object.invoke(this.$ImplementationBase().$runtimeClass$slot, enclosingObjects);
		var Class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Class.invoke(Object$runtimeClass, enclosingObjects);
		var Metaclass$runtimeClass = mixins.$KernelForV8.$KernelForV8$Metaclass.invoke(Object$runtimeClass, enclosingObjects);
		var Mixin$runtimeClass = mixins.$KernelForV8.$KernelForV8$Mixin.invoke(Object$runtimeClass, enclosingObjects);
		var UndefinedObject$runtimeClass = mixins.$KernelForV8.$KernelForV8$UndefinedObject.invoke(Object$runtimeClass, enclosingObjects);
		var Kernel$runtimeClass = mixins.$KernelForV8.invoke(Object$runtimeClass, enclosingObjects2);
		
		var Object$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Object.meta.invoke(Class$runtimeClass, enclosingObjects);
		var Class$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Class.meta.invoke(Class$runtimeClass, enclosingObjects);
		var Metaclass$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Metaclass.meta.invoke(Class$runtimeClass, enclosingObjects);
		var Mixin$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$Mixin.meta.invoke(Class$runtimeClass, enclosingObjects);
		var UndefinedObject$class$runtimeClass = mixins.$KernelForV8.$KernelForV8$UndefinedObject.meta.invoke(Class$runtimeClass, enclosingObjects);
		var Kernel$class$runtimeClass = mixins.$KernelForV8.meta.invoke(Class$runtimeClass, enclosingObjects2);
		
		Object$runtimeClass.meta = Object$class$runtimeClass;
		Class$runtimeClass.meta = Class$class$runtimeClass;
		Metaclass$runtimeClass.meta = Metaclass$class$runtimeClass;
		Mixin$runtimeClass.meta = Mixin$class$runtimeClass;
		UndefinedObject$runtimeClass.meta = UndefinedObject$class$runtimeClass;
		Kernel$runtimeClass.meta = Kernel$class$runtimeClass;
		
		Object$class$runtimeClass.nonMeta = Object$runtimeClass;
		Class$class$runtimeClass.nonMeta = Class$runtimeClass;
		Metaclass$class$runtimeClass.nonMeta = Metaclass$runtimeClass;
		Mixin$class$runtimeClass.nonMeta = Mixin$runtimeClass;
		UndefinedObject$class$runtimeClass.nonMeta = UndefinedObject$runtimeClass;
		Kernel$class$runtimeClass.nonMeta = Kernel$runtimeClass;
		
		nil = new UndefinedObject$runtimeClass.basicNew();
		
		var Object = new Object$class$runtimeClass.basicNew();
		var Class = new Class$class$runtimeClass.basicNew();
		var Metaclass = new Metaclass$class$runtimeClass.basicNew();
		var Mixin = new Mixin$class$runtimeClass.basicNew();
		var UndefinedObject = new UndefinedObject$class$runtimeClass.basicNew();
		var Kernel = new Kernel$class$runtimeClass.basicNew();
		
		var Object$class = new Metaclass$runtimeClass.basicNew();
		var Class$class = new Metaclass$runtimeClass.basicNew();
		var Metaclass$class = new Metaclass$runtimeClass.basicNew();
		var Mixin$class = new Metaclass$runtimeClass.basicNew();
		var UndefinedObject$class = new Metaclass$runtimeClass.basicNew();
		var Kernel$class = new Metaclass$runtimeClass.basicNew();
		
		Object$class$runtimeClass.newspeakClass = Object$class;
		Class$class$runtimeClass.newspeakClass = Class$class;
		Metaclass$class$runtimeClass.newspeakClass = Metaclass$class;
		Mixin$class$runtimeClass.newspeakClass = Mixin$class;
		UndefinedObject$class$runtimeClass.newspeakClass = UndefinedObject$class;
		Kernel$class$runtimeClass.newspeakClass = Kernel$class;
		
		Object$runtimeClass.newspeakClass = Object;
		Class$runtimeClass.newspeakClass = Class;
		Metaclass$runtimeClass.newspeakClass = Metaclass;
		Mixin$runtimeClass.newspeakClass = Mixin;
		UndefinedObject$runtimeClass.newspeakClass = UndefinedObject;
		Kernel$runtimeClass.newspeakClass = Kernel;
		
		var kernel = Kernel.$usingVmMirror$(this);
		
		//superclass$slot
		Object.$superclass$slot = nil;
		Class.$superclass$slot = Object;
		Metaclass.$superclass$slot = Object;
		Mixin.$superclass$slot = Object;
		UndefinedObject.$superclass$slot = Object;
		Kernel.$superclass$slot = Object;
		
		Object$class.$superclass$slot = Class;
		Class$class.$superclass$slot = Class;
		Metaclass$class.$superclass$slot = Class;
		Mixin$class.$superclass$slot = Class;
		UndefinedObject$class.$superclass$slot = Class;
		Kernel$class.$superclass$slot = Class;
		
		//mixin$slot
		Object.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Object);
		Class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Class);
		Metaclass.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Metaclass);
		Mixin.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Mixin);
		UndefinedObject.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$UndefinedObject);
		Kernel.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8);

		Object$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Object.meta);
		Class$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Class.meta);
		Metaclass$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Metaclass.meta);
		Mixin$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$Mixin.meta);
		UndefinedObject$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.$KernelForV8$UndefinedObject.meta);
		Kernel$class.$mixin$slot = Mixin.$fromRuntimeMixin$(mixins.$KernelForV8.meta);
		
		//enclosingObject$slot
		Object.$enclosingObject$slot = kernel;
		Class.$enclosingObject$slot = kernel;
		Metaclass.$enclosingObject$slot = kernel;
		Mixin.$enclosingObject$slot = kernel;
		UndefinedObject.$enclosingObject$slot = kernel;
		Kernel.$enclosingObject$slot = nil;
		
		Object$class.$enclosingObject$slot = kernel;
		Class$class.$enclosingObject$slot = kernel;
		Metaclass$class.$enclosingObject$slot = kernel;
		Mixin$class.$enclosingObject$slot = kernel;
		UndefinedObject$class.$enclosingObject$slot = kernel;
		Kernel$class.$enclosingObject$slot = nil;
		
		enclosingObjects[0] = kernel;
		enclosingObjects[1] = nil;
		enclosingObjects2[0] = nil;
		
		//name$slot
		Object.$name$slot = "Object";
		Class.$name$slot = "Class";
		Metaclass.$name$slot = "Metaclass";
		Mixin.$name$slot = "Mixin";
		Kernel.$name$slot = "Kernel";
		
		Object$class.$name$slot = "Object class";
		Class$class.$name$slot = "Class class";
		Metaclass$class.$name$slot = "Metaclass class";
		Mixin$class.$name$slot = "Mixin class";
		Kernel$class.$name$slot = "Kernel class";
		
		//runtimeClass
		Object.runtimeClass = Object$runtimeClass;
		Class.runtimeClass = Class$runtimeClass;
		Metaclass.runtimeClass = Metaclass$runtimeClass;
		Mixin.runtimeClass = Mixin$runtimeClass;
		Kernel.runtimeClass = Kernel$runtimeClass;
		
		Object$class.runtimeClass = Metaclass$runtimeClass;
		Class$class.runtimeClass = Metaclass$runtimeClass;
		Metaclass$class.runtimeClass = Metaclass$runtimeClass;
		Mixin$class.runtimeClass = Metaclass$runtimeClass;
		Kernel$class.runtimeClass = Metaclass$runtimeClass;
		
		//thisClass$slot
		Object$class.$thisClass$slot = Object;
		Class$class.$thisClass$slot = Class;
		Metaclass$class.$thisClass$slot = Metaclass;
		Mixin$class.$thisClass$slot = Mixin;
		Kernel$class.$thisClass$slot = Kernel;
		
		kernel.$KernelForV8$Object$slot = Object;
		kernel.$KernelForV8$Class$slot = Class;
		kernel.$KernelForV8$Metaclass$slot = Metaclass;
		kernel.$KernelForV8$Mixin$slot = Mixin;
		
		return kernel;
	};
	this.kernel = this.createKernel();
	
	this.applyTopLevelMixin = function(runtimeMixin){
		return this.$applyMixin$toSuperclass$withEnclosingObjects$(runtimeMixin, this.kernel._$Object(), [nil]);
	};
	
	this.$applyMixin$toSuperclass$withEnclosingObjects$ = function(runtimeMixin, newspeakSuperclass, enclosingObjects){
		
		var Class = this.kernel.$Class();
		var Metaclass = this.kernel.$Metaclass();
		var Mixin = this.kernel.$Mixin();
		
		var runtimeSuperclass = newspeakSuperclass.runtimeClass;
		var runtimeClass = runtimeMixin.invoke(runtimeSuperclass, enclosingObjects);
		var runtimeMetaclass = runtimeMixin.meta.invoke(Class.runtimeClass, enclosingObjects);
		runtimeClass.meta = runtimeMetaclass;
		runtimeMetaclass.nonMeta = runtimeClass;
		
		var newspeakMetaclass = Metaclass.$new();
		var newspeakClass = new runtimeMetaclass.basicNew();
		
		runtimeClass.newspeakClass = newspeakClass;
		runtimeMetaclass.newspeakClass = newspeakMetaclass;//Class;
		
		newspeakMetaclass.$superclass$slot = Class;
		newspeakMetaclass.$mixin$slot = Mixin.$fromRuntimeMixin$(runtimeMixin.meta);
		newspeakMetaclass.$enclosingObject$slot = enclosingObjects[0];
		newspeakMetaclass.$enclosingObjects$slot = enclosingObjects;
		newspeakMetaclass.$name$slot = runtimeMixin.name + " class";
		newspeakMetaclass.$thisClass$slot = newspeakClass;
		newspeakMetaclass.runtimeClass = runtimeMetaclass;
		
		newspeakClass.$superclass$slot = newspeakSuperclass;
		newspeakClass.$mixin$slot = Mixin.$fromRuntimeMixin$(runtimeMixin);
		newspeakClass.$enclosingObject$slot = enclosingObjects[0];
		newspeakClass.$enclosingObjects$slot = enclosingObjects;
		newspeakClass.$name$slot = runtimeMixin.name;
		newspeakClass.runtimeClass = runtimeClass;

		runtimeMixin.applications.push(runtimeClass);
		return newspeakClass;
	};
	
	var specialCharacters = new Object();
	specialCharacters["plus"] = "+";
	specialCharacters["minus"] = "-";
	specialCharacters["times"] = "*";
	specialCharacters["over"] = "/";
	specialCharacters["back"] = "\\";
	specialCharacters["less"] = "<";
	specialCharacters["greater"] = ">";
	specialCharacters["tilde"] = "~";
	specialCharacters["equal"] = "=";
	specialCharacters["at"] = "@";
	specialCharacters["percent"] = "%";
	specialCharacters["pipe"] = "|";
	specialCharacters["amp"] = "&";
	specialCharacters["question"] = "?";
	specialCharacters["bang"] = "!";
	specialCharacters["comma"] = ",";
	
	this.$unmangleSelector$ = function(s) {
		if(s[0] != "$") return "<jsSelector:"+s+">";
		if(s[s.length-1] == "$")
			// Keyword
			return s.substring(1).replace(/\$/g,":");
		if(s[1] == "$")
			// Binary
			return s.substring(2).split("$").map(function(x) {return specialCharacters[x];}).join("");
		// Unary / qualified
	   	return s.substring(1).replace(/\$/g,"`");
	};
	
	this.$mangleSelector$ = function(s) {
		return "$" + s.replace(/\:/g,"$").replace(/\`/g,"$");
	};
};
;

var ns = new (function () {
	this.$RuntimeForV8$slot = vmmirror.applyTopLevelMixin(mixins.$RuntimeForV8);
	this.$KernelForV8$slot = vmmirror.applyTopLevelMixin(mixins.$KernelForV8);
	this.$AliensForV8$slot = vmmirror.applyTopLevelMixin(mixins.$AliensForV8);
	this.$Collections$slot = vmmirror.applyTopLevelMixin(mixins.$Collections);
	this.$GraphicsForHTML5$slot = vmmirror.applyTopLevelMixin(mixins.$GraphicsForHTML5);
	this.$HopscotchForHTML5$slot = vmmirror.applyTopLevelMixin(mixins.$HopscotchForHTML5);
	this.$MirrorsForV8$slot = vmmirror.applyTopLevelMixin(mixins.$MirrorsForV8);
	this.$MirrorGroups$slot = vmmirror.applyTopLevelMixin(mixins.$MirrorGroups);
	this.$Streams$slot = vmmirror.applyTopLevelMixin(mixins.$Streams);
	this.$TimeForV8$slot = vmmirror.applyTopLevelMixin(mixins.$TimeForV8);
	this.$CombinatorialParsing$slot = vmmirror.applyTopLevelMixin(mixins.$CombinatorialParsing);
	this.$NewspeakGrammar$slot = vmmirror.applyTopLevelMixin(mixins.$NewspeakGrammar);
	this.$NewspeakASTs$slot = vmmirror.applyTopLevelMixin(mixins.$NewspeakASTs);
	this.$NewspeakParsing$slot = vmmirror.applyTopLevelMixin(mixins.$NewspeakParsing);
	this.$JavascriptGeneration$slot = vmmirror.applyTopLevelMixin(mixins.$JavascriptGeneration);
	this.$Newspeak2V8Compilation$slot = vmmirror.applyTopLevelMixin(mixins.$Newspeak2V8Compilation);
	this.$NewspeakCompilation$slot = vmmirror.applyTopLevelMixin(mixins.$NewspeakCompilation);
	this.$Literate$slot = vmmirror.applyTopLevelMixin(mixins.$Literate);
	this.$BrowsingForHTML$slot = vmmirror.applyTopLevelMixin(mixins.$BrowsingForHTML);
	this.$RuntimeForV8 = (function () {
		return this.$RuntimeForV8$slot;
	});
	this.$KernelForV8 = (function () {
		return this.$KernelForV8$slot;
	});
	this.$AliensForV8 = (function () {
		return this.$AliensForV8$slot;
	});
	this.$Collections = (function () {
		return this.$Collections$slot;
	});
	this.$GraphicsForHTML5 = (function () {
		return this.$GraphicsForHTML5$slot;
	});
	this.$HopscotchForHTML5 = (function () {
		return this.$HopscotchForHTML5$slot;
	});
	this.$MirrorsForV8 = (function () {
		return this.$MirrorsForV8$slot;
	});
	this.$MirrorGroups = (function () {
		return this.$MirrorGroups$slot;
	});
	this.$Streams = (function () {
		return this.$Streams$slot;
	});
	this.$TimeForV8 = (function () {
		return this.$TimeForV8$slot;
	});
	this.$CombinatorialParsing = (function () {
		return this.$CombinatorialParsing$slot;
	});
	this.$NewspeakGrammar = (function () {
		return this.$NewspeakGrammar$slot;
	});
	this.$NewspeakASTs = (function () {
		return this.$NewspeakASTs$slot;
	});
	this.$NewspeakParsing = (function () {
		return this.$NewspeakParsing$slot;
	});
	this.$JavascriptGeneration = (function () {
		return this.$JavascriptGeneration$slot;
	});
	this.$Newspeak2V8Compilation = (function () {
		return this.$Newspeak2V8Compilation$slot;
	});
	this.$NewspeakCompilation = (function () {
		return this.$NewspeakCompilation$slot;
	});
	this.$Literate = (function () {
		return this.$Literate$slot;
	});
	this.$BrowsingForHTML = (function () {
		return this.$BrowsingForHTML$slot;
	});
	this.$accept16px = (function () {
		return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$aliens().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="accept16px.png"; return i;}() );});
	});
	this.$cancel16px = (function () {
		return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$aliens().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="cancel16px.png"; return i;}() );});
	});
	this.$disclosureClosedImage = (function () {
		return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$aliens().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="disclosureClosedImage.png"; return i;}() );});
	});
	this.$disclosureTransitionImage = (function () {
		return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$aliens().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="disclosureTransitionImage.png"; return i;}() );});
	});
	this.$disclosureOpenImage = (function () {
		return vmmirror.kernel.$Future().$computing$(
		function(){return vmmirror.platform.$aliens().$yourself()._$alienate$(
			function(){ var i = new Image(); i.src ="disclosureOpenImage.png"; return i;}() );});
	});
})();

function installDnuHandlersOn (p) {
	([
		"$MixinApplicationClassAST",
		"$wrap$",
		"$defaultSort$to$",
		"$cr",
		"$alpha",
		"$UnaryTypeOpAST",
		"$ifFalse$ifTrue$",
		"$setOnce$enclosingMixin$",
		"$setOnce$CharacterSequenceReadWriteStream$",
		"$method$",
		"$collapsedDefinition",
		"$textX",
		"$isMeta",
		"$setOnce$typeExpr$",
		"$setOnce$BasicOutputReadStream$",
		"$setOnce$parenthesizedTypeExpression$",
		"$setOnce$captionColor$",
		"$isTemporaryAST",
		"$superInit$NewspeakASTs",
		"$Fragment",
		"$deleted",
		"$hasChildNodes",
		"$incrementExpression",
		"$superInit$HopscotchForHTML5$Composer",
		"$currentScope",
		"$p",
		"$prologue$",
		"$initialIntegerOrNil",
		"$include$ifNew$",
		"$doesNotUnderstand$",
		"$makeSpaceAtStart$",
		"$setOnce$binarySelector$",
		"$isJsNode",
		"$replaceFrom$to$with$",
		"$defaultChangeResponse",
		"$sentSelectors$",
		"$setOnce$specialCharacter$",
		"$statementsS",
		"$SlotMirror",
		"$NameMangler",
		"$expatriate$",
		"$JavascriptGeneration",
		"$MethodBuilder",
		"$isWhileTrue$",
		"$blockNode$",
		"$isImplicitReceiverNode$",
		"$PatternAST",
		"$superInit$NewspeakASTs$BlockAST",
		"$SetterSendAST",
		"$upTo$",
		"$contents",
		"$setOnce$wildcardPattern$",
		"$image$",
		"$asInteger",
		"$reduce$ifEmpty$",
		"$syntax",
		"$propertyOf$at$",
		"$superInit$KernelForV8$Number",
		"$do$separatedBy$",
		"$isCascadedSendNode",
		"$visitObjectLiteral$",
		"$setOnce$varName$",
		"$superInit$Collections$Bag",
		"$VariableAST",
		"$setOnce$reflectee$",
		"$end",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$SuperSendAST",
		"$dirty",
		"$Character",
		"$superInit$Streams$CharacterReadWriteStream",
		"$loopNode$",
		"$setOnce$compilation$",
		"$setterKeyword",
		"$valueWithArguments$",
		"$vmmirror",
		"$remove$withOccurrences$ifAbsent$",
		"$superInit$Collections$SortedList",
		"$usingPlatform$browsing$",
		"$dirty$",
		"$internalIndexIsValid$",
		"$processInlineableLoop$",
		"$compileMethodSource$within$",
		"$SchedulerAST",
		"$printString",
		"$Color",
		"$on$do$",
		"$superInit$AliensForV8",
		"$initializerFor$",
		"$table_0",
		"$isOperatorExpression",
		"$superInit$Streams$CharacterReadStream",
		"$ImplementationBase",
		"$setOnce$nestedClassDecl$",
		"$Set",
		"$vbar",
		"$setOnce$MixinBuilder$",
		"$cascadedMessageExpression",
		"$named$factoryMsg$inheriting$",
		"$isMemberExpression",
		"$classDecl",
		"$label",
		"$asMutableArrayList",
		"$binarySelector",
		"$return",
		"$to$assign$",
		"$binSel",
		"$superInit$HopscotchForHTML5$NavigationHistory",
		"$remove$ifAbsent$",
		"$currentDepth",
		"$nilNode$",
		"$PaddedFrameComposer",
		"$Presenter",
		"$last",
		"$setOnce$global$",
		"$superInit$MirrorsForV8$MethodBuilder",
		"$numCharsUpToAscii$",
		"$setOnce$binaryMsgPattern$",
		"$setOnce$parameters$",
		"$setOnce$constructor$",
		"$setOnce$sentSelectors$",
		"$elements",
		"$superInit$Streams$ExternalStream",
		"$NSSideAST",
		"$superInit$CombinatorialParsing$ExecutableGrammar",
		"$setOnce$pound$",
		"$$less$equal",
		"$localReadNode$",
		"$concreteEnd",
		"$superInit$NewspeakASTs$KeywordPatternAST",
		"$blockTypeNode$",
		"$isNumber",
		"$superInit$NewspeakASTs$PatternAST",
		"$at$put$",
		"$r$g$b$",
		"$grammar",
		"$setOnce$returnType$",
		"$p$",
		"$superInit$NewspeakASTs$NSSideAST",
		"$literal",
		"$CharacterInputConverter",
		"$scopeMap",
		"$superInit$Streams$ExternalReadWriteStream",
		"$setOnce$TupleAST$",
		"$usingPlatform$grammar$asts$",
		"$ultimateParser",
		"$wrapperBlock",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$BooleanAST",
		"$getSlot$ifFail$",
		"$setOnce$NewspeakParsing$",
		"$setOnce$cascadeMsg$",
		"$with$with$",
		"$contents$",
		"$setOnce$variablePattern$",
		"$parent$",
		"$setOnce$superclassClause$",
		"$message$",
		"$if$is$then$",
		"$indicesOfSubCollection$",
		"$tupleNode$",
		"$asSymbol",
		"$ExternalReadStream",
		"$alienate$",
		"$reflecting$",
		"$Mixin",
		"$flexDirection",
		"$sin",
		"$link$action$",
		"$processOuterSend$",
		"$detailAreaRatio",
		"$setOnce$blockParameter$",
		"$visitUnaryOperatorExpression$",
		"$NegatingParser",
		"$blue",
		"$needSpaceAtEnd$",
		"$superInit$Streams$BasicReadWriteStream",
		"$head",
		"$rect$with$with$with$",
		"$ExternalStream",
		"$processMappedVariable$decl$",
		"$testExpression",
		"$Writer",
		"$Object",
		"$SymbolicTokenParser",
		"$ImmutableSlotDefAST",
		"$literalMessage",
		"$presenterX",
		"$mixinApplication",
		"$minorClassHeadingBlock$",
		"$ClassDeclarationMirror",
		"$setOnce$SendAST$",
		"$superInit$KernelForV8$Error",
		"$platformMirror",
		"$disclosureOpenImage",
		"$includesKey$",
		"$table",
		"$setOnce$superclassName$",
		"$setOnce$defaultSuperclassAndBody$",
		"$BasicIExStream",
		"$setOnce$definitions$",
		"$replaceChild$with$",
		"$superInit$CombinatorialParsing$ForwardingWrappingParser",
		"$BooleanLiteral",
		"$setOnce$languageId$",
		"$superInit$Newspeak2V8Compilation$ClassDeclarationIR",
		"$ImplicitReceiverSendAST",
		"$setOnce$dollar$",
		"$sortBlock$",
		"$ifFalse$",
		"$enclosingMixin",
		"$end$",
		"$verbatim$",
		"$superInit$HopscotchForHTML5",
		"$setOnce$TextEditorFragment$",
		"$isNumberNode",
		"$setOnce$isPostfix$",
		"$WhitespaceParser",
		"$prefix$mixin$",
		"$AliensForV8",
		"$IdentityDictionary",
		"$quo$",
		"$prvtClassDeclIR",
		"$addFromSource$",
		"$setOnce$graphics$",
		"$isBlockLocalReturnAST",
		"$LiteralPatternAST",
		"$postCopy",
		"$termBlock",
		"$digits",
		"$superInit$GraphicsForHTML5",
		"$symbol$",
		"$inlinedOperatorNode$",
		"$leftHandSide$rightHandSide$",
		"$compilation",
		"$SeqCltnReadWriteStream",
		"$setOnce$p$",
		"$DoubleLink",
		"$reverse",
		"$fillBuffer",
		"$sort$to$using$",
		"$alert$",
		"$generic$",
		"$cos",
		"$setOnce$classComment$",
		"$function$of$body$",
		"$visitBooleanLiteral$",
		"$Platform",
		"$Alien",
		"$Dictionary",
		"$visitAssignmentExpression$",
		"$setOnce$whitespace$",
		"$manglePublic$",
		"$rightOperand",
		"$moveTo$with$",
		"$setOnce$rbracket$",
		"$symbol",
		"$new$sortBlock$",
		"$setOnce$Aliens$",
		"$printOn$",
		"$wildcardPatternNode$",
		"$setOnce$keywordExpression$",
		"$setOnce$methodHeader$",
		"$setOnce$OutputInputConverter$",
		"$FunctionExpression",
		"$ObjectSubject",
		"$name",
		"$pushScope$",
		"$initialContent$contentSource$",
		"$setOnce$src$",
		"$methodDecl",
		"$ClassBodyAST",
		"$includes$",
		"$selector",
		"$Node",
		"$msgCascade",
		"$setOnce$exponent$",
		"$superInit$NewspeakCompilation$SlotEntry",
		"$actualNext",
		"$setOnce$hat$",
		"$valueS",
		"$Mirrors",
		"$createVisual",
		"$keywordExpression",
		"$setOnce$ASTCopier$",
		"$setOnce$parserLib$",
		"$setOnce$langleBracket$",
		"$CollectingCommentParser",
		"$setOnce$specialCharacterManglings$",
		"$keys",
		"$ContextAST",
		"$checkForDuplicateNames$",
		"$parent",
		"$superInit$CombinatorialParsing$StarParser",
		"$actualPosition$",
		"$next",
		"$setOnce$accessModifier$",
		"$superInit$KernelForV8$Metaclass",
		"$setOnce$String$",
		"$nlrValuePropertyName",
		"$setOnce$Mirrors$",
		"$install",
		"$startGap$",
		"$expand",
		"$tokenFromChar$",
		"$vars",
		"$sortBlock_private",
		"$bitXor$",
		"$radix",
		"$Newspeak2V8Compilation",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$SendAST",
		"$inverseMixinOperator",
		"$headingDefinition",
		"$_nsTarget",
		"$green",
		"$installCollapsedPresenter",
		"$isLocalBinding",
		"$superInit$NewspeakGrammar",
		"$MemberExpression",
		"$isFactory$",
		"$predicate",
		"$superInit$Newspeak2V8Compilation$NameMangler",
		"$leaveEditState",
		"$Point",
		"$assert$message$",
		"$LeafFragment",
		"$setOnce$furtherStatements$",
		"$slash",
		"$superInit$Streams$ExternalReadStream",
		"$setOnce$NumberAST$",
		"$respondToAccept",
		"$enclosingObject",
		"$setOnce$EIStream$",
		"$classPrefix$",
		"$firstIndex",
		"$msgSelector",
		"$wrapBodyForNlrHandling$",
		"$previousSend",
		"$$times$times",
		"$compilationUnit",
		"$superInit$NewspeakASTs$CategoryAST",
		"$ReadExternalOutputStream",
		"$at$",
		"$superInit$JavascriptGeneration$Syntax$VariableStatement",
		"$keywordAndLiteral",
		"$setOnce$StringAST$",
		"$literalMessages$",
		"$starSeparatedBy$",
		"$CombinatorialParsing",
		"$byteAt$",
		"$setOnce$operand$",
		"$rangleBracket",
		"$contextNode$",
		"$Message",
		"$flush",
		"$bufferSize",
		"$setOnce$operatorName$",
		"$increment",
		"$onSubject$",
		"$yourself",
		"$description",
		"$forClassDeclaration$ir$em$",
		"$isInlinableBooleanOperator$",
		"$superInit$Newspeak2V8Compilation$PropertyCallAST",
		"$setOnce$superclassCall$",
		"$setOnce$rcurly$",
		"$compileNestedClassesOf$within$",
		"$selector$arguments$",
		"$currentDepth$",
		"$setOnce$seqSlotDecls$",
		"$setOnce$ImmutableMirrorGroup$",
		"$superInit$JavascriptGeneration$Syntax$ArrayExpression",
		"$aliens",
		"$setOnce$keywordMsg$",
		"$superInit$NewspeakASTs$SideAST",
		"$type",
		"$expanded$collapsed$",
		"$coerce$else$",
		"$applicationConfiguration",
		"$blackMarket",
		"$HolderComposer",
		"$opt",
		"$charCode",
		"$setOnce$elements_$",
		"$slots$initializerExpressions$comment$slotsAreSequential$",
		"$for$isMeta$",
		"$isInlineableConditional$",
		"$simpleName",
		"$accept16px",
		"$superInit$MirrorsForV8$SlotMirror",
		"$superInit$NewspeakCompilation$Compiler$Rewriter",
		"$superInit$JavascriptGeneration$Syntax$CallExpression",
		"$indexOf$",
		"$MessagePatternAST",
		"$superInit$CombinatorialParsing$PlusParser",
		"$setOnce$y$",
		"$$comma",
		"$setOnce$charIncludingQuotesAndSpace$",
		"$superInit$NewspeakASTs$ClassDeclarationAST",
		"$textBeingAccepted$",
		"$headerSource",
		"$setOnce$EOStream$",
		"$inlinableNumericOperators",
		"$addLast$",
		"$into$openSubject$",
		"$superInit$BrowsingForHTML$ObjectPresenter",
		"$nestedPatternLiteral",
		"$key$value$",
		"$Association",
		"$setOnce$vmmirror$",
		"$superInit$NewspeakASTs$ClassHeaderAST",
		"$ClassPresenter",
		"$fail",
		"$setOnce$collections$",
		"$subject",
		"$receiverNode$",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$NilAST",
		"$setOnce$offsets$",
		"$setOnce$backTickIdentifier$",
		"$signal$",
		"$LocalWriteAST",
		"$keyword$",
		"$MutableHashedMap",
		"$rewriteInlinedBlockNode$forValue$",
		"$NSCommentParser",
		"$setOnce$msgCascade$",
		"$setOnce$uppercaseLetter$",
		"$bufferNumElements",
		"$lineTo$with$",
		"$doClose",
		"$time",
		"$usingVmMirror$",
		"$call$with$",
		"$isMutable",
		"$setOnce$sym$",
		"$source$",
		"$ir",
		"$toplevelClass",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$ParameterAST",
		"$schedulerNode$",
		"$setOnce$kwds$",
		"$typeIdNode$",
		"$presenterX$",
		"$blockTypeArgList",
		"$SnippetSubject",
		"$isPublic",
		"$leftHandSide",
		"$Subject",
		"$containsNonLocalReturn",
		"$minTableSizeForCapacity$",
		"$$less",
		"$indexOf$ifAbsent$",
		"$setOnce$letter$",
		"$at$put$ifNew$",
		"$removeLast",
		"$superInit$CombinatorialParsing$FailingParser",
		"$actualPosition",
		"$isUndefined",
		"$streams",
		"$EOIParser",
		"$do$timesRepeat$",
		"$medianOf$and$and$using$",
		"$superInit$NewspeakASTs$SendAST",
		"$havePeeked",
		"$temporaries$statements$",
		"$displayPresenter$",
		"$changeResponse",
		"$ColumnComposer",
		"$currentMixinUID",
		"$hasSameElementsAndOrderAs$",
		"$methodsMetadata",
		"$start",
		"$whitespace",
		"$enclosingObjects",
		"$x$y$",
		"$setOnce$right$",
		"$for$",
		"$compressibility",
		"$varName$expression$body$",
		"$copyUntilFirstColon$",
		"$expression$arguments$",
		"$enterSubject$",
		"$try$catch$with$",
		"$setOnce$comment$",
		"$enterPresenter$",
		"$setOnce$name$",
		"$setOnce$ifTrue$",
		"$receiver$",
		"$setOnce$kw$",
		"$setOnce$property$",
		"$setOnce$subparsers$",
		"$pattern",
		"$column$",
		"$eventualSendOperator",
		"$model$",
		"$setOnce$initExprs$",
		"$timesRepeat$",
		"$visitScript$",
		"$setOnce$selfMirror$",
		"$q",
		"$setOnce$nonEmptyBlockTypeArgList$",
		"$setOnce$literalMessage$",
		"$setOnce$LiteralPatternAST$",
		"$if$is$then$else$",
		"$char$",
		"$setOnce$hopscotch$",
		"$ListReadStream",
		"$withSubparsers$",
		"$depth",
		"$bufferSize$",
		"$setOnce$typeFormal$",
		"$inferenceClause",
		"$_concreteStart$",
		"$nextFromPeek",
		"$getElementsByClassName$",
		"$setOnce$NewspeakGrammar$",
		"$operator$",
		"$write$",
		"$sym",
		"$textX$",
		"$mangledSelector",
		"$function$arguments$",
		"$and$and$and$",
		"$acceptResponse$",
		"$parameters$temporaries$statements$",
		"$backTickIdentifier",
		"$advanceBuffer",
		"$installContentVisual$",
		"$classDeclIRFor$within$",
		"$setOnce$BlockAST$",
		"$ifTrue",
		"$setOnce$Color$",
		"$superInit$MirrorGroups",
		"$implicitReceiverNode",
		"$superInit$HopscotchForHTML5$TextDisplayFragment",
		"$inClosure",
		"$content$offsets$",
		"$skipTo$",
		"$newBlockArgType",
		"$classOf$",
		"$subtypeOf",
		"$sortBlock_private$",
		"$visualX$",
		"$slotCount",
		"$SnippetPresenter",
		"$incrementalScopeFor$",
		"$superInit$BrowsingForHTML$ClassSubject",
		"$isRectangle",
		"$SymbolAST",
		"$setterKw",
		"$sideDecl",
		"$superInit$JavascriptGeneration$Syntax$Node",
		"$collapsed$expanded$initiallyExpanded$",
		"$NormalSendAST",
		"$setOnce$toplevelClass$",
		"$TernaryOperatorExpression",
		"$variable",
		"$variablePatternNode$",
		"$namespace",
		"$of$",
		"$$amp",
		"$isKindOfCollection",
		"$setOnce$arg$",
		"$letter",
		"$isInlinableOperator$",
		"$AddableList",
		"$superInit$AliensForV8$Expat",
		"$from$to$",
		"$ids",
		"$varDeclNode$",
		"$superInit$NewspeakASTs$SymbolAST",
		"$WeakArray",
		"$classBody",
		"$name$initializer$",
		"$superInit$JavascriptGeneration$Syntax$IdentifierExpression",
		"$superInit$MirrorsForV8",
		"$initExpression$test$increment$body$",
		"$collapsedDefinition$expandedDefinition$initiallyExpanded$",
		"$image",
		"$setOnce$TypeIdAST$",
		"$currentSelector$",
		"$label$",
		"$setOnce$CombinatorialParsing$",
		"$selfNode",
		"$superInit$CombinatorialParsing$SymbolicTokenParser",
		"$havePeeked_0",
		"$superInit$Streams$BasicOutputStream",
		"$superInit$JavascriptGeneration",
		"$setOnce$isMutable$",
		"$setOnce$digits$",
		"$setOnce$isMeta$",
		"$setOnce$ids$",
		"$apply$",
		"$getClassIfFail$",
		"$BasicOutputReadStream",
		"$setOnce$BasicInputStream$",
		"$superInit$MirrorGroups$MirrorGroup",
		"$window",
		"$CharacterIStream",
		"$isVarDeclNode",
		"$classPrefix",
		"$SelfSendAST",
		"$superInit$KernelForV8$Message",
		"$setOnce$typeBoundQualifier$",
		"$contentSource$",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$ImplicitReceiverSendAST",
		"$content$",
		"$setOnce$factory$",
		"$superInit$CombinatorialParsing$WrappingParser",
		"$setOnce$Gradient$",
		"$ASTCopier",
		"$typeExpr",
		"$setOnce$messagePattern$",
		"$superInit$MirrorsForV8$MethodMirror",
		"$computeMirrorGroup$",
		"$rem$",
		"$superInit$Collections$Collection",
		"$setOnce$Context$",
		"$concreteStart",
		"$setOnce$mixinSpec$",
		"$fromIR$",
		"$bufferOrigin",
		"$addFirst$",
		"$setOnce$newBlockReturnType$",
		"$removeChild$",
		"$removeAt$",
		"$setOnce$mirrors$",
		"$superInit$NewspeakASTs$ASTCopier",
		"$wrap$name$",
		"$BlockLocalReturnAST",
		"$prev",
		"$setOnce$patternLiteral$",
		"$exponent",
		"$isInEditState",
		"$ClassMirror",
		"$setOnce$CharacterWriteStream$",
		"$CharacterOutput",
		"$superInit$NewspeakASTs$MessageAST",
		"$setOnce$typeFactor$",
		"$initExprs$",
		"$keyword",
		"$mixins",
		"$setOnce$ReturnStatAST$",
		"$new$",
		"$ClassDeclarationAST",
		"$withValue$",
		"$messagePatternNode$",
		"$something$",
		"$refresh",
		"$setOnce$parser$",
		"$platform",
		"$invokeMeta",
		"$js",
		"$MutableSlotDefAST",
		"$presenterFor$",
		"$slots$",
		"$kwds",
		"$setOnce$x$",
		"$setOnce$mixinApplication$",
		"$visualX",
		"$nextFrameDo$",
		"$enclosingObjectNode$",
		"$setOnce$red$",
		"$setOnce$Set$",
		"$for$while$step$do$",
		"$isKindOfCombinatorialParser",
		"$sign",
		"$formals$",
		"$at$ifPresent$ifAbsentPut$",
		"$setOnce$pattern$",
		"$setOnce$ParameterizedTypeAST$",
		"$superInit$CombinatorialParsing$CollectingCommentParser",
		"$checkForReservedWord$",
		"$tail$",
		"$newBlockReturnType",
		"$navigator",
		"$red",
		"$receiver$message$",
		"$number",
		"$tail",
		"$reflecting$in$",
		"$indentCr",
		"$superInit$JavascriptGeneration$Syntax$VerbatimNode",
		"$isBlockNode",
		"$ExternalInputStream",
		"$setOnce$BlockTypeAST$",
		"$addMirror$",
		"$linkAt$",
		"$setOnce$for$",
		"$setOnce$Mixin$",
		"$superInit$Collections$IdentitySet",
		"$superInit$MirrorsForV8$MixinBuilder",
		"$emptyBody",
		"$setOnce$slotDecl$",
		"$expatriateBlock$",
		"$ASTTool",
		"$outerReceiver",
		"$slotNames",
		"$CanvasFragment",
		"$setOnce$KeywordPatternAST$",
		"$bindingRoutine$",
		"$superInit$JavascriptGeneration$Syntax$FunctionStatement",
		"$inlinableOperators",
		"$isReservedWord$",
		"$setOnce$IOSequence$",
		"$block$",
		"$collectUsingAtPut$",
		"$needSpaceAtStart$",
		"$collection",
		"$processSuperSend$",
		"$SortedList",
		"$objectMirror",
		"$setOnce$contentSource$",
		"$concreteEnd$",
		"$of",
		"$unsignedByteAt$",
		"$ReceiverAST",
		"$arguments",
		"$superInit$NewspeakASTs$InitializerAST",
		"$superInit$NewspeakASTs$BinaryTypeOpAST",
		"$CharacterConverterWithOutput",
		"$min$",
		"$valAt$ifAbsent$",
		"$unmangleSelector$",
		"$name$constructor$superclassName$superclassCall$superConstructorCall$",
		"$setOnce$slash$",
		"$star",
		"$setOnce$typeArg$",
		"$$pipe",
		"$fromCharCode$",
		"$setOnce$stringTranslation$",
		"$setOnce$newBlockArgType$",
		"$scopeMap$",
		"$var$value$",
		"$setOnce$InitializerAST$",
		"$visitFunctionStatement$",
		"$setOnce$nonEmptyMessages$",
		"$Gradient",
		"$statements_",
		"$EmptyParser",
		"$description$",
		"$setOnce$core$",
		"$superInit$KernelForV8$Class",
		"$setOnce$Token$",
		"$expansibility",
		"$ClassDeclarationBuilder",
		"$depth$",
		"$nlrName",
		"$fill",
		"$setOnce$comma$",
		"$decimalNum",
		"$userToggle",
		"$statements$",
		"$usingLib$",
		"$tokenFromSymbol$",
		"$superInit$NewspeakASTs$SlotDefAST",
		"$setOnce$ImmutableSlotDefAST$",
		"$setOnce$names$",
		"$left$",
		"$superInit$JavascriptGeneration$Syntax$UnaryOperatorExpression",
		"$applyForEffectTo$",
		"$visitIdentifierExpression$",
		"$used$",
		"$setOnce$Time$",
		"$coerce$",
		"$computeMixinFrom$",
		"$selfMirror",
		"$to$send$",
		"$setOnce$of$",
		"$setOnce$disclosureTransitionImage$",
		"$setOnce$initializer$",
		"$UnarySelectorParser",
		"$subject$",
		"$superInit$BrowsingForHTML",
		"$setOnce$BrowsingForHTML$",
		"$nontrivialBinaryMessages",
		"$occupied",
		"$plusSeparatedOrTerminatedBy$",
		"$typeFactor",
		"$compressibility$",
		"$isDebugMappedLocalEntry",
		"$Syntax",
		"$mixinAppSuffix",
		"$setOnce$keywordMsgPattern$",
		"$superInit$NewspeakASTs$LiteralPatternAST",
		"$methodNode$",
		"$parserToForwardTo",
		"$classComment$",
		"$buildScopeFor$",
		"$changeResponse$",
		"$setOnce$classDeclaration$",
		"$setOnce$ClassHeaderAST$",
		"$superInit$NewspeakASTs$ClassBodyAST",
		"$setOnce$radix$",
		"$charBetween$and$",
		"$typePattern$",
		"$remote$",
		"$actualAtEnd",
		"$superInit$NewspeakASTs$CodeBodyAST",
		"$setOnce$blue$",
		"$setOnce$body$",
		"$concreteStart$",
		"$superInit$CombinatorialParsing$TokenParser",
		"$setOnce$disclosureClosedImage$",
		"$if$then$",
		"$StaticLabelFragment",
		"$setOnce$inheritanceClause$",
		"$setOnce$initialContent$",
		"$sideNode$",
		"$size_0",
		"$setOnce$testExpression$",
		"$createFirstTable",
		"$setOnce$CharacterIStream$",
		"$Factory",
		"$BasicReadStream",
		"$variableNode$",
		"$superInit$HopscotchForHTML5$ColumnComposer",
		"$computing$",
		"$asBag",
		"$sel",
		"$superInit$NewspeakASTs$SetterSendAST",
		"$blockLocalReturnNode$",
		"$resultHolder$",
		"$usesDefaultSortBlock_private$",
		"$contentHolder$",
		"$while$is$do$",
		"$superInit$Streams$CharacterInput",
		"$superInit$JavascriptGeneration$Factory",
		"$numArgs",
		"$isTupleNode",
		"$superInit$HopscotchForHTML5$ButtonFragment",
		"$bindForwardReferences",
		"$kwPatternValue",
		"$function",
		"$MethodLocalReturnAST",
		"$position$",
		"$setOnce$condition$",
		"$applyToStyle$",
		"$growIfNeeded",
		"$setOnce$kernel$",
		"$StringAST",
		"$superInit$NewspeakASTs$VariablePatternAST",
		"$indicesOfSubCollection$startingAt$",
		"$applicationConfiguration$",
		"$withoutNbsp$",
		"$CallExpression",
		"$clone",
		"$setOnce$NewspeakASTs$",
		"$superInit$NewspeakASTs$StringAST",
		"$ast$",
		"$tokenFor$",
		"$runtimeMetamixin",
		"$appendChild$",
		"$operator$with$and$",
		"$perform$withArguments$",
		"$setTable$",
		"$superInit$NewspeakASTs$LiteralAST",
		"$mixinApplicationClass$",
		"$text$",
		"$maxPrintElements",
		"$binding",
		"$ClassHeaderMirror",
		"$superInit$Collections$HashedCollection",
		"$setOnce$literal$",
		"$setOnce$Compilation$",
		"$key$",
		"$newForCollectUsingAdd$",
		"$setOnce$translator$",
		"$Number",
		"$namer",
		"$CharacterInput",
		"$leftOperand$",
		"$ToggleComposer",
		"$superInit$CombinatorialParsing$ParserContext",
		"$Collections",
		"$setOnce$MessageAST$",
		"$setOnce$keywordHereSend$",
		"$named$",
		"$if$then$else$",
		"$setOnce$binSel$",
		"$setOnce$WriteStream$",
		"$initExprs",
		"$setOnce$backTick$",
		"$expandedPresenter",
		"$minTableSize",
		"$addCascadedSend$to$",
		"$ifNotNil$",
		"$functionOf$body$",
		"$visitTernaryOperatorExpression$",
		"$var$",
		"$superInit$CombinatorialParsing$CharParser",
		"$setOnce$lparen$",
		"$MethodMirror",
		"$blockOrValue000",
		"$methodLocalReturnNode$",
		"$block",
		"$GraphicsForHTML5",
		"$patterns$",
		"$propertyCallNode$",
		"$objectDetails",
		"$_concreteEnd$",
		"$unicodeValue",
		"$setOnce$superclassPrefix$",
		"$superInit$Streams$CharacterOutput",
		"$nextBufferPosition",
		"$MethodEntry",
		"$toggleWidget$",
		"$isRemovableBlock$withArgs$",
		"$setOnce$CascadedSendAST$",
		"$typeTerm",
		"$definitions",
		"$SymbolTableEntry",
		"$setOnce$javascriptGeneration$",
		"$currentSelector",
		"$superInit$Streams$CharacterReadConverter",
		"$setupForwardReferences",
		"$setOnce$extendedDigits$",
		"$ScopeBuilder",
		"$right",
		"$superInit$CombinatorialParsing",
		"$basicNewMeta",
		"$setOnce$colon$",
		"$pattern$body$accessModifier$",
		"$unarySelector",
		"$superInit$Streams$ExternalOutputStream",
		"$setOnce$EIOStream$",
		"$copyMethods$",
		"$setOnce$UnaryTypeOpAST$",
		"$setOnce$SetterSendAST$",
		"$expandedHeadingDefinition",
		"$nestedClasses$",
		"$property",
		"$is",
		"$beginPath",
		"$isLiteralNode",
		"$keywordMsgPattern",
		"$superInit$CombinatorialParsing$AlternatingParser",
		"$setOnce$KeywordPatternPairAST$",
		"$ident$",
		"$superInit$NewspeakASTs$MessagePatternAST",
		"$blockParameter",
		"$isSeq$",
		"$typeArgInferenceClause",
		"$CascadedSendAST",
		"$setOnce$ReadExternalOutputStream$",
		"$goToSelf",
		"$mixinApplication$",
		"$inClosure$",
		"$ClassEntry",
		"$from$to$by$do$",
		"$setOnce$SideAST$",
		"$AssignmentAST",
		"$alien$",
		"$$back$back",
		"$$equal",
		"$superInit$HopscotchForHTML5$StaticImageFragment",
		"$unindentCr",
		"$counterfactualBarX$",
		"$classCategory",
		"$padded$with$",
		"$bitShift$",
		"$table$",
		"$binaryStream",
		"$elseStatement",
		"$MixinBuilder",
		"$condition$",
		"$KeywordPatternPairAST",
		"$StarParser",
		"$setOnce$leftHandSide$",
		"$superInit$Collections$Association",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$SelfSendAST",
		"$setOnce$SortedCollection$",
		"$visitTryStatement$",
		"$Bag",
		"$then",
		"$inheritanceListAndOrBody",
		"$setOnce$syntax$",
		"$odd",
		"$BasicReadWriteStream",
		"$superInit$JavascriptGeneration$Syntax$TernaryOperatorExpression",
		"$visitNewExpression$",
		"$setOnce$compiler$",
		"$resolve",
		"$asFloat",
		"$newChar",
		"$inheritedTypeOf",
		"$Canvas",
		"$setOnce$mixins$",
		"$HyperlinkFragment",
		"$nothing",
		"$equalSign",
		"$superInit$CombinatorialParsing$PredicateTokenParser",
		"$setOnce$reflecteeX$",
		"$enclosingClass$",
		"$blockOrValue000$",
		"$superInit$CombinatorialParsing$TokenizingParser",
		"$basicNew",
		"$setOnce$SortedList$",
		"$select$thenDo$",
		"$patternLiteral",
		"$nestedClassesMetadata",
		"$kernel",
		"$used",
		"$MutableNestedClassGroup",
		"$explicitInheritanceListAndOrBody",
		"$langleBracket",
		"$setOnce$cascadedMessageExpression$",
		"$inline$as$selector$rewriteArgsAs$",
		"$on$",
		"$compileNestedClasses$within$",
		"$minorClassHeadingColor",
		"$setOnce$AST$",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$ContextAST",
		"$privateDnu",
		"$superInit$Streams$SeqCltnReadWriteStream",
		"$superInit$JavascriptGeneration$Syntax$MemberExpression",
		"$evaluate$",
		"$setOnce$primary$",
		"$subparsers",
		"$setOnce$namer$",
		"$setOnce$return$",
		"$OperatorExpression",
		"$origin$corner$",
		"$mixinApply$",
		"$value$with$",
		"$isClassBinding",
		"$superInit$RuntimeForV8$Platform",
		"$typePattern",
		"$superInit$KernelForV8$MessageNotUnderstood",
		"$color",
		"$copyWithSize$",
		"$superclassExpr$",
		"$superInit$Newspeak2V8Compilation$ProgramBuilder",
		"$CommentParser",
		"$hat",
		"$NewspeakGrammar",
		"$classHeaderNode$",
		"$printCharacter",
		"$BooleanAST",
		"$stringTranslation",
		"$superInit$NewspeakASTs$ParameterizedTypeAST",
		"$inspectSelf",
		"$Composer",
		"$NewspeakParsing",
		"$OrderedCollection",
		"$setOnce$ObjectSubject$",
		"$expressionS",
		"$superInit$MirrorsForV8$ClassMirror",
		"$superInit$TimeForV8$Time",
		"$to$cascade$",
		"$SequentialParser",
		"$nontrivialUnaryMessages",
		"$SlotEntry",
		"$superInit$Streams$BasicReadStream",
		"$PlusParser",
		"$setOnce$CharacterSequenceReadStream$",
		"$ordinarySendNode$",
		"$ast",
		"$selfSendNode$",
		"$MirrorsForV8",
		"$extent",
		"$setOnce$compilationUnit$",
		"$setOnce$Graphics$",
		"$superInit$Literate",
		"$setOnce$declaration$",
		"$outerSendNode$",
		"$asString",
		"$wrapParser$withWrapper$",
		"$instanceInitializer",
		"$ParameterAST",
		"$addAll$",
		"$setOnce$Hopscotch$",
		"$superInit$CombinatorialParsing$ParserError",
		"$processOuterExpression$",
		"$MessageAST",
		"$message$position$",
		"$category$",
		"$OutputInputConverter",
		"$HopscotchWindow",
		"$superInit$MirrorsForV8$MutableMirrorGroup",
		"$keyAtValue$",
		"$superInit$Newspeak2V8Compilation$Compiler$Rewriter$InlinedOperatorAST",
		"$processOuterReceiverAtDepth$",
		"$color$",
		"$asBlock",
		"$millisecondClockValue",
		"$WildcardPatternAST",
		"$processIntrinsic$",
		"$inlinableConditionalNode$",
		"$havePeeked_0$",
		"$copyReplaceAll$with$",
		"$Aliens",
		"$setOnce$mangledSelector$",
		"$setOnce$tuple$",
		"$setOnce$inheritanceChain$",
		"$superInit$NewspeakCompilation$Scope",
		"$invoke",
		"$MutableMethodGroup",
		"$PropertyCallAST",
		"$wrapping$",
		"$cascadeMsg",
		"$SeqCltnReadStream",
		"$asArray",
		"$uppercaseLetter",
		"$setOnce$else$",
		"$binaryExpression",
		"$setOnce$WeakArray$",
		"$setOnce$optionalFactorySection$",
		"$setOnce$kwPatternValue$",
		"$mixin",
		"$translator",
		"$setOnce$protectedBlock$",
		"$setOnce$type$",
		"$binarySearchFor$between$and$toCompare$",
		"$contents_private",
		"$Timer",
		"$LocalReadAST",
		"$Token",
		"$reflecteeIfFail$",
		"$leftOperand",
		"$superInit$MirrorsForV8$MutableNestedClassGroup",
		"$superSendNode$",
		"$furtherStatements",
		"$termBlock$",
		"$initCapacity$",
		"$TextDisplayFragment",
		"$usingCrLfConvention",
		"$tuple",
		"$sort",
		"$defaultConstructorPattern",
		"$extendedDigits",
		"$superInit$NewspeakASTs$ClassPrefixAST",
		"$plus",
		"$descriptor",
		"$prvtExistingMixin",
		"$superInit$GraphicsForHTML5$Context",
		"$setOnce$NSSideAST$",
		"$tableSizeForCapacity$",
		"$setOnce$slotDecls$",
		"$withContent$",
		"$blockParameters",
		"$setOnce$accept16px$",
		"$pseudoVariableNode$",
		"$setOnce$CharAST$",
		"$InlinedOperatorAST",
		"$isString",
		"$group$",
		"$varName",
		"$peekIfAbsent$",
		"$semicolon",
		"$setOnce$endNSComment$",
		"$setOnce$blockParameters$",
		"$string",
		"$size$",
		"$addEventListener$with$",
		"$initCollection$",
		"$setOnce$incrementExpression$",
		"$processLocalWrite$to$",
		"$usingPlatform$",
		"$instanceSide",
		"$defaultMedianOf$and$and$",
		"$_mangleSelector$",
		"$accessorForSuperclass$inScope$",
		"$returnTypeInferenceClause",
		"$setOnce$AssignmentAST$",
		"$superConstructorCall$",
		"$backTick",
		"$corner",
		"$setOnce$inlinableNumericOperators$",
		"$errMsg",
		"$CharacterSequenceReadStream",
		"$isExpanded$",
		"$Error",
		"$h$s$v$",
		"$isPostfix",
		"$SlotDefAST",
		"$fullyQualifySimpleName$with$",
		"$isSynthetic",
		"$removeKey$ifAbsent$",
		"$TypedNS3Grammar",
		"$classMirror",
		"$bufferOrigin$",
		"$setOnce$origin$",
		"$setOnce$blockReturnType$",
		"$keysDo$",
		"$lastIndex",
		"$deleted$",
		"$superInit$Newspeak2V8Compilation$SlotIR",
		"$finallyBlock",
		"$lcurly",
		"$ObjectPresenter",
		"$src",
		"$Boolean",
		"$alien",
		"$WriteStream",
		"$temporaryDeclNode$",
		"$includesIndex$",
		"$NilAST",
		"$script",
		"$isNormalSendNode",
		"$valueExpected",
		"$atIndex$inTable$occupiedSlotDo$emptySlotDo$deletedSlotDo$",
		"$literalMessageComment",
		"$floor",
		"$keysAndValuesDo$",
		"$superInit$KernelForV8$Future",
		"$elementForCopy$",
		"$superInit$NewspeakASTs$ReturnStatAST",
		"$havePeeked$",
		"$superInit$BrowsingForHTML$ObjectSubject",
		"$Graphics",
		"$MutableList",
		"$setOnce$ObjectMirror$",
		"$superInit$NewspeakASTs$MutableSlotDefAST",
		"$visitThrowStatement$",
		"$unsignedByteAt$put$",
		"$LocalEntry",
		"$head$",
		"$setOnce$unaryMsg$",
		"$subStrings$",
		"$superInit$HopscotchForHTML5$LeafFragment",
		"$linkHolding$",
		"$MixinMirror",
		"$indexOf$tableMask$",
		"$setOnce$Collections$",
		"$binaryStream$",
		"$forwardReferenceTable",
		"$rcurly",
		"$updateBufferLocationAfterFlush",
		"$while$do$",
		"$setInput$",
		"$classSubject",
		"$visitOperatorExpression$",
		"$name$type$",
		"$superInit$JavascriptGeneration$Syntax$FunctionExpression",
		"$computeDigits$",
		"$nameS",
		"$growTable",
		"$enclosingClass",
		"$superInit$JavascriptGeneration$Syntax$TryStatement",
		"$start$",
		"$removeFirst",
		"$processClassSideOf$ofMixin$",
		"$setOnce$msgSelector$",
		"$setOnce$rightHandSide$",
		"$VerbatimNode",
		"$previousSend$",
		"$superInit$MirrorsForV8$ObjectMirror",
		"$rewriteBlockNode$forValue$",
		"$setOnce$temporaries$",
		"$isNil",
		"$Rectangle",
		"$classSide",
		"$seqSlotDecls",
		"$expandedDefinition",
		"$setOnce$catchVar$",
		"$constructor$",
		"$label$action$",
		"$contentSource",
		"$equalsBag$",
		"$variable$",
		"$parse$inContext$ifError$",
		"$superInit$Collections$List",
		"$TryStatement",
		"$superConstructorCall",
		"$include$",
		"$setOnce$characterConstant$",
		"$wrapperBlock$",
		"$wildcardPattern",
		"$isCallExpression",
		"$buffer$",
		"$startGap",
		"$tableAt$put$inEmptySlot$",
		"$superInit$CombinatorialParsing$ForwardReferenceParser",
		"$setOnce$js$",
		"$Collection",
		"$processLocalRead$from$",
		"$superInit$Collections",
		"$nonEmptyBlockTypeArgList",
		"$setOnce$symbolConstant$",
		"$enableIntrinsics$",
		"$TimeForV8",
		"$superInit$HopscotchForHTML5$ToggleComposer",
		"$boolNode$",
		"$literalNode$",
		"$superInit$JavascriptGeneration$Syntax$ForInStatement",
		"$indexFor$",
		"$collectUsingAdd$",
		"$runtimeConfiguration",
		"$setOnce$instanceSide$",
		"$combineErrors$and$at$with$",
		"$parameterDeclNode$",
		"$setOnce$aliens$",
		"$setOnce$returnStatement$",
		"$isFuture",
		"$isSeq",
		"$superInit$JavascriptGeneration$Syntax$Script",
		"$setOnce$identifier$",
		"$CharacterOStream",
		"$LiteralAST",
		"$named$mutable$accessModifier$",
		"$error$",
		"$superInit$HopscotchForHTML5$StaticLabelFragment",
		"$TupleAST",
		"$categoryNode$",
		"$MutableAddableList",
		"$applyConstructorUsingEval$",
		"$setOnce$decimalNum$",
		"$onModel$",
		"$setOnce$expandedDefinition$",
		"$setOnce$where$",
		"$computeMethod$inScope$",
		"$setOnce$disclosureOpenImage$",
		"$superInit$NewspeakGrammar$UnarySelectorParser",
		"$mirrors",
		"$receiver",
		"$setOnce$CollectingCommentParser$",
		"$contentsDo$",
		"$row$",
		"$mangleSlot$",
		"$setOnce$inlinableOperators$",
		"$binding$",
		"$setOnce$stop$",
		"$setOnce$resources$",
		"$actualContent",
		"$after$do$",
		"$parser",
		"$CharacterReadStream",
		"$setOnce$string$",
		"$keywordHereSend",
		"$definitions$",
		"$visitForInStatement$",
		"$setOnce$document$",
		"$typeFormal",
		"$setOnce$statements_$",
		"$compileExpressionSource$inMixin$",
		"$presenter",
		"$runtimeMixin",
		"$collapsedPresenter",
		"$accumulateUntil$",
		"$setOnce$green$",
		"$filler",
		"$operand$",
		"$setOnce$id$",
		"$captionColor",
		"$named$in$source$",
		"$kwPatternPair",
		"$superInit$NewspeakASTs$NormalSendAST",
		"$setOnce$methodDecl$",
		"$tupleType",
		"$BasicInputStream",
		"$actualSize$",
		"$left",
		"$splitFullyQualifiedName$",
		"$recordFailure$",
		"$fragments",
		"$formals",
		"$id",
		"$x",
		"$names",
		"$literalPatternNode$",
		"$superInit$HopscotchForHTML5$HopscotchShell",
		"$superInit$Streams$CharacterInputConverter",
		"$newCopyOfSize$thatCanAlsoHoldElementsOf$",
		"$setOnce$nontrivialBinaryMessages$",
		"$unaryExpression",
		"$valueExpected$",
		"$writeBlock$",
		"$slots",
		"$scopeStack$",
		"$superInit$NewspeakCompilation$MethodEntry",
		"$beginNewWriteCycleUsing$",
		"$superInit$JavascriptGeneration$Syntax",
		"$blockReturnType",
		"$setOnce$slotDefs$",
		"$HashedCollection",
		"$selector$parameters$returnType$typePattern$",
		"$initExpression",
		"$CachedCompilation",
		"$inheritanceChain$",
		"$message",
		"$new",
		"$setOnce$symbol$",
		"$parse$ifErrorNoContext$",
		"$setOnce$classCategory$",
		"$text",
		"$nextPutAll$",
		"$actualPosition_slot",
		"$setOnce$image$",
		"$augment$withPropertiesOf$",
		"$setOnce$thenStatement$",
		"$DeferredContentComposer",
		"$charIncludingQuotesAndSpace",
		"$processFactoryFor$in$",
		"$slotNames$values$",
		"$JavascriptWriter",
		"$predicate$",
		"$cull$",
		"$lookup$inTable$matchingSlotDo$emptySlotDo$deletedSlotsDo$mismatchingSlotsDo$",
		"$setOnce$statementSequence$",
		"$slotsDo$betweenDo$",
		"$setOnce$CharacterOStream$",
		"$cloneNode$",
		"$setOnce$inferenceClause$",
		"$setOnce$unaryExpression$",
		"$captionBar$",
		"$setOnce$number$",
		"$processSide$ofMixin$",
		"$nextIfAbsent$",
		"$setOnce$ParserError$",
		"$replaceFrom$to$with$startingAt$",
		"$setOnce$equalSign$",
		"$forDeclaration$atDepth$",
		"$collections",
		"$mixinSpec",
		"$selfInfoLine",
		"$ifTrue$",
		"$superInit$HopscotchForHTML5$Presenter",
		"$writeBuffer",
		"$firstTableSize",
		"$goodBufferOriginForPosition$",
		"$internalRangeCheck$",
		"$setOnce$inheritedTypeOf$",
		"$nextPut$",
		"$forwardReferenceTable$",
		"$setOnce$typeParamConstraint$",
		"$BlankFragment",
		"$superInit$Newspeak2V8Compilation$MixinIR",
		"$setOnce$instanceInitializer$",
		"$processSelfSend$",
		"$contents_private$",
		"$setOnce$mixinIR$",
		"$allButLast$",
		"$superInit$Literate$Evaluators$SnippetSubject",
		"$$over$over",
		"$superInit$CombinatorialParsing$WhitespaceParser",
		"$from$to$do$",
		"$usesDefaultSortBlock_private",
		"$superInit$Collections$Queue$DoubleLink",
		"$$greater",
		"$CharAST",
		"$collapsedHeadingDefinition",
		"$shouldNotHappen",
		"$assign$toBe$",
		"$CategoryAST",
		"$superInit$KernelForV8$Boolean",
		"$HopscotchForHTML5",
		"$operator$postfix$on$",
		"$setOnce$subparser$",
		"$accessModifier",
		"$setOnce$VarDeclAST$",
		"$TemporaryAST",
		"$platform$",
		"$superclassClause",
		"$initializationExpressions",
		"$removeMirrorNamed$",
		"$setOnce$CombinatorialParser$",
		"$slotDecls",
		"$add$beforeIndex$",
		"$nextDeferredAction",
		"$inheritanceClause",
		"$superInit$NewspeakGrammar$NS3Grammar",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$ConditionalAST",
		"$actualSize",
		"$ClassHeaderAST",
		"$setOnce$keywordMessages$",
		"$mixinExpr",
		"$asciiValue",
		"$noPeekVal",
		"$setOnce$_nsTarget$",
		"$empty",
		"$isInEditState$",
		"$NewspeakCompilation",
		"$idFor$",
		"$mssg",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$LocalReadAST",
		"$setOnce$setterKw$",
		"$ClassSubject",
		"$setOnce$bottomColor$",
		"$Context",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$OrdinarySendAST",
		"$setSlot$to$ifFail$",
		"$MessageNotUnderstood",
		"$stroke",
		"$size",
		"$characterConstant",
		"$literalMessages",
		"$visitIfStatement$",
		"$setOnce$setterKeyword$",
		"$createPresenter",
		"$initBinaryStream$",
		"$initializer",
		"$setOnce$navigator$",
		"$definingMixin",
		"$actualContent$",
		"$Streams",
		"$TextEditorFragment",
		"$reflectee",
		"$isVariableNode",
		"$superInit$GraphicsForHTML5$Canvas",
		"$Parser",
		"$ForwardingWrappingParser",
		"$processInitializerFor$in$",
		"$forValue",
		"$visitReturnStatement$",
		"$ObjectMirror",
		"$enclosingClassSubjects",
		"$setOnce$dot$",
		"$superScope$",
		"$visual",
		"$StaticImageFragment",
		"$value$value$",
		"$specialCharacterManglings",
		"$lf",
		"$ByteArray",
		"$replaceChild$from$",
		"$superInit$NewspeakCompilation$Namer",
		"$digit",
		"$removeLink$",
		"$setOnce$classSideDecl$",
		"$typeArg",
		"$array$",
		"$selector$",
		"$graphics",
		"$superInit$NewspeakASTs$UnaryTypeOpAST",
		"$oldChar",
		"$superInit$NewspeakParsing$InternalParser",
		"$expansibility$",
		"$write$at$ifFail$",
		"$at$depth$",
		"$superInit$NewspeakASTs$VariableAST",
		"$superInit$HopscotchForHTML5$SequenceComposer",
		"$setOnce$initializationExpressions$",
		"$stringNode$",
		"$CharacterWriteStream",
		"$source",
		"$runtimeMixinNamespace",
		"$isCollection",
		"$processLocalAccess$of$",
		"$blank$",
		"$setOnce$nestedClasses$",
		"$setOnce$BasicOutputStream$",
		"$contentsRemaining",
		"$isProtected",
		"$copy",
		"$size_0$",
		"$MirrorGroups",
		"$starSeparatedOrTerminatedBy$",
		"$for$start$end$",
		"$parser$",
		"$superInit$Literate$Evaluators$SnippetPresenter",
		"$defaultCancelResponse",
		"$setOnce$newNonEmptyBlockArgList$",
		"$bindingRoutine",
		"$isSymbolNode",
		"$header$",
		"$superInit$JavascriptGeneration$Syntax$ForStatement",
		"$prvtClassDeclIR$",
		"$expression$then$else$",
		"$isMixinMirror",
		"$setOnce$vbar$",
		"$isWhileTrue",
		"$superclassPrefix",
		"$core",
		"$classMethodsMetadata",
		"$accept$errorMsg$",
		"$setOnce$MutableAddableList$",
		"$superInit$Literate$Evaluators",
		"$_concreteEnd",
		"$superInit$Newspeak2V8Compilation",
		"$isSortedBy$",
		"$identifier",
		"$superInit$JavascriptGeneration$Syntax$ObjectLiteral",
		"$allSuperclasses",
		"$find$in$",
		"$superInit$GraphicsForHTML5$Point",
		"$setProperty$to$",
		"$CombinatorialParser",
		"$errMsg$",
		"$visitIntegerLiteral$",
		"$global",
		"$superInit$NewspeakASTs$ASTTool",
		"$superInit$HopscotchForHTML5$Fragment",
		"$atEnd",
		"$setOnce$typeTerm$",
		"$ForStatement",
		"$cachedCompilations",
		"$superInit$HopscotchForHTML5$TextEditorFragment",
		"$body",
		"$setOnce$classBody$",
		"$superInit$CombinatorialParsing$EOIParser",
		"$superInit$KernelForV8$String",
		"$setOnce$fraction$",
		"$disclosureClosedImage",
		"$setOnce$List$",
		"$makeSpace$beforeIndex$",
		"$primary",
		"$setOnce$nestedPatternLiteral$",
		"$setOnce$grammar$",
		"$createNestedClassAccessorFrom$within$",
		"$nextBufferPosition$",
		"$setOnce$ClassBodyAST$",
		"$arc$with$with$with$with$",
		"$superInit$MirrorsForV8$MixinMirror",
		"$IOSequence",
		"$setOnce$unarySelector$",
		"$MethodAST",
		"$optionalFactorySection",
		"$out",
		"$halt",
		"$hash",
		"$mirrors$",
		"$setOnce$nameS$",
		"$deferredContentQueue",
		"$setOnce$BasicIExStream$",
		"$forwardee$",
		"$setOnce$PredicateTokenParser$",
		"$classHeader",
		"$mangleLocal$",
		"$ClassDeclarationIR",
		"$copyWith$",
		"$isExpat",
		"$slotName",
		"$categories$",
		"$returnStatement",
		"$inClosureDuring$",
		"$ExecutableGrammar",
		"$publicMessage$",
		"$occurrencesOf$",
		"$generation",
		"$runtimeConfiguration$",
		"$setOnce$fragments$",
		"$$greater$equal",
		"$parenthesizedExpression",
		"$disclosureTransitionImage",
		"$at$putUnicode$",
		"$named$factoryMsg$inheriting$body$",
		"$slotDef",
		"$setOnce$MirrorGroups$",
		"$getContext$",
		"$pound",
		"$cascadedSendNode$",
		"$colon",
		"$identityHash",
		"$pattern$",
		"$origin",
		"$setOnce$doItExpression$",
		"$Translator",
		"$category",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$EnclosingObjectAST",
		"$futureFor$",
		"$compileSource$enableIntrinsics$",
		"$stop",
		"$rightHandSide",
		"$protectedMessage$",
		"$do$",
		"$block$catch$with$finally$",
		"$superInit$Collections$AddableList",
		"$slotDefNode$",
		"$classInfoLine",
		"$superScope",
		"$width$elasticity$",
		"$superInit$NewspeakCompilation$SymbolTableEntry",
		"$var",
		"$setOnce$SymbolAST$",
		"$MutableString",
		"$codeBodyNode$",
		"$lbracket",
		"$counterfactualBarX",
		"$mixinIR",
		"$variables$categories$",
		"$setOnce$action$",
		"$setOnce$method$",
		"$unimplemented",
		"$TypePatternAST",
		"$superInit$HopscotchForHTML5$Subject",
		"$history",
		"$initialContent",
		"$defaultConstructorSelector",
		"$setOnce$valueS$",
		"$superInit$CombinatorialParsing$NegatingParser",
		"$numberNode$",
		"$sourceForNode$",
		"$superInit$MirrorGroups$ImmutableMirrorGroup",
		"$superInit$NewspeakASTs$AST",
		"$currentMixinUID$",
		"$isPseudoVariableNode$",
		"$writeIfNeededBeforePositionChange",
		"$output$",
		"$finalBindForwardReferences",
		"$setOnce$lbracket$",
		"$SlotIR",
		"$group$within$ir$",
		"$setOnce$typeArguments$",
		"$ExternalOutputStream",
		"$forwardee",
		"$conditionalNode$",
		"$superInit$NewspeakASTs$AssignmentAST",
		"$setOnce$typePattern$",
		"$initDescriptor$",
		"$compileClassSource$within$",
		"$setOnce$rangleBracket$",
		"$setOnce$ExecutableGrammar$",
		"$superclass",
		"$mangleSynthetic$",
		"$processMethod$inScope$in$",
		"$setOnce$num$",
		"$collapse",
		"$ForInStatement",
		"$typeParamConstraint",
		"$pushScopeForNode$",
		"$action",
		"$repeat$",
		"$cancel16px",
		"$Compiler",
		"$MixinIR",
		"$isMutableSlot",
		"$ifTrue$ifFalse$",
		"$offsets",
		"$EnclosingObjectAST",
		"$inject$into$",
		"$superInit$Newspeak2V8Compilation$Compiler$Rewriter",
		"$superInit$Collections$Queue",
		"$generateSourceFor$on$",
		"$categories",
		"$superInit$CombinatorialParsing$SequentialParser",
		"$removeKey$",
		"$right$",
		"$MethodIR",
		"$superInit$NewspeakGrammar$NSCommentParser",
		"$superInit$JavascriptGeneration$Syntax$StringLiteral",
		"$toggleWidget",
		"$str",
		"$superInit$Collections$IdentityMutableHashedMap",
		"$sendTo$",
		"$superclassName$",
		"$isExpressionNode",
		"$classDeclaration",
		"$setOnce$receiver$",
		"$setOnce$cachedCompilations$",
		"$newCollectionOfSize$",
		"$expression$",
		"$isExpanded",
		"$nestScope$",
		"$isOuterNode$",
		"$at$ifAbsent$",
		"$binaryMsgPattern",
		"$initBuffer",
		"$send$with$",
		"$subparser",
		"$createElement$",
		"$syntheticNameSeparator",
		"$setOnce$message$",
		"$usingPlatform$vmMirror$",
		"$setOnce$parsing$",
		"$superInit$Streams$CharacterOutputConverter",
		"$usingPlatform$parsing$generation$mirrors$",
		"$new$withAll$",
		"$replaceAll$with$",
		"$throw$",
		"$newForCollectUsingAtPut$",
		"$model",
		"$superInit$Collections$Set",
		"$resultHolder",
		"$superInit$JavascriptGeneration$Syntax$AssignmentExpression",
		"$InitializerAST",
		"$LoopAST",
		"$tableAt$put$ifNew$",
		"$beginNSComment",
		"$controlBarColor",
		"$to$send$start$end$",
		"$generic",
		"$setOnce$classHeader$",
		"$header",
		"$OuterSendAST",
		"$Evaluators",
		"$superInit$NewspeakASTs$VarDeclAST",
		"$setOnce$value$",
		"$setSuperScope$",
		"$charNode$",
		"$mangleSelector$",
		"$bufferNumElements$",
		"$keywords$",
		"$superInit$JavascriptGeneration$Syntax$IntegerLiteral",
		"$setOnce$category$",
		"$isSynthetic$",
		"$endGap",
		"$receiverType",
		"$setOnce$corner$",
		"$setOnce$classPrefix$",
		"$token$",
		"$ConditionalAST",
		"$setOnce$function$",
		"$collection$matchesElementsAt$",
		"$superInit$CombinatorialParsing$NamedWrappingParser",
		"$setOnce$collapsedDefinition$",
		"$newBuildStream",
		"$nestedIn$atLevel$",
		"$instanceSide$",
		"$state000$",
		"$failures$",
		"$character",
		"$superInit$JavascriptGeneration$Syntax$BooleanLiteral",
		"$tableAt$put$inDeletedSlot$",
		"$offsetOfImplicitReceiverTarget$",
		"$superInit$Streams$TempTranscript",
		"$editorX$",
		"$setOnce$typeArgInferenceClause$",
		"$visitMemberExpression$",
		"$copyFrom$to$",
		"$setOnce$VariableAST$",
		"$buffer",
		"$nextId",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$TemporaryAST",
		"$dnuCatcherFor$",
		"$wrapBodyNoNlrHandling$",
		"$endNSComment",
		"$setOnce$simSlotDecls$",
		"$setOnce$methods$",
		"$superInit$Newspeak2V8Compilation$CachedCompilation",
		"$first",
		"$TokenizingParser",
		"$readStream",
		"$wrappingParser",
		"$isPoint",
		"$supportDoesNotUnderstand$",
		"$setOnce$detailAreaRatio$",
		"$visitCallExpression$",
		"$isInlinableNumericOperator$",
		"$visitBlock$",
		"$newTableWithSize$",
		"$sendMessages$to$",
		"$stringBody",
		"$keywordPattern",
		"$superInit$Collections$Interval",
		"$superInit$Streams$CharacterInputOutputConverter",
		"$setOnce$parenthesizedExpression$",
		"$respondToChange",
		"$y",
		"$accessModifier$",
		"$setOnce$generic$",
		"$Map",
		"$catchBlock",
		"$literal$",
		"$msg",
		"$parse$",
		"$black",
		"$setOnce$MethodAST$",
		"$FailingParser",
		"$comma",
		"$defaultExpected",
		"$setOnce$superConstructorCall$",
		"$superInit$JavascriptGeneration$Syntax$IfStatement",
		"$superInit$HopscotchForHTML5$HyperlinkFragment",
		"$keyFor$",
		"$languageId",
		"$superInit$HopscotchForHTML5$HopscotchWindow",
		"$readWriteStream",
		"$pushState$title$",
		"$superInit$GraphicsForHTML5$Color",
		"$String",
		"$initializer$",
		"$superInit$KernelForV8",
		"$nestedClasses",
		"$setOnce$classSide$",
		"$dnuHandlers",
		"$mediumBlank",
		"$assert$",
		"$superInit$Newspeak2V8Compilation$Compiler$Rewriter$SchedulerAST",
		"$CharacterReadWriteStream",
		"$CodeBodyAST",
		"$SequenceComposer",
		"$removeMirror$",
		"$requestAnimationFrame$",
		"$RowComposer",
		"$superInit$JavascriptGeneration$Syntax$Block",
		"$sortBlock",
		"$asCSSString",
		"$messagePattern",
		"$returnStatNode$",
		"$setOnce$unaryMsgPattern$",
		"$setterBlockArgName",
		"$setOnce$left$",
		"$setOnce$JavascriptGeneration$",
		"$setOnce$oldChar$",
		"$literalPattern",
		"$Script",
		"$ASTModule",
		"$superclassCall$",
		"$mixinSlotNameFor$",
		"$makeMixinNamed$factoryMsg$inheriting$body$",
		"$elementFor$",
		"$superInit$CombinatorialParsing$EmptyParser",
		"$prologue",
		"$UnaryOperatorExpression",
		"$popScope",
		"$at$ifAbsentPut$",
		"$scopeStack",
		"$return$",
		"$NamedWrappingParser",
		"$operatorName",
		"$name$",
		"$assignmentNode$",
		"$superInit$Newspeak2V8Compilation$Compiler",
		"$values",
		"$binaryMsg",
		"$setOnce$label$",
		"$setterSelectorFor$",
		"$reflecteeX",
		"$startsWith$",
		"$_concreteStart",
		"$superInit$NewspeakASTs$TupleAST",
		"$superInit$Newspeak2V8Compilation$MethodIR",
		"$setOnce$outerReceiver$",
		"$setOnce$sideDecl$",
		"$truncated",
		"$flushIfFail$",
		"$collapsedPresenter$",
		"$thenStatement",
		"$isEventual$",
		"$processLexicalSend$to$binding$",
		"$enclosingInfoLine",
		"$propertyOf$atPath$",
		"$findMirrorNamed$",
		"$superInit$GraphicsForHTML5$Rectangle",
		"$BlockTypeAST",
		"$setOnce$inverseMixinOperator$",
		"$PredicateTokenParser",
		"$superclassCall",
		"$scrollIntoView$",
		"$remove$",
		"$superclassExpr",
		"$superInit$BrowsingForHTML$ClassPresenter",
		"$setOnce$WildcardPatternAST$",
		"$superInit$KernelForV8$Object",
		"$setOnce$Streams$",
		"$symbolConstant",
		"$superInit$NewspeakGrammar$TypedNS3Grammar",
		"$superInit$Streams",
		"$inlineOperators$",
		"$isReturnStatNode",
		"$reject$",
		"$hasVisual",
		"$superInit$JavascriptGeneration$Syntax$OperatorExpression",
		"$NS3Grammar",
		"$mixinNameOfClassNamed$",
		"$mangle$",
		"$inlineOperators",
		"$setOnce$initExpression$",
		"$next$",
		"$superInit$NewspeakCompilation$ClassEntry",
		"$conditionalSelectors",
		"$lookup$matchingSlotDo$emptySlotDo$deletedSlotsDo$",
		"$defaultAcceptResponse",
		"$collection$",
		"$BlockAST",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$LoopAST",
		"$setterTemp",
		"$expression",
		"$parenthesizedTypeExpression",
		"$superInit$TimeForV8$Timer",
		"$isBlock",
		"$setVisualText$",
		"$setOnce$Presenter$",
		"$CharacterSequenceReadWriteStream",
		"$ListReadWriteStream",
		"$visitStringLiteral$",
		"$setOnce$Timer$",
		"$setOnce$slots$",
		"$isEventual",
		"$keywordMessages",
		"$BasicOutputStream",
		"$superInit$CombinatorialParsing$CombinatorialParser",
		"$TypeIdAST",
		"$isArray",
		"$generateSlotAccessorsFor$",
		"$crTab$",
		"$isImplicitReceiverSendNode",
		"$typeArguments",
		"$IfStatement",
		"$condition",
		"$cancelResponse",
		"$Future",
		"$unaryMsgPattern",
		"$instance$initializer",
		"$lparen",
		"$setOnce$literalPattern$",
		"$scaledR$g$b$a$",
		"$superInit$HopscotchForHTML5$BlankFragment",
		"$slotsMetadata",
		"$superInit$NewspeakASTs$TypeIdAST",
		"$setOnce$text$",
		"$processInlineableConditional$",
		"$classSide$",
		"$KernelForV8",
		"$setOnce$keyword$",
		"$methods",
		"$superInit$NewspeakASTs$MixinApplicationClassAST",
		"$setOnce$Subject$",
		"$setOnce$enclosingClass$",
		"$setOnce$definingMixinX$",
		"$processIntrinsicArg$",
		"$returnType",
		"$superInit$TimeForV8",
		"$shell",
		"$setOnce$start$",
		"$slotDecl$",
		"$new$with$",
		"$setOnce$scopeStack$",
		"$elements_",
		"$superInit$NewspeakASTs$CascadedSendAST",
		"$parserLib",
		"$parameters$",
		"$contentHolder",
		"$setOnce$block$",
		"$setOnce$mixinOperator$",
		"$superInit$Streams$ExternalInputStream",
		"$elements$",
		"$setOnce$topColor$",
		"$superInit$NewspeakCompilation",
		"$setOnce$typePrimary$",
		"$max$",
		"$ObjectLiteral",
		"$setOnce$newChar$",
		"$token",
		"$setOnce$nontrivialUnaryMessages$",
		"$_",
		"$returnType$",
		"$between$and$",
		"$addSlot$value$",
		"$setOnce$slotNames$",
		"$compiler",
		"$isStringLiteral",
		"$superConstructorCallFor$",
		"$SideAST",
		"$setOnce$position$",
		"$withAll$",
		"$hopscotch",
		"$setOnce$depth$",
		"$setOnce$classDecl$",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$LocalWriteAST",
		"$input",
		"$variables$",
		"$close",
		"$hashAt$",
		"$superInit$JavascriptGeneration$Syntax$NewExpression",
		"$objToIncludeFor$withExisting$",
		"$rightOperand$",
		"$plusSeparatedBy$",
		"$updateMixin$from$by$",
		"$content",
		"$mixinExpr$",
		"$fillText$with$with$",
		"$isMessageNode",
		"$Scope",
		"$NewspeakASTs",
		"$newBlockTypeArgList",
		"$CharParser",
		"$setOnce$VariablePatternAST$",
		"$accessorForNestedClassNamed$in$superCall$",
		"$enterEditState",
		"$Time",
		"$setOnce$slotValues$",
		"$superInit$HopscotchForHTML5$CanvasFragment",
		"$fullyQualifiedNameToSimple$",
		"$setOnce$slotDef$",
		"$inIndentedBlock$",
		"$superInit$KernelForV8$Block",
		"$isLetter",
		"$NumberAST",
		"$externalFlush",
		"$setOnce$rparen$",
		"$superInit$JavascriptGeneration$Syntax$ReturnStatement",
		"$print$",
		"$codeBody",
		"$arrangeForFinalization",
		"$advanceAmount",
		"$Rewriter",
		"$bitAnd$",
		"$statements",
		"$superInit$RuntimeForV8",
		"$setOnce$sendExpression$",
		"$superInit$KernelForV8$Array",
		"$superInit$MirrorsForV8$ClassHeaderMirror",
		"$superInit$NewspeakASTs$NumberAST",
		"$on$numElements$",
		"$expandedPresenter$",
		"$setOnce$source$",
		"$tabLevel$",
		"$typePrimary",
		"$setOnce$Collection$",
		"$ReturnStatement",
		"$unaryMsg",
		"$setOnce$radixNum$",
		"$superInit$NewspeakParsing$Parser",
		"$subclassResponsibility",
		"$dot",
		"$superInit$JavascriptGeneration$Syntax$ThrowStatement",
		"$class",
		"$protectedBlock",
		"$trueWrappingParser",
		"$visitFunctionExpression$",
		"$repositioningAt$",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$ReceiverAST",
		"$slotValues",
		"$failures",
		"$superInit$HopscotchForHTML5$PaddedFrameComposer",
		"$userBack$",
		"$hasSameElementsAs$",
		"$select$",
		"$document",
		"$withExtent$",
		"$setOnce$digit$",
		"$ReturnAST",
		"$visitBy$",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$OuterSendAST",
		"$defaultSuperCallAt$ending$",
		"$add$",
		"$fraction",
		"$visitForStatement$",
		"$beginNewTranslationCycle",
		"$javascriptGeneration",
		"$holder$",
		"$setOnce$then$",
		"$setOnce$OrderedCollection$",
		"$wrappingParser$",
		"$setOnce$BinaryTypeOpAST$",
		"$superInit$NewspeakCompilation$Compiler",
		"$SendAST",
		"$superInit$NewspeakASTs$MethodAST",
		"$setOnce$extendedFraction$",
		"$temporaries",
		"$Interval",
		"$usingPlatform$parsers$",
		"$headerSource$",
		"$setOnce$finallyBlock$",
		"$position",
		"$superInit$HopscotchForHTML5$DeferredContentComposer",
		"$keywordMsg",
		"$tableAt$put$inUnusedSlot$",
		"$collect$",
		"$asOrderedCollection",
		"$setOnce$JavascriptWriter$",
		"$setOnce$literalMessageComment$",
		"$superInit$KernelForV8$UndefinedObject",
		"$superInit$NewspeakASTs$ASTTraverser",
		"$KeywordPatternAST",
		"$setOnce$expressionS$",
		"$setOnce$deferredContentQueue$",
		"$EIStream",
		"$Expat",
		"$ClassPrefixAST",
		"$setOnce$platformMirror$",
		"$VariablePatternAST",
		"$superConstructorNameFor$",
		"$either$or$",
		"$specialCharacter",
		"$setOnce$description$",
		"$setOnce$Dictionary$",
		"$nonEmptyMessages",
		"$from$to$by$",
		"$arg",
		"$superInit$NewspeakASTs$MixinApplicationAST",
		"$remove$at$",
		"$respondToCancel",
		"$removeEvery$startingAt$",
		"$BinaryTypeOpAST",
		"$isCodeBodyNode",
		"$setOnce$binaryExpression$",
		"$MutableArrayList",
		"$primary$property$",
		"$parsing",
		"$named$accessModifier$function$source$",
		"$augmentPrototypes",
		"$StringLiteral",
		"$applyTo$withName$",
		"$body$",
		"$setOnce$receiverType$",
		"$setOnce$IdentityDictionary$",
		"$VarDeclAST",
		"$setOnce$content$",
		"$nestedClass$",
		"$setOnce$Parser$",
		"$WrappingParser",
		"$superInit$CombinatorialParsing$CommentParser",
		"$definition",
		"$setOnce$time$",
		"$processInstanceSideOf$ofMixin$",
		"$superInit$Collections$MutableArrayList",
		"$setOnce$mixinAppSuffix$",
		"$smallBlank",
		"$superInit$NewspeakCompilation$LocalEntry",
		"$setOnce$blockType$",
		"$nextId$",
		"$eoi",
		"$IntegerLiteral",
		"$key$matches$",
		"$mangleProtected$",
		"$symbolNode$",
		"$defaultConstructorCall",
		"$split$at$",
		"$prev$",
		"$peek",
		"$selfName",
		"$state000",
		"$usesDefaultSortBlock",
		"$reverseDo$",
		"$setOnce$bindings$",
		"$isKindOfBag",
		"$ensure$",
		"$ifNil$ifNotNil$",
		"$setOnce$MutableSlotDefAST$",
		"$bindings",
		"$FunctionStatement",
		"$setOnce$catchBlock$",
		"$setOnce$arguments$",
		"$genericInvocationNode$",
		"$setOnce$CharacterReadStream$",
		"$visitVerbatimNode$",
		"$textBeingAccepted",
		"$inheritanceChain",
		"$setScopeFor$in$",
		"$canInlineSeqexps",
		"$setOnce$ClassPrefixAST$",
		"$setOnce$formals$",
		"$setOnce$isSeq$",
		"$applyMixin$toSuperclass$withEnclosingObjects$",
		"$setOnce$jsWriter$",
		"$superInit$MirrorsForV8$ClassDeclarationMirror",
		"$methods$",
		"$blockType",
		"$typeBoundQualifier",
		"$setOnce$lcurly$",
		"$doItExpression",
		"$hereSendFrom$",
		"$rbracket",
		"$where",
		"$isAlien",
		"$setOnce$CharacterConverterWithOutput$",
		"$wrapper$",
		"$setOnce$alien$",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$ReturnAST",
		"$SuperSendAST",
		"$Compilation",
		"$isSendNode",
		"$isSuperNode$",
		"$output",
		"$superInit$Streams$SeqCltnReadStream",
		"$superInit$Streams$BasicInputStream",
		"$superInit$Collections$MutableList",
		"$setOnce$alpha$",
		"$superInit$AliensForV8$Alien",
		"$isMessagePatternNode",
		"$computeFraction$",
		"$tabLevel",
		"$setOnce$streams$",
		"$comment",
		"$keywordPatternNode$",
		"$setToEnd",
		"$superInit$HopscotchForHTML5$Gradient",
		"$input$",
		"$superInit$HopscotchForHTML5$HolderComposer",
		"$sqrt",
		"$enableIntrinsics",
		"$streamContents$",
		"$superInit$KernelForV8$Mixin",
		"$classNode$",
		"$newNonEmptyBlockArgList",
		"$superInit$JavascriptGeneration$Writer",
		"$superInit$NewspeakASTs$WildcardPatternAST",
		"$defaultSuperclassAndBody",
		"$superInit$CombinatorialParsing$Token",
		"$nestedMixinWrapperFor$in$",
		"$sendExpression",
		"$for",
		"$extendedFraction",
		"$hashFor$",
		"$includeAll$",
		"$processImplicitReceiverSend$binding$",
		"$asts",
		"$setOnce$elseStatement$",
		"$declaration",
		"$actualPosition_slot$",
		"$forSymbol$",
		"$buildValForKey$element$",
		"$associationsDo$",
		"$MutableMirrorGroup",
		"$TypedGrammar",
		"$EOStream",
		"$setOnce$TypedGrammar$",
		"$bottomColor",
		"$unaryTypeOpNode$",
		"$prefixOperator$on$",
		"$superInit$NewspeakASTs$CharAST",
		"$setterSendNode$",
		"$NavigationHistory",
		"$parameters",
		"$setOnce$ReadStream$",
		"$normalSendNode$",
		"$sentSelectors",
		"$setOnce$asts$",
		"$resources",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$BlockLocalReturnAST",
		"$kw",
		"$setOnce$increment$",
		"$removeAllSuchThat$",
		"$associationAt$ifAbsent$",
		"$readAt$ifFail$",
		"$lastIndex$",
		"$superInit$HopscotchForHTML5$RowComposer",
		"$simSlotDecls",
		"$factory",
		"$newBlockType",
		"$AST",
		"$superInit$Newspeak2V8Compilation$Compiler$ScopeBuilder",
		"$depthOfEnclosingClass$",
		"$initBuffer$",
		"$setOnce$tupleType$",
		"$radixNum",
		"$setOnce$definingMixin$",
		"$ternaryIf$then$else$",
		"$superInit$NewspeakASTs$KeywordPatternPairAST",
		"$temporaries$",
		"$getAttribute$",
		"$processEventualSend$",
		"$ImmutableMirrorGroup",
		"$containsNonLocalReturn$",
		"$installExpandedPresenter",
		"$superInit$MirrorsForV8$ClassDeclarationBuilder",
		"$key",
		"$setOnce$MutableString$",
		"$setOnce$ASTModule$",
		"$Hopscotch",
		"$setOnce$semicolon$",
		"$setOnce$newBlockType$",
		"$setOnce$keywordAndLiteral$",
		"$processSetterSend$binding$",
		"$List",
		"$className",
		"$title",
		"$not",
		"$setOnce$cancel16px$",
		"$implicitReceiverSendNode$",
		"$superInit$NewspeakParsing",
		"$setOnce$ClassDeclarationAST$",
		"$ForwardReferenceParser",
		"$setOnce$subtypeOf$",
		"$initializer$instanceSide$classSide$",
		"$nestedClassDecl",
		"$prvtExistingMixin$",
		"$peekVal",
		"$args",
		"$setOnce$Kernel$",
		"$arguments$",
		"$table_0$",
		"$signal",
		"$offsetOfEnclosingObjectForClass$",
		"$setOnce$CategoryAST$",
		"$superclassName",
		"$selector$parameters$",
		"$setOnce$rewriter$",
		"$setOnce$window$",
		"$setOnce$MixinApplicationAST$",
		"$evaluate$ifCompilerError$ifError$",
		"$defaultCapacity",
		"$crToLf$",
		"$constructor",
		"$$at",
		"$setOnce$Map$",
		"$selfCaption",
		"$setOnce$eventualSendOperator$",
		"$bind$",
		"$hereNode",
		"$setOnce$expression$",
		"$variablePattern",
		"$isInteger",
		"$acceptResponse",
		"$EIOStream",
		"$isIdentifier",
		"$setOnce$MessagePatternAST$",
		"$deferAction$",
		"$markDeleted$",
		"$ParameterizedTypeAST",
		"$isAST",
		"$nonLocalReturnNode$",
		"$isSlotBinding",
		"$VariableStatement",
		"$rewriter",
		"$operator",
		"$withSubparser$",
		"$localWriteNode$",
		"$AlternatingParser",
		"$IdentifierExpression",
		"$superInit$MirrorsForV8$MutableMethodGroup",
		"$classSideDecl",
		"$fold$",
		"$ArrayExpression",
		"$binaryTypeOpNode$",
		"$setOnce$binaryMsg$",
		"$detect$ifNone$",
		"$NonlocalReturnAST",
		"$indexOfSubCollection$startingAt$ifAbsent$",
		"$BrowsingForHTML",
		"$MixinApplicationAST",
		"$setOnce$character$",
		"$OrdinarySendAST",
		"$superInit$NewspeakASTs$BlockTypeAST",
		"$setOnce$is$",
		"$isSelfNode$",
		"$elasticity$",
		"$setOnce$NormalSendAST$",
		"$origin$extent$",
		"$formals$return$",
		"$catchVar",
		"$name$parameters$body$",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$MethodLocalReturnAST",
		"$setOnce$blockTypeArgList$",
		"$setOnce$ASTTool$",
		"$printElementsDo$",
		"$$tilde$equal",
		"$setOnce$history$",
		"$slotDecl",
		"$ParserError",
		"$setOnce$statements$",
		"$setOnce$codeBody$",
		"$width$height$",
		"$setOnce$returnTypeInferenceClause$",
		"$setOnce$MixinApplicationClassAST$",
		"$ReturnStatAST",
		"$tab",
		"$$plus",
		"$setOnce$mssg$",
		"$applyForValueTo$",
		"$setOnce$variable$",
		"$superInit$Collections$MutableHashedMap",
		"$fromRuntimeMixin$",
		"$setOnce$generation$",
		"$value",
		"$setOnce$contentHolder$",
		"$add$withOccurrences$",
		"$superInit$NewspeakCompilation$Compiler$ScopeBuilder",
		"$slotDefs",
		"$value$",
		"$val$",
		"$script$",
		"$over$",
		"$processImplicitReceiverSend$",
		"$space",
		"$num",
		"$Namer",
		"$setOnce$statementsS$",
		"$superInit$NewspeakCompilation$Compiler$Rewriter$NonlocalReturnAST",
		"$setOnce$explicitInheritanceListAndOrBody$",
		"$copyPositionFrom$",
		"$asSet",
		"$setOnce$slotName$",
		"$setOnce$ListReadWriteStream$",
		"$superInit$NewspeakASTs$ImmutableSlotDefAST",
		"$statementSequence",
		"$setOnce$CodeBodyAST$",
		"$setOnce$keywordPattern$",
		"$setOnce$kwPatternPair$",
		"$atEndOrPeekIs$",
		"$superConstructorMethodFor$",
		"$variableName$",
		"$hereSetterSendFromMsg$",
		"$isInlineableLoop$",
		"$peekVal$",
		"$advanceBufferLocation",
		"$notNil",
		"$descriptor$",
		"$copyReplaceFrom$to$with$",
		"$with$do$",
		"$fromIR$forExistingMixin$within$",
		"$Block",
		"$splitBy$",
		"$fromUnitSource$",
		"$setOnce$beginNSComment$",
		"$collapsed$expanded$",
		"$ButtonFragment",
		"$NewExpression",
		"$setOnce$ListReadStream$",
		"$topColor",
		"$isMethodBinding",
		"$main",
		"$IdentityMutableHashedMap",
		"$else",
		"$hereSendFromMsg$",
		"$setOnce$q$",
		"$ir$",
		"$enclosingObjectName",
		"$HopscotchShell",
		"$AssignmentExpression",
		"$Array",
		"$method",
		"$tableAt$put$inMatchingSlot$value$",
		"$operand",
		"$with$",
		"$snippet",
		"$visitVariableStatement$",
		"$classComment",
		"$ThrowStatement",
		"$isEmpty",
		"$createTextNode$",
		"$contentsWritten",
		"$rparen",
		"$setOnce$str$",
		"$superInit$Newspeak2V8Compilation$Compiler$Translator",
		"$editorX",
		"$isLegalIdentifier$",
		"$visitArrayExpression$",
		"$at$put$ifThere$",
		"$setOnce$namespace$",
		"$defaultSortBlock",
		"$messageNode$",
		"$setOnce$inheritanceListAndOrBody$"
	]).forEach((function (sel) {
		p["_" + sel] = dnuCatcher(sel);
		p[sel] = dnuCatcher(sel);
	}));
};

var runtime = ns.$RuntimeForV8().$packageUsing$(ns);
vmmirror.platform = runtime.$using$(vmmirror);
var app = ns.$Literate().$packageUsing$(ns);
app.$main$args$(vmmirror.platform, []);